using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using EdFi.Ods.Api.Dependencies;
using EdFi.Ods.Api.ETag;
using EdFi.Ods.Api.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Constants;
using EdFi.Ods.Common.Conventions;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Entities.Common.EdFi;
// Aggregate: AbsenceEventCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AbsenceEventCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AbsenceEventCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAbsenceEventCategoryDescriptor source, IAbsenceEventCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAbsenceEventCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AbsenceEventCategoryDescriptorId != target.AbsenceEventCategoryDescriptorId)
            {
                source.AbsenceEventCategoryDescriptorId = target.AbsenceEventCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAbsenceEventCategoryDescriptor source, IAbsenceEventCategoryDescriptor target, Action<IAbsenceEventCategoryDescriptor, IAbsenceEventCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAbsenceEventCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAbsenceEventCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AbsenceEventCategoryDescriptorId = source.AbsenceEventCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAbsenceEventCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AcademicHonorCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AcademicHonorCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AcademicHonorCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAcademicHonorCategoryDescriptor source, IAcademicHonorCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAcademicHonorCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicHonorCategoryDescriptorId != target.AcademicHonorCategoryDescriptorId)
            {
                source.AcademicHonorCategoryDescriptorId = target.AcademicHonorCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAcademicHonorCategoryDescriptor source, IAcademicHonorCategoryDescriptor target, Action<IAcademicHonorCategoryDescriptor, IAcademicHonorCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAcademicHonorCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAcademicHonorCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AcademicHonorCategoryDescriptorId = source.AcademicHonorCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAcademicHonorCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AcademicSubjectDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AcademicSubjectDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AcademicSubjectDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAcademicSubjectDescriptor source, IAcademicSubjectDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAcademicSubjectDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptorId != target.AcademicSubjectDescriptorId)
            {
                source.AcademicSubjectDescriptorId = target.AcademicSubjectDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAcademicSubjectDescriptor source, IAcademicSubjectDescriptor target, Action<IAcademicSubjectDescriptor, IAcademicSubjectDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAcademicSubjectDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAcademicSubjectDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptorId = source.AcademicSubjectDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAcademicSubjectDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AcademicWeek

namespace EdFi.Ods.Entities.Common.EdFi //.AcademicWeekAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AcademicWeekMapper 
    {
        public static bool SynchronizeTo(this IAcademicWeek source, IAcademicWeek target)
        {
            bool isModified = false;

            var sourceSupport = source as IAcademicWeekSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.WeekIdentifier != target.WeekIdentifier)
            {
                source.WeekIdentifier = target.WeekIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalInstructionalDaysSupported)
                && target.TotalInstructionalDays != source.TotalInstructionalDays)
            {
                target.TotalInstructionalDays = source.TotalInstructionalDays;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAcademicWeek source, IAcademicWeek target, Action<IAcademicWeek, IAcademicWeek> onMapped)
        {
            var sourceSynchSupport = source as IAcademicWeekSynchronizationSourceSupport;
            var targetSynchSupport = target as IAcademicWeekSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;
            target.WeekIdentifier = source.WeekIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsTotalInstructionalDaysSupported)
                target.TotalInstructionalDays = source.TotalInstructionalDays;
            else
                targetSynchSupport.IsTotalInstructionalDaysSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAcademicWeekSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsTotalInstructionalDaysSupported { get; set; }
    }
 
}
// Aggregate: AccommodationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AccommodationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AccommodationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAccommodationDescriptor source, IAccommodationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAccommodationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccommodationDescriptorId != target.AccommodationDescriptorId)
            {
                source.AccommodationDescriptorId = target.AccommodationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAccommodationDescriptor source, IAccommodationDescriptor target, Action<IAccommodationDescriptor, IAccommodationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAccommodationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAccommodationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccommodationDescriptorId = source.AccommodationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAccommodationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Account

namespace EdFi.Ods.Entities.Common.EdFi //.AccountAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AccountMapper 
    {
        public static bool SynchronizeTo(this IAccount source, IAccount target)
        {
            bool isModified = false;

            var sourceSupport = source as IAccountSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccountIdentifier != target.AccountIdentifier)
            {
                source.AccountIdentifier = target.AccountIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FiscalYear != target.FiscalYear)
            {
                source.FiscalYear = target.FiscalYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAccountNameSupported)
                && target.AccountName != source.AccountName)
            {
                target.AccountName = source.AccountName;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAccountAccountCodesSupported)
            {
                isModified |= 
                    source.AccountAccountCodes.SynchronizeCollectionTo(
                        target.AccountAccountCodes, 
                        onChildAdded: child => 
                            {
                                child.Account = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAccountAccountCodeIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAccount source, IAccount target, Action<IAccount, IAccount> onMapped)
        {
            var sourceSynchSupport = source as IAccountSynchronizationSourceSupport;
            var targetSynchSupport = target as IAccountSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAccountNameSupported)
                target.AccountName = source.AccountName;
            else
                targetSynchSupport.IsAccountNameSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAccountAccountCodesSupported)
            {    
                targetSynchSupport.IsAccountAccountCodeIncluded = sourceSynchSupport.IsAccountAccountCodeIncluded;
                source.AccountAccountCodes.MapCollectionTo(target.AccountAccountCodes, target);
            }
            else
            {
                targetSynchSupport.IsAccountAccountCodesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAccountSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAccountAccountCodesSupported { get; set; }
        bool IsAccountNameSupported { get; set; }
        Func<IAccountAccountCode, bool> IsAccountAccountCodeIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AccountAccountCodeMapper 
    {
        public static bool SynchronizeTo(this IAccountAccountCode source, IAccountAccountCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IAccountAccountCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccountClassificationDescriptor != target.AccountClassificationDescriptor)
            {
                source.AccountClassificationDescriptor = target.AccountClassificationDescriptor;
            }
            if (source.AccountCodeNumber != target.AccountCodeNumber)
            {
                source.AccountCodeNumber = target.AccountCodeNumber;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAccountAccountCode source, IAccountAccountCode target, Action<IAccountAccountCode, IAccountAccountCode> onMapped)
        {
            var sourceSynchSupport = source as IAccountAccountCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IAccountAccountCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AccountClassificationDescriptor = source.AccountClassificationDescriptor;
            target.AccountCodeNumber = source.AccountCodeNumber;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AccountCodeResourceId = source.AccountCodeResourceId;
                target.AccountCodeDiscriminator = source.AccountCodeDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAccountAccountCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: AccountabilityRating

namespace EdFi.Ods.Entities.Common.EdFi //.AccountabilityRatingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AccountabilityRatingMapper 
    {
        public static bool SynchronizeTo(this IAccountabilityRating source, IAccountabilityRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IAccountabilityRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.RatingTitle != target.RatingTitle)
            {
                source.RatingTitle = target.RatingTitle;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsRatingSupported)
                && target.Rating != source.Rating)
            {
                target.Rating = source.Rating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRatingDateSupported)
                && target.RatingDate != source.RatingDate)
            {
                target.RatingDate = source.RatingDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRatingOrganizationSupported)
                && target.RatingOrganization != source.RatingOrganization)
            {
                target.RatingOrganization = source.RatingOrganization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRatingProgramSupported)
                && target.RatingProgram != source.RatingProgram)
            {
                target.RatingProgram = source.RatingProgram;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAccountabilityRating source, IAccountabilityRating target, Action<IAccountabilityRating, IAccountabilityRating> onMapped)
        {
            var sourceSynchSupport = source as IAccountabilityRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IAccountabilityRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.RatingTitle = source.RatingTitle;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsRatingSupported)
                target.Rating = source.Rating;
            else
                targetSynchSupport.IsRatingSupported = false;

            if (sourceSynchSupport.IsRatingDateSupported)
                target.RatingDate = source.RatingDate;
            else
                targetSynchSupport.IsRatingDateSupported = false;

            if (sourceSynchSupport.IsRatingOrganizationSupported)
                target.RatingOrganization = source.RatingOrganization;
            else
                targetSynchSupport.IsRatingOrganizationSupported = false;

            if (sourceSynchSupport.IsRatingProgramSupported)
                target.RatingProgram = source.RatingProgram;
            else
                targetSynchSupport.IsRatingProgramSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAccountabilityRatingSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsRatingSupported { get; set; }
        bool IsRatingDateSupported { get; set; }
        bool IsRatingOrganizationSupported { get; set; }
        bool IsRatingProgramSupported { get; set; }
    }
 
}
// Aggregate: AccountClassificationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AccountClassificationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AccountClassificationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAccountClassificationDescriptor source, IAccountClassificationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAccountClassificationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccountClassificationDescriptorId != target.AccountClassificationDescriptorId)
            {
                source.AccountClassificationDescriptorId = target.AccountClassificationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAccountClassificationDescriptor source, IAccountClassificationDescriptor target, Action<IAccountClassificationDescriptor, IAccountClassificationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAccountClassificationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAccountClassificationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountClassificationDescriptorId = source.AccountClassificationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAccountClassificationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AccountCode

namespace EdFi.Ods.Entities.Common.EdFi //.AccountCodeAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AccountCodeMapper 
    {
        public static bool SynchronizeTo(this IAccountCode source, IAccountCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IAccountCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccountClassificationDescriptor != target.AccountClassificationDescriptor)
            {
                source.AccountClassificationDescriptor = target.AccountClassificationDescriptor;
            }
            if (source.AccountCodeNumber != target.AccountCodeNumber)
            {
                source.AccountCodeNumber = target.AccountCodeNumber;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FiscalYear != target.FiscalYear)
            {
                source.FiscalYear = target.FiscalYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAccountCodeDescriptionSupported)
                && target.AccountCodeDescription != source.AccountCodeDescription)
            {
                target.AccountCodeDescription = source.AccountCodeDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAccountCode source, IAccountCode target, Action<IAccountCode, IAccountCode> onMapped)
        {
            var sourceSynchSupport = source as IAccountCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IAccountCodeSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountClassificationDescriptor = source.AccountClassificationDescriptor;
            target.AccountCodeNumber = source.AccountCodeNumber;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAccountCodeDescriptionSupported)
                target.AccountCodeDescription = source.AccountCodeDescription;
            else
                targetSynchSupport.IsAccountCodeDescriptionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAccountCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAccountCodeDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AchievementCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AchievementCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AchievementCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAchievementCategoryDescriptor source, IAchievementCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAchievementCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AchievementCategoryDescriptorId != target.AchievementCategoryDescriptorId)
            {
                source.AchievementCategoryDescriptorId = target.AchievementCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAchievementCategoryDescriptor source, IAchievementCategoryDescriptor target, Action<IAchievementCategoryDescriptor, IAchievementCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAchievementCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAchievementCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AchievementCategoryDescriptorId = source.AchievementCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAchievementCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Actual

namespace EdFi.Ods.Entities.Common.EdFi //.ActualAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ActualMapper 
    {
        public static bool SynchronizeTo(this IActual source, IActual target)
        {
            bool isModified = false;

            var sourceSupport = source as IActualSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccountIdentifier != target.AccountIdentifier)
            {
                source.AccountIdentifier = target.AccountIdentifier;
            }
            if (source.AsOfDate != target.AsOfDate)
            {
                source.AsOfDate = target.AsOfDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FiscalYear != target.FiscalYear)
            {
                source.FiscalYear = target.FiscalYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAmountToDateSupported)
                && target.AmountToDate != source.AmountToDate)
            {
                target.AmountToDate = source.AmountToDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IActual source, IActual target, Action<IActual, IActual> onMapped)
        {
            var sourceSynchSupport = source as IActualSynchronizationSourceSupport;
            var targetSynchSupport = target as IActualSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAmountToDateSupported)
                target.AmountToDate = source.AmountToDate;
            else
                targetSynchSupport.IsAmountToDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AccountResourceId = source.AccountResourceId;
                target.AccountDiscriminator = source.AccountDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IActualSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAmountToDateSupported { get; set; }
    }
 
}
// Aggregate: AdditionalCreditTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AdditionalCreditTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AdditionalCreditTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAdditionalCreditTypeDescriptor source, IAdditionalCreditTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAdditionalCreditTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdditionalCreditTypeDescriptorId != target.AdditionalCreditTypeDescriptorId)
            {
                source.AdditionalCreditTypeDescriptorId = target.AdditionalCreditTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAdditionalCreditTypeDescriptor source, IAdditionalCreditTypeDescriptor target, Action<IAdditionalCreditTypeDescriptor, IAdditionalCreditTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAdditionalCreditTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAdditionalCreditTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdditionalCreditTypeDescriptorId = source.AdditionalCreditTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAdditionalCreditTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AddressTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AddressTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AddressTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAddressTypeDescriptor source, IAddressTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAddressTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptorId != target.AddressTypeDescriptorId)
            {
                source.AddressTypeDescriptorId = target.AddressTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAddressTypeDescriptor source, IAddressTypeDescriptor target, Action<IAddressTypeDescriptor, IAddressTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAddressTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAddressTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AddressTypeDescriptorId = source.AddressTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAddressTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AdministrationEnvironmentDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AdministrationEnvironmentDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AdministrationEnvironmentDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAdministrationEnvironmentDescriptor source, IAdministrationEnvironmentDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAdministrationEnvironmentDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdministrationEnvironmentDescriptorId != target.AdministrationEnvironmentDescriptorId)
            {
                source.AdministrationEnvironmentDescriptorId = target.AdministrationEnvironmentDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAdministrationEnvironmentDescriptor source, IAdministrationEnvironmentDescriptor target, Action<IAdministrationEnvironmentDescriptor, IAdministrationEnvironmentDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAdministrationEnvironmentDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAdministrationEnvironmentDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrationEnvironmentDescriptorId = source.AdministrationEnvironmentDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAdministrationEnvironmentDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AdministrativeFundingControlDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AdministrativeFundingControlDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AdministrativeFundingControlDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAdministrativeFundingControlDescriptor source, IAdministrativeFundingControlDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAdministrativeFundingControlDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdministrativeFundingControlDescriptorId != target.AdministrativeFundingControlDescriptorId)
            {
                source.AdministrativeFundingControlDescriptorId = target.AdministrativeFundingControlDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAdministrativeFundingControlDescriptor source, IAdministrativeFundingControlDescriptor target, Action<IAdministrativeFundingControlDescriptor, IAdministrativeFundingControlDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAdministrativeFundingControlDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAdministrativeFundingControlDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrativeFundingControlDescriptorId = source.AdministrativeFundingControlDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAdministrativeFundingControlDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Assessment

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentMapper 
    {
        public static bool SynchronizeTo(this IAssessment source, IAssessment target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAdaptiveAssessmentSupported)
                && target.AdaptiveAssessment != source.AdaptiveAssessment)
            {
                target.AdaptiveAssessment = source.AdaptiveAssessment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentCategoryDescriptorSupported)
                && target.AssessmentCategoryDescriptor != source.AssessmentCategoryDescriptor)
            {
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentFamilySupported)
                && target.AssessmentFamily != source.AssessmentFamily)
            {
                target.AssessmentFamily = source.AssessmentFamily;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentFormSupported)
                && target.AssessmentForm != source.AssessmentForm)
            {
                target.AssessmentForm = source.AssessmentForm;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentTitleSupported)
                && target.AssessmentTitle != source.AssessmentTitle)
            {
                target.AssessmentTitle = source.AssessmentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentVersionSupported)
                && target.AssessmentVersion != source.AssessmentVersion)
            {
                target.AssessmentVersion = source.AssessmentVersion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRawScoreSupported)
                && target.MaxRawScore != source.MaxRawScore)
            {
                target.MaxRawScore = source.MaxRawScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNomenclatureSupported)
                && target.Nomenclature != source.Nomenclature)
            {
                target.Nomenclature = source.Nomenclature;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRevisionDateSupported)
                && target.RevisionDate != source.RevisionDate)
            {
                target.RevisionDate = source.RevisionDate;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // AssessmentContentStandard
            if (sourceSupport == null || sourceSupport.IsAssessmentContentStandardSupported)
            {
                if (source.AssessmentContentStandard == null)
                {
                    if (target.AssessmentContentStandard != null)
                    {
                        target.AssessmentContentStandard = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.AssessmentContentStandard == null)
                    {
                        var itemType = target.GetType().GetProperty("AssessmentContentStandard").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.AssessmentContentStandard = (IAssessmentContentStandard) newItem;
                    }

                    isModified |= source.AssessmentContentStandard.Synchronize(target.AssessmentContentStandard);
                }
            }
            // AssessmentPeriod
            if (sourceSupport == null || sourceSupport.IsAssessmentPeriodSupported)
            {
                if (source.AssessmentPeriod == null)
                {
                    if (target.AssessmentPeriod != null)
                    {
                        target.AssessmentPeriod = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.AssessmentPeriod == null)
                    {
                        var itemType = target.GetType().GetProperty("AssessmentPeriod").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.AssessmentPeriod = (IAssessmentPeriod) newItem;
                    }

                    isModified |= source.AssessmentPeriod.Synchronize(target.AssessmentPeriod);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAssessmentAcademicSubjectsSupported)
            {
                isModified |= 
                    source.AssessmentAcademicSubjects.SynchronizeCollectionTo(
                        target.AssessmentAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentAssessedGradeLevelsSupported)
            {
                isModified |= 
                    source.AssessmentAssessedGradeLevels.SynchronizeCollectionTo(
                        target.AssessmentAssessedGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentAssessedGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentIdentificationCodesSupported)
            {
                isModified |= 
                    source.AssessmentIdentificationCodes.SynchronizeCollectionTo(
                        target.AssessmentIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentLanguagesSupported)
            {
                isModified |= 
                    source.AssessmentLanguages.SynchronizeCollectionTo(
                        target.AssessmentLanguages, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentPerformanceLevelsSupported)
            {
                isModified |= 
                    source.AssessmentPerformanceLevels.SynchronizeCollectionTo(
                        target.AssessmentPerformanceLevels, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentPerformanceLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentPlatformTypesSupported)
            {
                isModified |= 
                    source.AssessmentPlatformTypes.SynchronizeCollectionTo(
                        target.AssessmentPlatformTypes, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentPlatformTypeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentProgramsSupported)
            {
                isModified |= 
                    source.AssessmentPrograms.SynchronizeCollectionTo(
                        target.AssessmentPrograms, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentProgramIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentScoresSupported)
            {
                isModified |= 
                    source.AssessmentScores.SynchronizeCollectionTo(
                        target.AssessmentScores, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentScoreIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentSectionsSupported)
            {
                isModified |= 
                    source.AssessmentSections.SynchronizeCollectionTo(
                        target.AssessmentSections, 
                        onChildAdded: child => 
                            {
                                child.Assessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentSectionIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessment source, IAssessment target, Action<IAssessment, IAssessment> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAdaptiveAssessmentSupported)
                target.AdaptiveAssessment = source.AdaptiveAssessment;
            else
                targetSynchSupport.IsAdaptiveAssessmentSupported = false;

            if (sourceSynchSupport.IsAssessmentCategoryDescriptorSupported)
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
            else
                targetSynchSupport.IsAssessmentCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentFamilySupported)
                target.AssessmentFamily = source.AssessmentFamily;
            else
                targetSynchSupport.IsAssessmentFamilySupported = false;

            if (sourceSynchSupport.IsAssessmentFormSupported)
                target.AssessmentForm = source.AssessmentForm;
            else
                targetSynchSupport.IsAssessmentFormSupported = false;

            if (sourceSynchSupport.IsAssessmentTitleSupported)
                target.AssessmentTitle = source.AssessmentTitle;
            else
                targetSynchSupport.IsAssessmentTitleSupported = false;

            if (sourceSynchSupport.IsAssessmentVersionSupported)
                target.AssessmentVersion = source.AssessmentVersion;
            else
                targetSynchSupport.IsAssessmentVersionSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsMaxRawScoreSupported)
                target.MaxRawScore = source.MaxRawScore;
            else
                targetSynchSupport.IsMaxRawScoreSupported = false;

            if (sourceSynchSupport.IsNomenclatureSupported)
                target.Nomenclature = source.Nomenclature;
            else
                targetSynchSupport.IsNomenclatureSupported = false;

            if (sourceSynchSupport.IsRevisionDateSupported)
                target.RevisionDate = source.RevisionDate;
            else
                targetSynchSupport.IsRevisionDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // AssessmentContentStandard (Source)
            if (sourceSynchSupport.IsAssessmentContentStandardSupported)
            {
                var itemProperty = target.GetType().GetProperty("AssessmentContentStandard");
                
                if (itemProperty != null)
                {                    
                    if (source.AssessmentContentStandard == null)
                    {
                        target.AssessmentContentStandard = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetAssessmentContentStandard = Activator.CreateInstance(itemType);
                        (targetAssessmentContentStandard as IChildEntity)?.SetParent(target);
                        source.AssessmentContentStandard.Map(targetAssessmentContentStandard);
                        
                        // Update the target reference appropriately
                        target.AssessmentContentStandard = (IAssessmentContentStandard) targetAssessmentContentStandard;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsAssessmentContentStandardSupported = false; 
            }
            // AssessmentPeriod (Source)
            if (sourceSynchSupport.IsAssessmentPeriodSupported)
            {
                var itemProperty = target.GetType().GetProperty("AssessmentPeriod");
                
                if (itemProperty != null)
                {                    
                    if (source.AssessmentPeriod == null)
                    {
                        target.AssessmentPeriod = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetAssessmentPeriod = Activator.CreateInstance(itemType);
                        (targetAssessmentPeriod as IChildEntity)?.SetParent(target);
                        source.AssessmentPeriod.Map(targetAssessmentPeriod);
                        
                        // Update the target reference appropriately
                        target.AssessmentPeriod = (IAssessmentPeriod) targetAssessmentPeriod;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsAssessmentPeriodSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsAssessmentAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsAssessmentAcademicSubjectIncluded = sourceSynchSupport.IsAssessmentAcademicSubjectIncluded;
                source.AssessmentAcademicSubjects.MapCollectionTo(target.AssessmentAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentAssessedGradeLevelsSupported)
            {    
                targetSynchSupport.IsAssessmentAssessedGradeLevelIncluded = sourceSynchSupport.IsAssessmentAssessedGradeLevelIncluded;
                source.AssessmentAssessedGradeLevels.MapCollectionTo(target.AssessmentAssessedGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentAssessedGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentIdentificationCodesSupported)
            {    
                targetSynchSupport.IsAssessmentIdentificationCodeIncluded = sourceSynchSupport.IsAssessmentIdentificationCodeIncluded;
                source.AssessmentIdentificationCodes.MapCollectionTo(target.AssessmentIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentLanguagesSupported)
            {    
                targetSynchSupport.IsAssessmentLanguageIncluded = sourceSynchSupport.IsAssessmentLanguageIncluded;
                source.AssessmentLanguages.MapCollectionTo(target.AssessmentLanguages, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentPerformanceLevelsSupported)
            {    
                targetSynchSupport.IsAssessmentPerformanceLevelIncluded = sourceSynchSupport.IsAssessmentPerformanceLevelIncluded;
                source.AssessmentPerformanceLevels.MapCollectionTo(target.AssessmentPerformanceLevels, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentPerformanceLevelsSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentPlatformTypesSupported)
            {    
                targetSynchSupport.IsAssessmentPlatformTypeIncluded = sourceSynchSupport.IsAssessmentPlatformTypeIncluded;
                source.AssessmentPlatformTypes.MapCollectionTo(target.AssessmentPlatformTypes, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentPlatformTypesSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentProgramsSupported)
            {    
                targetSynchSupport.IsAssessmentProgramIncluded = sourceSynchSupport.IsAssessmentProgramIncluded;
                source.AssessmentPrograms.MapCollectionTo(target.AssessmentPrograms, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentProgramsSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentScoresSupported)
            {    
                targetSynchSupport.IsAssessmentScoreIncluded = sourceSynchSupport.IsAssessmentScoreIncluded;
                source.AssessmentScores.MapCollectionTo(target.AssessmentScores, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentScoresSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentSectionsSupported)
            {    
                targetSynchSupport.IsAssessmentSectionIncluded = sourceSynchSupport.IsAssessmentSectionIncluded;
                source.AssessmentSections.MapCollectionTo(target.AssessmentSections, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentSectionsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAdaptiveAssessmentSupported { get; set; }
        bool IsAssessmentAcademicSubjectsSupported { get; set; }
        bool IsAssessmentAssessedGradeLevelsSupported { get; set; }
        bool IsAssessmentCategoryDescriptorSupported { get; set; }
        bool IsAssessmentContentStandardSupported { get; set; }
        bool IsAssessmentFamilySupported { get; set; }
        bool IsAssessmentFormSupported { get; set; }
        bool IsAssessmentIdentificationCodesSupported { get; set; }
        bool IsAssessmentLanguagesSupported { get; set; }
        bool IsAssessmentPerformanceLevelsSupported { get; set; }
        bool IsAssessmentPeriodSupported { get; set; }
        bool IsAssessmentPlatformTypesSupported { get; set; }
        bool IsAssessmentProgramsSupported { get; set; }
        bool IsAssessmentScoresSupported { get; set; }
        bool IsAssessmentSectionsSupported { get; set; }
        bool IsAssessmentTitleSupported { get; set; }
        bool IsAssessmentVersionSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsMaxRawScoreSupported { get; set; }
        bool IsNomenclatureSupported { get; set; }
        bool IsRevisionDateSupported { get; set; }
        Func<IAssessmentAcademicSubject, bool> IsAssessmentAcademicSubjectIncluded { get; set; }
        Func<IAssessmentAssessedGradeLevel, bool> IsAssessmentAssessedGradeLevelIncluded { get; set; }
        Func<IAssessmentIdentificationCode, bool> IsAssessmentIdentificationCodeIncluded { get; set; }
        Func<IAssessmentLanguage, bool> IsAssessmentLanguageIncluded { get; set; }
        Func<IAssessmentPerformanceLevel, bool> IsAssessmentPerformanceLevelIncluded { get; set; }
        Func<IAssessmentPlatformType, bool> IsAssessmentPlatformTypeIncluded { get; set; }
        Func<IAssessmentProgram, bool> IsAssessmentProgramIncluded { get; set; }
        Func<IAssessmentScore, bool> IsAssessmentScoreIncluded { get; set; }
        Func<IAssessmentSection, bool> IsAssessmentSectionIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IAssessmentAcademicSubject source, IAssessmentAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentAcademicSubject source, IAssessmentAcademicSubject target, Action<IAssessmentAcademicSubject, IAssessmentAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentAcademicSubjectSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentAssessedGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IAssessmentAssessedGradeLevel source, IAssessmentAssessedGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentAssessedGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentAssessedGradeLevel source, IAssessmentAssessedGradeLevel target, Action<IAssessmentAssessedGradeLevel, IAssessmentAssessedGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentAssessedGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentAssessedGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentAssessedGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentContentStandardMapper 
    {
        public static bool SynchronizeTo(this IAssessmentContentStandard source, IAssessmentContentStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentContentStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMandatingEducationOrganizationIdSupported)
                && target.MandatingEducationOrganizationId != source.MandatingEducationOrganizationId)
            {
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationDateSupported)
                && target.PublicationDate != source.PublicationDate)
            {
                target.PublicationDate = source.PublicationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationStatusDescriptorSupported)
                && target.PublicationStatusDescriptor != source.PublicationStatusDescriptor)
            {
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationYearSupported)
                && target.PublicationYear != source.PublicationYear)
            {
                target.PublicationYear = source.PublicationYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleSupported)
                && target.Title != source.Title)
            {
                target.Title = source.Title;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsURISupported)
                && target.URI != source.URI)
            {
                target.URI = source.URI;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsVersionSupported)
                && target.Version != source.Version)
            {
                target.Version = source.Version;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAssessmentContentStandardAuthorsSupported)
            {
                isModified |= 
                    source.AssessmentContentStandardAuthors.SynchronizeCollectionTo(
                        target.AssessmentContentStandardAuthors, 
                        onChildAdded: child => 
                            {
                                child.AssessmentContentStandard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentContentStandardAuthorIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentContentStandard source, IAssessmentContentStandard target, Action<IAssessmentContentStandard, IAssessmentContentStandard> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentContentStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentContentStandardSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsMandatingEducationOrganizationIdSupported)
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;
            else
                targetSynchSupport.IsMandatingEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsPublicationDateSupported)
                target.PublicationDate = source.PublicationDate;
            else
                targetSynchSupport.IsPublicationDateSupported = false;

            if (sourceSynchSupport.IsPublicationStatusDescriptorSupported)
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;
            else
                targetSynchSupport.IsPublicationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsPublicationYearSupported)
                target.PublicationYear = source.PublicationYear;
            else
                targetSynchSupport.IsPublicationYearSupported = false;

            if (sourceSynchSupport.IsTitleSupported)
                target.Title = source.Title;
            else
                targetSynchSupport.IsTitleSupported = false;

            if (sourceSynchSupport.IsURISupported)
                target.URI = source.URI;
            else
                targetSynchSupport.IsURISupported = false;

            if (sourceSynchSupport.IsVersionSupported)
                target.Version = source.Version;
            else
                targetSynchSupport.IsVersionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.MandatingEducationOrganizationResourceId = source.MandatingEducationOrganizationResourceId;
                target.MandatingEducationOrganizationDiscriminator = source.MandatingEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAssessmentContentStandardAuthorsSupported)
            {    
                targetSynchSupport.IsAssessmentContentStandardAuthorIncluded = sourceSynchSupport.IsAssessmentContentStandardAuthorIncluded;
                source.AssessmentContentStandardAuthors.MapCollectionTo(target.AssessmentContentStandardAuthors, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentContentStandardAuthorsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentContentStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssessmentContentStandardAuthorsSupported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsMandatingEducationOrganizationIdSupported { get; set; }
        bool IsPublicationDateSupported { get; set; }
        bool IsPublicationStatusDescriptorSupported { get; set; }
        bool IsPublicationYearSupported { get; set; }
        bool IsTitleSupported { get; set; }
        bool IsURISupported { get; set; }
        bool IsVersionSupported { get; set; }
        Func<IAssessmentContentStandardAuthor, bool> IsAssessmentContentStandardAuthorIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentContentStandardAuthorMapper 
    {
        public static bool SynchronizeTo(this IAssessmentContentStandardAuthor source, IAssessmentContentStandardAuthor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentContentStandardAuthorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Author != target.Author)
            {
                source.Author = target.Author;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentContentStandardAuthor source, IAssessmentContentStandardAuthor target, Action<IAssessmentContentStandardAuthor, IAssessmentContentStandardAuthor> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentContentStandardAuthorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentContentStandardAuthorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Author = source.Author;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentContentStandardAuthorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this IAssessmentIdentificationCode source, IAssessmentIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentIdentificationSystemDescriptor != target.AssessmentIdentificationSystemDescriptor)
            {
                source.AssessmentIdentificationSystemDescriptor = target.AssessmentIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssigningOrganizationIdentificationCodeSupported)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentIdentificationCode source, IAssessmentIdentificationCode target, Action<IAssessmentIdentificationCode, IAssessmentIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentIdentificationSystemDescriptor = source.AssessmentIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssigningOrganizationIdentificationCodeSupported)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            else
                targetSynchSupport.IsAssigningOrganizationIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentIdentificationCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssigningOrganizationIdentificationCodeSupported { get; set; }
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentLanguageMapper 
    {
        public static bool SynchronizeTo(this IAssessmentLanguage source, IAssessmentLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentLanguage source, IAssessmentLanguage target, Action<IAssessmentLanguage, IAssessmentLanguage> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentLanguageSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this IAssessmentPerformanceLevel source, IAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }
            if (source.PerformanceLevelDescriptor != target.PerformanceLevelDescriptor)
            {
                source.PerformanceLevelDescriptor = target.PerformanceLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaximumScoreSupported)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumScoreSupported)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentPerformanceLevel source, IAssessmentPerformanceLevel target, Action<IAssessmentPerformanceLevel, IAssessmentPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaximumScoreSupported)
                target.MaximumScore = source.MaximumScore;
            else
                targetSynchSupport.IsMaximumScoreSupported = false;

            if (sourceSynchSupport.IsMinimumScoreSupported)
                target.MinimumScore = source.MinimumScore;
            else
                targetSynchSupport.IsMinimumScoreSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentPerformanceLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMaximumScoreSupported { get; set; }
        bool IsMinimumScoreSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentPeriodMapper 
    {
        public static bool SynchronizeTo(this IAssessmentPeriod source, IAssessmentPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentPeriodDescriptorSupported)
                && target.AssessmentPeriodDescriptor != source.AssessmentPeriodDescriptor)
            {
                target.AssessmentPeriodDescriptor = source.AssessmentPeriodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentPeriod source, IAssessmentPeriod target, Action<IAssessmentPeriod, IAssessmentPeriod> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentPeriodDescriptorSupported)
                target.AssessmentPeriodDescriptor = source.AssessmentPeriodDescriptor;
            else
                targetSynchSupport.IsAssessmentPeriodDescriptorSupported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssessmentPeriodDescriptorSupported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentPlatformTypeMapper 
    {
        public static bool SynchronizeTo(this IAssessmentPlatformType source, IAssessmentPlatformType target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentPlatformTypeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PlatformTypeDescriptor != target.PlatformTypeDescriptor)
            {
                source.PlatformTypeDescriptor = target.PlatformTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentPlatformType source, IAssessmentPlatformType target, Action<IAssessmentPlatformType, IAssessmentPlatformType> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentPlatformTypeSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentPlatformTypeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.PlatformTypeDescriptor = source.PlatformTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentPlatformTypeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentProgramMapper 
    {
        public static bool SynchronizeTo(this IAssessmentProgram source, IAssessmentProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentProgram source, IAssessmentProgram target, Action<IAssessmentProgram, IAssessmentProgram> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentProgramSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentScoreMapper 
    {
        public static bool SynchronizeTo(this IAssessmentScore source, IAssessmentScore target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentScoreSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaximumScoreSupported)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumScoreSupported)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentScore source, IAssessmentScore target, Action<IAssessmentScore, IAssessmentScore> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentScoreSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentScoreSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaximumScoreSupported)
                target.MaximumScore = source.MaximumScore;
            else
                targetSynchSupport.IsMaximumScoreSupported = false;

            if (sourceSynchSupport.IsMinimumScoreSupported)
                target.MinimumScore = source.MinimumScore;
            else
                targetSynchSupport.IsMinimumScoreSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentScoreSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMaximumScoreSupported { get; set; }
        bool IsMinimumScoreSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentSectionMapper 
    {
        public static bool SynchronizeTo(this IAssessmentSection source, IAssessmentSection target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentSectionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentSection source, IAssessmentSection target, Action<IAssessmentSection, IAssessmentSection> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentSectionSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentSectionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentSectionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: AssessmentCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAssessmentCategoryDescriptor source, IAssessmentCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentCategoryDescriptorId != target.AssessmentCategoryDescriptorId)
            {
                source.AssessmentCategoryDescriptorId = target.AssessmentCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentCategoryDescriptor source, IAssessmentCategoryDescriptor target, Action<IAssessmentCategoryDescriptor, IAssessmentCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentCategoryDescriptorId = source.AssessmentCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AssessmentIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentIdentificationSystemDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentIdentificationSystemDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAssessmentIdentificationSystemDescriptor source, IAssessmentIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentIdentificationSystemDescriptorId != target.AssessmentIdentificationSystemDescriptorId)
            {
                source.AssessmentIdentificationSystemDescriptorId = target.AssessmentIdentificationSystemDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentIdentificationSystemDescriptor source, IAssessmentIdentificationSystemDescriptor target, Action<IAssessmentIdentificationSystemDescriptor, IAssessmentIdentificationSystemDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentificationSystemDescriptorId = source.AssessmentIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentIdentificationSystemDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AssessmentItem

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentItemAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentItemMapper 
    {
        public static bool SynchronizeTo(this IAssessmentItem source, IAssessmentItem target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentItemSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.IdentificationCode != target.IdentificationCode)
            {
                source.IdentificationCode = target.IdentificationCode;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentItemCategoryDescriptorSupported)
                && target.AssessmentItemCategoryDescriptor != source.AssessmentItemCategoryDescriptor)
            {
                target.AssessmentItemCategoryDescriptor = source.AssessmentItemCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentItemURISupported)
                && target.AssessmentItemURI != source.AssessmentItemURI)
            {
                target.AssessmentItemURI = source.AssessmentItemURI;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCorrectResponseSupported)
                && target.CorrectResponse != source.CorrectResponse)
            {
                target.CorrectResponse = source.CorrectResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExpectedTimeAssessedSupported)
                && target.ExpectedTimeAssessed != source.ExpectedTimeAssessed)
            {
                target.ExpectedTimeAssessed = source.ExpectedTimeAssessed;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsItemTextSupported)
                && target.ItemText != source.ItemText)
            {
                target.ItemText = source.ItemText;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRawScoreSupported)
                && target.MaxRawScore != source.MaxRawScore)
            {
                target.MaxRawScore = source.MaxRawScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNomenclatureSupported)
                && target.Nomenclature != source.Nomenclature)
            {
                target.Nomenclature = source.Nomenclature;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAssessmentItemLearningStandardsSupported)
            {
                isModified |= 
                    source.AssessmentItemLearningStandards.SynchronizeCollectionTo(
                        target.AssessmentItemLearningStandards, 
                        onChildAdded: child => 
                            {
                                child.AssessmentItem = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentItemLearningStandardIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAssessmentItemPossibleResponsesSupported)
            {
                isModified |= 
                    source.AssessmentItemPossibleResponses.SynchronizeCollectionTo(
                        target.AssessmentItemPossibleResponses, 
                        onChildAdded: child => 
                            {
                                child.AssessmentItem = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAssessmentItemPossibleResponseIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentItem source, IAssessmentItem target, Action<IAssessmentItem, IAssessmentItem> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentItemSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentItemSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.IdentificationCode = source.IdentificationCode;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentItemCategoryDescriptorSupported)
                target.AssessmentItemCategoryDescriptor = source.AssessmentItemCategoryDescriptor;
            else
                targetSynchSupport.IsAssessmentItemCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentItemURISupported)
                target.AssessmentItemURI = source.AssessmentItemURI;
            else
                targetSynchSupport.IsAssessmentItemURISupported = false;

            if (sourceSynchSupport.IsCorrectResponseSupported)
                target.CorrectResponse = source.CorrectResponse;
            else
                targetSynchSupport.IsCorrectResponseSupported = false;

            if (sourceSynchSupport.IsExpectedTimeAssessedSupported)
                target.ExpectedTimeAssessed = source.ExpectedTimeAssessed;
            else
                targetSynchSupport.IsExpectedTimeAssessedSupported = false;

            if (sourceSynchSupport.IsItemTextSupported)
                target.ItemText = source.ItemText;
            else
                targetSynchSupport.IsItemTextSupported = false;

            if (sourceSynchSupport.IsMaxRawScoreSupported)
                target.MaxRawScore = source.MaxRawScore;
            else
                targetSynchSupport.IsMaxRawScoreSupported = false;

            if (sourceSynchSupport.IsNomenclatureSupported)
                target.Nomenclature = source.Nomenclature;
            else
                targetSynchSupport.IsNomenclatureSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAssessmentItemLearningStandardsSupported)
            {    
                targetSynchSupport.IsAssessmentItemLearningStandardIncluded = sourceSynchSupport.IsAssessmentItemLearningStandardIncluded;
                source.AssessmentItemLearningStandards.MapCollectionTo(target.AssessmentItemLearningStandards, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentItemLearningStandardsSupported = false;
            }

            if (sourceSynchSupport.IsAssessmentItemPossibleResponsesSupported)
            {    
                targetSynchSupport.IsAssessmentItemPossibleResponseIncluded = sourceSynchSupport.IsAssessmentItemPossibleResponseIncluded;
                source.AssessmentItemPossibleResponses.MapCollectionTo(target.AssessmentItemPossibleResponses, target);
            }
            else
            {
                targetSynchSupport.IsAssessmentItemPossibleResponsesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentItemSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssessmentItemCategoryDescriptorSupported { get; set; }
        bool IsAssessmentItemLearningStandardsSupported { get; set; }
        bool IsAssessmentItemPossibleResponsesSupported { get; set; }
        bool IsAssessmentItemURISupported { get; set; }
        bool IsCorrectResponseSupported { get; set; }
        bool IsExpectedTimeAssessedSupported { get; set; }
        bool IsItemTextSupported { get; set; }
        bool IsMaxRawScoreSupported { get; set; }
        bool IsNomenclatureSupported { get; set; }
        Func<IAssessmentItemLearningStandard, bool> IsAssessmentItemLearningStandardIncluded { get; set; }
        Func<IAssessmentItemPossibleResponse, bool> IsAssessmentItemPossibleResponseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentItemLearningStandardMapper 
    {
        public static bool SynchronizeTo(this IAssessmentItemLearningStandard source, IAssessmentItemLearningStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentItemLearningStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardId != target.LearningStandardId)
            {
                source.LearningStandardId = target.LearningStandardId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentItemLearningStandard source, IAssessmentItemLearningStandard target, Action<IAssessmentItemLearningStandard, IAssessmentItemLearningStandard> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentItemLearningStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentItemLearningStandardSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentItemLearningStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AssessmentItemPossibleResponseMapper 
    {
        public static bool SynchronizeTo(this IAssessmentItemPossibleResponse source, IAssessmentItemPossibleResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentItemPossibleResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ResponseValue != target.ResponseValue)
            {
                source.ResponseValue = target.ResponseValue;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCorrectResponseSupported)
                && target.CorrectResponse != source.CorrectResponse)
            {
                target.CorrectResponse = source.CorrectResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResponseDescriptionSupported)
                && target.ResponseDescription != source.ResponseDescription)
            {
                target.ResponseDescription = source.ResponseDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IAssessmentItemPossibleResponse source, IAssessmentItemPossibleResponse target, Action<IAssessmentItemPossibleResponse, IAssessmentItemPossibleResponse> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentItemPossibleResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentItemPossibleResponseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ResponseValue = source.ResponseValue;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCorrectResponseSupported)
                target.CorrectResponse = source.CorrectResponse;
            else
                targetSynchSupport.IsCorrectResponseSupported = false;

            if (sourceSynchSupport.IsResponseDescriptionSupported)
                target.ResponseDescription = source.ResponseDescription;
            else
                targetSynchSupport.IsResponseDescriptionSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentItemPossibleResponseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCorrectResponseSupported { get; set; }
        bool IsResponseDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AssessmentItemCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentItemCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentItemCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAssessmentItemCategoryDescriptor source, IAssessmentItemCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentItemCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentItemCategoryDescriptorId != target.AssessmentItemCategoryDescriptorId)
            {
                source.AssessmentItemCategoryDescriptorId = target.AssessmentItemCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentItemCategoryDescriptor source, IAssessmentItemCategoryDescriptor target, Action<IAssessmentItemCategoryDescriptor, IAssessmentItemCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentItemCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentItemCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentItemCategoryDescriptorId = source.AssessmentItemCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentItemCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AssessmentItemResultDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentItemResultDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentItemResultDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAssessmentItemResultDescriptor source, IAssessmentItemResultDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentItemResultDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentItemResultDescriptorId != target.AssessmentItemResultDescriptorId)
            {
                source.AssessmentItemResultDescriptorId = target.AssessmentItemResultDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentItemResultDescriptor source, IAssessmentItemResultDescriptor target, Action<IAssessmentItemResultDescriptor, IAssessmentItemResultDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentItemResultDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentItemResultDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentItemResultDescriptorId = source.AssessmentItemResultDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentItemResultDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AssessmentPeriodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentPeriodDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentPeriodDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAssessmentPeriodDescriptor source, IAssessmentPeriodDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentPeriodDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentPeriodDescriptorId != target.AssessmentPeriodDescriptorId)
            {
                source.AssessmentPeriodDescriptorId = target.AssessmentPeriodDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentPeriodDescriptor source, IAssessmentPeriodDescriptor target, Action<IAssessmentPeriodDescriptor, IAssessmentPeriodDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentPeriodDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentPeriodDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentPeriodDescriptorId = source.AssessmentPeriodDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentPeriodDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AssessmentReportingMethodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AssessmentReportingMethodDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentReportingMethodDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAssessmentReportingMethodDescriptor source, IAssessmentReportingMethodDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentReportingMethodDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptorId != target.AssessmentReportingMethodDescriptorId)
            {
                source.AssessmentReportingMethodDescriptorId = target.AssessmentReportingMethodDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentReportingMethodDescriptor source, IAssessmentReportingMethodDescriptor target, Action<IAssessmentReportingMethodDescriptor, IAssessmentReportingMethodDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentReportingMethodDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentReportingMethodDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptorId = source.AssessmentReportingMethodDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentReportingMethodDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AttemptStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AttemptStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AttemptStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAttemptStatusDescriptor source, IAttemptStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAttemptStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttemptStatusDescriptorId != target.AttemptStatusDescriptorId)
            {
                source.AttemptStatusDescriptorId = target.AttemptStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAttemptStatusDescriptor source, IAttemptStatusDescriptor target, Action<IAttemptStatusDescriptor, IAttemptStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAttemptStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAttemptStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttemptStatusDescriptorId = source.AttemptStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAttemptStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AttendanceEventCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.AttendanceEventCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AttendanceEventCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAttendanceEventCategoryDescriptor source, IAttendanceEventCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAttendanceEventCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceEventCategoryDescriptorId != target.AttendanceEventCategoryDescriptorId)
            {
                source.AttendanceEventCategoryDescriptorId = target.AttendanceEventCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAttendanceEventCategoryDescriptor source, IAttendanceEventCategoryDescriptor target, Action<IAttendanceEventCategoryDescriptor, IAttendanceEventCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAttendanceEventCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAttendanceEventCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptorId = source.AttendanceEventCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAttendanceEventCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: BehaviorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.BehaviorDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class BehaviorDescriptorMapper 
    {
        public static bool SynchronizeTo(this IBehaviorDescriptor source, IBehaviorDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IBehaviorDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BehaviorDescriptorId != target.BehaviorDescriptorId)
            {
                source.BehaviorDescriptorId = target.BehaviorDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IBehaviorDescriptor source, IBehaviorDescriptor target, Action<IBehaviorDescriptor, IBehaviorDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IBehaviorDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IBehaviorDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BehaviorDescriptorId = source.BehaviorDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBehaviorDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: BellSchedule

namespace EdFi.Ods.Entities.Common.EdFi //.BellScheduleAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class BellScheduleMapper 
    {
        public static bool SynchronizeTo(this IBellSchedule source, IBellSchedule target)
        {
            bool isModified = false;

            var sourceSupport = source as IBellScheduleSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BellScheduleName != target.BellScheduleName)
            {
                source.BellScheduleName = target.BellScheduleName;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAlternateDayNameSupported)
                && target.AlternateDayName != source.AlternateDayName)
            {
                target.AlternateDayName = source.AlternateDayName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndTimeSupported)
                && target.EndTime != source.EndTime)
            {
                target.EndTime = source.EndTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStartTimeSupported)
                && target.StartTime != source.StartTime)
            {
                target.StartTime = source.StartTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalInstructionalTimeSupported)
                && target.TotalInstructionalTime != source.TotalInstructionalTime)
            {
                target.TotalInstructionalTime = source.TotalInstructionalTime;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsBellScheduleClassPeriodsSupported)
            {
                isModified |= 
                    source.BellScheduleClassPeriods.SynchronizeCollectionTo(
                        target.BellScheduleClassPeriods, 
                        onChildAdded: child => 
                            {
                                child.BellSchedule = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsBellScheduleClassPeriodIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsBellScheduleDatesSupported)
            {
                isModified |= 
                    source.BellScheduleDates.SynchronizeCollectionTo(
                        target.BellScheduleDates, 
                        onChildAdded: child => 
                            {
                                child.BellSchedule = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsBellScheduleDateIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsBellScheduleGradeLevelsSupported)
            {
                isModified |= 
                    source.BellScheduleGradeLevels.SynchronizeCollectionTo(
                        target.BellScheduleGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.BellSchedule = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsBellScheduleGradeLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IBellSchedule source, IBellSchedule target, Action<IBellSchedule, IBellSchedule> onMapped)
        {
            var sourceSynchSupport = source as IBellScheduleSynchronizationSourceSupport;
            var targetSynchSupport = target as IBellScheduleSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BellScheduleName = source.BellScheduleName;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAlternateDayNameSupported)
                target.AlternateDayName = source.AlternateDayName;
            else
                targetSynchSupport.IsAlternateDayNameSupported = false;

            if (sourceSynchSupport.IsEndTimeSupported)
                target.EndTime = source.EndTime;
            else
                targetSynchSupport.IsEndTimeSupported = false;

            if (sourceSynchSupport.IsStartTimeSupported)
                target.StartTime = source.StartTime;
            else
                targetSynchSupport.IsStartTimeSupported = false;

            if (sourceSynchSupport.IsTotalInstructionalTimeSupported)
                target.TotalInstructionalTime = source.TotalInstructionalTime;
            else
                targetSynchSupport.IsTotalInstructionalTimeSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsBellScheduleClassPeriodsSupported)
            {    
                targetSynchSupport.IsBellScheduleClassPeriodIncluded = sourceSynchSupport.IsBellScheduleClassPeriodIncluded;
                source.BellScheduleClassPeriods.MapCollectionTo(target.BellScheduleClassPeriods, target);
            }
            else
            {
                targetSynchSupport.IsBellScheduleClassPeriodsSupported = false;
            }

            if (sourceSynchSupport.IsBellScheduleDatesSupported)
            {    
                targetSynchSupport.IsBellScheduleDateIncluded = sourceSynchSupport.IsBellScheduleDateIncluded;
                source.BellScheduleDates.MapCollectionTo(target.BellScheduleDates, target);
            }
            else
            {
                targetSynchSupport.IsBellScheduleDatesSupported = false;
            }

            if (sourceSynchSupport.IsBellScheduleGradeLevelsSupported)
            {    
                targetSynchSupport.IsBellScheduleGradeLevelIncluded = sourceSynchSupport.IsBellScheduleGradeLevelIncluded;
                source.BellScheduleGradeLevels.MapCollectionTo(target.BellScheduleGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsBellScheduleGradeLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBellScheduleSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAlternateDayNameSupported { get; set; }
        bool IsBellScheduleClassPeriodsSupported { get; set; }
        bool IsBellScheduleDatesSupported { get; set; }
        bool IsBellScheduleGradeLevelsSupported { get; set; }
        bool IsEndTimeSupported { get; set; }
        bool IsStartTimeSupported { get; set; }
        bool IsTotalInstructionalTimeSupported { get; set; }
        Func<IBellScheduleClassPeriod, bool> IsBellScheduleClassPeriodIncluded { get; set; }
        Func<IBellScheduleDate, bool> IsBellScheduleDateIncluded { get; set; }
        Func<IBellScheduleGradeLevel, bool> IsBellScheduleGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class BellScheduleClassPeriodMapper 
    {
        public static bool SynchronizeTo(this IBellScheduleClassPeriod source, IBellScheduleClassPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IBellScheduleClassPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ClassPeriodName != target.ClassPeriodName)
            {
                source.ClassPeriodName = target.ClassPeriodName;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IBellScheduleClassPeriod source, IBellScheduleClassPeriod target, Action<IBellScheduleClassPeriod, IBellScheduleClassPeriod> onMapped)
        {
            var sourceSynchSupport = source as IBellScheduleClassPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IBellScheduleClassPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ClassPeriodName = source.ClassPeriodName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ClassPeriodResourceId = source.ClassPeriodResourceId;
                target.ClassPeriodDiscriminator = source.ClassPeriodDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBellScheduleClassPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class BellScheduleDateMapper 
    {
        public static bool SynchronizeTo(this IBellScheduleDate source, IBellScheduleDate target)
        {
            bool isModified = false;

            var sourceSupport = source as IBellScheduleDateSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Date != target.Date)
            {
                source.Date = target.Date;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IBellScheduleDate source, IBellScheduleDate target, Action<IBellScheduleDate, IBellScheduleDate> onMapped)
        {
            var sourceSynchSupport = source as IBellScheduleDateSynchronizationSourceSupport;
            var targetSynchSupport = target as IBellScheduleDateSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Date = source.Date;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBellScheduleDateSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class BellScheduleGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IBellScheduleGradeLevel source, IBellScheduleGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IBellScheduleGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IBellScheduleGradeLevel source, IBellScheduleGradeLevel target, Action<IBellScheduleGradeLevel, IBellScheduleGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IBellScheduleGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IBellScheduleGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBellScheduleGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: Budget

namespace EdFi.Ods.Entities.Common.EdFi //.BudgetAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class BudgetMapper 
    {
        public static bool SynchronizeTo(this IBudget source, IBudget target)
        {
            bool isModified = false;

            var sourceSupport = source as IBudgetSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccountIdentifier != target.AccountIdentifier)
            {
                source.AccountIdentifier = target.AccountIdentifier;
            }
            if (source.AsOfDate != target.AsOfDate)
            {
                source.AsOfDate = target.AsOfDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FiscalYear != target.FiscalYear)
            {
                source.FiscalYear = target.FiscalYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAmountSupported)
                && target.Amount != source.Amount)
            {
                target.Amount = source.Amount;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IBudget source, IBudget target, Action<IBudget, IBudget> onMapped)
        {
            var sourceSynchSupport = source as IBudgetSynchronizationSourceSupport;
            var targetSynchSupport = target as IBudgetSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAmountSupported)
                target.Amount = source.Amount;
            else
                targetSynchSupport.IsAmountSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AccountResourceId = source.AccountResourceId;
                target.AccountDiscriminator = source.AccountDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBudgetSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAmountSupported { get; set; }
    }
 
}
// Aggregate: Calendar

namespace EdFi.Ods.Entities.Common.EdFi //.CalendarAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CalendarMapper 
    {
        public static bool SynchronizeTo(this ICalendar source, ICalendar target)
        {
            bool isModified = false;

            var sourceSupport = source as ICalendarSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CalendarCode != target.CalendarCode)
            {
                source.CalendarCode = target.CalendarCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCalendarTypeDescriptorSupported)
                && target.CalendarTypeDescriptor != source.CalendarTypeDescriptor)
            {
                target.CalendarTypeDescriptor = source.CalendarTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCalendarGradeLevelsSupported)
            {
                isModified |= 
                    source.CalendarGradeLevels.SynchronizeCollectionTo(
                        target.CalendarGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.Calendar = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCalendarGradeLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICalendar source, ICalendar target, Action<ICalendar, ICalendar> onMapped)
        {
            var sourceSynchSupport = source as ICalendarSynchronizationSourceSupport;
            var targetSynchSupport = target as ICalendarSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarCode = source.CalendarCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCalendarTypeDescriptorSupported)
                target.CalendarTypeDescriptor = source.CalendarTypeDescriptor;
            else
                targetSynchSupport.IsCalendarTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCalendarGradeLevelsSupported)
            {    
                targetSynchSupport.IsCalendarGradeLevelIncluded = sourceSynchSupport.IsCalendarGradeLevelIncluded;
                source.CalendarGradeLevels.MapCollectionTo(target.CalendarGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsCalendarGradeLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICalendarSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCalendarGradeLevelsSupported { get; set; }
        bool IsCalendarTypeDescriptorSupported { get; set; }
        Func<ICalendarGradeLevel, bool> IsCalendarGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CalendarGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ICalendarGradeLevel source, ICalendarGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ICalendarGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICalendarGradeLevel source, ICalendarGradeLevel target, Action<ICalendarGradeLevel, ICalendarGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ICalendarGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ICalendarGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICalendarGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: CalendarDate

namespace EdFi.Ods.Entities.Common.EdFi //.CalendarDateAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CalendarDateMapper 
    {
        public static bool SynchronizeTo(this ICalendarDate source, ICalendarDate target)
        {
            bool isModified = false;

            var sourceSupport = source as ICalendarDateSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CalendarCode != target.CalendarCode)
            {
                source.CalendarCode = target.CalendarCode;
            }
            if (source.Date != target.Date)
            {
                source.Date = target.Date;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCalendarDateCalendarEventsSupported)
            {
                isModified |= 
                    source.CalendarDateCalendarEvents.SynchronizeCollectionTo(
                        target.CalendarDateCalendarEvents, 
                        onChildAdded: child => 
                            {
                                child.CalendarDate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCalendarDateCalendarEventIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICalendarDate source, ICalendarDate target, Action<ICalendarDate, ICalendarDate> onMapped)
        {
            var sourceSynchSupport = source as ICalendarDateSynchronizationSourceSupport;
            var targetSynchSupport = target as ICalendarDateSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarCode = source.CalendarCode;
            target.Date = source.Date;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CalendarResourceId = source.CalendarResourceId;
                target.CalendarDiscriminator = source.CalendarDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCalendarDateCalendarEventsSupported)
            {    
                targetSynchSupport.IsCalendarDateCalendarEventIncluded = sourceSynchSupport.IsCalendarDateCalendarEventIncluded;
                source.CalendarDateCalendarEvents.MapCollectionTo(target.CalendarDateCalendarEvents, target);
            }
            else
            {
                targetSynchSupport.IsCalendarDateCalendarEventsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICalendarDateSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCalendarDateCalendarEventsSupported { get; set; }
        Func<ICalendarDateCalendarEvent, bool> IsCalendarDateCalendarEventIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CalendarDateCalendarEventMapper 
    {
        public static bool SynchronizeTo(this ICalendarDateCalendarEvent source, ICalendarDateCalendarEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as ICalendarDateCalendarEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CalendarEventDescriptor != target.CalendarEventDescriptor)
            {
                source.CalendarEventDescriptor = target.CalendarEventDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICalendarDateCalendarEvent source, ICalendarDateCalendarEvent target, Action<ICalendarDateCalendarEvent, ICalendarDateCalendarEvent> onMapped)
        {
            var sourceSynchSupport = source as ICalendarDateCalendarEventSynchronizationSourceSupport;
            var targetSynchSupport = target as ICalendarDateCalendarEventSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CalendarEventDescriptor = source.CalendarEventDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICalendarDateCalendarEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: CalendarEventDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CalendarEventDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CalendarEventDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICalendarEventDescriptor source, ICalendarEventDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICalendarEventDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CalendarEventDescriptorId != target.CalendarEventDescriptorId)
            {
                source.CalendarEventDescriptorId = target.CalendarEventDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICalendarEventDescriptor source, ICalendarEventDescriptor target, Action<ICalendarEventDescriptor, ICalendarEventDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICalendarEventDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICalendarEventDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarEventDescriptorId = source.CalendarEventDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICalendarEventDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CalendarTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CalendarTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CalendarTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICalendarTypeDescriptor source, ICalendarTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICalendarTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CalendarTypeDescriptorId != target.CalendarTypeDescriptorId)
            {
                source.CalendarTypeDescriptorId = target.CalendarTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICalendarTypeDescriptor source, ICalendarTypeDescriptor target, Action<ICalendarTypeDescriptor, ICalendarTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICalendarTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICalendarTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarTypeDescriptorId = source.CalendarTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICalendarTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CareerPathwayDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CareerPathwayDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CareerPathwayDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICareerPathwayDescriptor source, ICareerPathwayDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICareerPathwayDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CareerPathwayDescriptorId != target.CareerPathwayDescriptorId)
            {
                source.CareerPathwayDescriptorId = target.CareerPathwayDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICareerPathwayDescriptor source, ICareerPathwayDescriptor target, Action<ICareerPathwayDescriptor, ICareerPathwayDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICareerPathwayDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICareerPathwayDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CareerPathwayDescriptorId = source.CareerPathwayDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICareerPathwayDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CharterApprovalAgencyTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CharterApprovalAgencyTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CharterApprovalAgencyTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICharterApprovalAgencyTypeDescriptor source, ICharterApprovalAgencyTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICharterApprovalAgencyTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CharterApprovalAgencyTypeDescriptorId != target.CharterApprovalAgencyTypeDescriptorId)
            {
                source.CharterApprovalAgencyTypeDescriptorId = target.CharterApprovalAgencyTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICharterApprovalAgencyTypeDescriptor source, ICharterApprovalAgencyTypeDescriptor target, Action<ICharterApprovalAgencyTypeDescriptor, ICharterApprovalAgencyTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICharterApprovalAgencyTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICharterApprovalAgencyTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CharterApprovalAgencyTypeDescriptorId = source.CharterApprovalAgencyTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICharterApprovalAgencyTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CharterStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CharterStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CharterStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICharterStatusDescriptor source, ICharterStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICharterStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CharterStatusDescriptorId != target.CharterStatusDescriptorId)
            {
                source.CharterStatusDescriptorId = target.CharterStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICharterStatusDescriptor source, ICharterStatusDescriptor target, Action<ICharterStatusDescriptor, ICharterStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICharterStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICharterStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CharterStatusDescriptorId = source.CharterStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICharterStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CitizenshipStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CitizenshipStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CitizenshipStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICitizenshipStatusDescriptor source, ICitizenshipStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICitizenshipStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CitizenshipStatusDescriptorId != target.CitizenshipStatusDescriptorId)
            {
                source.CitizenshipStatusDescriptorId = target.CitizenshipStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICitizenshipStatusDescriptor source, ICitizenshipStatusDescriptor target, Action<ICitizenshipStatusDescriptor, ICitizenshipStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICitizenshipStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICitizenshipStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CitizenshipStatusDescriptorId = source.CitizenshipStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICitizenshipStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ClassPeriod

namespace EdFi.Ods.Entities.Common.EdFi //.ClassPeriodAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ClassPeriodMapper 
    {
        public static bool SynchronizeTo(this IClassPeriod source, IClassPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IClassPeriodSynchronizationSourceSupport;

            // Allow PK column updates on ClassPeriod
            if (
                 (target.ClassPeriodName != source.ClassPeriodName)
                || (target.SchoolId != source.SchoolId))
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ClassPeriodName != target.ClassPeriodName)
            {
                source.ClassPeriodName = target.ClassPeriodName;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsOfficialAttendancePeriodSupported)
                && target.OfficialAttendancePeriod != source.OfficialAttendancePeriod)
            {
                target.OfficialAttendancePeriod = source.OfficialAttendancePeriod;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsClassPeriodMeetingTimesSupported)
            {
                isModified |= 
                    source.ClassPeriodMeetingTimes.SynchronizeCollectionTo(
                        target.ClassPeriodMeetingTimes, 
                        onChildAdded: child => 
                            {
                                child.ClassPeriod = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsClassPeriodMeetingTimeIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IClassPeriod source, IClassPeriod target, Action<IClassPeriod, IClassPeriod> onMapped)
        {
            var sourceSynchSupport = source as IClassPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IClassPeriodSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ClassPeriodName = source.ClassPeriodName;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsOfficialAttendancePeriodSupported)
                target.OfficialAttendancePeriod = source.OfficialAttendancePeriod;
            else
                targetSynchSupport.IsOfficialAttendancePeriodSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsClassPeriodMeetingTimesSupported)
            {    
                targetSynchSupport.IsClassPeriodMeetingTimeIncluded = sourceSynchSupport.IsClassPeriodMeetingTimeIncluded;
                source.ClassPeriodMeetingTimes.MapCollectionTo(target.ClassPeriodMeetingTimes, target);
            }
            else
            {
                targetSynchSupport.IsClassPeriodMeetingTimesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IClassPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsClassPeriodMeetingTimesSupported { get; set; }
        bool IsOfficialAttendancePeriodSupported { get; set; }
        Func<IClassPeriodMeetingTime, bool> IsClassPeriodMeetingTimeIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ClassPeriodMeetingTimeMapper 
    {
        public static bool SynchronizeTo(this IClassPeriodMeetingTime source, IClassPeriodMeetingTime target)
        {
            bool isModified = false;

            var sourceSupport = source as IClassPeriodMeetingTimeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EndTime != target.EndTime)
            {
                source.EndTime = target.EndTime;
            }
            if (source.StartTime != target.StartTime)
            {
                source.StartTime = target.StartTime;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IClassPeriodMeetingTime source, IClassPeriodMeetingTime target, Action<IClassPeriodMeetingTime, IClassPeriodMeetingTime> onMapped)
        {
            var sourceSynchSupport = source as IClassPeriodMeetingTimeSynchronizationSourceSupport;
            var targetSynchSupport = target as IClassPeriodMeetingTimeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EndTime = source.EndTime;
            target.StartTime = source.StartTime;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IClassPeriodMeetingTimeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: ClassroomPositionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ClassroomPositionDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ClassroomPositionDescriptorMapper 
    {
        public static bool SynchronizeTo(this IClassroomPositionDescriptor source, IClassroomPositionDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IClassroomPositionDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ClassroomPositionDescriptorId != target.ClassroomPositionDescriptorId)
            {
                source.ClassroomPositionDescriptorId = target.ClassroomPositionDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IClassroomPositionDescriptor source, IClassroomPositionDescriptor target, Action<IClassroomPositionDescriptor, IClassroomPositionDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IClassroomPositionDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IClassroomPositionDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ClassroomPositionDescriptorId = source.ClassroomPositionDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IClassroomPositionDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Cohort

namespace EdFi.Ods.Entities.Common.EdFi //.CohortAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CohortMapper 
    {
        public static bool SynchronizeTo(this ICohort source, ICohort target)
        {
            bool isModified = false;

            var sourceSupport = source as ICohortSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CohortIdentifier != target.CohortIdentifier)
            {
                source.CohortIdentifier = target.CohortIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCohortDescriptionSupported)
                && target.CohortDescription != source.CohortDescription)
            {
                target.CohortDescription = source.CohortDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCohortScopeDescriptorSupported)
                && target.CohortScopeDescriptor != source.CohortScopeDescriptor)
            {
                target.CohortScopeDescriptor = source.CohortScopeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCohortTypeDescriptorSupported)
                && target.CohortTypeDescriptor != source.CohortTypeDescriptor)
            {
                target.CohortTypeDescriptor = source.CohortTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCohortProgramsSupported)
            {
                isModified |= 
                    source.CohortPrograms.SynchronizeCollectionTo(
                        target.CohortPrograms, 
                        onChildAdded: child => 
                            {
                                child.Cohort = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCohortProgramIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICohort source, ICohort target, Action<ICohort, ICohort> onMapped)
        {
            var sourceSynchSupport = source as ICohortSynchronizationSourceSupport;
            var targetSynchSupport = target as ICohortSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CohortIdentifier = source.CohortIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsCohortDescriptionSupported)
                target.CohortDescription = source.CohortDescription;
            else
                targetSynchSupport.IsCohortDescriptionSupported = false;

            if (sourceSynchSupport.IsCohortScopeDescriptorSupported)
                target.CohortScopeDescriptor = source.CohortScopeDescriptor;
            else
                targetSynchSupport.IsCohortScopeDescriptorSupported = false;

            if (sourceSynchSupport.IsCohortTypeDescriptorSupported)
                target.CohortTypeDescriptor = source.CohortTypeDescriptor;
            else
                targetSynchSupport.IsCohortTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCohortProgramsSupported)
            {    
                targetSynchSupport.IsCohortProgramIncluded = sourceSynchSupport.IsCohortProgramIncluded;
                source.CohortPrograms.MapCollectionTo(target.CohortPrograms, target);
            }
            else
            {
                targetSynchSupport.IsCohortProgramsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICohortSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsCohortDescriptionSupported { get; set; }
        bool IsCohortProgramsSupported { get; set; }
        bool IsCohortScopeDescriptorSupported { get; set; }
        bool IsCohortTypeDescriptorSupported { get; set; }
        Func<ICohortProgram, bool> IsCohortProgramIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CohortProgramMapper 
    {
        public static bool SynchronizeTo(this ICohortProgram source, ICohortProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as ICohortProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICohortProgram source, ICohortProgram target, Action<ICohortProgram, ICohortProgram> onMapped)
        {
            var sourceSynchSupport = source as ICohortProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as ICohortProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICohortProgramSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: CohortScopeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CohortScopeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CohortScopeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICohortScopeDescriptor source, ICohortScopeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICohortScopeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CohortScopeDescriptorId != target.CohortScopeDescriptorId)
            {
                source.CohortScopeDescriptorId = target.CohortScopeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICohortScopeDescriptor source, ICohortScopeDescriptor target, Action<ICohortScopeDescriptor, ICohortScopeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICohortScopeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICohortScopeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CohortScopeDescriptorId = source.CohortScopeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICohortScopeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CohortTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CohortTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CohortTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICohortTypeDescriptor source, ICohortTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICohortTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CohortTypeDescriptorId != target.CohortTypeDescriptorId)
            {
                source.CohortTypeDescriptorId = target.CohortTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICohortTypeDescriptor source, ICohortTypeDescriptor target, Action<ICohortTypeDescriptor, ICohortTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICohortTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICohortTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CohortTypeDescriptorId = source.CohortTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICohortTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CohortYearTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CohortYearTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CohortYearTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICohortYearTypeDescriptor source, ICohortYearTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICohortYearTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CohortYearTypeDescriptorId != target.CohortYearTypeDescriptorId)
            {
                source.CohortYearTypeDescriptorId = target.CohortYearTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICohortYearTypeDescriptor source, ICohortYearTypeDescriptor target, Action<ICohortYearTypeDescriptor, ICohortYearTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICohortYearTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICohortYearTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CohortYearTypeDescriptorId = source.CohortYearTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICohortYearTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CommunityOrganization

namespace EdFi.Ods.Entities.Common.EdFi //.CommunityOrganizationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CommunityOrganizationMapper 
    {
        public static bool SynchronizeTo(this ICommunityOrganization source, ICommunityOrganization target)
        {
            bool isModified = false;

            var sourceSupport = source as ICommunityOrganizationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CommunityOrganizationId != target.CommunityOrganizationId)
            {
                source.CommunityOrganizationId = target.CommunityOrganizationId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICommunityOrganization source, ICommunityOrganization target, Action<ICommunityOrganization, ICommunityOrganization> onMapped)
        {
            var sourceSynchSupport = source as ICommunityOrganizationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICommunityOrganizationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CommunityOrganizationId = source.CommunityOrganizationId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICommunityOrganizationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
    }
 
}
// Aggregate: CommunityProvider

namespace EdFi.Ods.Entities.Common.EdFi //.CommunityProviderAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CommunityProviderMapper 
    {
        public static bool SynchronizeTo(this ICommunityProvider source, ICommunityProvider target)
        {
            bool isModified = false;

            var sourceSupport = source as ICommunityProviderSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CommunityProviderId != target.CommunityProviderId)
            {
                source.CommunityProviderId = target.CommunityProviderId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCommunityOrganizationIdSupported)
                && target.CommunityOrganizationId != source.CommunityOrganizationId)
            {
                target.CommunityOrganizationId = source.CommunityOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLicenseExemptIndicatorSupported)
                && target.LicenseExemptIndicator != source.LicenseExemptIndicator)
            {
                target.LicenseExemptIndicator = source.LicenseExemptIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProviderCategoryDescriptorSupported)
                && target.ProviderCategoryDescriptor != source.ProviderCategoryDescriptor)
            {
                target.ProviderCategoryDescriptor = source.ProviderCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProviderProfitabilityDescriptorSupported)
                && target.ProviderProfitabilityDescriptor != source.ProviderProfitabilityDescriptor)
            {
                target.ProviderProfitabilityDescriptor = source.ProviderProfitabilityDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProviderStatusDescriptorSupported)
                && target.ProviderStatusDescriptor != source.ProviderStatusDescriptor)
            {
                target.ProviderStatusDescriptor = source.ProviderStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIndicatorSupported)
                && target.SchoolIndicator != source.SchoolIndicator)
            {
                target.SchoolIndicator = source.SchoolIndicator;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICommunityProvider source, ICommunityProvider target, Action<ICommunityProvider, ICommunityProvider> onMapped)
        {
            var sourceSynchSupport = source as ICommunityProviderSynchronizationSourceSupport;
            var targetSynchSupport = target as ICommunityProviderSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CommunityProviderId = source.CommunityProviderId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCommunityOrganizationIdSupported)
                target.CommunityOrganizationId = source.CommunityOrganizationId;
            else
                targetSynchSupport.IsCommunityOrganizationIdSupported = false;

            if (sourceSynchSupport.IsLicenseExemptIndicatorSupported)
                target.LicenseExemptIndicator = source.LicenseExemptIndicator;
            else
                targetSynchSupport.IsLicenseExemptIndicatorSupported = false;

            if (sourceSynchSupport.IsProviderCategoryDescriptorSupported)
                target.ProviderCategoryDescriptor = source.ProviderCategoryDescriptor;
            else
                targetSynchSupport.IsProviderCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsProviderProfitabilityDescriptorSupported)
                target.ProviderProfitabilityDescriptor = source.ProviderProfitabilityDescriptor;
            else
                targetSynchSupport.IsProviderProfitabilityDescriptorSupported = false;

            if (sourceSynchSupport.IsProviderStatusDescriptorSupported)
                target.ProviderStatusDescriptor = source.ProviderStatusDescriptor;
            else
                targetSynchSupport.IsProviderStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolIndicatorSupported)
                target.SchoolIndicator = source.SchoolIndicator;
            else
                targetSynchSupport.IsSchoolIndicatorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CommunityOrganizationResourceId = source.CommunityOrganizationResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICommunityProviderSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCommunityOrganizationIdSupported { get; set; }
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsLicenseExemptIndicatorSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsProviderCategoryDescriptorSupported { get; set; }
        bool IsProviderProfitabilityDescriptorSupported { get; set; }
        bool IsProviderStatusDescriptorSupported { get; set; }
        bool IsSchoolIndicatorSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
    }
 
}
// Aggregate: CommunityProviderLicense

namespace EdFi.Ods.Entities.Common.EdFi //.CommunityProviderLicenseAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CommunityProviderLicenseMapper 
    {
        public static bool SynchronizeTo(this ICommunityProviderLicense source, ICommunityProviderLicense target)
        {
            bool isModified = false;

            var sourceSupport = source as ICommunityProviderLicenseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CommunityProviderId != target.CommunityProviderId)
            {
                source.CommunityProviderId = target.CommunityProviderId;
            }
            if (source.LicenseIdentifier != target.LicenseIdentifier)
            {
                source.LicenseIdentifier = target.LicenseIdentifier;
            }
            if (source.LicensingOrganization != target.LicensingOrganization)
            {
                source.LicensingOrganization = target.LicensingOrganization;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAuthorizedFacilityCapacitySupported)
                && target.AuthorizedFacilityCapacity != source.AuthorizedFacilityCapacity)
            {
                target.AuthorizedFacilityCapacity = source.AuthorizedFacilityCapacity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLicenseEffectiveDateSupported)
                && target.LicenseEffectiveDate != source.LicenseEffectiveDate)
            {
                target.LicenseEffectiveDate = source.LicenseEffectiveDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLicenseExpirationDateSupported)
                && target.LicenseExpirationDate != source.LicenseExpirationDate)
            {
                target.LicenseExpirationDate = source.LicenseExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLicenseIssueDateSupported)
                && target.LicenseIssueDate != source.LicenseIssueDate)
            {
                target.LicenseIssueDate = source.LicenseIssueDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLicenseStatusDescriptorSupported)
                && target.LicenseStatusDescriptor != source.LicenseStatusDescriptor)
            {
                target.LicenseStatusDescriptor = source.LicenseStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLicenseTypeDescriptorSupported)
                && target.LicenseTypeDescriptor != source.LicenseTypeDescriptor)
            {
                target.LicenseTypeDescriptor = source.LicenseTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOldestAgeAuthorizedToServeSupported)
                && target.OldestAgeAuthorizedToServe != source.OldestAgeAuthorizedToServe)
            {
                target.OldestAgeAuthorizedToServe = source.OldestAgeAuthorizedToServe;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYoungestAgeAuthorizedToServeSupported)
                && target.YoungestAgeAuthorizedToServe != source.YoungestAgeAuthorizedToServe)
            {
                target.YoungestAgeAuthorizedToServe = source.YoungestAgeAuthorizedToServe;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICommunityProviderLicense source, ICommunityProviderLicense target, Action<ICommunityProviderLicense, ICommunityProviderLicense> onMapped)
        {
            var sourceSynchSupport = source as ICommunityProviderLicenseSynchronizationSourceSupport;
            var targetSynchSupport = target as ICommunityProviderLicenseSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CommunityProviderId = source.CommunityProviderId;
            target.LicenseIdentifier = source.LicenseIdentifier;
            target.LicensingOrganization = source.LicensingOrganization;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAuthorizedFacilityCapacitySupported)
                target.AuthorizedFacilityCapacity = source.AuthorizedFacilityCapacity;
            else
                targetSynchSupport.IsAuthorizedFacilityCapacitySupported = false;

            if (sourceSynchSupport.IsLicenseEffectiveDateSupported)
                target.LicenseEffectiveDate = source.LicenseEffectiveDate;
            else
                targetSynchSupport.IsLicenseEffectiveDateSupported = false;

            if (sourceSynchSupport.IsLicenseExpirationDateSupported)
                target.LicenseExpirationDate = source.LicenseExpirationDate;
            else
                targetSynchSupport.IsLicenseExpirationDateSupported = false;

            if (sourceSynchSupport.IsLicenseIssueDateSupported)
                target.LicenseIssueDate = source.LicenseIssueDate;
            else
                targetSynchSupport.IsLicenseIssueDateSupported = false;

            if (sourceSynchSupport.IsLicenseStatusDescriptorSupported)
                target.LicenseStatusDescriptor = source.LicenseStatusDescriptor;
            else
                targetSynchSupport.IsLicenseStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsLicenseTypeDescriptorSupported)
                target.LicenseTypeDescriptor = source.LicenseTypeDescriptor;
            else
                targetSynchSupport.IsLicenseTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsOldestAgeAuthorizedToServeSupported)
                target.OldestAgeAuthorizedToServe = source.OldestAgeAuthorizedToServe;
            else
                targetSynchSupport.IsOldestAgeAuthorizedToServeSupported = false;

            if (sourceSynchSupport.IsYoungestAgeAuthorizedToServeSupported)
                target.YoungestAgeAuthorizedToServe = source.YoungestAgeAuthorizedToServe;
            else
                targetSynchSupport.IsYoungestAgeAuthorizedToServeSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CommunityProviderResourceId = source.CommunityProviderResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICommunityProviderLicenseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAuthorizedFacilityCapacitySupported { get; set; }
        bool IsLicenseEffectiveDateSupported { get; set; }
        bool IsLicenseExpirationDateSupported { get; set; }
        bool IsLicenseIssueDateSupported { get; set; }
        bool IsLicenseStatusDescriptorSupported { get; set; }
        bool IsLicenseTypeDescriptorSupported { get; set; }
        bool IsOldestAgeAuthorizedToServeSupported { get; set; }
        bool IsYoungestAgeAuthorizedToServeSupported { get; set; }
    }
 
}
// Aggregate: CompetencyLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CompetencyLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CompetencyLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICompetencyLevelDescriptor source, ICompetencyLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICompetencyLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CompetencyLevelDescriptorId != target.CompetencyLevelDescriptorId)
            {
                source.CompetencyLevelDescriptorId = target.CompetencyLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICompetencyLevelDescriptor source, ICompetencyLevelDescriptor target, Action<ICompetencyLevelDescriptor, ICompetencyLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICompetencyLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICompetencyLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CompetencyLevelDescriptorId = source.CompetencyLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICompetencyLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CompetencyObjective

namespace EdFi.Ods.Entities.Common.EdFi //.CompetencyObjectiveAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CompetencyObjectiveMapper 
    {
        public static bool SynchronizeTo(this ICompetencyObjective source, ICompetencyObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as ICompetencyObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.Objective != target.Objective)
            {
                source.Objective = target.Objective;
            }
            if (source.ObjectiveGradeLevelDescriptor != target.ObjectiveGradeLevelDescriptor)
            {
                source.ObjectiveGradeLevelDescriptor = target.ObjectiveGradeLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCompetencyObjectiveIdSupported)
                && target.CompetencyObjectiveId != source.CompetencyObjectiveId)
            {
                target.CompetencyObjectiveId = source.CompetencyObjectiveId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSuccessCriteriaSupported)
                && target.SuccessCriteria != source.SuccessCriteria)
            {
                target.SuccessCriteria = source.SuccessCriteria;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICompetencyObjective source, ICompetencyObjective target, Action<ICompetencyObjective, ICompetencyObjective> onMapped)
        {
            var sourceSynchSupport = source as ICompetencyObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as ICompetencyObjectiveSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Objective = source.Objective;
            target.ObjectiveGradeLevelDescriptor = source.ObjectiveGradeLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCompetencyObjectiveIdSupported)
                target.CompetencyObjectiveId = source.CompetencyObjectiveId;
            else
                targetSynchSupport.IsCompetencyObjectiveIdSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsSuccessCriteriaSupported)
                target.SuccessCriteria = source.SuccessCriteria;
            else
                targetSynchSupport.IsSuccessCriteriaSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICompetencyObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCompetencyObjectiveIdSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsSuccessCriteriaSupported { get; set; }
    }
 
}
// Aggregate: ContactTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ContactTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ContactTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IContactTypeDescriptor source, IContactTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IContactTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContactTypeDescriptorId != target.ContactTypeDescriptorId)
            {
                source.ContactTypeDescriptorId = target.ContactTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IContactTypeDescriptor source, IContactTypeDescriptor target, Action<IContactTypeDescriptor, IContactTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IContactTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IContactTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContactTypeDescriptorId = source.ContactTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IContactTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ContentClassDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ContentClassDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ContentClassDescriptorMapper 
    {
        public static bool SynchronizeTo(this IContentClassDescriptor source, IContentClassDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IContentClassDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContentClassDescriptorId != target.ContentClassDescriptorId)
            {
                source.ContentClassDescriptorId = target.ContentClassDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IContentClassDescriptor source, IContentClassDescriptor target, Action<IContentClassDescriptor, IContentClassDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IContentClassDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IContentClassDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContentClassDescriptorId = source.ContentClassDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IContentClassDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ContinuationOfServicesReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ContinuationOfServicesReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ContinuationOfServicesReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IContinuationOfServicesReasonDescriptor source, IContinuationOfServicesReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContinuationOfServicesReasonDescriptorId != target.ContinuationOfServicesReasonDescriptorId)
            {
                source.ContinuationOfServicesReasonDescriptorId = target.ContinuationOfServicesReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IContinuationOfServicesReasonDescriptor source, IContinuationOfServicesReasonDescriptor target, Action<IContinuationOfServicesReasonDescriptor, IContinuationOfServicesReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContinuationOfServicesReasonDescriptorId = source.ContinuationOfServicesReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IContinuationOfServicesReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ContractedStaff

namespace EdFi.Ods.Entities.Common.EdFi //.ContractedStaffAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ContractedStaffMapper 
    {
        public static bool SynchronizeTo(this IContractedStaff source, IContractedStaff target)
        {
            bool isModified = false;

            var sourceSupport = source as IContractedStaffSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccountIdentifier != target.AccountIdentifier)
            {
                source.AccountIdentifier = target.AccountIdentifier;
            }
            if (source.AsOfDate != target.AsOfDate)
            {
                source.AsOfDate = target.AsOfDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FiscalYear != target.FiscalYear)
            {
                source.FiscalYear = target.FiscalYear;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAmountToDateSupported)
                && target.AmountToDate != source.AmountToDate)
            {
                target.AmountToDate = source.AmountToDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IContractedStaff source, IContractedStaff target, Action<IContractedStaff, IContractedStaff> onMapped)
        {
            var sourceSynchSupport = source as IContractedStaffSynchronizationSourceSupport;
            var targetSynchSupport = target as IContractedStaffSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAmountToDateSupported)
                target.AmountToDate = source.AmountToDate;
            else
                targetSynchSupport.IsAmountToDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AccountResourceId = source.AccountResourceId;
                target.AccountDiscriminator = source.AccountDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IContractedStaffSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAmountToDateSupported { get; set; }
    }
 
}
// Aggregate: CostRateDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CostRateDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CostRateDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICostRateDescriptor source, ICostRateDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICostRateDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CostRateDescriptorId != target.CostRateDescriptorId)
            {
                source.CostRateDescriptorId = target.CostRateDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICostRateDescriptor source, ICostRateDescriptor target, Action<ICostRateDescriptor, ICostRateDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICostRateDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICostRateDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CostRateDescriptorId = source.CostRateDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICostRateDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CountryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CountryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CountryDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICountryDescriptor source, ICountryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICountryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CountryDescriptorId != target.CountryDescriptorId)
            {
                source.CountryDescriptorId = target.CountryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICountryDescriptor source, ICountryDescriptor target, Action<ICountryDescriptor, ICountryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICountryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICountryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CountryDescriptorId = source.CountryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICountryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Course

namespace EdFi.Ods.Entities.Common.EdFi //.CourseAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseMapper 
    {
        public static bool SynchronizeTo(this ICourse source, ICourse target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCareerPathwayDescriptorSupported)
                && target.CareerPathwayDescriptor != source.CareerPathwayDescriptor)
            {
                target.CareerPathwayDescriptor = source.CareerPathwayDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseDefinedByDescriptorSupported)
                && target.CourseDefinedByDescriptor != source.CourseDefinedByDescriptor)
            {
                target.CourseDefinedByDescriptor = source.CourseDefinedByDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseDescriptionSupported)
                && target.CourseDescription != source.CourseDescription)
            {
                target.CourseDescription = source.CourseDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseGPAApplicabilityDescriptorSupported)
                && target.CourseGPAApplicabilityDescriptor != source.CourseGPAApplicabilityDescriptor)
            {
                target.CourseGPAApplicabilityDescriptor = source.CourseGPAApplicabilityDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateCourseAdoptedSupported)
                && target.DateCourseAdopted != source.DateCourseAdopted)
            {
                target.DateCourseAdopted = source.DateCourseAdopted;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighSchoolCourseRequirementSupported)
                && target.HighSchoolCourseRequirement != source.HighSchoolCourseRequirement)
            {
                target.HighSchoolCourseRequirement = source.HighSchoolCourseRequirement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxCompletionsForCreditSupported)
                && target.MaxCompletionsForCredit != source.MaxCompletionsForCredit)
            {
                target.MaxCompletionsForCredit = source.MaxCompletionsForCredit;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaximumAvailableCreditConversionSupported)
                && target.MaximumAvailableCreditConversion != source.MaximumAvailableCreditConversion)
            {
                target.MaximumAvailableCreditConversion = source.MaximumAvailableCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaximumAvailableCreditsSupported)
                && target.MaximumAvailableCredits != source.MaximumAvailableCredits)
            {
                target.MaximumAvailableCredits = source.MaximumAvailableCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaximumAvailableCreditTypeDescriptorSupported)
                && target.MaximumAvailableCreditTypeDescriptor != source.MaximumAvailableCreditTypeDescriptor)
            {
                target.MaximumAvailableCreditTypeDescriptor = source.MaximumAvailableCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumAvailableCreditConversionSupported)
                && target.MinimumAvailableCreditConversion != source.MinimumAvailableCreditConversion)
            {
                target.MinimumAvailableCreditConversion = source.MinimumAvailableCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumAvailableCreditsSupported)
                && target.MinimumAvailableCredits != source.MinimumAvailableCredits)
            {
                target.MinimumAvailableCredits = source.MinimumAvailableCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumAvailableCreditTypeDescriptorSupported)
                && target.MinimumAvailableCreditTypeDescriptor != source.MinimumAvailableCreditTypeDescriptor)
            {
                target.MinimumAvailableCreditTypeDescriptor = source.MinimumAvailableCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumberOfPartsSupported)
                && target.NumberOfParts != source.NumberOfParts)
            {
                target.NumberOfParts = source.NumberOfParts;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTimeRequiredForCompletionSupported)
                && target.TimeRequiredForCompletion != source.TimeRequiredForCompletion)
            {
                target.TimeRequiredForCompletion = source.TimeRequiredForCompletion;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCourseCompetencyLevelsSupported)
            {
                isModified |= 
                    source.CourseCompetencyLevels.SynchronizeCollectionTo(
                        target.CourseCompetencyLevels, 
                        onChildAdded: child => 
                            {
                                child.Course = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseCompetencyLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseIdentificationCodesSupported)
            {
                isModified |= 
                    source.CourseIdentificationCodes.SynchronizeCollectionTo(
                        target.CourseIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.Course = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseLearningObjectivesSupported)
            {
                isModified |= 
                    source.CourseLearningObjectives.SynchronizeCollectionTo(
                        target.CourseLearningObjectives, 
                        onChildAdded: child => 
                            {
                                child.Course = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseLearningObjectiveIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseLearningStandardsSupported)
            {
                isModified |= 
                    source.CourseLearningStandards.SynchronizeCollectionTo(
                        target.CourseLearningStandards, 
                        onChildAdded: child => 
                            {
                                child.Course = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseLearningStandardIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseLevelCharacteristicsSupported)
            {
                isModified |= 
                    source.CourseLevelCharacteristics.SynchronizeCollectionTo(
                        target.CourseLevelCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.Course = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseLevelCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseOfferedGradeLevelsSupported)
            {
                isModified |= 
                    source.CourseOfferedGradeLevels.SynchronizeCollectionTo(
                        target.CourseOfferedGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.Course = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseOfferedGradeLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourse source, ICourse target, Action<ICourse, ICourse> onMapped)
        {
            var sourceSynchSupport = source as ICourseSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsCareerPathwayDescriptorSupported)
                target.CareerPathwayDescriptor = source.CareerPathwayDescriptor;
            else
                targetSynchSupport.IsCareerPathwayDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseDefinedByDescriptorSupported)
                target.CourseDefinedByDescriptor = source.CourseDefinedByDescriptor;
            else
                targetSynchSupport.IsCourseDefinedByDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseDescriptionSupported)
                target.CourseDescription = source.CourseDescription;
            else
                targetSynchSupport.IsCourseDescriptionSupported = false;

            if (sourceSynchSupport.IsCourseGPAApplicabilityDescriptorSupported)
                target.CourseGPAApplicabilityDescriptor = source.CourseGPAApplicabilityDescriptor;
            else
                targetSynchSupport.IsCourseGPAApplicabilityDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            if (sourceSynchSupport.IsDateCourseAdoptedSupported)
                target.DateCourseAdopted = source.DateCourseAdopted;
            else
                targetSynchSupport.IsDateCourseAdoptedSupported = false;

            if (sourceSynchSupport.IsHighSchoolCourseRequirementSupported)
                target.HighSchoolCourseRequirement = source.HighSchoolCourseRequirement;
            else
                targetSynchSupport.IsHighSchoolCourseRequirementSupported = false;

            if (sourceSynchSupport.IsMaxCompletionsForCreditSupported)
                target.MaxCompletionsForCredit = source.MaxCompletionsForCredit;
            else
                targetSynchSupport.IsMaxCompletionsForCreditSupported = false;

            if (sourceSynchSupport.IsMaximumAvailableCreditConversionSupported)
                target.MaximumAvailableCreditConversion = source.MaximumAvailableCreditConversion;
            else
                targetSynchSupport.IsMaximumAvailableCreditConversionSupported = false;

            if (sourceSynchSupport.IsMaximumAvailableCreditsSupported)
                target.MaximumAvailableCredits = source.MaximumAvailableCredits;
            else
                targetSynchSupport.IsMaximumAvailableCreditsSupported = false;

            if (sourceSynchSupport.IsMaximumAvailableCreditTypeDescriptorSupported)
                target.MaximumAvailableCreditTypeDescriptor = source.MaximumAvailableCreditTypeDescriptor;
            else
                targetSynchSupport.IsMaximumAvailableCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsMinimumAvailableCreditConversionSupported)
                target.MinimumAvailableCreditConversion = source.MinimumAvailableCreditConversion;
            else
                targetSynchSupport.IsMinimumAvailableCreditConversionSupported = false;

            if (sourceSynchSupport.IsMinimumAvailableCreditsSupported)
                target.MinimumAvailableCredits = source.MinimumAvailableCredits;
            else
                targetSynchSupport.IsMinimumAvailableCreditsSupported = false;

            if (sourceSynchSupport.IsMinimumAvailableCreditTypeDescriptorSupported)
                target.MinimumAvailableCreditTypeDescriptor = source.MinimumAvailableCreditTypeDescriptor;
            else
                targetSynchSupport.IsMinimumAvailableCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsNumberOfPartsSupported)
                target.NumberOfParts = source.NumberOfParts;
            else
                targetSynchSupport.IsNumberOfPartsSupported = false;

            if (sourceSynchSupport.IsTimeRequiredForCompletionSupported)
                target.TimeRequiredForCompletion = source.TimeRequiredForCompletion;
            else
                targetSynchSupport.IsTimeRequiredForCompletionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCourseCompetencyLevelsSupported)
            {    
                targetSynchSupport.IsCourseCompetencyLevelIncluded = sourceSynchSupport.IsCourseCompetencyLevelIncluded;
                source.CourseCompetencyLevels.MapCollectionTo(target.CourseCompetencyLevels, target);
            }
            else
            {
                targetSynchSupport.IsCourseCompetencyLevelsSupported = false;
            }

            if (sourceSynchSupport.IsCourseIdentificationCodesSupported)
            {    
                targetSynchSupport.IsCourseIdentificationCodeIncluded = sourceSynchSupport.IsCourseIdentificationCodeIncluded;
                source.CourseIdentificationCodes.MapCollectionTo(target.CourseIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsCourseIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsCourseLearningObjectivesSupported)
            {    
                targetSynchSupport.IsCourseLearningObjectiveIncluded = sourceSynchSupport.IsCourseLearningObjectiveIncluded;
                source.CourseLearningObjectives.MapCollectionTo(target.CourseLearningObjectives, target);
            }
            else
            {
                targetSynchSupport.IsCourseLearningObjectivesSupported = false;
            }

            if (sourceSynchSupport.IsCourseLearningStandardsSupported)
            {    
                targetSynchSupport.IsCourseLearningStandardIncluded = sourceSynchSupport.IsCourseLearningStandardIncluded;
                source.CourseLearningStandards.MapCollectionTo(target.CourseLearningStandards, target);
            }
            else
            {
                targetSynchSupport.IsCourseLearningStandardsSupported = false;
            }

            if (sourceSynchSupport.IsCourseLevelCharacteristicsSupported)
            {    
                targetSynchSupport.IsCourseLevelCharacteristicIncluded = sourceSynchSupport.IsCourseLevelCharacteristicIncluded;
                source.CourseLevelCharacteristics.MapCollectionTo(target.CourseLevelCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsCourseLevelCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsCourseOfferedGradeLevelsSupported)
            {    
                targetSynchSupport.IsCourseOfferedGradeLevelIncluded = sourceSynchSupport.IsCourseOfferedGradeLevelIncluded;
                source.CourseOfferedGradeLevels.MapCollectionTo(target.CourseOfferedGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsCourseOfferedGradeLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsCareerPathwayDescriptorSupported { get; set; }
        bool IsCourseCompetencyLevelsSupported { get; set; }
        bool IsCourseDefinedByDescriptorSupported { get; set; }
        bool IsCourseDescriptionSupported { get; set; }
        bool IsCourseGPAApplicabilityDescriptorSupported { get; set; }
        bool IsCourseIdentificationCodesSupported { get; set; }
        bool IsCourseLearningObjectivesSupported { get; set; }
        bool IsCourseLearningStandardsSupported { get; set; }
        bool IsCourseLevelCharacteristicsSupported { get; set; }
        bool IsCourseOfferedGradeLevelsSupported { get; set; }
        bool IsCourseTitleSupported { get; set; }
        bool IsDateCourseAdoptedSupported { get; set; }
        bool IsHighSchoolCourseRequirementSupported { get; set; }
        bool IsMaxCompletionsForCreditSupported { get; set; }
        bool IsMaximumAvailableCreditConversionSupported { get; set; }
        bool IsMaximumAvailableCreditsSupported { get; set; }
        bool IsMaximumAvailableCreditTypeDescriptorSupported { get; set; }
        bool IsMinimumAvailableCreditConversionSupported { get; set; }
        bool IsMinimumAvailableCreditsSupported { get; set; }
        bool IsMinimumAvailableCreditTypeDescriptorSupported { get; set; }
        bool IsNumberOfPartsSupported { get; set; }
        bool IsTimeRequiredForCompletionSupported { get; set; }
        Func<ICourseCompetencyLevel, bool> IsCourseCompetencyLevelIncluded { get; set; }
        Func<ICourseIdentificationCode, bool> IsCourseIdentificationCodeIncluded { get; set; }
        Func<ICourseLearningObjective, bool> IsCourseLearningObjectiveIncluded { get; set; }
        Func<ICourseLearningStandard, bool> IsCourseLearningStandardIncluded { get; set; }
        Func<ICourseLevelCharacteristic, bool> IsCourseLevelCharacteristicIncluded { get; set; }
        Func<ICourseOfferedGradeLevel, bool> IsCourseOfferedGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseCompetencyLevelMapper 
    {
        public static bool SynchronizeTo(this ICourseCompetencyLevel source, ICourseCompetencyLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseCompetencyLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CompetencyLevelDescriptor != target.CompetencyLevelDescriptor)
            {
                source.CompetencyLevelDescriptor = target.CompetencyLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseCompetencyLevel source, ICourseCompetencyLevel target, Action<ICourseCompetencyLevel, ICourseCompetencyLevel> onMapped)
        {
            var sourceSynchSupport = source as ICourseCompetencyLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseCompetencyLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseCompetencyLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this ICourseIdentificationCode source, ICourseIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseIdentificationSystemDescriptor != target.CourseIdentificationSystemDescriptor)
            {
                source.CourseIdentificationSystemDescriptor = target.CourseIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssigningOrganizationIdentificationCodeSupported)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseCatalogURLSupported)
                && target.CourseCatalogURL != source.CourseCatalogURL)
            {
                target.CourseCatalogURL = source.CourseCatalogURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseIdentificationCode source, ICourseIdentificationCode target, Action<ICourseIdentificationCode, ICourseIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as ICourseIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CourseIdentificationSystemDescriptor = source.CourseIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssigningOrganizationIdentificationCodeSupported)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            else
                targetSynchSupport.IsAssigningOrganizationIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsCourseCatalogURLSupported)
                target.CourseCatalogURL = source.CourseCatalogURL;
            else
                targetSynchSupport.IsCourseCatalogURLSupported = false;

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseIdentificationCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssigningOrganizationIdentificationCodeSupported { get; set; }
        bool IsCourseCatalogURLSupported { get; set; }
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseLearningObjectiveMapper 
    {
        public static bool SynchronizeTo(this ICourseLearningObjective source, ICourseLearningObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseLearningObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningObjectiveId != target.LearningObjectiveId)
            {
                source.LearningObjectiveId = target.LearningObjectiveId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseLearningObjective source, ICourseLearningObjective target, Action<ICourseLearningObjective, ICourseLearningObjective> onMapped)
        {
            var sourceSynchSupport = source as ICourseLearningObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseLearningObjectiveSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningObjectiveId = source.LearningObjectiveId;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningObjectiveResourceId = source.LearningObjectiveResourceId;
                target.LearningObjectiveDiscriminator = source.LearningObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseLearningObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseLearningStandardMapper 
    {
        public static bool SynchronizeTo(this ICourseLearningStandard source, ICourseLearningStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseLearningStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardId != target.LearningStandardId)
            {
                source.LearningStandardId = target.LearningStandardId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseLearningStandard source, ICourseLearningStandard target, Action<ICourseLearningStandard, ICourseLearningStandard> onMapped)
        {
            var sourceSynchSupport = source as ICourseLearningStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseLearningStandardSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseLearningStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseLevelCharacteristicMapper 
    {
        public static bool SynchronizeTo(this ICourseLevelCharacteristic source, ICourseLevelCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseLevelCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseLevelCharacteristicDescriptor != target.CourseLevelCharacteristicDescriptor)
            {
                source.CourseLevelCharacteristicDescriptor = target.CourseLevelCharacteristicDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseLevelCharacteristic source, ICourseLevelCharacteristic target, Action<ICourseLevelCharacteristic, ICourseLevelCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as ICourseLevelCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseLevelCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CourseLevelCharacteristicDescriptor = source.CourseLevelCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseLevelCharacteristicSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseOfferedGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ICourseOfferedGradeLevel source, ICourseOfferedGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseOfferedGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseOfferedGradeLevel source, ICourseOfferedGradeLevel target, Action<ICourseOfferedGradeLevel, ICourseOfferedGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ICourseOfferedGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseOfferedGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseOfferedGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: CourseAttemptResultDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseAttemptResultDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseAttemptResultDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICourseAttemptResultDescriptor source, ICourseAttemptResultDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseAttemptResultDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseAttemptResultDescriptorId != target.CourseAttemptResultDescriptorId)
            {
                source.CourseAttemptResultDescriptorId = target.CourseAttemptResultDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseAttemptResultDescriptor source, ICourseAttemptResultDescriptor target, Action<ICourseAttemptResultDescriptor, ICourseAttemptResultDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICourseAttemptResultDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseAttemptResultDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseAttemptResultDescriptorId = source.CourseAttemptResultDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseAttemptResultDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CourseDefinedByDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseDefinedByDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseDefinedByDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICourseDefinedByDescriptor source, ICourseDefinedByDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseDefinedByDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseDefinedByDescriptorId != target.CourseDefinedByDescriptorId)
            {
                source.CourseDefinedByDescriptorId = target.CourseDefinedByDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseDefinedByDescriptor source, ICourseDefinedByDescriptor target, Action<ICourseDefinedByDescriptor, ICourseDefinedByDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICourseDefinedByDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseDefinedByDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseDefinedByDescriptorId = source.CourseDefinedByDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseDefinedByDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CourseGPAApplicabilityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseGPAApplicabilityDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseGPAApplicabilityDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICourseGPAApplicabilityDescriptor source, ICourseGPAApplicabilityDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseGPAApplicabilityDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseGPAApplicabilityDescriptorId != target.CourseGPAApplicabilityDescriptorId)
            {
                source.CourseGPAApplicabilityDescriptorId = target.CourseGPAApplicabilityDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseGPAApplicabilityDescriptor source, ICourseGPAApplicabilityDescriptor target, Action<ICourseGPAApplicabilityDescriptor, ICourseGPAApplicabilityDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICourseGPAApplicabilityDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseGPAApplicabilityDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseGPAApplicabilityDescriptorId = source.CourseGPAApplicabilityDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseGPAApplicabilityDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CourseIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseIdentificationSystemDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseIdentificationSystemDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICourseIdentificationSystemDescriptor source, ICourseIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseIdentificationSystemDescriptorId != target.CourseIdentificationSystemDescriptorId)
            {
                source.CourseIdentificationSystemDescriptorId = target.CourseIdentificationSystemDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseIdentificationSystemDescriptor source, ICourseIdentificationSystemDescriptor target, Action<ICourseIdentificationSystemDescriptor, ICourseIdentificationSystemDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICourseIdentificationSystemDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseIdentificationSystemDescriptorId = source.CourseIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseIdentificationSystemDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CourseLevelCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseLevelCharacteristicDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseLevelCharacteristicDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICourseLevelCharacteristicDescriptor source, ICourseLevelCharacteristicDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseLevelCharacteristicDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseLevelCharacteristicDescriptorId != target.CourseLevelCharacteristicDescriptorId)
            {
                source.CourseLevelCharacteristicDescriptorId = target.CourseLevelCharacteristicDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseLevelCharacteristicDescriptor source, ICourseLevelCharacteristicDescriptor target, Action<ICourseLevelCharacteristicDescriptor, ICourseLevelCharacteristicDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICourseLevelCharacteristicDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseLevelCharacteristicDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseLevelCharacteristicDescriptorId = source.CourseLevelCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseLevelCharacteristicDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CourseOffering

namespace EdFi.Ods.Entities.Common.EdFi //.CourseOfferingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseOfferingMapper 
    {
        public static bool SynchronizeTo(this ICourseOffering source, ICourseOffering target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseOfferingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCourseCodeSupported)
                && target.CourseCode != source.CourseCode)
            {
                target.CourseCode = source.CourseCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInstructionalTimePlannedSupported)
                && target.InstructionalTimePlanned != source.InstructionalTimePlanned)
            {
                target.InstructionalTimePlanned = source.InstructionalTimePlanned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocalCourseTitleSupported)
                && target.LocalCourseTitle != source.LocalCourseTitle)
            {
                target.LocalCourseTitle = source.LocalCourseTitle;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCourseOfferingCourseLevelCharacteristicsSupported)
            {
                isModified |= 
                    source.CourseOfferingCourseLevelCharacteristics.SynchronizeCollectionTo(
                        target.CourseOfferingCourseLevelCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.CourseOffering = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseOfferingCourseLevelCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseOfferingCurriculumUsedsSupported)
            {
                isModified |= 
                    source.CourseOfferingCurriculumUseds.SynchronizeCollectionTo(
                        target.CourseOfferingCurriculumUseds, 
                        onChildAdded: child => 
                            {
                                child.CourseOffering = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseOfferingCurriculumUsedIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseOfferingOfferedGradeLevelsSupported)
            {
                isModified |= 
                    source.CourseOfferingOfferedGradeLevels.SynchronizeCollectionTo(
                        target.CourseOfferingOfferedGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.CourseOffering = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseOfferingOfferedGradeLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseOffering source, ICourseOffering target, Action<ICourseOffering, ICourseOffering> onMapped)
        {
            var sourceSynchSupport = source as ICourseOfferingSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseOfferingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCourseCodeSupported)
                target.CourseCode = source.CourseCode;
            else
                targetSynchSupport.IsCourseCodeSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsInstructionalTimePlannedSupported)
                target.InstructionalTimePlanned = source.InstructionalTimePlanned;
            else
                targetSynchSupport.IsInstructionalTimePlannedSupported = false;

            if (sourceSynchSupport.IsLocalCourseTitleSupported)
                target.LocalCourseTitle = source.LocalCourseTitle;
            else
                targetSynchSupport.IsLocalCourseTitleSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.SchoolResourceId = source.SchoolResourceId;
                target.SessionResourceId = source.SessionResourceId;
                target.SessionDiscriminator = source.SessionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCourseOfferingCourseLevelCharacteristicsSupported)
            {    
                targetSynchSupport.IsCourseOfferingCourseLevelCharacteristicIncluded = sourceSynchSupport.IsCourseOfferingCourseLevelCharacteristicIncluded;
                source.CourseOfferingCourseLevelCharacteristics.MapCollectionTo(target.CourseOfferingCourseLevelCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsCourseOfferingCourseLevelCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsCourseOfferingCurriculumUsedsSupported)
            {    
                targetSynchSupport.IsCourseOfferingCurriculumUsedIncluded = sourceSynchSupport.IsCourseOfferingCurriculumUsedIncluded;
                source.CourseOfferingCurriculumUseds.MapCollectionTo(target.CourseOfferingCurriculumUseds, target);
            }
            else
            {
                targetSynchSupport.IsCourseOfferingCurriculumUsedsSupported = false;
            }

            if (sourceSynchSupport.IsCourseOfferingOfferedGradeLevelsSupported)
            {    
                targetSynchSupport.IsCourseOfferingOfferedGradeLevelIncluded = sourceSynchSupport.IsCourseOfferingOfferedGradeLevelIncluded;
                source.CourseOfferingOfferedGradeLevels.MapCollectionTo(target.CourseOfferingOfferedGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsCourseOfferingOfferedGradeLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseOfferingSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCourseCodeSupported { get; set; }
        bool IsCourseOfferingCourseLevelCharacteristicsSupported { get; set; }
        bool IsCourseOfferingCurriculumUsedsSupported { get; set; }
        bool IsCourseOfferingOfferedGradeLevelsSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsInstructionalTimePlannedSupported { get; set; }
        bool IsLocalCourseTitleSupported { get; set; }
        Func<ICourseOfferingCourseLevelCharacteristic, bool> IsCourseOfferingCourseLevelCharacteristicIncluded { get; set; }
        Func<ICourseOfferingCurriculumUsed, bool> IsCourseOfferingCurriculumUsedIncluded { get; set; }
        Func<ICourseOfferingOfferedGradeLevel, bool> IsCourseOfferingOfferedGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseOfferingCourseLevelCharacteristicMapper 
    {
        public static bool SynchronizeTo(this ICourseOfferingCourseLevelCharacteristic source, ICourseOfferingCourseLevelCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseOfferingCourseLevelCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseLevelCharacteristicDescriptor != target.CourseLevelCharacteristicDescriptor)
            {
                source.CourseLevelCharacteristicDescriptor = target.CourseLevelCharacteristicDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseOfferingCourseLevelCharacteristic source, ICourseOfferingCourseLevelCharacteristic target, Action<ICourseOfferingCourseLevelCharacteristic, ICourseOfferingCourseLevelCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as ICourseOfferingCourseLevelCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseOfferingCourseLevelCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CourseLevelCharacteristicDescriptor = source.CourseLevelCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseOfferingCourseLevelCharacteristicSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseOfferingCurriculumUsedMapper 
    {
        public static bool SynchronizeTo(this ICourseOfferingCurriculumUsed source, ICourseOfferingCurriculumUsed target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseOfferingCurriculumUsedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CurriculumUsedDescriptor != target.CurriculumUsedDescriptor)
            {
                source.CurriculumUsedDescriptor = target.CurriculumUsedDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseOfferingCurriculumUsed source, ICourseOfferingCurriculumUsed target, Action<ICourseOfferingCurriculumUsed, ICourseOfferingCurriculumUsed> onMapped)
        {
            var sourceSynchSupport = source as ICourseOfferingCurriculumUsedSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseOfferingCurriculumUsedSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CurriculumUsedDescriptor = source.CurriculumUsedDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseOfferingCurriculumUsedSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseOfferingOfferedGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ICourseOfferingOfferedGradeLevel source, ICourseOfferingOfferedGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseOfferingOfferedGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseOfferingOfferedGradeLevel source, ICourseOfferingOfferedGradeLevel target, Action<ICourseOfferingOfferedGradeLevel, ICourseOfferingOfferedGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ICourseOfferingOfferedGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseOfferingOfferedGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseOfferingOfferedGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: CourseRepeatCodeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CourseRepeatCodeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseRepeatCodeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICourseRepeatCodeDescriptor source, ICourseRepeatCodeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseRepeatCodeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseRepeatCodeDescriptorId != target.CourseRepeatCodeDescriptorId)
            {
                source.CourseRepeatCodeDescriptorId = target.CourseRepeatCodeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICourseRepeatCodeDescriptor source, ICourseRepeatCodeDescriptor target, Action<ICourseRepeatCodeDescriptor, ICourseRepeatCodeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICourseRepeatCodeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseRepeatCodeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseRepeatCodeDescriptorId = source.CourseRepeatCodeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseRepeatCodeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CourseTranscript

namespace EdFi.Ods.Entities.Common.EdFi //.CourseTranscriptAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptMapper 
    {
        public static bool SynchronizeTo(this ICourseTranscript source, ICourseTranscript target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseTranscriptSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseAttemptResultDescriptor != target.CourseAttemptResultDescriptor)
            {
                source.CourseAttemptResultDescriptor = target.CourseAttemptResultDescriptor;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.CourseEducationOrganizationId != target.CourseEducationOrganizationId)
            {
                source.CourseEducationOrganizationId = target.CourseEducationOrganizationId;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAlternativeCourseCodeSupported)
                && target.AlternativeCourseCode != source.AlternativeCourseCode)
            {
                target.AlternativeCourseCode = source.AlternativeCourseCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAlternativeCourseTitleSupported)
                && target.AlternativeCourseTitle != source.AlternativeCourseTitle)
            {
                target.AlternativeCourseTitle = source.AlternativeCourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssigningOrganizationIdentificationCodeSupported)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditConversionSupported)
                && target.AttemptedCreditConversion != source.AttemptedCreditConversion)
            {
                target.AttemptedCreditConversion = source.AttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditsSupported)
                && target.AttemptedCredits != source.AttemptedCredits)
            {
                target.AttemptedCredits = source.AttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditTypeDescriptorSupported)
                && target.AttemptedCreditTypeDescriptor != source.AttemptedCreditTypeDescriptor)
            {
                target.AttemptedCreditTypeDescriptor = source.AttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseCatalogURLSupported)
                && target.CourseCatalogURL != source.CourseCatalogURL)
            {
                target.CourseCatalogURL = source.CourseCatalogURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseRepeatCodeDescriptorSupported)
                && target.CourseRepeatCodeDescriptor != source.CourseRepeatCodeDescriptor)
            {
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditConversionSupported)
                && target.EarnedCreditConversion != source.EarnedCreditConversion)
            {
                target.EarnedCreditConversion = source.EarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditsSupported)
                && target.EarnedCredits != source.EarnedCredits)
            {
                target.EarnedCredits = source.EarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditTypeDescriptorSupported)
                && target.EarnedCreditTypeDescriptor != source.EarnedCreditTypeDescriptor)
            {
                target.EarnedCreditTypeDescriptor = source.EarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExternalEducationOrganizationIdSupported)
                && target.ExternalEducationOrganizationId != source.ExternalEducationOrganizationId)
            {
                target.ExternalEducationOrganizationId = source.ExternalEducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalLetterGradeEarnedSupported)
                && target.FinalLetterGradeEarned != source.FinalLetterGradeEarned)
            {
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalNumericGradeEarnedSupported)
                && target.FinalNumericGradeEarned != source.FinalNumericGradeEarned)
            {
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMethodCreditEarnedDescriptorSupported)
                && target.MethodCreditEarnedDescriptor != source.MethodCreditEarnedDescriptor)
            {
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWhenTakenGradeLevelDescriptorSupported)
                && target.WhenTakenGradeLevelDescriptor != source.WhenTakenGradeLevelDescriptor)
            {
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCourseTranscriptAcademicSubjectsSupported)
            {
                isModified |= 
                    source.CourseTranscriptAcademicSubjects.SynchronizeCollectionTo(
                        target.CourseTranscriptAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseTranscriptAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseTranscriptAlternativeCourseIdentificationCodesSupported)
            {
                isModified |= 
                    source.CourseTranscriptAlternativeCourseIdentificationCodes.SynchronizeCollectionTo(
                        target.CourseTranscriptAlternativeCourseIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseTranscriptAlternativeCourseIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseTranscriptCreditCategoriesSupported)
            {
                isModified |= 
                    source.CourseTranscriptCreditCategories.SynchronizeCollectionTo(
                        target.CourseTranscriptCreditCategories, 
                        onChildAdded: child => 
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseTranscriptCreditCategoryIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCourseTranscriptEarnedAdditionalCreditsSupported)
            {
                isModified |= 
                    source.CourseTranscriptEarnedAdditionalCredits.SynchronizeCollectionTo(
                        target.CourseTranscriptEarnedAdditionalCredits, 
                        onChildAdded: child => 
                            {
                                child.CourseTranscript = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCourseTranscriptEarnedAdditionalCreditsIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseTranscript source, ICourseTranscript target, Action<ICourseTranscript, ICourseTranscript> onMapped)
        {
            var sourceSynchSupport = source as ICourseTranscriptSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseTranscriptSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseAttemptResultDescriptor = source.CourseAttemptResultDescriptor;
            target.CourseCode = source.CourseCode;
            target.CourseEducationOrganizationId = source.CourseEducationOrganizationId;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.StudentUniqueId = source.StudentUniqueId;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAlternativeCourseCodeSupported)
                target.AlternativeCourseCode = source.AlternativeCourseCode;
            else
                targetSynchSupport.IsAlternativeCourseCodeSupported = false;

            if (sourceSynchSupport.IsAlternativeCourseTitleSupported)
                target.AlternativeCourseTitle = source.AlternativeCourseTitle;
            else
                targetSynchSupport.IsAlternativeCourseTitleSupported = false;

            if (sourceSynchSupport.IsAssigningOrganizationIdentificationCodeSupported)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            else
                targetSynchSupport.IsAssigningOrganizationIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditConversionSupported)
                target.AttemptedCreditConversion = source.AttemptedCreditConversion;
            else
                targetSynchSupport.IsAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditsSupported)
                target.AttemptedCredits = source.AttemptedCredits;
            else
                targetSynchSupport.IsAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditTypeDescriptorSupported)
                target.AttemptedCreditTypeDescriptor = source.AttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseCatalogURLSupported)
                target.CourseCatalogURL = source.CourseCatalogURL;
            else
                targetSynchSupport.IsCourseCatalogURLSupported = false;

            if (sourceSynchSupport.IsCourseRepeatCodeDescriptorSupported)
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
            else
                targetSynchSupport.IsCourseRepeatCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            if (sourceSynchSupport.IsEarnedCreditConversionSupported)
                target.EarnedCreditConversion = source.EarnedCreditConversion;
            else
                targetSynchSupport.IsEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsEarnedCreditsSupported)
                target.EarnedCredits = source.EarnedCredits;
            else
                targetSynchSupport.IsEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsEarnedCreditTypeDescriptorSupported)
                target.EarnedCreditTypeDescriptor = source.EarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsExternalEducationOrganizationIdSupported)
                target.ExternalEducationOrganizationId = source.ExternalEducationOrganizationId;
            else
                targetSynchSupport.IsExternalEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsFinalLetterGradeEarnedSupported)
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
            else
                targetSynchSupport.IsFinalLetterGradeEarnedSupported = false;

            if (sourceSynchSupport.IsFinalNumericGradeEarnedSupported)
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
            else
                targetSynchSupport.IsFinalNumericGradeEarnedSupported = false;

            if (sourceSynchSupport.IsMethodCreditEarnedDescriptorSupported)
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;
            else
                targetSynchSupport.IsMethodCreditEarnedDescriptorSupported = false;

            if (sourceSynchSupport.IsWhenTakenGradeLevelDescriptorSupported)
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
            else
                targetSynchSupport.IsWhenTakenGradeLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.ExternalEducationOrganizationResourceId = source.ExternalEducationOrganizationResourceId;
                target.ExternalEducationOrganizationDiscriminator = source.ExternalEducationOrganizationDiscriminator;
                target.StudentAcademicRecordResourceId = source.StudentAcademicRecordResourceId;
                target.StudentAcademicRecordDiscriminator = source.StudentAcademicRecordDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCourseTranscriptAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsCourseTranscriptAcademicSubjectIncluded = sourceSynchSupport.IsCourseTranscriptAcademicSubjectIncluded;
                source.CourseTranscriptAcademicSubjects.MapCollectionTo(target.CourseTranscriptAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsCourseTranscriptAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsCourseTranscriptAlternativeCourseIdentificationCodesSupported)
            {    
                targetSynchSupport.IsCourseTranscriptAlternativeCourseIdentificationCodeIncluded = sourceSynchSupport.IsCourseTranscriptAlternativeCourseIdentificationCodeIncluded;
                source.CourseTranscriptAlternativeCourseIdentificationCodes.MapCollectionTo(target.CourseTranscriptAlternativeCourseIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsCourseTranscriptAlternativeCourseIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsCourseTranscriptCreditCategoriesSupported)
            {    
                targetSynchSupport.IsCourseTranscriptCreditCategoryIncluded = sourceSynchSupport.IsCourseTranscriptCreditCategoryIncluded;
                source.CourseTranscriptCreditCategories.MapCollectionTo(target.CourseTranscriptCreditCategories, target);
            }
            else
            {
                targetSynchSupport.IsCourseTranscriptCreditCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsCourseTranscriptEarnedAdditionalCreditsSupported)
            {    
                targetSynchSupport.IsCourseTranscriptEarnedAdditionalCreditsIncluded = sourceSynchSupport.IsCourseTranscriptEarnedAdditionalCreditsIncluded;
                source.CourseTranscriptEarnedAdditionalCredits.MapCollectionTo(target.CourseTranscriptEarnedAdditionalCredits, target);
            }
            else
            {
                targetSynchSupport.IsCourseTranscriptEarnedAdditionalCreditsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseTranscriptSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAlternativeCourseCodeSupported { get; set; }
        bool IsAlternativeCourseTitleSupported { get; set; }
        bool IsAssigningOrganizationIdentificationCodeSupported { get; set; }
        bool IsAttemptedCreditConversionSupported { get; set; }
        bool IsAttemptedCreditsSupported { get; set; }
        bool IsAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsCourseCatalogURLSupported { get; set; }
        bool IsCourseRepeatCodeDescriptorSupported { get; set; }
        bool IsCourseTitleSupported { get; set; }
        bool IsCourseTranscriptAcademicSubjectsSupported { get; set; }
        bool IsCourseTranscriptAlternativeCourseIdentificationCodesSupported { get; set; }
        bool IsCourseTranscriptCreditCategoriesSupported { get; set; }
        bool IsCourseTranscriptEarnedAdditionalCreditsSupported { get; set; }
        bool IsEarnedCreditConversionSupported { get; set; }
        bool IsEarnedCreditsSupported { get; set; }
        bool IsEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsExternalEducationOrganizationIdSupported { get; set; }
        bool IsFinalLetterGradeEarnedSupported { get; set; }
        bool IsFinalNumericGradeEarnedSupported { get; set; }
        bool IsMethodCreditEarnedDescriptorSupported { get; set; }
        bool IsWhenTakenGradeLevelDescriptorSupported { get; set; }
        Func<ICourseTranscriptAcademicSubject, bool> IsCourseTranscriptAcademicSubjectIncluded { get; set; }
        Func<ICourseTranscriptAlternativeCourseIdentificationCode, bool> IsCourseTranscriptAlternativeCourseIdentificationCodeIncluded { get; set; }
        Func<ICourseTranscriptCreditCategory, bool> IsCourseTranscriptCreditCategoryIncluded { get; set; }
        Func<ICourseTranscriptEarnedAdditionalCredits, bool> IsCourseTranscriptEarnedAdditionalCreditsIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this ICourseTranscriptAcademicSubject source, ICourseTranscriptAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseTranscriptAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseTranscriptAcademicSubject source, ICourseTranscriptAcademicSubject target, Action<ICourseTranscriptAcademicSubject, ICourseTranscriptAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as ICourseTranscriptAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseTranscriptAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseTranscriptAcademicSubjectSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptAlternativeCourseIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this ICourseTranscriptAlternativeCourseIdentificationCode source, ICourseTranscriptAlternativeCourseIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseTranscriptAlternativeCourseIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseIdentificationSystemDescriptor != target.CourseIdentificationSystemDescriptor)
            {
                source.CourseIdentificationSystemDescriptor = target.CourseIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssigningOrganizationIdentificationCodeSupported)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseCatalogURLSupported)
                && target.CourseCatalogURL != source.CourseCatalogURL)
            {
                target.CourseCatalogURL = source.CourseCatalogURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseTranscriptAlternativeCourseIdentificationCode source, ICourseTranscriptAlternativeCourseIdentificationCode target, Action<ICourseTranscriptAlternativeCourseIdentificationCode, ICourseTranscriptAlternativeCourseIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as ICourseTranscriptAlternativeCourseIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseTranscriptAlternativeCourseIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CourseIdentificationSystemDescriptor = source.CourseIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssigningOrganizationIdentificationCodeSupported)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            else
                targetSynchSupport.IsAssigningOrganizationIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsCourseCatalogURLSupported)
                target.CourseCatalogURL = source.CourseCatalogURL;
            else
                targetSynchSupport.IsCourseCatalogURLSupported = false;

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseTranscriptAlternativeCourseIdentificationCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssigningOrganizationIdentificationCodeSupported { get; set; }
        bool IsCourseCatalogURLSupported { get; set; }
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptCreditCategoryMapper 
    {
        public static bool SynchronizeTo(this ICourseTranscriptCreditCategory source, ICourseTranscriptCreditCategory target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseTranscriptCreditCategorySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CreditCategoryDescriptor != target.CreditCategoryDescriptor)
            {
                source.CreditCategoryDescriptor = target.CreditCategoryDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseTranscriptCreditCategory source, ICourseTranscriptCreditCategory target, Action<ICourseTranscriptCreditCategory, ICourseTranscriptCreditCategory> onMapped)
        {
            var sourceSynchSupport = source as ICourseTranscriptCreditCategorySynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseTranscriptCreditCategorySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CreditCategoryDescriptor = source.CreditCategoryDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseTranscriptCreditCategorySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CourseTranscriptEarnedAdditionalCreditsMapper 
    {
        public static bool SynchronizeTo(this ICourseTranscriptEarnedAdditionalCredits source, ICourseTranscriptEarnedAdditionalCredits target)
        {
            bool isModified = false;

            var sourceSupport = source as ICourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdditionalCreditTypeDescriptor != target.AdditionalCreditTypeDescriptor)
            {
                source.AdditionalCreditTypeDescriptor = target.AdditionalCreditTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCreditsSupported)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICourseTranscriptEarnedAdditionalCredits source, ICourseTranscriptEarnedAdditionalCredits target, Action<ICourseTranscriptEarnedAdditionalCredits, ICourseTranscriptEarnedAdditionalCredits> onMapped)
        {
            var sourceSynchSupport = source as ICourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;
            var targetSynchSupport = target as ICourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AdditionalCreditTypeDescriptor = source.AdditionalCreditTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCreditsSupported)
                target.Credits = source.Credits;
            else
                targetSynchSupport.IsCreditsSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCreditsSupported { get; set; }
    }
 
}
// Aggregate: Credential

namespace EdFi.Ods.Entities.Common.EdFi //.CredentialAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CredentialMapper 
    {
        public static bool SynchronizeTo(this ICredential source, ICredential target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialIdentifier != target.CredentialIdentifier)
            {
                source.CredentialIdentifier = target.CredentialIdentifier;
            }
            if (source.StateOfIssueStateAbbreviationDescriptor != target.StateOfIssueStateAbbreviationDescriptor)
            {
                source.StateOfIssueStateAbbreviationDescriptor = target.StateOfIssueStateAbbreviationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCredentialFieldDescriptorSupported)
                && target.CredentialFieldDescriptor != source.CredentialFieldDescriptor)
            {
                target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCredentialTypeDescriptorSupported)
                && target.CredentialTypeDescriptor != source.CredentialTypeDescriptor)
            {
                target.CredentialTypeDescriptor = source.CredentialTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveDateSupported)
                && target.EffectiveDate != source.EffectiveDate)
            {
                target.EffectiveDate = source.EffectiveDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExpirationDateSupported)
                && target.ExpirationDate != source.ExpirationDate)
            {
                target.ExpirationDate = source.ExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuanceDateSupported)
                && target.IssuanceDate != source.IssuanceDate)
            {
                target.IssuanceDate = source.IssuanceDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeachingCredentialBasisDescriptorSupported)
                && target.TeachingCredentialBasisDescriptor != source.TeachingCredentialBasisDescriptor)
            {
                target.TeachingCredentialBasisDescriptor = source.TeachingCredentialBasisDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeachingCredentialDescriptorSupported)
                && target.TeachingCredentialDescriptor != source.TeachingCredentialDescriptor)
            {
                target.TeachingCredentialDescriptor = source.TeachingCredentialDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCredentialAcademicSubjectsSupported)
            {
                isModified |= 
                    source.CredentialAcademicSubjects.SynchronizeCollectionTo(
                        target.CredentialAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.Credential = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCredentialAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCredentialEndorsementsSupported)
            {
                isModified |= 
                    source.CredentialEndorsements.SynchronizeCollectionTo(
                        target.CredentialEndorsements, 
                        onChildAdded: child => 
                            {
                                child.Credential = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCredentialEndorsementIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCredentialGradeLevelsSupported)
            {
                isModified |= 
                    source.CredentialGradeLevels.SynchronizeCollectionTo(
                        target.CredentialGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.Credential = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCredentialGradeLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICredential source, ICredential target, Action<ICredential, ICredential> onMapped)
        {
            var sourceSynchSupport = source as ICredentialSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCredentialFieldDescriptorSupported)
                target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;
            else
                targetSynchSupport.IsCredentialFieldDescriptorSupported = false;

            if (sourceSynchSupport.IsCredentialTypeDescriptorSupported)
                target.CredentialTypeDescriptor = source.CredentialTypeDescriptor;
            else
                targetSynchSupport.IsCredentialTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsEffectiveDateSupported)
                target.EffectiveDate = source.EffectiveDate;
            else
                targetSynchSupport.IsEffectiveDateSupported = false;

            if (sourceSynchSupport.IsExpirationDateSupported)
                target.ExpirationDate = source.ExpirationDate;
            else
                targetSynchSupport.IsExpirationDateSupported = false;

            if (sourceSynchSupport.IsIssuanceDateSupported)
                target.IssuanceDate = source.IssuanceDate;
            else
                targetSynchSupport.IsIssuanceDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsTeachingCredentialBasisDescriptorSupported)
                target.TeachingCredentialBasisDescriptor = source.TeachingCredentialBasisDescriptor;
            else
                targetSynchSupport.IsTeachingCredentialBasisDescriptorSupported = false;

            if (sourceSynchSupport.IsTeachingCredentialDescriptorSupported)
                target.TeachingCredentialDescriptor = source.TeachingCredentialDescriptor;
            else
                targetSynchSupport.IsTeachingCredentialDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCredentialAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsCredentialAcademicSubjectIncluded = sourceSynchSupport.IsCredentialAcademicSubjectIncluded;
                source.CredentialAcademicSubjects.MapCollectionTo(target.CredentialAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsCredentialAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsCredentialEndorsementsSupported)
            {    
                targetSynchSupport.IsCredentialEndorsementIncluded = sourceSynchSupport.IsCredentialEndorsementIncluded;
                source.CredentialEndorsements.MapCollectionTo(target.CredentialEndorsements, target);
            }
            else
            {
                targetSynchSupport.IsCredentialEndorsementsSupported = false;
            }

            if (sourceSynchSupport.IsCredentialGradeLevelsSupported)
            {    
                targetSynchSupport.IsCredentialGradeLevelIncluded = sourceSynchSupport.IsCredentialGradeLevelIncluded;
                source.CredentialGradeLevels.MapCollectionTo(target.CredentialGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsCredentialGradeLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCredentialAcademicSubjectsSupported { get; set; }
        bool IsCredentialEndorsementsSupported { get; set; }
        bool IsCredentialFieldDescriptorSupported { get; set; }
        bool IsCredentialGradeLevelsSupported { get; set; }
        bool IsCredentialTypeDescriptorSupported { get; set; }
        bool IsEffectiveDateSupported { get; set; }
        bool IsExpirationDateSupported { get; set; }
        bool IsIssuanceDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsTeachingCredentialBasisDescriptorSupported { get; set; }
        bool IsTeachingCredentialDescriptorSupported { get; set; }
        Func<ICredentialAcademicSubject, bool> IsCredentialAcademicSubjectIncluded { get; set; }
        Func<ICredentialEndorsement, bool> IsCredentialEndorsementIncluded { get; set; }
        Func<ICredentialGradeLevel, bool> IsCredentialGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CredentialAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this ICredentialAcademicSubject source, ICredentialAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICredentialAcademicSubject source, ICredentialAcademicSubject target, Action<ICredentialAcademicSubject, ICredentialAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as ICredentialAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialAcademicSubjectSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CredentialEndorsementMapper 
    {
        public static bool SynchronizeTo(this ICredentialEndorsement source, ICredentialEndorsement target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialEndorsementSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialEndorsementX != target.CredentialEndorsementX)
            {
                source.CredentialEndorsementX = target.CredentialEndorsementX;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICredentialEndorsement source, ICredentialEndorsement target, Action<ICredentialEndorsement, ICredentialEndorsement> onMapped)
        {
            var sourceSynchSupport = source as ICredentialEndorsementSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialEndorsementSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CredentialEndorsementX = source.CredentialEndorsementX;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialEndorsementSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CredentialGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ICredentialGradeLevel source, ICredentialGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ICredentialGradeLevel source, ICredentialGradeLevel target, Action<ICredentialGradeLevel, ICredentialGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ICredentialGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: CredentialFieldDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CredentialFieldDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CredentialFieldDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICredentialFieldDescriptor source, ICredentialFieldDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialFieldDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialFieldDescriptorId != target.CredentialFieldDescriptorId)
            {
                source.CredentialFieldDescriptorId = target.CredentialFieldDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialFieldDescriptor source, ICredentialFieldDescriptor target, Action<ICredentialFieldDescriptor, ICredentialFieldDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICredentialFieldDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialFieldDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialFieldDescriptorId = source.CredentialFieldDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialFieldDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CredentialTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CredentialTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CredentialTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICredentialTypeDescriptor source, ICredentialTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialTypeDescriptorId != target.CredentialTypeDescriptorId)
            {
                source.CredentialTypeDescriptorId = target.CredentialTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialTypeDescriptor source, ICredentialTypeDescriptor target, Action<ICredentialTypeDescriptor, ICredentialTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICredentialTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialTypeDescriptorId = source.CredentialTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CreditCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CreditCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CreditCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICreditCategoryDescriptor source, ICreditCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICreditCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CreditCategoryDescriptorId != target.CreditCategoryDescriptorId)
            {
                source.CreditCategoryDescriptorId = target.CreditCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICreditCategoryDescriptor source, ICreditCategoryDescriptor target, Action<ICreditCategoryDescriptor, ICreditCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICreditCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICreditCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CreditCategoryDescriptorId = source.CreditCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICreditCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CreditTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CreditTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CreditTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICreditTypeDescriptor source, ICreditTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICreditTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CreditTypeDescriptorId != target.CreditTypeDescriptorId)
            {
                source.CreditTypeDescriptorId = target.CreditTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICreditTypeDescriptor source, ICreditTypeDescriptor target, Action<ICreditTypeDescriptor, ICreditTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICreditTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICreditTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CreditTypeDescriptorId = source.CreditTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICreditTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CTEProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CTEProgramServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CTEProgramServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICTEProgramServiceDescriptor source, ICTEProgramServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICTEProgramServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CTEProgramServiceDescriptorId != target.CTEProgramServiceDescriptorId)
            {
                source.CTEProgramServiceDescriptorId = target.CTEProgramServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICTEProgramServiceDescriptor source, ICTEProgramServiceDescriptor target, Action<ICTEProgramServiceDescriptor, ICTEProgramServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICTEProgramServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICTEProgramServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CTEProgramServiceDescriptorId = source.CTEProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICTEProgramServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CurriculumUsedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.CurriculumUsedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CurriculumUsedDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICurriculumUsedDescriptor source, ICurriculumUsedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICurriculumUsedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CurriculumUsedDescriptorId != target.CurriculumUsedDescriptorId)
            {
                source.CurriculumUsedDescriptorId = target.CurriculumUsedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICurriculumUsedDescriptor source, ICurriculumUsedDescriptor target, Action<ICurriculumUsedDescriptor, ICurriculumUsedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICurriculumUsedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICurriculumUsedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CurriculumUsedDescriptorId = source.CurriculumUsedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICurriculumUsedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DeliveryMethodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DeliveryMethodDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DeliveryMethodDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDeliveryMethodDescriptor source, IDeliveryMethodDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDeliveryMethodDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DeliveryMethodDescriptorId != target.DeliveryMethodDescriptorId)
            {
                source.DeliveryMethodDescriptorId = target.DeliveryMethodDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDeliveryMethodDescriptor source, IDeliveryMethodDescriptor target, Action<IDeliveryMethodDescriptor, IDeliveryMethodDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDeliveryMethodDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDeliveryMethodDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DeliveryMethodDescriptorId = source.DeliveryMethodDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDeliveryMethodDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DiagnosisDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DiagnosisDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DiagnosisDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDiagnosisDescriptor source, IDiagnosisDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDiagnosisDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiagnosisDescriptorId != target.DiagnosisDescriptorId)
            {
                source.DiagnosisDescriptorId = target.DiagnosisDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDiagnosisDescriptor source, IDiagnosisDescriptor target, Action<IDiagnosisDescriptor, IDiagnosisDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDiagnosisDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDiagnosisDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DiagnosisDescriptorId = source.DiagnosisDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDiagnosisDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DiplomaLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DiplomaLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DiplomaLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDiplomaLevelDescriptor source, IDiplomaLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDiplomaLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiplomaLevelDescriptorId != target.DiplomaLevelDescriptorId)
            {
                source.DiplomaLevelDescriptorId = target.DiplomaLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDiplomaLevelDescriptor source, IDiplomaLevelDescriptor target, Action<IDiplomaLevelDescriptor, IDiplomaLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDiplomaLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDiplomaLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DiplomaLevelDescriptorId = source.DiplomaLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDiplomaLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DiplomaTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DiplomaTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DiplomaTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDiplomaTypeDescriptor source, IDiplomaTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDiplomaTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiplomaTypeDescriptorId != target.DiplomaTypeDescriptorId)
            {
                source.DiplomaTypeDescriptorId = target.DiplomaTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDiplomaTypeDescriptor source, IDiplomaTypeDescriptor target, Action<IDiplomaTypeDescriptor, IDiplomaTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDiplomaTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDiplomaTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DiplomaTypeDescriptorId = source.DiplomaTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDiplomaTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DisabilityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisabilityDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DisabilityDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDisabilityDescriptor source, IDisabilityDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisabilityDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptorId != target.DisabilityDescriptorId)
            {
                source.DisabilityDescriptorId = target.DisabilityDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDisabilityDescriptor source, IDisabilityDescriptor target, Action<IDisabilityDescriptor, IDisabilityDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDisabilityDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisabilityDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisabilityDescriptorId = source.DisabilityDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisabilityDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DisabilityDesignationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisabilityDesignationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DisabilityDesignationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDisabilityDesignationDescriptor source, IDisabilityDesignationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisabilityDesignationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptorId != target.DisabilityDesignationDescriptorId)
            {
                source.DisabilityDesignationDescriptorId = target.DisabilityDesignationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDisabilityDesignationDescriptor source, IDisabilityDesignationDescriptor target, Action<IDisabilityDesignationDescriptor, IDisabilityDesignationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDisabilityDesignationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisabilityDesignationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptorId = source.DisabilityDesignationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisabilityDesignationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DisabilityDeterminationSourceTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisabilityDeterminationSourceTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DisabilityDeterminationSourceTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDisabilityDeterminationSourceTypeDescriptor source, IDisabilityDeterminationSourceTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisabilityDeterminationSourceTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDeterminationSourceTypeDescriptorId != target.DisabilityDeterminationSourceTypeDescriptorId)
            {
                source.DisabilityDeterminationSourceTypeDescriptorId = target.DisabilityDeterminationSourceTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDisabilityDeterminationSourceTypeDescriptor source, IDisabilityDeterminationSourceTypeDescriptor target, Action<IDisabilityDeterminationSourceTypeDescriptor, IDisabilityDeterminationSourceTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDisabilityDeterminationSourceTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisabilityDeterminationSourceTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisabilityDeterminationSourceTypeDescriptorId = source.DisabilityDeterminationSourceTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisabilityDeterminationSourceTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DisciplineAction

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineActionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DisciplineActionMapper 
    {
        public static bool SynchronizeTo(this IDisciplineAction source, IDisciplineAction target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineActionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisciplineActionIdentifier != target.DisciplineActionIdentifier)
            {
                source.DisciplineActionIdentifier = target.DisciplineActionIdentifier;
            }
            if (source.DisciplineDate != target.DisciplineDate)
            {
                source.DisciplineDate = target.DisciplineDate;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsActualDisciplineActionLengthSupported)
                && target.ActualDisciplineActionLength != source.ActualDisciplineActionLength)
            {
                target.ActualDisciplineActionLength = source.ActualDisciplineActionLength;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssignmentSchoolIdSupported)
                && target.AssignmentSchoolId != source.AssignmentSchoolId)
            {
                target.AssignmentSchoolId = source.AssignmentSchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisciplineActionLengthSupported)
                && target.DisciplineActionLength != source.DisciplineActionLength)
            {
                target.DisciplineActionLength = source.DisciplineActionLength;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisciplineActionLengthDifferenceReasonDescriptorSupported)
                && target.DisciplineActionLengthDifferenceReasonDescriptor != source.DisciplineActionLengthDifferenceReasonDescriptor)
            {
                target.DisciplineActionLengthDifferenceReasonDescriptor = source.DisciplineActionLengthDifferenceReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIEPPlacementMeetingIndicatorSupported)
                && target.IEPPlacementMeetingIndicator != source.IEPPlacementMeetingIndicator)
            {
                target.IEPPlacementMeetingIndicator = source.IEPPlacementMeetingIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReceivedEducationServicesDuringExpulsionSupported)
                && target.ReceivedEducationServicesDuringExpulsion != source.ReceivedEducationServicesDuringExpulsion)
            {
                target.ReceivedEducationServicesDuringExpulsion = source.ReceivedEducationServicesDuringExpulsion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRelatedToZeroTolerancePolicySupported)
                && target.RelatedToZeroTolerancePolicy != source.RelatedToZeroTolerancePolicy)
            {
                target.RelatedToZeroTolerancePolicy = source.RelatedToZeroTolerancePolicy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResponsibilitySchoolIdSupported)
                && target.ResponsibilitySchoolId != source.ResponsibilitySchoolId)
            {
                target.ResponsibilitySchoolId = source.ResponsibilitySchoolId;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsDisciplineActionDisciplinesSupported)
            {
                isModified |= 
                    source.DisciplineActionDisciplines.SynchronizeCollectionTo(
                        target.DisciplineActionDisciplines, 
                        onChildAdded: child => 
                            {
                                child.DisciplineAction = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsDisciplineActionDisciplineIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsDisciplineActionStaffsSupported)
            {
                isModified |= 
                    source.DisciplineActionStaffs.SynchronizeCollectionTo(
                        target.DisciplineActionStaffs, 
                        onChildAdded: child => 
                            {
                                child.DisciplineAction = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsDisciplineActionStaffIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsDisciplineActionStudentDisciplineIncidentAssociationsSupported)
            {
                isModified |= 
                    source.DisciplineActionStudentDisciplineIncidentAssociations.SynchronizeCollectionTo(
                        target.DisciplineActionStudentDisciplineIncidentAssociations, 
                        onChildAdded: child => 
                            {
                                child.DisciplineAction = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsDisciplineActionStudentDisciplineIncidentAssociationIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IDisciplineAction source, IDisciplineAction target, Action<IDisciplineAction, IDisciplineAction> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineActionSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineActionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisciplineActionIdentifier = source.DisciplineActionIdentifier;
            target.DisciplineDate = source.DisciplineDate;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsActualDisciplineActionLengthSupported)
                target.ActualDisciplineActionLength = source.ActualDisciplineActionLength;
            else
                targetSynchSupport.IsActualDisciplineActionLengthSupported = false;

            if (sourceSynchSupport.IsAssignmentSchoolIdSupported)
                target.AssignmentSchoolId = source.AssignmentSchoolId;
            else
                targetSynchSupport.IsAssignmentSchoolIdSupported = false;

            if (sourceSynchSupport.IsDisciplineActionLengthSupported)
                target.DisciplineActionLength = source.DisciplineActionLength;
            else
                targetSynchSupport.IsDisciplineActionLengthSupported = false;

            if (sourceSynchSupport.IsDisciplineActionLengthDifferenceReasonDescriptorSupported)
                target.DisciplineActionLengthDifferenceReasonDescriptor = source.DisciplineActionLengthDifferenceReasonDescriptor;
            else
                targetSynchSupport.IsDisciplineActionLengthDifferenceReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsIEPPlacementMeetingIndicatorSupported)
                target.IEPPlacementMeetingIndicator = source.IEPPlacementMeetingIndicator;
            else
                targetSynchSupport.IsIEPPlacementMeetingIndicatorSupported = false;

            if (sourceSynchSupport.IsReceivedEducationServicesDuringExpulsionSupported)
                target.ReceivedEducationServicesDuringExpulsion = source.ReceivedEducationServicesDuringExpulsion;
            else
                targetSynchSupport.IsReceivedEducationServicesDuringExpulsionSupported = false;

            if (sourceSynchSupport.IsRelatedToZeroTolerancePolicySupported)
                target.RelatedToZeroTolerancePolicy = source.RelatedToZeroTolerancePolicy;
            else
                targetSynchSupport.IsRelatedToZeroTolerancePolicySupported = false;

            if (sourceSynchSupport.IsResponsibilitySchoolIdSupported)
                target.ResponsibilitySchoolId = source.ResponsibilitySchoolId;
            else
                targetSynchSupport.IsResponsibilitySchoolIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssignmentSchoolResourceId = source.AssignmentSchoolResourceId;
                target.ResponsibilitySchoolResourceId = source.ResponsibilitySchoolResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsDisciplineActionDisciplinesSupported)
            {    
                targetSynchSupport.IsDisciplineActionDisciplineIncluded = sourceSynchSupport.IsDisciplineActionDisciplineIncluded;
                source.DisciplineActionDisciplines.MapCollectionTo(target.DisciplineActionDisciplines, target);
            }
            else
            {
                targetSynchSupport.IsDisciplineActionDisciplinesSupported = false;
            }

            if (sourceSynchSupport.IsDisciplineActionStaffsSupported)
            {    
                targetSynchSupport.IsDisciplineActionStaffIncluded = sourceSynchSupport.IsDisciplineActionStaffIncluded;
                source.DisciplineActionStaffs.MapCollectionTo(target.DisciplineActionStaffs, target);
            }
            else
            {
                targetSynchSupport.IsDisciplineActionStaffsSupported = false;
            }

            if (sourceSynchSupport.IsDisciplineActionStudentDisciplineIncidentAssociationsSupported)
            {    
                targetSynchSupport.IsDisciplineActionStudentDisciplineIncidentAssociationIncluded = sourceSynchSupport.IsDisciplineActionStudentDisciplineIncidentAssociationIncluded;
                source.DisciplineActionStudentDisciplineIncidentAssociations.MapCollectionTo(target.DisciplineActionStudentDisciplineIncidentAssociations, target);
            }
            else
            {
                targetSynchSupport.IsDisciplineActionStudentDisciplineIncidentAssociationsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineActionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsActualDisciplineActionLengthSupported { get; set; }
        bool IsAssignmentSchoolIdSupported { get; set; }
        bool IsDisciplineActionDisciplinesSupported { get; set; }
        bool IsDisciplineActionLengthSupported { get; set; }
        bool IsDisciplineActionLengthDifferenceReasonDescriptorSupported { get; set; }
        bool IsDisciplineActionStaffsSupported { get; set; }
        bool IsDisciplineActionStudentDisciplineIncidentAssociationsSupported { get; set; }
        bool IsIEPPlacementMeetingIndicatorSupported { get; set; }
        bool IsReceivedEducationServicesDuringExpulsionSupported { get; set; }
        bool IsRelatedToZeroTolerancePolicySupported { get; set; }
        bool IsResponsibilitySchoolIdSupported { get; set; }
        Func<IDisciplineActionDiscipline, bool> IsDisciplineActionDisciplineIncluded { get; set; }
        Func<IDisciplineActionStaff, bool> IsDisciplineActionStaffIncluded { get; set; }
        Func<IDisciplineActionStudentDisciplineIncidentAssociation, bool> IsDisciplineActionStudentDisciplineIncidentAssociationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class DisciplineActionDisciplineMapper 
    {
        public static bool SynchronizeTo(this IDisciplineActionDiscipline source, IDisciplineActionDiscipline target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineActionDisciplineSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisciplineDescriptor != target.DisciplineDescriptor)
            {
                source.DisciplineDescriptor = target.DisciplineDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IDisciplineActionDiscipline source, IDisciplineActionDiscipline target, Action<IDisciplineActionDiscipline, IDisciplineActionDiscipline> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineActionDisciplineSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineActionDisciplineSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisciplineDescriptor = source.DisciplineDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineActionDisciplineSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class DisciplineActionStaffMapper 
    {
        public static bool SynchronizeTo(this IDisciplineActionStaff source, IDisciplineActionStaff target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineActionStaffSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IDisciplineActionStaff source, IDisciplineActionStaff target, Action<IDisciplineActionStaff, IDisciplineActionStaff> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineActionStaffSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineActionStaffSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineActionStaffSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class DisciplineActionStudentDisciplineIncidentAssociationMapper 
    {
        public static bool SynchronizeTo(this IDisciplineActionStudentDisciplineIncidentAssociation source, IDisciplineActionStudentDisciplineIncidentAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineActionStudentDisciplineIncidentAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IncidentIdentifier != target.IncidentIdentifier)
            {
                source.IncidentIdentifier = target.IncidentIdentifier;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IDisciplineActionStudentDisciplineIncidentAssociation source, IDisciplineActionStudentDisciplineIncidentAssociation target, Action<IDisciplineActionStudentDisciplineIncidentAssociation, IDisciplineActionStudentDisciplineIncidentAssociation> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineActionStudentDisciplineIncidentAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineActionStudentDisciplineIncidentAssociationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentDisciplineIncidentAssociationResourceId = source.StudentDisciplineIncidentAssociationResourceId;
                target.StudentDisciplineIncidentAssociationDiscriminator = source.StudentDisciplineIncidentAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineActionStudentDisciplineIncidentAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: DisciplineActionLengthDifferenceReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineActionLengthDifferenceReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DisciplineActionLengthDifferenceReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDisciplineActionLengthDifferenceReasonDescriptor source, IDisciplineActionLengthDifferenceReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineActionLengthDifferenceReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisciplineActionLengthDifferenceReasonDescriptorId != target.DisciplineActionLengthDifferenceReasonDescriptorId)
            {
                source.DisciplineActionLengthDifferenceReasonDescriptorId = target.DisciplineActionLengthDifferenceReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDisciplineActionLengthDifferenceReasonDescriptor source, IDisciplineActionLengthDifferenceReasonDescriptor target, Action<IDisciplineActionLengthDifferenceReasonDescriptor, IDisciplineActionLengthDifferenceReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineActionLengthDifferenceReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineActionLengthDifferenceReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisciplineActionLengthDifferenceReasonDescriptorId = source.DisciplineActionLengthDifferenceReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineActionLengthDifferenceReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DisciplineDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DisciplineDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDisciplineDescriptor source, IDisciplineDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisciplineDescriptorId != target.DisciplineDescriptorId)
            {
                source.DisciplineDescriptorId = target.DisciplineDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDisciplineDescriptor source, IDisciplineDescriptor target, Action<IDisciplineDescriptor, IDisciplineDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisciplineDescriptorId = source.DisciplineDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DisciplineIncident

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineIncidentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentMapper 
    {
        public static bool SynchronizeTo(this IDisciplineIncident source, IDisciplineIncident target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineIncidentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IncidentIdentifier != target.IncidentIdentifier)
            {
                source.IncidentIdentifier = target.IncidentIdentifier;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCaseNumberSupported)
                && target.CaseNumber != source.CaseNumber)
            {
                target.CaseNumber = source.CaseNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIncidentCostSupported)
                && target.IncidentCost != source.IncidentCost)
            {
                target.IncidentCost = source.IncidentCost;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIncidentDateSupported)
                && target.IncidentDate != source.IncidentDate)
            {
                target.IncidentDate = source.IncidentDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIncidentDescriptionSupported)
                && target.IncidentDescription != source.IncidentDescription)
            {
                target.IncidentDescription = source.IncidentDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIncidentLocationDescriptorSupported)
                && target.IncidentLocationDescriptor != source.IncidentLocationDescriptor)
            {
                target.IncidentLocationDescriptor = source.IncidentLocationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIncidentTimeSupported)
                && target.IncidentTime != source.IncidentTime)
            {
                target.IncidentTime = source.IncidentTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReportedToLawEnforcementSupported)
                && target.ReportedToLawEnforcement != source.ReportedToLawEnforcement)
            {
                target.ReportedToLawEnforcement = source.ReportedToLawEnforcement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReporterDescriptionDescriptorSupported)
                && target.ReporterDescriptionDescriptor != source.ReporterDescriptionDescriptor)
            {
                target.ReporterDescriptionDescriptor = source.ReporterDescriptionDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReporterNameSupported)
                && target.ReporterName != source.ReporterName)
            {
                target.ReporterName = source.ReporterName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffUniqueIdSupported)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsDisciplineIncidentBehaviorsSupported)
            {
                isModified |= 
                    source.DisciplineIncidentBehaviors.SynchronizeCollectionTo(
                        target.DisciplineIncidentBehaviors, 
                        onChildAdded: child => 
                            {
                                child.DisciplineIncident = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsDisciplineIncidentBehaviorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsDisciplineIncidentExternalParticipantsSupported)
            {
                isModified |= 
                    source.DisciplineIncidentExternalParticipants.SynchronizeCollectionTo(
                        target.DisciplineIncidentExternalParticipants, 
                        onChildAdded: child => 
                            {
                                child.DisciplineIncident = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsDisciplineIncidentExternalParticipantIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsDisciplineIncidentWeaponsSupported)
            {
                isModified |= 
                    source.DisciplineIncidentWeapons.SynchronizeCollectionTo(
                        target.DisciplineIncidentWeapons, 
                        onChildAdded: child => 
                            {
                                child.DisciplineIncident = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsDisciplineIncidentWeaponIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IDisciplineIncident source, IDisciplineIncident target, Action<IDisciplineIncident, IDisciplineIncident> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineIncidentSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineIncidentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCaseNumberSupported)
                target.CaseNumber = source.CaseNumber;
            else
                targetSynchSupport.IsCaseNumberSupported = false;

            if (sourceSynchSupport.IsIncidentCostSupported)
                target.IncidentCost = source.IncidentCost;
            else
                targetSynchSupport.IsIncidentCostSupported = false;

            if (sourceSynchSupport.IsIncidentDateSupported)
                target.IncidentDate = source.IncidentDate;
            else
                targetSynchSupport.IsIncidentDateSupported = false;

            if (sourceSynchSupport.IsIncidentDescriptionSupported)
                target.IncidentDescription = source.IncidentDescription;
            else
                targetSynchSupport.IsIncidentDescriptionSupported = false;

            if (sourceSynchSupport.IsIncidentLocationDescriptorSupported)
                target.IncidentLocationDescriptor = source.IncidentLocationDescriptor;
            else
                targetSynchSupport.IsIncidentLocationDescriptorSupported = false;

            if (sourceSynchSupport.IsIncidentTimeSupported)
                target.IncidentTime = source.IncidentTime;
            else
                targetSynchSupport.IsIncidentTimeSupported = false;

            if (sourceSynchSupport.IsReportedToLawEnforcementSupported)
                target.ReportedToLawEnforcement = source.ReportedToLawEnforcement;
            else
                targetSynchSupport.IsReportedToLawEnforcementSupported = false;

            if (sourceSynchSupport.IsReporterDescriptionDescriptorSupported)
                target.ReporterDescriptionDescriptor = source.ReporterDescriptionDescriptor;
            else
                targetSynchSupport.IsReporterDescriptionDescriptorSupported = false;

            if (sourceSynchSupport.IsReporterNameSupported)
                target.ReporterName = source.ReporterName;
            else
                targetSynchSupport.IsReporterNameSupported = false;

            if (sourceSynchSupport.IsStaffUniqueIdSupported)
                target.StaffUniqueId = source.StaffUniqueId;
            else
                targetSynchSupport.IsStaffUniqueIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsDisciplineIncidentBehaviorsSupported)
            {    
                targetSynchSupport.IsDisciplineIncidentBehaviorIncluded = sourceSynchSupport.IsDisciplineIncidentBehaviorIncluded;
                source.DisciplineIncidentBehaviors.MapCollectionTo(target.DisciplineIncidentBehaviors, target);
            }
            else
            {
                targetSynchSupport.IsDisciplineIncidentBehaviorsSupported = false;
            }

            if (sourceSynchSupport.IsDisciplineIncidentExternalParticipantsSupported)
            {    
                targetSynchSupport.IsDisciplineIncidentExternalParticipantIncluded = sourceSynchSupport.IsDisciplineIncidentExternalParticipantIncluded;
                source.DisciplineIncidentExternalParticipants.MapCollectionTo(target.DisciplineIncidentExternalParticipants, target);
            }
            else
            {
                targetSynchSupport.IsDisciplineIncidentExternalParticipantsSupported = false;
            }

            if (sourceSynchSupport.IsDisciplineIncidentWeaponsSupported)
            {    
                targetSynchSupport.IsDisciplineIncidentWeaponIncluded = sourceSynchSupport.IsDisciplineIncidentWeaponIncluded;
                source.DisciplineIncidentWeapons.MapCollectionTo(target.DisciplineIncidentWeapons, target);
            }
            else
            {
                targetSynchSupport.IsDisciplineIncidentWeaponsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineIncidentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCaseNumberSupported { get; set; }
        bool IsDisciplineIncidentBehaviorsSupported { get; set; }
        bool IsDisciplineIncidentExternalParticipantsSupported { get; set; }
        bool IsDisciplineIncidentWeaponsSupported { get; set; }
        bool IsIncidentCostSupported { get; set; }
        bool IsIncidentDateSupported { get; set; }
        bool IsIncidentDescriptionSupported { get; set; }
        bool IsIncidentLocationDescriptorSupported { get; set; }
        bool IsIncidentTimeSupported { get; set; }
        bool IsReportedToLawEnforcementSupported { get; set; }
        bool IsReporterDescriptionDescriptorSupported { get; set; }
        bool IsReporterNameSupported { get; set; }
        bool IsStaffUniqueIdSupported { get; set; }
        Func<IDisciplineIncidentBehavior, bool> IsDisciplineIncidentBehaviorIncluded { get; set; }
        Func<IDisciplineIncidentExternalParticipant, bool> IsDisciplineIncidentExternalParticipantIncluded { get; set; }
        Func<IDisciplineIncidentWeapon, bool> IsDisciplineIncidentWeaponIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentBehaviorMapper 
    {
        public static bool SynchronizeTo(this IDisciplineIncidentBehavior source, IDisciplineIncidentBehavior target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineIncidentBehaviorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BehaviorDescriptor != target.BehaviorDescriptor)
            {
                source.BehaviorDescriptor = target.BehaviorDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBehaviorDetailedDescriptionSupported)
                && target.BehaviorDetailedDescription != source.BehaviorDetailedDescription)
            {
                target.BehaviorDetailedDescription = source.BehaviorDetailedDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IDisciplineIncidentBehavior source, IDisciplineIncidentBehavior target, Action<IDisciplineIncidentBehavior, IDisciplineIncidentBehavior> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineIncidentBehaviorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineIncidentBehaviorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BehaviorDescriptor = source.BehaviorDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBehaviorDetailedDescriptionSupported)
                target.BehaviorDetailedDescription = source.BehaviorDetailedDescription;
            else
                targetSynchSupport.IsBehaviorDetailedDescriptionSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineIncidentBehaviorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBehaviorDetailedDescriptionSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentExternalParticipantMapper 
    {
        public static bool SynchronizeTo(this IDisciplineIncidentExternalParticipant source, IDisciplineIncidentExternalParticipant target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineIncidentExternalParticipantSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisciplineIncidentParticipationCodeDescriptor != target.DisciplineIncidentParticipationCodeDescriptor)
            {
                source.DisciplineIncidentParticipationCodeDescriptor = target.DisciplineIncidentParticipationCodeDescriptor;
            }
            if (source.FirstName != target.FirstName)
            {
                source.FirstName = target.FirstName;
            }
            if (source.LastSurname != target.LastSurname)
            {
                source.LastSurname = target.LastSurname;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IDisciplineIncidentExternalParticipant source, IDisciplineIncidentExternalParticipant target, Action<IDisciplineIncidentExternalParticipant, IDisciplineIncidentExternalParticipant> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineIncidentExternalParticipantSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineIncidentExternalParticipantSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisciplineIncidentParticipationCodeDescriptor = source.DisciplineIncidentParticipationCodeDescriptor;
            target.FirstName = source.FirstName;
            target.LastSurname = source.LastSurname;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineIncidentExternalParticipantSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentWeaponMapper 
    {
        public static bool SynchronizeTo(this IDisciplineIncidentWeapon source, IDisciplineIncidentWeapon target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineIncidentWeaponSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.WeaponDescriptor != target.WeaponDescriptor)
            {
                source.WeaponDescriptor = target.WeaponDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IDisciplineIncidentWeapon source, IDisciplineIncidentWeapon target, Action<IDisciplineIncidentWeapon, IDisciplineIncidentWeapon> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineIncidentWeaponSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineIncidentWeaponSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.WeaponDescriptor = source.WeaponDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineIncidentWeaponSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: DisciplineIncidentParticipationCodeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.DisciplineIncidentParticipationCodeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DisciplineIncidentParticipationCodeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDisciplineIncidentParticipationCodeDescriptor source, IDisciplineIncidentParticipationCodeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDisciplineIncidentParticipationCodeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisciplineIncidentParticipationCodeDescriptorId != target.DisciplineIncidentParticipationCodeDescriptorId)
            {
                source.DisciplineIncidentParticipationCodeDescriptorId = target.DisciplineIncidentParticipationCodeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDisciplineIncidentParticipationCodeDescriptor source, IDisciplineIncidentParticipationCodeDescriptor target, Action<IDisciplineIncidentParticipationCodeDescriptor, IDisciplineIncidentParticipationCodeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDisciplineIncidentParticipationCodeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDisciplineIncidentParticipationCodeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DisciplineIncidentParticipationCodeDescriptorId = source.DisciplineIncidentParticipationCodeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDisciplineIncidentParticipationCodeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EducationalEnvironmentDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationalEnvironmentDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationalEnvironmentDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEducationalEnvironmentDescriptor source, IEducationalEnvironmentDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationalEnvironmentDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationalEnvironmentDescriptorId != target.EducationalEnvironmentDescriptorId)
            {
                source.EducationalEnvironmentDescriptorId = target.EducationalEnvironmentDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationalEnvironmentDescriptor source, IEducationalEnvironmentDescriptor target, Action<IEducationalEnvironmentDescriptor, IEducationalEnvironmentDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEducationalEnvironmentDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationalEnvironmentDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationalEnvironmentDescriptorId = source.EducationalEnvironmentDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationalEnvironmentDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EducationContent

namespace EdFi.Ods.Entities.Common.EdFi //.EducationContentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationContentMapper 
    {
        public static bool SynchronizeTo(this IEducationContent source, IEducationContent target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationContentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContentIdentifier != target.ContentIdentifier)
            {
                source.ContentIdentifier = target.ContentIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAdditionalAuthorsIndicatorSupported)
                && target.AdditionalAuthorsIndicator != source.AdditionalAuthorsIndicator)
            {
                target.AdditionalAuthorsIndicator = source.AdditionalAuthorsIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsContentClassDescriptorSupported)
                && target.ContentClassDescriptor != source.ContentClassDescriptor)
            {
                target.ContentClassDescriptor = source.ContentClassDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCostSupported)
                && target.Cost != source.Cost)
            {
                target.Cost = source.Cost;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCostRateDescriptorSupported)
                && target.CostRateDescriptor != source.CostRateDescriptor)
            {
                target.CostRateDescriptor = source.CostRateDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInteractivityStyleDescriptorSupported)
                && target.InteractivityStyleDescriptor != source.InteractivityStyleDescriptor)
            {
                target.InteractivityStyleDescriptor = source.InteractivityStyleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLearningResourceMetadataURISupported)
                && target.LearningResourceMetadataURI != source.LearningResourceMetadataURI)
            {
                target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLearningStandardIdSupported)
                && target.LearningStandardId != source.LearningStandardId)
            {
                target.LearningStandardId = source.LearningStandardId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationDateSupported)
                && target.PublicationDate != source.PublicationDate)
            {
                target.PublicationDate = source.PublicationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationYearSupported)
                && target.PublicationYear != source.PublicationYear)
            {
                target.PublicationYear = source.PublicationYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublisherSupported)
                && target.Publisher != source.Publisher)
            {
                target.Publisher = source.Publisher;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTimeRequiredSupported)
                && target.TimeRequired != source.TimeRequired)
            {
                target.TimeRequired = source.TimeRequired;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsUseRightsURLSupported)
                && target.UseRightsURL != source.UseRightsURL)
            {
                target.UseRightsURL = source.UseRightsURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsVersionSupported)
                && target.Version != source.Version)
            {
                target.Version = source.Version;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEducationContentAppropriateGradeLevelsSupported)
            {
                isModified |= 
                    source.EducationContentAppropriateGradeLevels.SynchronizeCollectionTo(
                        target.EducationContentAppropriateGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.EducationContent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationContentAppropriateGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationContentAppropriateSexesSupported)
            {
                isModified |= 
                    source.EducationContentAppropriateSexes.SynchronizeCollectionTo(
                        target.EducationContentAppropriateSexes, 
                        onChildAdded: child => 
                            {
                                child.EducationContent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationContentAppropriateSexIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationContentAuthorsSupported)
            {
                isModified |= 
                    source.EducationContentAuthors.SynchronizeCollectionTo(
                        target.EducationContentAuthors, 
                        onChildAdded: child => 
                            {
                                child.EducationContent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationContentAuthorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationContentDerivativeSourceEducationContentsSupported)
            {
                isModified |= 
                    source.EducationContentDerivativeSourceEducationContents.SynchronizeCollectionTo(
                        target.EducationContentDerivativeSourceEducationContents, 
                        onChildAdded: child => 
                            {
                                child.EducationContent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationContentDerivativeSourceEducationContentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported)
            {
                isModified |= 
                    source.EducationContentDerivativeSourceLearningResourceMetadataURIs.SynchronizeCollectionTo(
                        target.EducationContentDerivativeSourceLearningResourceMetadataURIs, 
                        onChildAdded: child => 
                            {
                                child.EducationContent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationContentDerivativeSourceURIsSupported)
            {
                isModified |= 
                    source.EducationContentDerivativeSourceURIs.SynchronizeCollectionTo(
                        target.EducationContentDerivativeSourceURIs, 
                        onChildAdded: child => 
                            {
                                child.EducationContent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationContentDerivativeSourceURIIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEducationContentLanguagesSupported)
            {
                isModified |= 
                    source.EducationContentLanguages.SynchronizeCollectionTo(
                        target.EducationContentLanguages, 
                        onChildAdded: child => 
                            {
                                child.EducationContent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationContentLanguageIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationContent source, IEducationContent target, Action<IEducationContent, IEducationContent> onMapped)
        {
            var sourceSynchSupport = source as IEducationContentSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationContentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContentIdentifier = source.ContentIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAdditionalAuthorsIndicatorSupported)
                target.AdditionalAuthorsIndicator = source.AdditionalAuthorsIndicator;
            else
                targetSynchSupport.IsAdditionalAuthorsIndicatorSupported = false;

            if (sourceSynchSupport.IsContentClassDescriptorSupported)
                target.ContentClassDescriptor = source.ContentClassDescriptor;
            else
                targetSynchSupport.IsContentClassDescriptorSupported = false;

            if (sourceSynchSupport.IsCostSupported)
                target.Cost = source.Cost;
            else
                targetSynchSupport.IsCostSupported = false;

            if (sourceSynchSupport.IsCostRateDescriptorSupported)
                target.CostRateDescriptor = source.CostRateDescriptor;
            else
                targetSynchSupport.IsCostRateDescriptorSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsInteractivityStyleDescriptorSupported)
                target.InteractivityStyleDescriptor = source.InteractivityStyleDescriptor;
            else
                targetSynchSupport.IsInteractivityStyleDescriptorSupported = false;

            if (sourceSynchSupport.IsLearningResourceMetadataURISupported)
                target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;
            else
                targetSynchSupport.IsLearningResourceMetadataURISupported = false;

            if (sourceSynchSupport.IsLearningStandardIdSupported)
                target.LearningStandardId = source.LearningStandardId;
            else
                targetSynchSupport.IsLearningStandardIdSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPublicationDateSupported)
                target.PublicationDate = source.PublicationDate;
            else
                targetSynchSupport.IsPublicationDateSupported = false;

            if (sourceSynchSupport.IsPublicationYearSupported)
                target.PublicationYear = source.PublicationYear;
            else
                targetSynchSupport.IsPublicationYearSupported = false;

            if (sourceSynchSupport.IsPublisherSupported)
                target.Publisher = source.Publisher;
            else
                targetSynchSupport.IsPublisherSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            if (sourceSynchSupport.IsTimeRequiredSupported)
                target.TimeRequired = source.TimeRequired;
            else
                targetSynchSupport.IsTimeRequiredSupported = false;

            if (sourceSynchSupport.IsUseRightsURLSupported)
                target.UseRightsURL = source.UseRightsURL;
            else
                targetSynchSupport.IsUseRightsURLSupported = false;

            if (sourceSynchSupport.IsVersionSupported)
                target.Version = source.Version;
            else
                targetSynchSupport.IsVersionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEducationContentAppropriateGradeLevelsSupported)
            {    
                targetSynchSupport.IsEducationContentAppropriateGradeLevelIncluded = sourceSynchSupport.IsEducationContentAppropriateGradeLevelIncluded;
                source.EducationContentAppropriateGradeLevels.MapCollectionTo(target.EducationContentAppropriateGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsEducationContentAppropriateGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsEducationContentAppropriateSexesSupported)
            {    
                targetSynchSupport.IsEducationContentAppropriateSexIncluded = sourceSynchSupport.IsEducationContentAppropriateSexIncluded;
                source.EducationContentAppropriateSexes.MapCollectionTo(target.EducationContentAppropriateSexes, target);
            }
            else
            {
                targetSynchSupport.IsEducationContentAppropriateSexesSupported = false;
            }

            if (sourceSynchSupport.IsEducationContentAuthorsSupported)
            {    
                targetSynchSupport.IsEducationContentAuthorIncluded = sourceSynchSupport.IsEducationContentAuthorIncluded;
                source.EducationContentAuthors.MapCollectionTo(target.EducationContentAuthors, target);
            }
            else
            {
                targetSynchSupport.IsEducationContentAuthorsSupported = false;
            }

            if (sourceSynchSupport.IsEducationContentDerivativeSourceEducationContentsSupported)
            {    
                targetSynchSupport.IsEducationContentDerivativeSourceEducationContentIncluded = sourceSynchSupport.IsEducationContentDerivativeSourceEducationContentIncluded;
                source.EducationContentDerivativeSourceEducationContents.MapCollectionTo(target.EducationContentDerivativeSourceEducationContents, target);
            }
            else
            {
                targetSynchSupport.IsEducationContentDerivativeSourceEducationContentsSupported = false;
            }

            if (sourceSynchSupport.IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported)
            {    
                targetSynchSupport.IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded = sourceSynchSupport.IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded;
                source.EducationContentDerivativeSourceLearningResourceMetadataURIs.MapCollectionTo(target.EducationContentDerivativeSourceLearningResourceMetadataURIs, target);
            }
            else
            {
                targetSynchSupport.IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported = false;
            }

            if (sourceSynchSupport.IsEducationContentDerivativeSourceURIsSupported)
            {    
                targetSynchSupport.IsEducationContentDerivativeSourceURIIncluded = sourceSynchSupport.IsEducationContentDerivativeSourceURIIncluded;
                source.EducationContentDerivativeSourceURIs.MapCollectionTo(target.EducationContentDerivativeSourceURIs, target);
            }
            else
            {
                targetSynchSupport.IsEducationContentDerivativeSourceURIsSupported = false;
            }

            if (sourceSynchSupport.IsEducationContentLanguagesSupported)
            {    
                targetSynchSupport.IsEducationContentLanguageIncluded = sourceSynchSupport.IsEducationContentLanguageIncluded;
                source.EducationContentLanguages.MapCollectionTo(target.EducationContentLanguages, target);
            }
            else
            {
                targetSynchSupport.IsEducationContentLanguagesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationContentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAdditionalAuthorsIndicatorSupported { get; set; }
        bool IsContentClassDescriptorSupported { get; set; }
        bool IsCostSupported { get; set; }
        bool IsCostRateDescriptorSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEducationContentAppropriateGradeLevelsSupported { get; set; }
        bool IsEducationContentAppropriateSexesSupported { get; set; }
        bool IsEducationContentAuthorsSupported { get; set; }
        bool IsEducationContentDerivativeSourceEducationContentsSupported { get; set; }
        bool IsEducationContentDerivativeSourceLearningResourceMetadataURIsSupported { get; set; }
        bool IsEducationContentDerivativeSourceURIsSupported { get; set; }
        bool IsEducationContentLanguagesSupported { get; set; }
        bool IsInteractivityStyleDescriptorSupported { get; set; }
        bool IsLearningResourceMetadataURISupported { get; set; }
        bool IsLearningStandardIdSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPublicationDateSupported { get; set; }
        bool IsPublicationYearSupported { get; set; }
        bool IsPublisherSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
        bool IsTimeRequiredSupported { get; set; }
        bool IsUseRightsURLSupported { get; set; }
        bool IsVersionSupported { get; set; }
        Func<IEducationContentAppropriateGradeLevel, bool> IsEducationContentAppropriateGradeLevelIncluded { get; set; }
        Func<IEducationContentAppropriateSex, bool> IsEducationContentAppropriateSexIncluded { get; set; }
        Func<IEducationContentAuthor, bool> IsEducationContentAuthorIncluded { get; set; }
        Func<IEducationContentDerivativeSourceEducationContent, bool> IsEducationContentDerivativeSourceEducationContentIncluded { get; set; }
        Func<IEducationContentDerivativeSourceLearningResourceMetadataURI, bool> IsEducationContentDerivativeSourceLearningResourceMetadataURIIncluded { get; set; }
        Func<IEducationContentDerivativeSourceURI, bool> IsEducationContentDerivativeSourceURIIncluded { get; set; }
        Func<IEducationContentLanguage, bool> IsEducationContentLanguageIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationContentAppropriateGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IEducationContentAppropriateGradeLevel source, IEducationContentAppropriateGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationContentAppropriateGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationContentAppropriateGradeLevel source, IEducationContentAppropriateGradeLevel target, Action<IEducationContentAppropriateGradeLevel, IEducationContentAppropriateGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IEducationContentAppropriateGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationContentAppropriateGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationContentAppropriateGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationContentAppropriateSexMapper 
    {
        public static bool SynchronizeTo(this IEducationContentAppropriateSex source, IEducationContentAppropriateSex target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationContentAppropriateSexSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SexDescriptor != target.SexDescriptor)
            {
                source.SexDescriptor = target.SexDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationContentAppropriateSex source, IEducationContentAppropriateSex target, Action<IEducationContentAppropriateSex, IEducationContentAppropriateSex> onMapped)
        {
            var sourceSynchSupport = source as IEducationContentAppropriateSexSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationContentAppropriateSexSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationContentAppropriateSexSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationContentAuthorMapper 
    {
        public static bool SynchronizeTo(this IEducationContentAuthor source, IEducationContentAuthor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationContentAuthorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Author != target.Author)
            {
                source.Author = target.Author;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationContentAuthor source, IEducationContentAuthor target, Action<IEducationContentAuthor, IEducationContentAuthor> onMapped)
        {
            var sourceSynchSupport = source as IEducationContentAuthorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationContentAuthorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Author = source.Author;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationContentAuthorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationContentDerivativeSourceEducationContentMapper 
    {
        public static bool SynchronizeTo(this IEducationContentDerivativeSourceEducationContent source, IEducationContentDerivativeSourceEducationContent target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationContentDerivativeSourceEducationContentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DerivativeSourceContentIdentifier != target.DerivativeSourceContentIdentifier)
            {
                source.DerivativeSourceContentIdentifier = target.DerivativeSourceContentIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationContentDerivativeSourceEducationContent source, IEducationContentDerivativeSourceEducationContent target, Action<IEducationContentDerivativeSourceEducationContent, IEducationContentDerivativeSourceEducationContent> onMapped)
        {
            var sourceSynchSupport = source as IEducationContentDerivativeSourceEducationContentSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationContentDerivativeSourceEducationContentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DerivativeSourceContentIdentifier = source.DerivativeSourceContentIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.DerivativeSourceEducationContentResourceId = source.DerivativeSourceEducationContentResourceId;
                target.DerivativeSourceEducationContentDiscriminator = source.DerivativeSourceEducationContentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationContentDerivativeSourceEducationContentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationContentDerivativeSourceLearningResourceMetadataURIMapper 
    {
        public static bool SynchronizeTo(this IEducationContentDerivativeSourceLearningResourceMetadataURI source, IEducationContentDerivativeSourceLearningResourceMetadataURI target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationContentDerivativeSourceLearningResourceMetadataURISynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DerivativeSourceLearningResourceMetadataURI != target.DerivativeSourceLearningResourceMetadataURI)
            {
                source.DerivativeSourceLearningResourceMetadataURI = target.DerivativeSourceLearningResourceMetadataURI;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationContentDerivativeSourceLearningResourceMetadataURI source, IEducationContentDerivativeSourceLearningResourceMetadataURI target, Action<IEducationContentDerivativeSourceLearningResourceMetadataURI, IEducationContentDerivativeSourceLearningResourceMetadataURI> onMapped)
        {
            var sourceSynchSupport = source as IEducationContentDerivativeSourceLearningResourceMetadataURISynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationContentDerivativeSourceLearningResourceMetadataURISynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DerivativeSourceLearningResourceMetadataURI = source.DerivativeSourceLearningResourceMetadataURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationContentDerivativeSourceLearningResourceMetadataURISynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationContentDerivativeSourceURIMapper 
    {
        public static bool SynchronizeTo(this IEducationContentDerivativeSourceURI source, IEducationContentDerivativeSourceURI target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationContentDerivativeSourceURISynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DerivativeSourceURI != target.DerivativeSourceURI)
            {
                source.DerivativeSourceURI = target.DerivativeSourceURI;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationContentDerivativeSourceURI source, IEducationContentDerivativeSourceURI target, Action<IEducationContentDerivativeSourceURI, IEducationContentDerivativeSourceURI> onMapped)
        {
            var sourceSynchSupport = source as IEducationContentDerivativeSourceURISynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationContentDerivativeSourceURISynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DerivativeSourceURI = source.DerivativeSourceURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationContentDerivativeSourceURISynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationContentLanguageMapper 
    {
        public static bool SynchronizeTo(this IEducationContentLanguage source, IEducationContentLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationContentLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationContentLanguage source, IEducationContentLanguage target, Action<IEducationContentLanguage, IEducationContentLanguage> onMapped)
        {
            var sourceSynchSupport = source as IEducationContentLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationContentLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationContentLanguageSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: EducationOrganization

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationAddressMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationAddress source, IEducationOrganizationAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressPeriodsSupported)
            {
                isModified |= 
                    source.EducationOrganizationAddressPeriods.SynchronizeCollectionTo(
                        target.EducationOrganizationAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.EducationOrganizationAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEducationOrganizationAddressPeriodIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationAddress source, IEducationOrganizationAddress target, Action<IEducationOrganizationAddress, IEducationOrganizationAddress> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEducationOrganizationAddressPeriodsSupported)
            {    
                targetSynchSupport.IsEducationOrganizationAddressPeriodIncluded = sourceSynchSupport.IsEducationOrganizationAddressPeriodIncluded;
                source.EducationOrganizationAddressPeriods.MapCollectionTo(target.EducationOrganizationAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressPeriodsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsEducationOrganizationAddressPeriodsSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        Func<IEducationOrganizationAddressPeriod, bool> IsEducationOrganizationAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationAddressPeriod source, IEducationOrganizationAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationAddressPeriod source, IEducationOrganizationAddressPeriod target, Action<IEducationOrganizationAddressPeriod, IEducationOrganizationAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationAddressPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationCategoryMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationCategory source, IEducationOrganizationCategory target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationCategorySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationCategoryDescriptor != target.EducationOrganizationCategoryDescriptor)
            {
                source.EducationOrganizationCategoryDescriptor = target.EducationOrganizationCategoryDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationCategory source, IEducationOrganizationCategory target, Action<IEducationOrganizationCategory, IEducationOrganizationCategory> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationCategorySynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationCategorySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationCategoryDescriptor = source.EducationOrganizationCategoryDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationCategorySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationIdentificationCode source, IEducationOrganizationIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationIdentificationSystemDescriptor != target.EducationOrganizationIdentificationSystemDescriptor)
            {
                source.EducationOrganizationIdentificationSystemDescriptor = target.EducationOrganizationIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationIdentificationCode source, IEducationOrganizationIdentificationCode target, Action<IEducationOrganizationIdentificationCode, IEducationOrganizationIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationIdentificationSystemDescriptor = source.EducationOrganizationIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationIdentificationCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationInstitutionTelephoneMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationInstitutionTelephone source, IEducationOrganizationInstitutionTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationInstitutionTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InstitutionTelephoneNumberTypeDescriptor != target.InstitutionTelephoneNumberTypeDescriptor)
            {
                source.InstitutionTelephoneNumberTypeDescriptor = target.InstitutionTelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsTelephoneNumberSupported)
                && target.TelephoneNumber != source.TelephoneNumber)
            {
                target.TelephoneNumber = source.TelephoneNumber;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationInstitutionTelephone source, IEducationOrganizationInstitutionTelephone target, Action<IEducationOrganizationInstitutionTelephone, IEducationOrganizationInstitutionTelephone> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationInstitutionTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationInstitutionTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.InstitutionTelephoneNumberTypeDescriptor = source.InstitutionTelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsTelephoneNumberSupported)
                target.TelephoneNumber = source.TelephoneNumber;
            else
                targetSynchSupport.IsTelephoneNumberSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationInstitutionTelephoneSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsTelephoneNumberSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationInternationalAddressMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationInternationalAddress source, IEducationOrganizationInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationInternationalAddress source, IEducationOrganizationInternationalAddress target, Action<IEducationOrganizationInternationalAddress, IEducationOrganizationInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationInternationalAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationCategoryDescriptor source, IEducationOrganizationCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationCategoryDescriptorId != target.EducationOrganizationCategoryDescriptorId)
            {
                source.EducationOrganizationCategoryDescriptorId = target.EducationOrganizationCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationCategoryDescriptor source, IEducationOrganizationCategoryDescriptor target, Action<IEducationOrganizationCategoryDescriptor, IEducationOrganizationCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationCategoryDescriptorId = source.EducationOrganizationCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationIdentificationSystemDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationIdentificationSystemDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationIdentificationSystemDescriptor source, IEducationOrganizationIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationIdentificationSystemDescriptorId != target.EducationOrganizationIdentificationSystemDescriptorId)
            {
                source.EducationOrganizationIdentificationSystemDescriptorId = target.EducationOrganizationIdentificationSystemDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationIdentificationSystemDescriptor source, IEducationOrganizationIdentificationSystemDescriptor target, Action<IEducationOrganizationIdentificationSystemDescriptor, IEducationOrganizationIdentificationSystemDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationIdentificationSystemDescriptorId = source.EducationOrganizationIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationIdentificationSystemDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationInterventionPrescriptionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationInterventionPrescriptionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationInterventionPrescriptionAssociationMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationInterventionPrescriptionAssociation source, IEducationOrganizationInterventionPrescriptionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationInterventionPrescriptionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.InterventionPrescriptionEducationOrganizationId != target.InterventionPrescriptionEducationOrganizationId)
            {
                source.InterventionPrescriptionEducationOrganizationId = target.InterventionPrescriptionEducationOrganizationId;
            }
            if (source.InterventionPrescriptionIdentificationCode != target.InterventionPrescriptionIdentificationCode)
            {
                source.InterventionPrescriptionIdentificationCode = target.InterventionPrescriptionIdentificationCode;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationInterventionPrescriptionAssociation source, IEducationOrganizationInterventionPrescriptionAssociation target, Action<IEducationOrganizationInterventionPrescriptionAssociation, IEducationOrganizationInterventionPrescriptionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationInterventionPrescriptionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationInterventionPrescriptionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionPrescriptionEducationOrganizationId = source.InterventionPrescriptionEducationOrganizationId;
            target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.InterventionPrescriptionResourceId = source.InterventionPrescriptionResourceId;
                target.InterventionPrescriptionDiscriminator = source.InterventionPrescriptionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationInterventionPrescriptionAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationNetwork

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationNetworkAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationNetworkMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationNetwork source, IEducationOrganizationNetwork target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationNetworkSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationNetworkId != target.EducationOrganizationNetworkId)
            {
                source.EducationOrganizationNetworkId = target.EducationOrganizationNetworkId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNetworkPurposeDescriptorSupported)
                && target.NetworkPurposeDescriptor != source.NetworkPurposeDescriptor)
            {
                target.NetworkPurposeDescriptor = source.NetworkPurposeDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationNetwork source, IEducationOrganizationNetwork target, Action<IEducationOrganizationNetwork, IEducationOrganizationNetwork> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationNetworkSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationNetworkSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationNetworkId = source.EducationOrganizationNetworkId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsNetworkPurposeDescriptorSupported)
                target.NetworkPurposeDescriptor = source.NetworkPurposeDescriptor;
            else
                targetSynchSupport.IsNetworkPurposeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationNetworkSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsNetworkPurposeDescriptorSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
    }
 
}
// Aggregate: EducationOrganizationNetworkAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationNetworkAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationNetworkAssociationMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationNetworkAssociation source, IEducationOrganizationNetworkAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationNetworkAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationNetworkId != target.EducationOrganizationNetworkId)
            {
                source.EducationOrganizationNetworkId = target.EducationOrganizationNetworkId;
            }
            if (source.MemberEducationOrganizationId != target.MemberEducationOrganizationId)
            {
                source.MemberEducationOrganizationId = target.MemberEducationOrganizationId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationNetworkAssociation source, IEducationOrganizationNetworkAssociation target, Action<IEducationOrganizationNetworkAssociation, IEducationOrganizationNetworkAssociation> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationNetworkAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationNetworkAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationNetworkId = source.EducationOrganizationNetworkId;
            target.MemberEducationOrganizationId = source.MemberEducationOrganizationId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationNetworkResourceId = source.EducationOrganizationNetworkResourceId;
                target.MemberEducationOrganizationResourceId = source.MemberEducationOrganizationResourceId;
                target.MemberEducationOrganizationDiscriminator = source.MemberEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationNetworkAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: EducationOrganizationPeerAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.EducationOrganizationPeerAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationOrganizationPeerAssociationMapper 
    {
        public static bool SynchronizeTo(this IEducationOrganizationPeerAssociation source, IEducationOrganizationPeerAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationOrganizationPeerAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.PeerEducationOrganizationId != target.PeerEducationOrganizationId)
            {
                source.PeerEducationOrganizationId = target.PeerEducationOrganizationId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationOrganizationPeerAssociation source, IEducationOrganizationPeerAssociation target, Action<IEducationOrganizationPeerAssociation, IEducationOrganizationPeerAssociation> onMapped)
        {
            var sourceSynchSupport = source as IEducationOrganizationPeerAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationOrganizationPeerAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.PeerEducationOrganizationId = source.PeerEducationOrganizationId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.PeerEducationOrganizationResourceId = source.PeerEducationOrganizationResourceId;
                target.PeerEducationOrganizationDiscriminator = source.PeerEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationOrganizationPeerAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: EducationPlanDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EducationPlanDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationPlanDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEducationPlanDescriptor source, IEducationPlanDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationPlanDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationPlanDescriptorId != target.EducationPlanDescriptorId)
            {
                source.EducationPlanDescriptorId = target.EducationPlanDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducationPlanDescriptor source, IEducationPlanDescriptor target, Action<IEducationPlanDescriptor, IEducationPlanDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEducationPlanDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationPlanDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationPlanDescriptorId = source.EducationPlanDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationPlanDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EducationServiceCenter

namespace EdFi.Ods.Entities.Common.EdFi //.EducationServiceCenterAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducationServiceCenterMapper 
    {
        public static bool SynchronizeTo(this IEducationServiceCenter source, IEducationServiceCenter target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducationServiceCenterSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationServiceCenterId != target.EducationServiceCenterId)
            {
                source.EducationServiceCenterId = target.EducationServiceCenterId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsStateEducationAgencyIdSupported)
                && target.StateEducationAgencyId != source.StateEducationAgencyId)
            {
                target.StateEducationAgencyId = source.StateEducationAgencyId;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IEducationServiceCenter source, IEducationServiceCenter target, Action<IEducationServiceCenter, IEducationServiceCenter> onMapped)
        {
            var sourceSynchSupport = source as IEducationServiceCenterSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducationServiceCenterSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationServiceCenterId = source.EducationServiceCenterId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsStateEducationAgencyIdSupported)
                target.StateEducationAgencyId = source.StateEducationAgencyId;
            else
                targetSynchSupport.IsStateEducationAgencyIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StateEducationAgencyResourceId = source.StateEducationAgencyResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducationServiceCenterSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsStateEducationAgencyIdSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
    }
 
}
// Aggregate: ElectronicMailTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ElectronicMailTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ElectronicMailTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IElectronicMailTypeDescriptor source, IElectronicMailTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IElectronicMailTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailTypeDescriptorId != target.ElectronicMailTypeDescriptorId)
            {
                source.ElectronicMailTypeDescriptorId = target.ElectronicMailTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IElectronicMailTypeDescriptor source, IElectronicMailTypeDescriptor target, Action<IElectronicMailTypeDescriptor, IElectronicMailTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IElectronicMailTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IElectronicMailTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ElectronicMailTypeDescriptorId = source.ElectronicMailTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IElectronicMailTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EmploymentStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EmploymentStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEmploymentStatusDescriptor source, IEmploymentStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EmploymentStatusDescriptorId != target.EmploymentStatusDescriptorId)
            {
                source.EmploymentStatusDescriptorId = target.EmploymentStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentStatusDescriptor source, IEmploymentStatusDescriptor target, Action<IEmploymentStatusDescriptor, IEmploymentStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EmploymentStatusDescriptorId = source.EmploymentStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EntryGradeLevelReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EntryGradeLevelReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EntryGradeLevelReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEntryGradeLevelReasonDescriptor source, IEntryGradeLevelReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEntryGradeLevelReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EntryGradeLevelReasonDescriptorId != target.EntryGradeLevelReasonDescriptorId)
            {
                source.EntryGradeLevelReasonDescriptorId = target.EntryGradeLevelReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEntryGradeLevelReasonDescriptor source, IEntryGradeLevelReasonDescriptor target, Action<IEntryGradeLevelReasonDescriptor, IEntryGradeLevelReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEntryGradeLevelReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEntryGradeLevelReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EntryGradeLevelReasonDescriptorId = source.EntryGradeLevelReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEntryGradeLevelReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EntryTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EntryTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EntryTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEntryTypeDescriptor source, IEntryTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEntryTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EntryTypeDescriptorId != target.EntryTypeDescriptorId)
            {
                source.EntryTypeDescriptorId = target.EntryTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEntryTypeDescriptor source, IEntryTypeDescriptor target, Action<IEntryTypeDescriptor, IEntryTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEntryTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEntryTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EntryTypeDescriptorId = source.EntryTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEntryTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EventCircumstanceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.EventCircumstanceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EventCircumstanceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEventCircumstanceDescriptor source, IEventCircumstanceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEventCircumstanceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EventCircumstanceDescriptorId != target.EventCircumstanceDescriptorId)
            {
                source.EventCircumstanceDescriptorId = target.EventCircumstanceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEventCircumstanceDescriptor source, IEventCircumstanceDescriptor target, Action<IEventCircumstanceDescriptor, IEventCircumstanceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEventCircumstanceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEventCircumstanceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EventCircumstanceDescriptorId = source.EventCircumstanceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEventCircumstanceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ExitWithdrawTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ExitWithdrawTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ExitWithdrawTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IExitWithdrawTypeDescriptor source, IExitWithdrawTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IExitWithdrawTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ExitWithdrawTypeDescriptorId != target.ExitWithdrawTypeDescriptorId)
            {
                source.ExitWithdrawTypeDescriptorId = target.ExitWithdrawTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IExitWithdrawTypeDescriptor source, IExitWithdrawTypeDescriptor target, Action<IExitWithdrawTypeDescriptor, IExitWithdrawTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IExitWithdrawTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IExitWithdrawTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ExitWithdrawTypeDescriptorId = source.ExitWithdrawTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IExitWithdrawTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: FeederSchoolAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.FeederSchoolAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FeederSchoolAssociationMapper 
    {
        public static bool SynchronizeTo(this IFeederSchoolAssociation source, IFeederSchoolAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IFeederSchoolAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FeederSchoolId != target.FeederSchoolId)
            {
                source.FeederSchoolId = target.FeederSchoolId;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFeederRelationshipDescriptionSupported)
                && target.FeederRelationshipDescription != source.FeederRelationshipDescription)
            {
                target.FeederRelationshipDescription = source.FeederRelationshipDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IFeederSchoolAssociation source, IFeederSchoolAssociation target, Action<IFeederSchoolAssociation, IFeederSchoolAssociation> onMapped)
        {
            var sourceSynchSupport = source as IFeederSchoolAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IFeederSchoolAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FeederSchoolId = source.FeederSchoolId;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsFeederRelationshipDescriptionSupported)
                target.FeederRelationshipDescription = source.FeederRelationshipDescription;
            else
                targetSynchSupport.IsFeederRelationshipDescriptionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.FeederSchoolResourceId = source.FeederSchoolResourceId;
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFeederSchoolAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsFeederRelationshipDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GeneralStudentProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.GeneralStudentProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GeneralStudentProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IGeneralStudentProgramAssociation source, IGeneralStudentProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IGeneralStudentProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGeneralStudentProgramAssociation source, IGeneralStudentProgramAssociation target, Action<IGeneralStudentProgramAssociation, IGeneralStudentProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IGeneralStudentProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IGeneralStudentProgramAssociationSynchronizationSourceSupport;

            // =======================================================================================
            // Detect and map derived types (compiler is unable to correctly link to appropriate 
            //      mapping methods when there are base/derived interfaces and a concrete base class)
            // ---------------------------------------------------------------------------------------
            // Map derived type StudentCTEProgramAssociation
            var sourceStudentCTEProgramAssociation = source as IStudentCTEProgramAssociation;

            if (sourceStudentCTEProgramAssociation != null)
            {
                sourceStudentCTEProgramAssociation.MapDerivedTo((IStudentCTEProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentHomelessProgramAssociation
            var sourceStudentHomelessProgramAssociation = source as IStudentHomelessProgramAssociation;

            if (sourceStudentHomelessProgramAssociation != null)
            {
                sourceStudentHomelessProgramAssociation.MapDerivedTo((IStudentHomelessProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentLanguageInstructionProgramAssociation
            var sourceStudentLanguageInstructionProgramAssociation = source as IStudentLanguageInstructionProgramAssociation;

            if (sourceStudentLanguageInstructionProgramAssociation != null)
            {
                sourceStudentLanguageInstructionProgramAssociation.MapDerivedTo((IStudentLanguageInstructionProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentMigrantEducationProgramAssociation
            var sourceStudentMigrantEducationProgramAssociation = source as IStudentMigrantEducationProgramAssociation;

            if (sourceStudentMigrantEducationProgramAssociation != null)
            {
                sourceStudentMigrantEducationProgramAssociation.MapDerivedTo((IStudentMigrantEducationProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentNeglectedOrDelinquentProgramAssociation
            var sourceStudentNeglectedOrDelinquentProgramAssociation = source as IStudentNeglectedOrDelinquentProgramAssociation;

            if (sourceStudentNeglectedOrDelinquentProgramAssociation != null)
            {
                sourceStudentNeglectedOrDelinquentProgramAssociation.MapDerivedTo((IStudentNeglectedOrDelinquentProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentProgramAssociation
            var sourceStudentProgramAssociation = source as IStudentProgramAssociation;

            if (sourceStudentProgramAssociation != null)
            {
                sourceStudentProgramAssociation.MapDerivedTo((IStudentProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentSchoolFoodServiceProgramAssociation
            var sourceStudentSchoolFoodServiceProgramAssociation = source as IStudentSchoolFoodServiceProgramAssociation;

            if (sourceStudentSchoolFoodServiceProgramAssociation != null)
            {
                sourceStudentSchoolFoodServiceProgramAssociation.MapDerivedTo((IStudentSchoolFoodServiceProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentSpecialEducationProgramAssociation
            var sourceStudentSpecialEducationProgramAssociation = source as IStudentSpecialEducationProgramAssociation;

            if (sourceStudentSpecialEducationProgramAssociation != null)
            {
                sourceStudentSpecialEducationProgramAssociation.MapDerivedTo((IStudentSpecialEducationProgramAssociation) target, onMapped);
                return;
            }
            // Map derived type StudentTitleIPartAProgramAssociation
            var sourceStudentTitleIPartAProgramAssociation = source as IStudentTitleIPartAProgramAssociation;

            if (sourceStudentTitleIPartAProgramAssociation != null)
            {
                sourceStudentTitleIPartAProgramAssociation.MapDerivedTo((IStudentTitleIPartAProgramAssociation) target, onMapped);
                return;
            }
            // =======================================================================================

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGeneralStudentProgramAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GeneralStudentProgramAssociationParticipationStatusMapper 
    {
        public static bool SynchronizeTo(this IGeneralStudentProgramAssociationParticipationStatus source, IGeneralStudentProgramAssociationParticipationStatus target)
        {
            bool isModified = false;

            var sourceSupport = source as IGeneralStudentProgramAssociationParticipationStatusSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParticipationStatusDescriptorSupported)
                && target.ParticipationStatusDescriptor != source.ParticipationStatusDescriptor)
            {
                target.ParticipationStatusDescriptor = source.ParticipationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStatusBeginDateSupported)
                && target.StatusBeginDate != source.StatusBeginDate)
            {
                target.StatusBeginDate = source.StatusBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStatusEndDateSupported)
                && target.StatusEndDate != source.StatusEndDate)
            {
                target.StatusEndDate = source.StatusEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGeneralStudentProgramAssociationParticipationStatus source, IGeneralStudentProgramAssociationParticipationStatus target, Action<IGeneralStudentProgramAssociationParticipationStatus, IGeneralStudentProgramAssociationParticipationStatus> onMapped)
        {
            var sourceSynchSupport = source as IGeneralStudentProgramAssociationParticipationStatusSynchronizationSourceSupport;
            var targetSynchSupport = target as IGeneralStudentProgramAssociationParticipationStatusSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsParticipationStatusDescriptorSupported)
                target.ParticipationStatusDescriptor = source.ParticipationStatusDescriptor;
            else
                targetSynchSupport.IsParticipationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsStatusBeginDateSupported)
                target.StatusBeginDate = source.StatusBeginDate;
            else
                targetSynchSupport.IsStatusBeginDateSupported = false;

            if (sourceSynchSupport.IsStatusEndDateSupported)
                target.StatusEndDate = source.StatusEndDate;
            else
                targetSynchSupport.IsStatusEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGeneralStudentProgramAssociationParticipationStatusSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDesignatedBySupported { get; set; }
        bool IsParticipationStatusDescriptorSupported { get; set; }
        bool IsStatusBeginDateSupported { get; set; }
        bool IsStatusEndDateSupported { get; set; }
    }
 
}
// Aggregate: Grade

namespace EdFi.Ods.Entities.Common.EdFi //.GradeAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradeMapper 
    {
        public static bool SynchronizeTo(this IGrade source, IGrade target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradeSynchronizationSourceSupport;

            // Allow PK column updates on Grade
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.GradeTypeDescriptor != source.GradeTypeDescriptor)
                || (target.GradingPeriodDescriptor != source.GradingPeriodDescriptor)
                || (target.GradingPeriodSchoolYear != source.GradingPeriodSchoolYear)
                || (target.GradingPeriodSequence != source.GradingPeriodSequence)
                || (target.LocalCourseCode != source.LocalCourseCode)
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (target.SectionIdentifier != source.SectionIdentifier)
                || (target.SessionName != source.SessionName)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.GradeTypeDescriptor != target.GradeTypeDescriptor)
            {
                source.GradeTypeDescriptor = target.GradeTypeDescriptor;
            }
            if (source.GradingPeriodDescriptor != target.GradingPeriodDescriptor)
            {
                source.GradingPeriodDescriptor = target.GradingPeriodDescriptor;
            }
            if (source.GradingPeriodSchoolYear != target.GradingPeriodSchoolYear)
            {
                source.GradingPeriodSchoolYear = target.GradingPeriodSchoolYear;
            }
            if (source.GradingPeriodSequence != target.GradingPeriodSequence)
            {
                source.GradingPeriodSequence = target.GradingPeriodSequence;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDiagnosticStatementSupported)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLetterGradeEarnedSupported)
                && target.LetterGradeEarned != source.LetterGradeEarned)
            {
                target.LetterGradeEarned = source.LetterGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeEarnedSupported)
                && target.NumericGradeEarned != source.NumericGradeEarned)
            {
                target.NumericGradeEarned = source.NumericGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceBaseConversionDescriptorSupported)
                && target.PerformanceBaseConversionDescriptor != source.PerformanceBaseConversionDescriptor)
            {
                target.PerformanceBaseConversionDescriptor = source.PerformanceBaseConversionDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsGradeLearningStandardGradesSupported)
            {
                isModified |= 
                    source.GradeLearningStandardGrades.SynchronizeCollectionTo(
                        target.GradeLearningStandardGrades, 
                        onChildAdded: child => 
                            {
                                child.Grade = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGradeLearningStandardGradeIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGrade source, IGrade target, Action<IGrade, IGrade> onMapped)
        {
            var sourceSynchSupport = source as IGradeSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradeSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.GradeTypeDescriptor = source.GradeTypeDescriptor;
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;
            target.GradingPeriodSequence = source.GradingPeriodSequence;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDiagnosticStatementSupported)
                target.DiagnosticStatement = source.DiagnosticStatement;
            else
                targetSynchSupport.IsDiagnosticStatementSupported = false;

            if (sourceSynchSupport.IsLetterGradeEarnedSupported)
                target.LetterGradeEarned = source.LetterGradeEarned;
            else
                targetSynchSupport.IsLetterGradeEarnedSupported = false;

            if (sourceSynchSupport.IsNumericGradeEarnedSupported)
                target.NumericGradeEarned = source.NumericGradeEarned;
            else
                targetSynchSupport.IsNumericGradeEarnedSupported = false;

            if (sourceSynchSupport.IsPerformanceBaseConversionDescriptorSupported)
                target.PerformanceBaseConversionDescriptor = source.PerformanceBaseConversionDescriptor;
            else
                targetSynchSupport.IsPerformanceBaseConversionDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.StudentSectionAssociationResourceId = source.StudentSectionAssociationResourceId;
                target.StudentSectionAssociationDiscriminator = source.StudentSectionAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsGradeLearningStandardGradesSupported)
            {    
                targetSynchSupport.IsGradeLearningStandardGradeIncluded = sourceSynchSupport.IsGradeLearningStandardGradeIncluded;
                source.GradeLearningStandardGrades.MapCollectionTo(target.GradeLearningStandardGrades, target);
            }
            else
            {
                targetSynchSupport.IsGradeLearningStandardGradesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDiagnosticStatementSupported { get; set; }
        bool IsGradeLearningStandardGradesSupported { get; set; }
        bool IsLetterGradeEarnedSupported { get; set; }
        bool IsNumericGradeEarnedSupported { get; set; }
        bool IsPerformanceBaseConversionDescriptorSupported { get; set; }
        Func<IGradeLearningStandardGrade, bool> IsGradeLearningStandardGradeIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GradeLearningStandardGradeMapper 
    {
        public static bool SynchronizeTo(this IGradeLearningStandardGrade source, IGradeLearningStandardGrade target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradeLearningStandardGradeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardId != target.LearningStandardId)
            {
                source.LearningStandardId = target.LearningStandardId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDiagnosticStatementSupported)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLetterGradeEarnedSupported)
                && target.LetterGradeEarned != source.LetterGradeEarned)
            {
                target.LetterGradeEarned = source.LetterGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeEarnedSupported)
                && target.NumericGradeEarned != source.NumericGradeEarned)
            {
                target.NumericGradeEarned = source.NumericGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceBaseConversionDescriptorSupported)
                && target.PerformanceBaseConversionDescriptor != source.PerformanceBaseConversionDescriptor)
            {
                target.PerformanceBaseConversionDescriptor = source.PerformanceBaseConversionDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGradeLearningStandardGrade source, IGradeLearningStandardGrade target, Action<IGradeLearningStandardGrade, IGradeLearningStandardGrade> onMapped)
        {
            var sourceSynchSupport = source as IGradeLearningStandardGradeSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradeLearningStandardGradeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDiagnosticStatementSupported)
                target.DiagnosticStatement = source.DiagnosticStatement;
            else
                targetSynchSupport.IsDiagnosticStatementSupported = false;

            if (sourceSynchSupport.IsLetterGradeEarnedSupported)
                target.LetterGradeEarned = source.LetterGradeEarned;
            else
                targetSynchSupport.IsLetterGradeEarnedSupported = false;

            if (sourceSynchSupport.IsNumericGradeEarnedSupported)
                target.NumericGradeEarned = source.NumericGradeEarned;
            else
                targetSynchSupport.IsNumericGradeEarnedSupported = false;

            if (sourceSynchSupport.IsPerformanceBaseConversionDescriptorSupported)
                target.PerformanceBaseConversionDescriptor = source.PerformanceBaseConversionDescriptor;
            else
                targetSynchSupport.IsPerformanceBaseConversionDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradeLearningStandardGradeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDiagnosticStatementSupported { get; set; }
        bool IsLetterGradeEarnedSupported { get; set; }
        bool IsNumericGradeEarnedSupported { get; set; }
        bool IsPerformanceBaseConversionDescriptorSupported { get; set; }
    }
 
}
// Aggregate: GradebookEntry

namespace EdFi.Ods.Entities.Common.EdFi //.GradebookEntryAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradebookEntryMapper 
    {
        public static bool SynchronizeTo(this IGradebookEntry source, IGradebookEntry target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradebookEntrySynchronizationSourceSupport;

            // Allow PK column updates on GradebookEntry
            if (
                 (target.DateAssigned != source.DateAssigned)
                || (target.GradebookEntryTitle != source.GradebookEntryTitle)
                || (target.LocalCourseCode != source.LocalCourseCode)
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (target.SectionIdentifier != source.SectionIdentifier)
                || (target.SessionName != source.SessionName))
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DateAssigned != target.DateAssigned)
            {
                source.DateAssigned = target.DateAssigned;
            }
            if (source.GradebookEntryTitle != target.GradebookEntryTitle)
            {
                source.GradebookEntryTitle = target.GradebookEntryTitle;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDueDateSupported)
                && target.DueDate != source.DueDate)
            {
                target.DueDate = source.DueDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradebookEntryTypeDescriptorSupported)
                && target.GradebookEntryTypeDescriptor != source.GradebookEntryTypeDescriptor)
            {
                target.GradebookEntryTypeDescriptor = source.GradebookEntryTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradingPeriodDescriptorSupported)
                && target.GradingPeriodDescriptor != source.GradingPeriodDescriptor)
            {
                target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPeriodSequenceSupported)
                && target.PeriodSequence != source.PeriodSequence)
            {
                target.PeriodSequence = source.PeriodSequence;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsGradebookEntryLearningObjectivesSupported)
            {
                isModified |= 
                    source.GradebookEntryLearningObjectives.SynchronizeCollectionTo(
                        target.GradebookEntryLearningObjectives, 
                        onChildAdded: child => 
                            {
                                child.GradebookEntry = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGradebookEntryLearningObjectiveIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsGradebookEntryLearningStandardsSupported)
            {
                isModified |= 
                    source.GradebookEntryLearningStandards.SynchronizeCollectionTo(
                        target.GradebookEntryLearningStandards, 
                        onChildAdded: child => 
                            {
                                child.GradebookEntry = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGradebookEntryLearningStandardIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGradebookEntry source, IGradebookEntry target, Action<IGradebookEntry, IGradebookEntry> onMapped)
        {
            var sourceSynchSupport = source as IGradebookEntrySynchronizationSourceSupport;
            var targetSynchSupport = target as IGradebookEntrySynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DateAssigned = source.DateAssigned;
            target.GradebookEntryTitle = source.GradebookEntryTitle;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsDueDateSupported)
                target.DueDate = source.DueDate;
            else
                targetSynchSupport.IsDueDateSupported = false;

            if (sourceSynchSupport.IsGradebookEntryTypeDescriptorSupported)
                target.GradebookEntryTypeDescriptor = source.GradebookEntryTypeDescriptor;
            else
                targetSynchSupport.IsGradebookEntryTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsGradingPeriodDescriptorSupported)
                target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            else
                targetSynchSupport.IsGradingPeriodDescriptorSupported = false;

            if (sourceSynchSupport.IsPeriodSequenceSupported)
                target.PeriodSequence = source.PeriodSequence;
            else
                targetSynchSupport.IsPeriodSequenceSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsGradebookEntryLearningObjectivesSupported)
            {    
                targetSynchSupport.IsGradebookEntryLearningObjectiveIncluded = sourceSynchSupport.IsGradebookEntryLearningObjectiveIncluded;
                source.GradebookEntryLearningObjectives.MapCollectionTo(target.GradebookEntryLearningObjectives, target);
            }
            else
            {
                targetSynchSupport.IsGradebookEntryLearningObjectivesSupported = false;
            }

            if (sourceSynchSupport.IsGradebookEntryLearningStandardsSupported)
            {    
                targetSynchSupport.IsGradebookEntryLearningStandardIncluded = sourceSynchSupport.IsGradebookEntryLearningStandardIncluded;
                source.GradebookEntryLearningStandards.MapCollectionTo(target.GradebookEntryLearningStandards, target);
            }
            else
            {
                targetSynchSupport.IsGradebookEntryLearningStandardsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradebookEntrySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDescriptionSupported { get; set; }
        bool IsDueDateSupported { get; set; }
        bool IsGradebookEntryLearningObjectivesSupported { get; set; }
        bool IsGradebookEntryLearningStandardsSupported { get; set; }
        bool IsGradebookEntryTypeDescriptorSupported { get; set; }
        bool IsGradingPeriodDescriptorSupported { get; set; }
        bool IsPeriodSequenceSupported { get; set; }
        Func<IGradebookEntryLearningObjective, bool> IsGradebookEntryLearningObjectiveIncluded { get; set; }
        Func<IGradebookEntryLearningStandard, bool> IsGradebookEntryLearningStandardIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GradebookEntryLearningObjectiveMapper 
    {
        public static bool SynchronizeTo(this IGradebookEntryLearningObjective source, IGradebookEntryLearningObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradebookEntryLearningObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningObjectiveId != target.LearningObjectiveId)
            {
                source.LearningObjectiveId = target.LearningObjectiveId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGradebookEntryLearningObjective source, IGradebookEntryLearningObjective target, Action<IGradebookEntryLearningObjective, IGradebookEntryLearningObjective> onMapped)
        {
            var sourceSynchSupport = source as IGradebookEntryLearningObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradebookEntryLearningObjectiveSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningObjectiveId = source.LearningObjectiveId;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningObjectiveResourceId = source.LearningObjectiveResourceId;
                target.LearningObjectiveDiscriminator = source.LearningObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradebookEntryLearningObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class GradebookEntryLearningStandardMapper 
    {
        public static bool SynchronizeTo(this IGradebookEntryLearningStandard source, IGradebookEntryLearningStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradebookEntryLearningStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardId != target.LearningStandardId)
            {
                source.LearningStandardId = target.LearningStandardId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGradebookEntryLearningStandard source, IGradebookEntryLearningStandard target, Action<IGradebookEntryLearningStandard, IGradebookEntryLearningStandard> onMapped)
        {
            var sourceSynchSupport = source as IGradebookEntryLearningStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradebookEntryLearningStandardSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradebookEntryLearningStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: GradebookEntryTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradebookEntryTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradebookEntryTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGradebookEntryTypeDescriptor source, IGradebookEntryTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradebookEntryTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradebookEntryTypeDescriptorId != target.GradebookEntryTypeDescriptorId)
            {
                source.GradebookEntryTypeDescriptorId = target.GradebookEntryTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGradebookEntryTypeDescriptor source, IGradebookEntryTypeDescriptor target, Action<IGradebookEntryTypeDescriptor, IGradebookEntryTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGradebookEntryTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradebookEntryTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradebookEntryTypeDescriptorId = source.GradebookEntryTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradebookEntryTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GradeLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradeLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradeLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGradeLevelDescriptor source, IGradeLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradeLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptorId != target.GradeLevelDescriptorId)
            {
                source.GradeLevelDescriptorId = target.GradeLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGradeLevelDescriptor source, IGradeLevelDescriptor target, Action<IGradeLevelDescriptor, IGradeLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGradeLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradeLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradeLevelDescriptorId = source.GradeLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradeLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GradePointAverageTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradePointAverageTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradePointAverageTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGradePointAverageTypeDescriptor source, IGradePointAverageTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradePointAverageTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradePointAverageTypeDescriptorId != target.GradePointAverageTypeDescriptorId)
            {
                source.GradePointAverageTypeDescriptorId = target.GradePointAverageTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGradePointAverageTypeDescriptor source, IGradePointAverageTypeDescriptor target, Action<IGradePointAverageTypeDescriptor, IGradePointAverageTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGradePointAverageTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradePointAverageTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptorId = source.GradePointAverageTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradePointAverageTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GradeTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradeTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradeTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGradeTypeDescriptor source, IGradeTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradeTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeTypeDescriptorId != target.GradeTypeDescriptorId)
            {
                source.GradeTypeDescriptorId = target.GradeTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGradeTypeDescriptor source, IGradeTypeDescriptor target, Action<IGradeTypeDescriptor, IGradeTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGradeTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradeTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradeTypeDescriptorId = source.GradeTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradeTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GradingPeriod

namespace EdFi.Ods.Entities.Common.EdFi //.GradingPeriodAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradingPeriodMapper 
    {
        public static bool SynchronizeTo(this IGradingPeriod source, IGradingPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradingPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradingPeriodDescriptor != target.GradingPeriodDescriptor)
            {
                source.GradingPeriodDescriptor = target.GradingPeriodDescriptor;
            }
            if (source.PeriodSequence != target.PeriodSequence)
            {
                source.PeriodSequence = target.PeriodSequence;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalInstructionalDaysSupported)
                && target.TotalInstructionalDays != source.TotalInstructionalDays)
            {
                target.TotalInstructionalDays = source.TotalInstructionalDays;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGradingPeriod source, IGradingPeriod target, Action<IGradingPeriod, IGradingPeriod> onMapped)
        {
            var sourceSynchSupport = source as IGradingPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradingPeriodSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.PeriodSequence = source.PeriodSequence;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsTotalInstructionalDaysSupported)
                target.TotalInstructionalDays = source.TotalInstructionalDays;
            else
                targetSynchSupport.IsTotalInstructionalDaysSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradingPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsTotalInstructionalDaysSupported { get; set; }
    }
 
}
// Aggregate: GradingPeriodDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GradingPeriodDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GradingPeriodDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGradingPeriodDescriptor source, IGradingPeriodDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGradingPeriodDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradingPeriodDescriptorId != target.GradingPeriodDescriptorId)
            {
                source.GradingPeriodDescriptorId = target.GradingPeriodDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGradingPeriodDescriptor source, IGradingPeriodDescriptor target, Action<IGradingPeriodDescriptor, IGradingPeriodDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGradingPeriodDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGradingPeriodDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradingPeriodDescriptorId = source.GradingPeriodDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGradingPeriodDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GraduationPlan

namespace EdFi.Ods.Entities.Common.EdFi //.GraduationPlanAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlan source, IGraduationPlan target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.GraduationPlanTypeDescriptor != target.GraduationPlanTypeDescriptor)
            {
                source.GraduationPlanTypeDescriptor = target.GraduationPlanTypeDescriptor;
            }
            if (source.GraduationSchoolYear != target.GraduationSchoolYear)
            {
                source.GraduationSchoolYear = target.GraduationSchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsIndividualPlanSupported)
                && target.IndividualPlan != source.IndividualPlan)
            {
                target.IndividualPlan = source.IndividualPlan;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalRequiredCreditConversionSupported)
                && target.TotalRequiredCreditConversion != source.TotalRequiredCreditConversion)
            {
                target.TotalRequiredCreditConversion = source.TotalRequiredCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalRequiredCreditsSupported)
                && target.TotalRequiredCredits != source.TotalRequiredCredits)
            {
                target.TotalRequiredCredits = source.TotalRequiredCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalRequiredCreditTypeDescriptorSupported)
                && target.TotalRequiredCreditTypeDescriptor != source.TotalRequiredCreditTypeDescriptor)
            {
                target.TotalRequiredCreditTypeDescriptor = source.TotalRequiredCreditTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsGraduationPlanCreditsByCoursesSupported)
            {
                isModified |= 
                    source.GraduationPlanCreditsByCourses.SynchronizeCollectionTo(
                        target.GraduationPlanCreditsByCourses, 
                        onChildAdded: child => 
                            {
                                child.GraduationPlan = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGraduationPlanCreditsByCourseIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsGraduationPlanCreditsByCreditCategoriesSupported)
            {
                isModified |= 
                    source.GraduationPlanCreditsByCreditCategories.SynchronizeCollectionTo(
                        target.GraduationPlanCreditsByCreditCategories, 
                        onChildAdded: child => 
                            {
                                child.GraduationPlan = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGraduationPlanCreditsByCreditCategoryIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsGraduationPlanCreditsBySubjectsSupported)
            {
                isModified |= 
                    source.GraduationPlanCreditsBySubjects.SynchronizeCollectionTo(
                        target.GraduationPlanCreditsBySubjects, 
                        onChildAdded: child => 
                            {
                                child.GraduationPlan = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGraduationPlanCreditsBySubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsGraduationPlanRequiredAssessmentsSupported)
            {
                isModified |= 
                    source.GraduationPlanRequiredAssessments.SynchronizeCollectionTo(
                        target.GraduationPlanRequiredAssessments, 
                        onChildAdded: child => 
                            {
                                child.GraduationPlan = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGraduationPlanRequiredAssessmentIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGraduationPlan source, IGraduationPlan target, Action<IGraduationPlan, IGraduationPlan> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.GraduationPlanTypeDescriptor = source.GraduationPlanTypeDescriptor;
            target.GraduationSchoolYear = source.GraduationSchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsIndividualPlanSupported)
                target.IndividualPlan = source.IndividualPlan;
            else
                targetSynchSupport.IsIndividualPlanSupported = false;

            if (sourceSynchSupport.IsTotalRequiredCreditConversionSupported)
                target.TotalRequiredCreditConversion = source.TotalRequiredCreditConversion;
            else
                targetSynchSupport.IsTotalRequiredCreditConversionSupported = false;

            if (sourceSynchSupport.IsTotalRequiredCreditsSupported)
                target.TotalRequiredCredits = source.TotalRequiredCredits;
            else
                targetSynchSupport.IsTotalRequiredCreditsSupported = false;

            if (sourceSynchSupport.IsTotalRequiredCreditTypeDescriptorSupported)
                target.TotalRequiredCreditTypeDescriptor = source.TotalRequiredCreditTypeDescriptor;
            else
                targetSynchSupport.IsTotalRequiredCreditTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.GraduationSchoolYearTypeResourceId = source.GraduationSchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsGraduationPlanCreditsByCoursesSupported)
            {    
                targetSynchSupport.IsGraduationPlanCreditsByCourseIncluded = sourceSynchSupport.IsGraduationPlanCreditsByCourseIncluded;
                source.GraduationPlanCreditsByCourses.MapCollectionTo(target.GraduationPlanCreditsByCourses, target);
            }
            else
            {
                targetSynchSupport.IsGraduationPlanCreditsByCoursesSupported = false;
            }

            if (sourceSynchSupport.IsGraduationPlanCreditsByCreditCategoriesSupported)
            {    
                targetSynchSupport.IsGraduationPlanCreditsByCreditCategoryIncluded = sourceSynchSupport.IsGraduationPlanCreditsByCreditCategoryIncluded;
                source.GraduationPlanCreditsByCreditCategories.MapCollectionTo(target.GraduationPlanCreditsByCreditCategories, target);
            }
            else
            {
                targetSynchSupport.IsGraduationPlanCreditsByCreditCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsGraduationPlanCreditsBySubjectsSupported)
            {    
                targetSynchSupport.IsGraduationPlanCreditsBySubjectIncluded = sourceSynchSupport.IsGraduationPlanCreditsBySubjectIncluded;
                source.GraduationPlanCreditsBySubjects.MapCollectionTo(target.GraduationPlanCreditsBySubjects, target);
            }
            else
            {
                targetSynchSupport.IsGraduationPlanCreditsBySubjectsSupported = false;
            }

            if (sourceSynchSupport.IsGraduationPlanRequiredAssessmentsSupported)
            {    
                targetSynchSupport.IsGraduationPlanRequiredAssessmentIncluded = sourceSynchSupport.IsGraduationPlanRequiredAssessmentIncluded;
                source.GraduationPlanRequiredAssessments.MapCollectionTo(target.GraduationPlanRequiredAssessments, target);
            }
            else
            {
                targetSynchSupport.IsGraduationPlanRequiredAssessmentsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsGraduationPlanCreditsByCoursesSupported { get; set; }
        bool IsGraduationPlanCreditsByCreditCategoriesSupported { get; set; }
        bool IsGraduationPlanCreditsBySubjectsSupported { get; set; }
        bool IsGraduationPlanRequiredAssessmentsSupported { get; set; }
        bool IsIndividualPlanSupported { get; set; }
        bool IsTotalRequiredCreditConversionSupported { get; set; }
        bool IsTotalRequiredCreditsSupported { get; set; }
        bool IsTotalRequiredCreditTypeDescriptorSupported { get; set; }
        Func<IGraduationPlanCreditsByCourse, bool> IsGraduationPlanCreditsByCourseIncluded { get; set; }
        Func<IGraduationPlanCreditsByCreditCategory, bool> IsGraduationPlanCreditsByCreditCategoryIncluded { get; set; }
        Func<IGraduationPlanCreditsBySubject, bool> IsGraduationPlanCreditsBySubjectIncluded { get; set; }
        Func<IGraduationPlanRequiredAssessment, bool> IsGraduationPlanRequiredAssessmentIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanCreditsByCourseMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanCreditsByCourse source, IGraduationPlanCreditsByCourse target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanCreditsByCourseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseSetName != target.CourseSetName)
            {
                source.CourseSetName = target.CourseSetName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCreditConversionSupported)
                && target.CreditConversion != source.CreditConversion)
            {
                target.CreditConversion = source.CreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCreditsSupported)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCreditTypeDescriptorSupported)
                && target.CreditTypeDescriptor != source.CreditTypeDescriptor)
            {
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWhenTakenGradeLevelDescriptorSupported)
                && target.WhenTakenGradeLevelDescriptor != source.WhenTakenGradeLevelDescriptor)
            {
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsGraduationPlanCreditsByCourseCoursesSupported)
            {
                isModified |= 
                    source.GraduationPlanCreditsByCourseCourses.SynchronizeCollectionTo(
                        target.GraduationPlanCreditsByCourseCourses, 
                        onChildAdded: child => 
                            {
                                child.GraduationPlanCreditsByCourse = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGraduationPlanCreditsByCourseCourseIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGraduationPlanCreditsByCourse source, IGraduationPlanCreditsByCourse target, Action<IGraduationPlanCreditsByCourse, IGraduationPlanCreditsByCourse> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanCreditsByCourseSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanCreditsByCourseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CourseSetName = source.CourseSetName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCreditConversionSupported)
                target.CreditConversion = source.CreditConversion;
            else
                targetSynchSupport.IsCreditConversionSupported = false;

            if (sourceSynchSupport.IsCreditsSupported)
                target.Credits = source.Credits;
            else
                targetSynchSupport.IsCreditsSupported = false;

            if (sourceSynchSupport.IsCreditTypeDescriptorSupported)
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
            else
                targetSynchSupport.IsCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsWhenTakenGradeLevelDescriptorSupported)
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
            else
                targetSynchSupport.IsWhenTakenGradeLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsGraduationPlanCreditsByCourseCoursesSupported)
            {    
                targetSynchSupport.IsGraduationPlanCreditsByCourseCourseIncluded = sourceSynchSupport.IsGraduationPlanCreditsByCourseCourseIncluded;
                source.GraduationPlanCreditsByCourseCourses.MapCollectionTo(target.GraduationPlanCreditsByCourseCourses, target);
            }
            else
            {
                targetSynchSupport.IsGraduationPlanCreditsByCourseCoursesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanCreditsByCourseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCreditConversionSupported { get; set; }
        bool IsCreditsSupported { get; set; }
        bool IsCreditTypeDescriptorSupported { get; set; }
        bool IsGraduationPlanCreditsByCourseCoursesSupported { get; set; }
        bool IsWhenTakenGradeLevelDescriptorSupported { get; set; }
        Func<IGraduationPlanCreditsByCourseCourse, bool> IsGraduationPlanCreditsByCourseCourseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanCreditsByCourseCourseMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanCreditsByCourseCourse source, IGraduationPlanCreditsByCourseCourse target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanCreditsByCourseCourseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.CourseEducationOrganizationId != target.CourseEducationOrganizationId)
            {
                source.CourseEducationOrganizationId = target.CourseEducationOrganizationId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGraduationPlanCreditsByCourseCourse source, IGraduationPlanCreditsByCourseCourse target, Action<IGraduationPlanCreditsByCourseCourse, IGraduationPlanCreditsByCourseCourse> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanCreditsByCourseCourseSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanCreditsByCourseCourseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.CourseEducationOrganizationId = source.CourseEducationOrganizationId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanCreditsByCourseCourseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanCreditsByCreditCategoryMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanCreditsByCreditCategory source, IGraduationPlanCreditsByCreditCategory target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanCreditsByCreditCategorySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CreditCategoryDescriptor != target.CreditCategoryDescriptor)
            {
                source.CreditCategoryDescriptor = target.CreditCategoryDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCreditConversionSupported)
                && target.CreditConversion != source.CreditConversion)
            {
                target.CreditConversion = source.CreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCreditsSupported)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCreditTypeDescriptorSupported)
                && target.CreditTypeDescriptor != source.CreditTypeDescriptor)
            {
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGraduationPlanCreditsByCreditCategory source, IGraduationPlanCreditsByCreditCategory target, Action<IGraduationPlanCreditsByCreditCategory, IGraduationPlanCreditsByCreditCategory> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanCreditsByCreditCategorySynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanCreditsByCreditCategorySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CreditCategoryDescriptor = source.CreditCategoryDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCreditConversionSupported)
                target.CreditConversion = source.CreditConversion;
            else
                targetSynchSupport.IsCreditConversionSupported = false;

            if (sourceSynchSupport.IsCreditsSupported)
                target.Credits = source.Credits;
            else
                targetSynchSupport.IsCreditsSupported = false;

            if (sourceSynchSupport.IsCreditTypeDescriptorSupported)
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
            else
                targetSynchSupport.IsCreditTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanCreditsByCreditCategorySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCreditConversionSupported { get; set; }
        bool IsCreditsSupported { get; set; }
        bool IsCreditTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanCreditsBySubjectMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanCreditsBySubject source, IGraduationPlanCreditsBySubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanCreditsBySubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCreditConversionSupported)
                && target.CreditConversion != source.CreditConversion)
            {
                target.CreditConversion = source.CreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCreditsSupported)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCreditTypeDescriptorSupported)
                && target.CreditTypeDescriptor != source.CreditTypeDescriptor)
            {
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGraduationPlanCreditsBySubject source, IGraduationPlanCreditsBySubject target, Action<IGraduationPlanCreditsBySubject, IGraduationPlanCreditsBySubject> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanCreditsBySubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanCreditsBySubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCreditConversionSupported)
                target.CreditConversion = source.CreditConversion;
            else
                targetSynchSupport.IsCreditConversionSupported = false;

            if (sourceSynchSupport.IsCreditsSupported)
                target.Credits = source.Credits;
            else
                targetSynchSupport.IsCreditsSupported = false;

            if (sourceSynchSupport.IsCreditTypeDescriptorSupported)
                target.CreditTypeDescriptor = source.CreditTypeDescriptor;
            else
                targetSynchSupport.IsCreditTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanCreditsBySubjectSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCreditConversionSupported { get; set; }
        bool IsCreditsSupported { get; set; }
        bool IsCreditTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanRequiredAssessmentMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanRequiredAssessment source, IGraduationPlanRequiredAssessment target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanRequiredAssessmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GraduationPlanRequiredAssessmentPerformanceLevel
            if (sourceSupport == null || sourceSupport.IsGraduationPlanRequiredAssessmentPerformanceLevelSupported)
            {
                if (source.GraduationPlanRequiredAssessmentPerformanceLevel == null)
                {
                    if (target.GraduationPlanRequiredAssessmentPerformanceLevel != null)
                    {
                        target.GraduationPlanRequiredAssessmentPerformanceLevel = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GraduationPlanRequiredAssessmentPerformanceLevel == null)
                    {
                        var itemType = target.GetType().GetProperty("GraduationPlanRequiredAssessmentPerformanceLevel").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GraduationPlanRequiredAssessmentPerformanceLevel = (IGraduationPlanRequiredAssessmentPerformanceLevel) newItem;
                    }

                    isModified |= source.GraduationPlanRequiredAssessmentPerformanceLevel.Synchronize(target.GraduationPlanRequiredAssessmentPerformanceLevel);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsGraduationPlanRequiredAssessmentScoresSupported)
            {
                isModified |= 
                    source.GraduationPlanRequiredAssessmentScores.SynchronizeCollectionTo(
                        target.GraduationPlanRequiredAssessmentScores, 
                        onChildAdded: child => 
                            {
                                child.GraduationPlanRequiredAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGraduationPlanRequiredAssessmentScoreIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGraduationPlanRequiredAssessment source, IGraduationPlanRequiredAssessment target, Action<IGraduationPlanRequiredAssessment, IGraduationPlanRequiredAssessment> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanRequiredAssessmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanRequiredAssessmentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GraduationPlanRequiredAssessmentPerformanceLevel (Source)
            if (sourceSynchSupport.IsGraduationPlanRequiredAssessmentPerformanceLevelSupported)
            {
                var itemProperty = target.GetType().GetProperty("GraduationPlanRequiredAssessmentPerformanceLevel");
                
                if (itemProperty != null)
                {                    
                    if (source.GraduationPlanRequiredAssessmentPerformanceLevel == null)
                    {
                        target.GraduationPlanRequiredAssessmentPerformanceLevel = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGraduationPlanRequiredAssessmentPerformanceLevel = Activator.CreateInstance(itemType);
                        (targetGraduationPlanRequiredAssessmentPerformanceLevel as IChildEntity)?.SetParent(target);
                        source.GraduationPlanRequiredAssessmentPerformanceLevel.Map(targetGraduationPlanRequiredAssessmentPerformanceLevel);
                        
                        // Update the target reference appropriately
                        target.GraduationPlanRequiredAssessmentPerformanceLevel = (IGraduationPlanRequiredAssessmentPerformanceLevel) targetGraduationPlanRequiredAssessmentPerformanceLevel;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGraduationPlanRequiredAssessmentPerformanceLevelSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsGraduationPlanRequiredAssessmentScoresSupported)
            {    
                targetSynchSupport.IsGraduationPlanRequiredAssessmentScoreIncluded = sourceSynchSupport.IsGraduationPlanRequiredAssessmentScoreIncluded;
                source.GraduationPlanRequiredAssessmentScores.MapCollectionTo(target.GraduationPlanRequiredAssessmentScores, target);
            }
            else
            {
                targetSynchSupport.IsGraduationPlanRequiredAssessmentScoresSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanRequiredAssessmentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsGraduationPlanRequiredAssessmentPerformanceLevelSupported { get; set; }
        bool IsGraduationPlanRequiredAssessmentScoresSupported { get; set; }
        Func<IGraduationPlanRequiredAssessmentScore, bool> IsGraduationPlanRequiredAssessmentScoreIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanRequiredAssessmentPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanRequiredAssessmentPerformanceLevel source, IGraduationPlanRequiredAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanRequiredAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentReportingMethodDescriptorSupported)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaximumScoreSupported)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumScoreSupported)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelDescriptorSupported)
                && target.PerformanceLevelDescriptor != source.PerformanceLevelDescriptor)
            {
                target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGraduationPlanRequiredAssessmentPerformanceLevel source, IGraduationPlanRequiredAssessmentPerformanceLevel target, Action<IGraduationPlanRequiredAssessmentPerformanceLevel, IGraduationPlanRequiredAssessmentPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanRequiredAssessmentPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanRequiredAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentReportingMethodDescriptorSupported)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            else
                targetSynchSupport.IsAssessmentReportingMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsMaximumScoreSupported)
                target.MaximumScore = source.MaximumScore;
            else
                targetSynchSupport.IsMaximumScoreSupported = false;

            if (sourceSynchSupport.IsMinimumScoreSupported)
                target.MinimumScore = source.MinimumScore;
            else
                targetSynchSupport.IsMinimumScoreSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelDescriptorSupported)
                target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;
            else
                targetSynchSupport.IsPerformanceLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanRequiredAssessmentPerformanceLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssessmentReportingMethodDescriptorSupported { get; set; }
        bool IsMaximumScoreSupported { get; set; }
        bool IsMinimumScoreSupported { get; set; }
        bool IsPerformanceLevelDescriptorSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanRequiredAssessmentScoreMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanRequiredAssessmentScore source, IGraduationPlanRequiredAssessmentScore target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanRequiredAssessmentScoreSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaximumScoreSupported)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumScoreSupported)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IGraduationPlanRequiredAssessmentScore source, IGraduationPlanRequiredAssessmentScore target, Action<IGraduationPlanRequiredAssessmentScore, IGraduationPlanRequiredAssessmentScore> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanRequiredAssessmentScoreSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanRequiredAssessmentScoreSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaximumScoreSupported)
                target.MaximumScore = source.MaximumScore;
            else
                targetSynchSupport.IsMaximumScoreSupported = false;

            if (sourceSynchSupport.IsMinimumScoreSupported)
                target.MinimumScore = source.MinimumScore;
            else
                targetSynchSupport.IsMinimumScoreSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanRequiredAssessmentScoreSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMaximumScoreSupported { get; set; }
        bool IsMinimumScoreSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: GraduationPlanTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GraduationPlanTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanTypeDescriptor source, IGraduationPlanTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GraduationPlanTypeDescriptorId != target.GraduationPlanTypeDescriptorId)
            {
                source.GraduationPlanTypeDescriptorId = target.GraduationPlanTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGraduationPlanTypeDescriptor source, IGraduationPlanTypeDescriptor target, Action<IGraduationPlanTypeDescriptor, IGraduationPlanTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GraduationPlanTypeDescriptorId = source.GraduationPlanTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GunFreeSchoolsActReportingStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.GunFreeSchoolsActReportingStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GunFreeSchoolsActReportingStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGunFreeSchoolsActReportingStatusDescriptor source, IGunFreeSchoolsActReportingStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGunFreeSchoolsActReportingStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GunFreeSchoolsActReportingStatusDescriptorId != target.GunFreeSchoolsActReportingStatusDescriptorId)
            {
                source.GunFreeSchoolsActReportingStatusDescriptorId = target.GunFreeSchoolsActReportingStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGunFreeSchoolsActReportingStatusDescriptor source, IGunFreeSchoolsActReportingStatusDescriptor target, Action<IGunFreeSchoolsActReportingStatusDescriptor, IGunFreeSchoolsActReportingStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGunFreeSchoolsActReportingStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGunFreeSchoolsActReportingStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GunFreeSchoolsActReportingStatusDescriptorId = source.GunFreeSchoolsActReportingStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGunFreeSchoolsActReportingStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: HomelessPrimaryNighttimeResidenceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.HomelessPrimaryNighttimeResidenceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class HomelessPrimaryNighttimeResidenceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IHomelessPrimaryNighttimeResidenceDescriptor source, IHomelessPrimaryNighttimeResidenceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IHomelessPrimaryNighttimeResidenceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HomelessPrimaryNighttimeResidenceDescriptorId != target.HomelessPrimaryNighttimeResidenceDescriptorId)
            {
                source.HomelessPrimaryNighttimeResidenceDescriptorId = target.HomelessPrimaryNighttimeResidenceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IHomelessPrimaryNighttimeResidenceDescriptor source, IHomelessPrimaryNighttimeResidenceDescriptor target, Action<IHomelessPrimaryNighttimeResidenceDescriptor, IHomelessPrimaryNighttimeResidenceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IHomelessPrimaryNighttimeResidenceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IHomelessPrimaryNighttimeResidenceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HomelessPrimaryNighttimeResidenceDescriptorId = source.HomelessPrimaryNighttimeResidenceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IHomelessPrimaryNighttimeResidenceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: HomelessProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.HomelessProgramServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class HomelessProgramServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IHomelessProgramServiceDescriptor source, IHomelessProgramServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IHomelessProgramServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HomelessProgramServiceDescriptorId != target.HomelessProgramServiceDescriptorId)
            {
                source.HomelessProgramServiceDescriptorId = target.HomelessProgramServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IHomelessProgramServiceDescriptor source, IHomelessProgramServiceDescriptor target, Action<IHomelessProgramServiceDescriptor, IHomelessProgramServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IHomelessProgramServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IHomelessProgramServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HomelessProgramServiceDescriptorId = source.HomelessProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IHomelessProgramServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: IdentificationDocumentUseDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.IdentificationDocumentUseDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class IdentificationDocumentUseDescriptorMapper 
    {
        public static bool SynchronizeTo(this IIdentificationDocumentUseDescriptor source, IIdentificationDocumentUseDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IIdentificationDocumentUseDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptorId != target.IdentificationDocumentUseDescriptorId)
            {
                source.IdentificationDocumentUseDescriptorId = target.IdentificationDocumentUseDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IIdentificationDocumentUseDescriptor source, IIdentificationDocumentUseDescriptor target, Action<IIdentificationDocumentUseDescriptor, IIdentificationDocumentUseDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IIdentificationDocumentUseDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IIdentificationDocumentUseDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptorId = source.IdentificationDocumentUseDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IIdentificationDocumentUseDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: IncidentLocationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.IncidentLocationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class IncidentLocationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IIncidentLocationDescriptor source, IIncidentLocationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IIncidentLocationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IncidentLocationDescriptorId != target.IncidentLocationDescriptorId)
            {
                source.IncidentLocationDescriptorId = target.IncidentLocationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IIncidentLocationDescriptor source, IIncidentLocationDescriptor target, Action<IIncidentLocationDescriptor, IIncidentLocationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IIncidentLocationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IIncidentLocationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IncidentLocationDescriptorId = source.IncidentLocationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IIncidentLocationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: InstitutionTelephoneNumberTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InstitutionTelephoneNumberTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InstitutionTelephoneNumberTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IInstitutionTelephoneNumberTypeDescriptor source, IInstitutionTelephoneNumberTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInstitutionTelephoneNumberTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InstitutionTelephoneNumberTypeDescriptorId != target.InstitutionTelephoneNumberTypeDescriptorId)
            {
                source.InstitutionTelephoneNumberTypeDescriptorId = target.InstitutionTelephoneNumberTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInstitutionTelephoneNumberTypeDescriptor source, IInstitutionTelephoneNumberTypeDescriptor target, Action<IInstitutionTelephoneNumberTypeDescriptor, IInstitutionTelephoneNumberTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInstitutionTelephoneNumberTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInstitutionTelephoneNumberTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InstitutionTelephoneNumberTypeDescriptorId = source.InstitutionTelephoneNumberTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInstitutionTelephoneNumberTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: InteractivityStyleDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InteractivityStyleDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InteractivityStyleDescriptorMapper 
    {
        public static bool SynchronizeTo(this IInteractivityStyleDescriptor source, IInteractivityStyleDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInteractivityStyleDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InteractivityStyleDescriptorId != target.InteractivityStyleDescriptorId)
            {
                source.InteractivityStyleDescriptorId = target.InteractivityStyleDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInteractivityStyleDescriptor source, IInteractivityStyleDescriptor target, Action<IInteractivityStyleDescriptor, IInteractivityStyleDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInteractivityStyleDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInteractivityStyleDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InteractivityStyleDescriptorId = source.InteractivityStyleDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInteractivityStyleDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: InternetAccessDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InternetAccessDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InternetAccessDescriptorMapper 
    {
        public static bool SynchronizeTo(this IInternetAccessDescriptor source, IInternetAccessDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInternetAccessDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InternetAccessDescriptorId != target.InternetAccessDescriptorId)
            {
                source.InternetAccessDescriptorId = target.InternetAccessDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInternetAccessDescriptor source, IInternetAccessDescriptor target, Action<IInternetAccessDescriptor, IInternetAccessDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInternetAccessDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInternetAccessDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InternetAccessDescriptorId = source.InternetAccessDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInternetAccessDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Intervention

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InterventionMapper 
    {
        public static bool SynchronizeTo(this IIntervention source, IIntervention target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.InterventionIdentificationCode != target.InterventionIdentificationCode)
            {
                source.InterventionIdentificationCode = target.InterventionIdentificationCode;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDeliveryMethodDescriptorSupported)
                && target.DeliveryMethodDescriptor != source.DeliveryMethodDescriptor)
            {
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterventionClassDescriptorSupported)
                && target.InterventionClassDescriptor != source.InterventionClassDescriptor)
            {
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxDosageSupported)
                && target.MaxDosage != source.MaxDosage)
            {
                target.MaxDosage = source.MaxDosage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinDosageSupported)
                && target.MinDosage != source.MinDosage)
            {
                target.MinDosage = source.MinDosage;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsInterventionAppropriateGradeLevelsSupported)
            {
                isModified |= 
                    source.InterventionAppropriateGradeLevels.SynchronizeCollectionTo(
                        target.InterventionAppropriateGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionAppropriateGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionAppropriateSexesSupported)
            {
                isModified |= 
                    source.InterventionAppropriateSexes.SynchronizeCollectionTo(
                        target.InterventionAppropriateSexes, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionAppropriateSexIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionDiagnosesSupported)
            {
                isModified |= 
                    source.InterventionDiagnoses.SynchronizeCollectionTo(
                        target.InterventionDiagnoses, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionDiagnosisIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionEducationContentsSupported)
            {
                isModified |= 
                    source.InterventionEducationContents.SynchronizeCollectionTo(
                        target.InterventionEducationContents, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionEducationContentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionInterventionPrescriptionsSupported)
            {
                isModified |= 
                    source.InterventionInterventionPrescriptions.SynchronizeCollectionTo(
                        target.InterventionInterventionPrescriptions, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionInterventionPrescriptionIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionLearningResourceMetadataURIsSupported)
            {
                isModified |= 
                    source.InterventionLearningResourceMetadataURIs.SynchronizeCollectionTo(
                        target.InterventionLearningResourceMetadataURIs, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionLearningResourceMetadataURIIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionMeetingTimesSupported)
            {
                isModified |= 
                    source.InterventionMeetingTimes.SynchronizeCollectionTo(
                        target.InterventionMeetingTimes, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionMeetingTimeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionPopulationServedsSupported)
            {
                isModified |= 
                    source.InterventionPopulationServeds.SynchronizeCollectionTo(
                        target.InterventionPopulationServeds, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionPopulationServedIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionStaffsSupported)
            {
                isModified |= 
                    source.InterventionStaffs.SynchronizeCollectionTo(
                        target.InterventionStaffs, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStaffIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionURIsSupported)
            {
                isModified |= 
                    source.InterventionURIs.SynchronizeCollectionTo(
                        target.InterventionURIs, 
                        onChildAdded: child => 
                            {
                                child.Intervention = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionURIIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IIntervention source, IIntervention target, Action<IIntervention, IIntervention> onMapped)
        {
            var sourceSynchSupport = source as IInterventionSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionIdentificationCode = source.InterventionIdentificationCode;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDeliveryMethodDescriptorSupported)
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
            else
                targetSynchSupport.IsDeliveryMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsInterventionClassDescriptorSupported)
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
            else
                targetSynchSupport.IsInterventionClassDescriptorSupported = false;

            if (sourceSynchSupport.IsMaxDosageSupported)
                target.MaxDosage = source.MaxDosage;
            else
                targetSynchSupport.IsMaxDosageSupported = false;

            if (sourceSynchSupport.IsMinDosageSupported)
                target.MinDosage = source.MinDosage;
            else
                targetSynchSupport.IsMinDosageSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsInterventionAppropriateGradeLevelsSupported)
            {    
                targetSynchSupport.IsInterventionAppropriateGradeLevelIncluded = sourceSynchSupport.IsInterventionAppropriateGradeLevelIncluded;
                source.InterventionAppropriateGradeLevels.MapCollectionTo(target.InterventionAppropriateGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsInterventionAppropriateGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionAppropriateSexesSupported)
            {    
                targetSynchSupport.IsInterventionAppropriateSexIncluded = sourceSynchSupport.IsInterventionAppropriateSexIncluded;
                source.InterventionAppropriateSexes.MapCollectionTo(target.InterventionAppropriateSexes, target);
            }
            else
            {
                targetSynchSupport.IsInterventionAppropriateSexesSupported = false;
            }

            if (sourceSynchSupport.IsInterventionDiagnosesSupported)
            {    
                targetSynchSupport.IsInterventionDiagnosisIncluded = sourceSynchSupport.IsInterventionDiagnosisIncluded;
                source.InterventionDiagnoses.MapCollectionTo(target.InterventionDiagnoses, target);
            }
            else
            {
                targetSynchSupport.IsInterventionDiagnosesSupported = false;
            }

            if (sourceSynchSupport.IsInterventionEducationContentsSupported)
            {    
                targetSynchSupport.IsInterventionEducationContentIncluded = sourceSynchSupport.IsInterventionEducationContentIncluded;
                source.InterventionEducationContents.MapCollectionTo(target.InterventionEducationContents, target);
            }
            else
            {
                targetSynchSupport.IsInterventionEducationContentsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionInterventionPrescriptionsSupported)
            {    
                targetSynchSupport.IsInterventionInterventionPrescriptionIncluded = sourceSynchSupport.IsInterventionInterventionPrescriptionIncluded;
                source.InterventionInterventionPrescriptions.MapCollectionTo(target.InterventionInterventionPrescriptions, target);
            }
            else
            {
                targetSynchSupport.IsInterventionInterventionPrescriptionsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionLearningResourceMetadataURIsSupported)
            {    
                targetSynchSupport.IsInterventionLearningResourceMetadataURIIncluded = sourceSynchSupport.IsInterventionLearningResourceMetadataURIIncluded;
                source.InterventionLearningResourceMetadataURIs.MapCollectionTo(target.InterventionLearningResourceMetadataURIs, target);
            }
            else
            {
                targetSynchSupport.IsInterventionLearningResourceMetadataURIsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionMeetingTimesSupported)
            {    
                targetSynchSupport.IsInterventionMeetingTimeIncluded = sourceSynchSupport.IsInterventionMeetingTimeIncluded;
                source.InterventionMeetingTimes.MapCollectionTo(target.InterventionMeetingTimes, target);
            }
            else
            {
                targetSynchSupport.IsInterventionMeetingTimesSupported = false;
            }

            if (sourceSynchSupport.IsInterventionPopulationServedsSupported)
            {    
                targetSynchSupport.IsInterventionPopulationServedIncluded = sourceSynchSupport.IsInterventionPopulationServedIncluded;
                source.InterventionPopulationServeds.MapCollectionTo(target.InterventionPopulationServeds, target);
            }
            else
            {
                targetSynchSupport.IsInterventionPopulationServedsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionStaffsSupported)
            {    
                targetSynchSupport.IsInterventionStaffIncluded = sourceSynchSupport.IsInterventionStaffIncluded;
                source.InterventionStaffs.MapCollectionTo(target.InterventionStaffs, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStaffsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionURIsSupported)
            {    
                targetSynchSupport.IsInterventionURIIncluded = sourceSynchSupport.IsInterventionURIIncluded;
                source.InterventionURIs.MapCollectionTo(target.InterventionURIs, target);
            }
            else
            {
                targetSynchSupport.IsInterventionURIsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDeliveryMethodDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsInterventionAppropriateGradeLevelsSupported { get; set; }
        bool IsInterventionAppropriateSexesSupported { get; set; }
        bool IsInterventionClassDescriptorSupported { get; set; }
        bool IsInterventionDiagnosesSupported { get; set; }
        bool IsInterventionEducationContentsSupported { get; set; }
        bool IsInterventionInterventionPrescriptionsSupported { get; set; }
        bool IsInterventionLearningResourceMetadataURIsSupported { get; set; }
        bool IsInterventionMeetingTimesSupported { get; set; }
        bool IsInterventionPopulationServedsSupported { get; set; }
        bool IsInterventionStaffsSupported { get; set; }
        bool IsInterventionURIsSupported { get; set; }
        bool IsMaxDosageSupported { get; set; }
        bool IsMinDosageSupported { get; set; }
        Func<IInterventionAppropriateGradeLevel, bool> IsInterventionAppropriateGradeLevelIncluded { get; set; }
        Func<IInterventionAppropriateSex, bool> IsInterventionAppropriateSexIncluded { get; set; }
        Func<IInterventionDiagnosis, bool> IsInterventionDiagnosisIncluded { get; set; }
        Func<IInterventionEducationContent, bool> IsInterventionEducationContentIncluded { get; set; }
        Func<IInterventionInterventionPrescription, bool> IsInterventionInterventionPrescriptionIncluded { get; set; }
        Func<IInterventionLearningResourceMetadataURI, bool> IsInterventionLearningResourceMetadataURIIncluded { get; set; }
        Func<IInterventionMeetingTime, bool> IsInterventionMeetingTimeIncluded { get; set; }
        Func<IInterventionPopulationServed, bool> IsInterventionPopulationServedIncluded { get; set; }
        Func<IInterventionStaff, bool> IsInterventionStaffIncluded { get; set; }
        Func<IInterventionURI, bool> IsInterventionURIIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionAppropriateGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IInterventionAppropriateGradeLevel source, IInterventionAppropriateGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionAppropriateGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionAppropriateGradeLevel source, IInterventionAppropriateGradeLevel target, Action<IInterventionAppropriateGradeLevel, IInterventionAppropriateGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IInterventionAppropriateGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionAppropriateGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionAppropriateGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionAppropriateSexMapper 
    {
        public static bool SynchronizeTo(this IInterventionAppropriateSex source, IInterventionAppropriateSex target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionAppropriateSexSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SexDescriptor != target.SexDescriptor)
            {
                source.SexDescriptor = target.SexDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionAppropriateSex source, IInterventionAppropriateSex target, Action<IInterventionAppropriateSex, IInterventionAppropriateSex> onMapped)
        {
            var sourceSynchSupport = source as IInterventionAppropriateSexSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionAppropriateSexSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionAppropriateSexSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionDiagnosisMapper 
    {
        public static bool SynchronizeTo(this IInterventionDiagnosis source, IInterventionDiagnosis target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionDiagnosisSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiagnosisDescriptor != target.DiagnosisDescriptor)
            {
                source.DiagnosisDescriptor = target.DiagnosisDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionDiagnosis source, IInterventionDiagnosis target, Action<IInterventionDiagnosis, IInterventionDiagnosis> onMapped)
        {
            var sourceSynchSupport = source as IInterventionDiagnosisSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionDiagnosisSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DiagnosisDescriptor = source.DiagnosisDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionDiagnosisSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionEducationContentMapper 
    {
        public static bool SynchronizeTo(this IInterventionEducationContent source, IInterventionEducationContent target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionEducationContentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContentIdentifier != target.ContentIdentifier)
            {
                source.ContentIdentifier = target.ContentIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionEducationContent source, IInterventionEducationContent target, Action<IInterventionEducationContent, IInterventionEducationContent> onMapped)
        {
            var sourceSynchSupport = source as IInterventionEducationContentSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionEducationContentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ContentIdentifier = source.ContentIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationContentResourceId = source.EducationContentResourceId;
                target.EducationContentDiscriminator = source.EducationContentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionEducationContentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionInterventionPrescriptionMapper 
    {
        public static bool SynchronizeTo(this IInterventionInterventionPrescription source, IInterventionInterventionPrescription target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionInterventionPrescriptionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InterventionPrescriptionEducationOrganizationId != target.InterventionPrescriptionEducationOrganizationId)
            {
                source.InterventionPrescriptionEducationOrganizationId = target.InterventionPrescriptionEducationOrganizationId;
            }
            if (source.InterventionPrescriptionIdentificationCode != target.InterventionPrescriptionIdentificationCode)
            {
                source.InterventionPrescriptionIdentificationCode = target.InterventionPrescriptionIdentificationCode;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionInterventionPrescription source, IInterventionInterventionPrescription target, Action<IInterventionInterventionPrescription, IInterventionInterventionPrescription> onMapped)
        {
            var sourceSynchSupport = source as IInterventionInterventionPrescriptionSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionInterventionPrescriptionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.InterventionPrescriptionEducationOrganizationId = source.InterventionPrescriptionEducationOrganizationId;
            target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.InterventionPrescriptionResourceId = source.InterventionPrescriptionResourceId;
                target.InterventionPrescriptionDiscriminator = source.InterventionPrescriptionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionInterventionPrescriptionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionLearningResourceMetadataURIMapper 
    {
        public static bool SynchronizeTo(this IInterventionLearningResourceMetadataURI source, IInterventionLearningResourceMetadataURI target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionLearningResourceMetadataURISynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningResourceMetadataURI != target.LearningResourceMetadataURI)
            {
                source.LearningResourceMetadataURI = target.LearningResourceMetadataURI;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionLearningResourceMetadataURI source, IInterventionLearningResourceMetadataURI target, Action<IInterventionLearningResourceMetadataURI, IInterventionLearningResourceMetadataURI> onMapped)
        {
            var sourceSynchSupport = source as IInterventionLearningResourceMetadataURISynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionLearningResourceMetadataURISynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionLearningResourceMetadataURISynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionMeetingTimeMapper 
    {
        public static bool SynchronizeTo(this IInterventionMeetingTime source, IInterventionMeetingTime target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionMeetingTimeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EndTime != target.EndTime)
            {
                source.EndTime = target.EndTime;
            }
            if (source.StartTime != target.StartTime)
            {
                source.StartTime = target.StartTime;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionMeetingTime source, IInterventionMeetingTime target, Action<IInterventionMeetingTime, IInterventionMeetingTime> onMapped)
        {
            var sourceSynchSupport = source as IInterventionMeetingTimeSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionMeetingTimeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EndTime = source.EndTime;
            target.StartTime = source.StartTime;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionMeetingTimeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionPopulationServedMapper 
    {
        public static bool SynchronizeTo(this IInterventionPopulationServed source, IInterventionPopulationServed target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPopulationServedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PopulationServedDescriptor != target.PopulationServedDescriptor)
            {
                source.PopulationServedDescriptor = target.PopulationServedDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPopulationServed source, IInterventionPopulationServed target, Action<IInterventionPopulationServed, IInterventionPopulationServed> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPopulationServedSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPopulationServedSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPopulationServedSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStaffMapper 
    {
        public static bool SynchronizeTo(this IInterventionStaff source, IInterventionStaff target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStaffSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStaff source, IInterventionStaff target, Action<IInterventionStaff, IInterventionStaff> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStaffSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStaffSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStaffSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionURIMapper 
    {
        public static bool SynchronizeTo(this IInterventionURI source, IInterventionURI target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionURISynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.URI != target.URI)
            {
                source.URI = target.URI;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionURI source, IInterventionURI target, Action<IInterventionURI, IInterventionURI> onMapped)
        {
            var sourceSynchSupport = source as IInterventionURISynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionURISynchronizationSourceSupport;

            // Copy contextual primary key values
            target.URI = source.URI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionURISynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: InterventionClassDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionClassDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InterventionClassDescriptorMapper 
    {
        public static bool SynchronizeTo(this IInterventionClassDescriptor source, IInterventionClassDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionClassDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InterventionClassDescriptorId != target.InterventionClassDescriptorId)
            {
                source.InterventionClassDescriptorId = target.InterventionClassDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInterventionClassDescriptor source, IInterventionClassDescriptor target, Action<IInterventionClassDescriptor, IInterventionClassDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInterventionClassDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionClassDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InterventionClassDescriptorId = source.InterventionClassDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionClassDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: InterventionEffectivenessRatingDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionEffectivenessRatingDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InterventionEffectivenessRatingDescriptorMapper 
    {
        public static bool SynchronizeTo(this IInterventionEffectivenessRatingDescriptor source, IInterventionEffectivenessRatingDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionEffectivenessRatingDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InterventionEffectivenessRatingDescriptorId != target.InterventionEffectivenessRatingDescriptorId)
            {
                source.InterventionEffectivenessRatingDescriptorId = target.InterventionEffectivenessRatingDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInterventionEffectivenessRatingDescriptor source, IInterventionEffectivenessRatingDescriptor target, Action<IInterventionEffectivenessRatingDescriptor, IInterventionEffectivenessRatingDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInterventionEffectivenessRatingDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionEffectivenessRatingDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InterventionEffectivenessRatingDescriptorId = source.InterventionEffectivenessRatingDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionEffectivenessRatingDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: InterventionPrescription

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionPrescriptionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionMapper 
    {
        public static bool SynchronizeTo(this IInterventionPrescription source, IInterventionPrescription target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPrescriptionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.InterventionPrescriptionIdentificationCode != target.InterventionPrescriptionIdentificationCode)
            {
                source.InterventionPrescriptionIdentificationCode = target.InterventionPrescriptionIdentificationCode;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDeliveryMethodDescriptorSupported)
                && target.DeliveryMethodDescriptor != source.DeliveryMethodDescriptor)
            {
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterventionClassDescriptorSupported)
                && target.InterventionClassDescriptor != source.InterventionClassDescriptor)
            {
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxDosageSupported)
                && target.MaxDosage != source.MaxDosage)
            {
                target.MaxDosage = source.MaxDosage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinDosageSupported)
                && target.MinDosage != source.MinDosage)
            {
                target.MinDosage = source.MinDosage;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsInterventionPrescriptionAppropriateGradeLevelsSupported)
            {
                isModified |= 
                    source.InterventionPrescriptionAppropriateGradeLevels.SynchronizeCollectionTo(
                        target.InterventionPrescriptionAppropriateGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionPrescriptionAppropriateGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionPrescriptionAppropriateSexesSupported)
            {
                isModified |= 
                    source.InterventionPrescriptionAppropriateSexes.SynchronizeCollectionTo(
                        target.InterventionPrescriptionAppropriateSexes, 
                        onChildAdded: child => 
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionPrescriptionAppropriateSexIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionPrescriptionDiagnosesSupported)
            {
                isModified |= 
                    source.InterventionPrescriptionDiagnoses.SynchronizeCollectionTo(
                        target.InterventionPrescriptionDiagnoses, 
                        onChildAdded: child => 
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionPrescriptionDiagnosisIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionPrescriptionEducationContentsSupported)
            {
                isModified |= 
                    source.InterventionPrescriptionEducationContents.SynchronizeCollectionTo(
                        target.InterventionPrescriptionEducationContents, 
                        onChildAdded: child => 
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionPrescriptionEducationContentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionPrescriptionLearningResourceMetadataURIsSupported)
            {
                isModified |= 
                    source.InterventionPrescriptionLearningResourceMetadataURIs.SynchronizeCollectionTo(
                        target.InterventionPrescriptionLearningResourceMetadataURIs, 
                        onChildAdded: child => 
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionPrescriptionLearningResourceMetadataURIIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionPrescriptionPopulationServedsSupported)
            {
                isModified |= 
                    source.InterventionPrescriptionPopulationServeds.SynchronizeCollectionTo(
                        target.InterventionPrescriptionPopulationServeds, 
                        onChildAdded: child => 
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionPrescriptionPopulationServedIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionPrescriptionURIsSupported)
            {
                isModified |= 
                    source.InterventionPrescriptionURIs.SynchronizeCollectionTo(
                        target.InterventionPrescriptionURIs, 
                        onChildAdded: child => 
                            {
                                child.InterventionPrescription = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionPrescriptionURIIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPrescription source, IInterventionPrescription target, Action<IInterventionPrescription, IInterventionPrescription> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPrescriptionSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPrescriptionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDeliveryMethodDescriptorSupported)
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
            else
                targetSynchSupport.IsDeliveryMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsInterventionClassDescriptorSupported)
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
            else
                targetSynchSupport.IsInterventionClassDescriptorSupported = false;

            if (sourceSynchSupport.IsMaxDosageSupported)
                target.MaxDosage = source.MaxDosage;
            else
                targetSynchSupport.IsMaxDosageSupported = false;

            if (sourceSynchSupport.IsMinDosageSupported)
                target.MinDosage = source.MinDosage;
            else
                targetSynchSupport.IsMinDosageSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsInterventionPrescriptionAppropriateGradeLevelsSupported)
            {    
                targetSynchSupport.IsInterventionPrescriptionAppropriateGradeLevelIncluded = sourceSynchSupport.IsInterventionPrescriptionAppropriateGradeLevelIncluded;
                source.InterventionPrescriptionAppropriateGradeLevels.MapCollectionTo(target.InterventionPrescriptionAppropriateGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsInterventionPrescriptionAppropriateGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionPrescriptionAppropriateSexesSupported)
            {    
                targetSynchSupport.IsInterventionPrescriptionAppropriateSexIncluded = sourceSynchSupport.IsInterventionPrescriptionAppropriateSexIncluded;
                source.InterventionPrescriptionAppropriateSexes.MapCollectionTo(target.InterventionPrescriptionAppropriateSexes, target);
            }
            else
            {
                targetSynchSupport.IsInterventionPrescriptionAppropriateSexesSupported = false;
            }

            if (sourceSynchSupport.IsInterventionPrescriptionDiagnosesSupported)
            {    
                targetSynchSupport.IsInterventionPrescriptionDiagnosisIncluded = sourceSynchSupport.IsInterventionPrescriptionDiagnosisIncluded;
                source.InterventionPrescriptionDiagnoses.MapCollectionTo(target.InterventionPrescriptionDiagnoses, target);
            }
            else
            {
                targetSynchSupport.IsInterventionPrescriptionDiagnosesSupported = false;
            }

            if (sourceSynchSupport.IsInterventionPrescriptionEducationContentsSupported)
            {    
                targetSynchSupport.IsInterventionPrescriptionEducationContentIncluded = sourceSynchSupport.IsInterventionPrescriptionEducationContentIncluded;
                source.InterventionPrescriptionEducationContents.MapCollectionTo(target.InterventionPrescriptionEducationContents, target);
            }
            else
            {
                targetSynchSupport.IsInterventionPrescriptionEducationContentsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionPrescriptionLearningResourceMetadataURIsSupported)
            {    
                targetSynchSupport.IsInterventionPrescriptionLearningResourceMetadataURIIncluded = sourceSynchSupport.IsInterventionPrescriptionLearningResourceMetadataURIIncluded;
                source.InterventionPrescriptionLearningResourceMetadataURIs.MapCollectionTo(target.InterventionPrescriptionLearningResourceMetadataURIs, target);
            }
            else
            {
                targetSynchSupport.IsInterventionPrescriptionLearningResourceMetadataURIsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionPrescriptionPopulationServedsSupported)
            {    
                targetSynchSupport.IsInterventionPrescriptionPopulationServedIncluded = sourceSynchSupport.IsInterventionPrescriptionPopulationServedIncluded;
                source.InterventionPrescriptionPopulationServeds.MapCollectionTo(target.InterventionPrescriptionPopulationServeds, target);
            }
            else
            {
                targetSynchSupport.IsInterventionPrescriptionPopulationServedsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionPrescriptionURIsSupported)
            {    
                targetSynchSupport.IsInterventionPrescriptionURIIncluded = sourceSynchSupport.IsInterventionPrescriptionURIIncluded;
                source.InterventionPrescriptionURIs.MapCollectionTo(target.InterventionPrescriptionURIs, target);
            }
            else
            {
                targetSynchSupport.IsInterventionPrescriptionURIsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPrescriptionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDeliveryMethodDescriptorSupported { get; set; }
        bool IsInterventionClassDescriptorSupported { get; set; }
        bool IsInterventionPrescriptionAppropriateGradeLevelsSupported { get; set; }
        bool IsInterventionPrescriptionAppropriateSexesSupported { get; set; }
        bool IsInterventionPrescriptionDiagnosesSupported { get; set; }
        bool IsInterventionPrescriptionEducationContentsSupported { get; set; }
        bool IsInterventionPrescriptionLearningResourceMetadataURIsSupported { get; set; }
        bool IsInterventionPrescriptionPopulationServedsSupported { get; set; }
        bool IsInterventionPrescriptionURIsSupported { get; set; }
        bool IsMaxDosageSupported { get; set; }
        bool IsMinDosageSupported { get; set; }
        Func<IInterventionPrescriptionAppropriateGradeLevel, bool> IsInterventionPrescriptionAppropriateGradeLevelIncluded { get; set; }
        Func<IInterventionPrescriptionAppropriateSex, bool> IsInterventionPrescriptionAppropriateSexIncluded { get; set; }
        Func<IInterventionPrescriptionDiagnosis, bool> IsInterventionPrescriptionDiagnosisIncluded { get; set; }
        Func<IInterventionPrescriptionEducationContent, bool> IsInterventionPrescriptionEducationContentIncluded { get; set; }
        Func<IInterventionPrescriptionLearningResourceMetadataURI, bool> IsInterventionPrescriptionLearningResourceMetadataURIIncluded { get; set; }
        Func<IInterventionPrescriptionPopulationServed, bool> IsInterventionPrescriptionPopulationServedIncluded { get; set; }
        Func<IInterventionPrescriptionURI, bool> IsInterventionPrescriptionURIIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionAppropriateGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IInterventionPrescriptionAppropriateGradeLevel source, IInterventionPrescriptionAppropriateGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPrescriptionAppropriateGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPrescriptionAppropriateGradeLevel source, IInterventionPrescriptionAppropriateGradeLevel target, Action<IInterventionPrescriptionAppropriateGradeLevel, IInterventionPrescriptionAppropriateGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPrescriptionAppropriateGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPrescriptionAppropriateGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPrescriptionAppropriateGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionAppropriateSexMapper 
    {
        public static bool SynchronizeTo(this IInterventionPrescriptionAppropriateSex source, IInterventionPrescriptionAppropriateSex target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPrescriptionAppropriateSexSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SexDescriptor != target.SexDescriptor)
            {
                source.SexDescriptor = target.SexDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPrescriptionAppropriateSex source, IInterventionPrescriptionAppropriateSex target, Action<IInterventionPrescriptionAppropriateSex, IInterventionPrescriptionAppropriateSex> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPrescriptionAppropriateSexSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPrescriptionAppropriateSexSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPrescriptionAppropriateSexSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionDiagnosisMapper 
    {
        public static bool SynchronizeTo(this IInterventionPrescriptionDiagnosis source, IInterventionPrescriptionDiagnosis target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPrescriptionDiagnosisSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiagnosisDescriptor != target.DiagnosisDescriptor)
            {
                source.DiagnosisDescriptor = target.DiagnosisDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPrescriptionDiagnosis source, IInterventionPrescriptionDiagnosis target, Action<IInterventionPrescriptionDiagnosis, IInterventionPrescriptionDiagnosis> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPrescriptionDiagnosisSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPrescriptionDiagnosisSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DiagnosisDescriptor = source.DiagnosisDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPrescriptionDiagnosisSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionEducationContentMapper 
    {
        public static bool SynchronizeTo(this IInterventionPrescriptionEducationContent source, IInterventionPrescriptionEducationContent target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPrescriptionEducationContentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContentIdentifier != target.ContentIdentifier)
            {
                source.ContentIdentifier = target.ContentIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPrescriptionEducationContent source, IInterventionPrescriptionEducationContent target, Action<IInterventionPrescriptionEducationContent, IInterventionPrescriptionEducationContent> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPrescriptionEducationContentSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPrescriptionEducationContentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ContentIdentifier = source.ContentIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationContentResourceId = source.EducationContentResourceId;
                target.EducationContentDiscriminator = source.EducationContentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPrescriptionEducationContentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionLearningResourceMetadataURIMapper 
    {
        public static bool SynchronizeTo(this IInterventionPrescriptionLearningResourceMetadataURI source, IInterventionPrescriptionLearningResourceMetadataURI target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPrescriptionLearningResourceMetadataURISynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningResourceMetadataURI != target.LearningResourceMetadataURI)
            {
                source.LearningResourceMetadataURI = target.LearningResourceMetadataURI;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPrescriptionLearningResourceMetadataURI source, IInterventionPrescriptionLearningResourceMetadataURI target, Action<IInterventionPrescriptionLearningResourceMetadataURI, IInterventionPrescriptionLearningResourceMetadataURI> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPrescriptionLearningResourceMetadataURISynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPrescriptionLearningResourceMetadataURISynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPrescriptionLearningResourceMetadataURISynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionPopulationServedMapper 
    {
        public static bool SynchronizeTo(this IInterventionPrescriptionPopulationServed source, IInterventionPrescriptionPopulationServed target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPrescriptionPopulationServedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PopulationServedDescriptor != target.PopulationServedDescriptor)
            {
                source.PopulationServedDescriptor = target.PopulationServedDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPrescriptionPopulationServed source, IInterventionPrescriptionPopulationServed target, Action<IInterventionPrescriptionPopulationServed, IInterventionPrescriptionPopulationServed> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPrescriptionPopulationServedSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPrescriptionPopulationServedSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPrescriptionPopulationServedSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionPrescriptionURIMapper 
    {
        public static bool SynchronizeTo(this IInterventionPrescriptionURI source, IInterventionPrescriptionURI target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionPrescriptionURISynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.URI != target.URI)
            {
                source.URI = target.URI;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionPrescriptionURI source, IInterventionPrescriptionURI target, Action<IInterventionPrescriptionURI, IInterventionPrescriptionURI> onMapped)
        {
            var sourceSynchSupport = source as IInterventionPrescriptionURISynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionPrescriptionURISynchronizationSourceSupport;

            // Copy contextual primary key values
            target.URI = source.URI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionPrescriptionURISynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: InterventionStudy

namespace EdFi.Ods.Entities.Common.EdFi //.InterventionStudyAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudy source, IInterventionStudy target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.InterventionStudyIdentificationCode != target.InterventionStudyIdentificationCode)
            {
                source.InterventionStudyIdentificationCode = target.InterventionStudyIdentificationCode;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDeliveryMethodDescriptorSupported)
                && target.DeliveryMethodDescriptor != source.DeliveryMethodDescriptor)
            {
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterventionClassDescriptorSupported)
                && target.InterventionClassDescriptor != source.InterventionClassDescriptor)
            {
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterventionPrescriptionEducationOrganizationIdSupported)
                && target.InterventionPrescriptionEducationOrganizationId != source.InterventionPrescriptionEducationOrganizationId)
            {
                target.InterventionPrescriptionEducationOrganizationId = source.InterventionPrescriptionEducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterventionPrescriptionIdentificationCodeSupported)
                && target.InterventionPrescriptionIdentificationCode != source.InterventionPrescriptionIdentificationCode)
            {
                target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParticipantsSupported)
                && target.Participants != source.Participants)
            {
                target.Participants = source.Participants;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsInterventionStudyAppropriateGradeLevelsSupported)
            {
                isModified |= 
                    source.InterventionStudyAppropriateGradeLevels.SynchronizeCollectionTo(
                        target.InterventionStudyAppropriateGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStudyAppropriateGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionStudyAppropriateSexesSupported)
            {
                isModified |= 
                    source.InterventionStudyAppropriateSexes.SynchronizeCollectionTo(
                        target.InterventionStudyAppropriateSexes, 
                        onChildAdded: child => 
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStudyAppropriateSexIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionStudyEducationContentsSupported)
            {
                isModified |= 
                    source.InterventionStudyEducationContents.SynchronizeCollectionTo(
                        target.InterventionStudyEducationContents, 
                        onChildAdded: child => 
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStudyEducationContentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionStudyInterventionEffectivenessesSupported)
            {
                isModified |= 
                    source.InterventionStudyInterventionEffectivenesses.SynchronizeCollectionTo(
                        target.InterventionStudyInterventionEffectivenesses, 
                        onChildAdded: child => 
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStudyInterventionEffectivenessIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionStudyLearningResourceMetadataURIsSupported)
            {
                isModified |= 
                    source.InterventionStudyLearningResourceMetadataURIs.SynchronizeCollectionTo(
                        target.InterventionStudyLearningResourceMetadataURIs, 
                        onChildAdded: child => 
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStudyLearningResourceMetadataURIIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionStudyPopulationServedsSupported)
            {
                isModified |= 
                    source.InterventionStudyPopulationServeds.SynchronizeCollectionTo(
                        target.InterventionStudyPopulationServeds, 
                        onChildAdded: child => 
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStudyPopulationServedIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionStudyStateAbbreviationsSupported)
            {
                isModified |= 
                    source.InterventionStudyStateAbbreviations.SynchronizeCollectionTo(
                        target.InterventionStudyStateAbbreviations, 
                        onChildAdded: child => 
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStudyStateAbbreviationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsInterventionStudyURIsSupported)
            {
                isModified |= 
                    source.InterventionStudyURIs.SynchronizeCollectionTo(
                        target.InterventionStudyURIs, 
                        onChildAdded: child => 
                            {
                                child.InterventionStudy = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsInterventionStudyURIIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudy source, IInterventionStudy target, Action<IInterventionStudy, IInterventionStudy> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudySynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudySynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionStudyIdentificationCode = source.InterventionStudyIdentificationCode;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDeliveryMethodDescriptorSupported)
                target.DeliveryMethodDescriptor = source.DeliveryMethodDescriptor;
            else
                targetSynchSupport.IsDeliveryMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsInterventionClassDescriptorSupported)
                target.InterventionClassDescriptor = source.InterventionClassDescriptor;
            else
                targetSynchSupport.IsInterventionClassDescriptorSupported = false;

            if (sourceSynchSupport.IsInterventionPrescriptionEducationOrganizationIdSupported)
                target.InterventionPrescriptionEducationOrganizationId = source.InterventionPrescriptionEducationOrganizationId;
            else
                targetSynchSupport.IsInterventionPrescriptionEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsInterventionPrescriptionIdentificationCodeSupported)
                target.InterventionPrescriptionIdentificationCode = source.InterventionPrescriptionIdentificationCode;
            else
                targetSynchSupport.IsInterventionPrescriptionIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsParticipantsSupported)
                target.Participants = source.Participants;
            else
                targetSynchSupport.IsParticipantsSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.InterventionPrescriptionResourceId = source.InterventionPrescriptionResourceId;
                target.InterventionPrescriptionDiscriminator = source.InterventionPrescriptionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsInterventionStudyAppropriateGradeLevelsSupported)
            {    
                targetSynchSupport.IsInterventionStudyAppropriateGradeLevelIncluded = sourceSynchSupport.IsInterventionStudyAppropriateGradeLevelIncluded;
                source.InterventionStudyAppropriateGradeLevels.MapCollectionTo(target.InterventionStudyAppropriateGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStudyAppropriateGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionStudyAppropriateSexesSupported)
            {    
                targetSynchSupport.IsInterventionStudyAppropriateSexIncluded = sourceSynchSupport.IsInterventionStudyAppropriateSexIncluded;
                source.InterventionStudyAppropriateSexes.MapCollectionTo(target.InterventionStudyAppropriateSexes, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStudyAppropriateSexesSupported = false;
            }

            if (sourceSynchSupport.IsInterventionStudyEducationContentsSupported)
            {    
                targetSynchSupport.IsInterventionStudyEducationContentIncluded = sourceSynchSupport.IsInterventionStudyEducationContentIncluded;
                source.InterventionStudyEducationContents.MapCollectionTo(target.InterventionStudyEducationContents, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStudyEducationContentsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionStudyInterventionEffectivenessesSupported)
            {    
                targetSynchSupport.IsInterventionStudyInterventionEffectivenessIncluded = sourceSynchSupport.IsInterventionStudyInterventionEffectivenessIncluded;
                source.InterventionStudyInterventionEffectivenesses.MapCollectionTo(target.InterventionStudyInterventionEffectivenesses, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStudyInterventionEffectivenessesSupported = false;
            }

            if (sourceSynchSupport.IsInterventionStudyLearningResourceMetadataURIsSupported)
            {    
                targetSynchSupport.IsInterventionStudyLearningResourceMetadataURIIncluded = sourceSynchSupport.IsInterventionStudyLearningResourceMetadataURIIncluded;
                source.InterventionStudyLearningResourceMetadataURIs.MapCollectionTo(target.InterventionStudyLearningResourceMetadataURIs, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStudyLearningResourceMetadataURIsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionStudyPopulationServedsSupported)
            {    
                targetSynchSupport.IsInterventionStudyPopulationServedIncluded = sourceSynchSupport.IsInterventionStudyPopulationServedIncluded;
                source.InterventionStudyPopulationServeds.MapCollectionTo(target.InterventionStudyPopulationServeds, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStudyPopulationServedsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionStudyStateAbbreviationsSupported)
            {    
                targetSynchSupport.IsInterventionStudyStateAbbreviationIncluded = sourceSynchSupport.IsInterventionStudyStateAbbreviationIncluded;
                source.InterventionStudyStateAbbreviations.MapCollectionTo(target.InterventionStudyStateAbbreviations, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStudyStateAbbreviationsSupported = false;
            }

            if (sourceSynchSupport.IsInterventionStudyURIsSupported)
            {    
                targetSynchSupport.IsInterventionStudyURIIncluded = sourceSynchSupport.IsInterventionStudyURIIncluded;
                source.InterventionStudyURIs.MapCollectionTo(target.InterventionStudyURIs, target);
            }
            else
            {
                targetSynchSupport.IsInterventionStudyURIsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDeliveryMethodDescriptorSupported { get; set; }
        bool IsInterventionClassDescriptorSupported { get; set; }
        bool IsInterventionPrescriptionEducationOrganizationIdSupported { get; set; }
        bool IsInterventionPrescriptionIdentificationCodeSupported { get; set; }
        bool IsInterventionStudyAppropriateGradeLevelsSupported { get; set; }
        bool IsInterventionStudyAppropriateSexesSupported { get; set; }
        bool IsInterventionStudyEducationContentsSupported { get; set; }
        bool IsInterventionStudyInterventionEffectivenessesSupported { get; set; }
        bool IsInterventionStudyLearningResourceMetadataURIsSupported { get; set; }
        bool IsInterventionStudyPopulationServedsSupported { get; set; }
        bool IsInterventionStudyStateAbbreviationsSupported { get; set; }
        bool IsInterventionStudyURIsSupported { get; set; }
        bool IsParticipantsSupported { get; set; }
        Func<IInterventionStudyAppropriateGradeLevel, bool> IsInterventionStudyAppropriateGradeLevelIncluded { get; set; }
        Func<IInterventionStudyAppropriateSex, bool> IsInterventionStudyAppropriateSexIncluded { get; set; }
        Func<IInterventionStudyEducationContent, bool> IsInterventionStudyEducationContentIncluded { get; set; }
        Func<IInterventionStudyInterventionEffectiveness, bool> IsInterventionStudyInterventionEffectivenessIncluded { get; set; }
        Func<IInterventionStudyLearningResourceMetadataURI, bool> IsInterventionStudyLearningResourceMetadataURIIncluded { get; set; }
        Func<IInterventionStudyPopulationServed, bool> IsInterventionStudyPopulationServedIncluded { get; set; }
        Func<IInterventionStudyStateAbbreviation, bool> IsInterventionStudyStateAbbreviationIncluded { get; set; }
        Func<IInterventionStudyURI, bool> IsInterventionStudyURIIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyAppropriateGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudyAppropriateGradeLevel source, IInterventionStudyAppropriateGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudyAppropriateGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudyAppropriateGradeLevel source, IInterventionStudyAppropriateGradeLevel target, Action<IInterventionStudyAppropriateGradeLevel, IInterventionStudyAppropriateGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudyAppropriateGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudyAppropriateGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudyAppropriateGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyAppropriateSexMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudyAppropriateSex source, IInterventionStudyAppropriateSex target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudyAppropriateSexSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SexDescriptor != target.SexDescriptor)
            {
                source.SexDescriptor = target.SexDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudyAppropriateSex source, IInterventionStudyAppropriateSex target, Action<IInterventionStudyAppropriateSex, IInterventionStudyAppropriateSex> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudyAppropriateSexSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudyAppropriateSexSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SexDescriptor = source.SexDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudyAppropriateSexSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyEducationContentMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudyEducationContent source, IInterventionStudyEducationContent target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudyEducationContentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContentIdentifier != target.ContentIdentifier)
            {
                source.ContentIdentifier = target.ContentIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudyEducationContent source, IInterventionStudyEducationContent target, Action<IInterventionStudyEducationContent, IInterventionStudyEducationContent> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudyEducationContentSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudyEducationContentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ContentIdentifier = source.ContentIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationContentResourceId = source.EducationContentResourceId;
                target.EducationContentDiscriminator = source.EducationContentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudyEducationContentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyInterventionEffectivenessMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudyInterventionEffectiveness source, IInterventionStudyInterventionEffectiveness target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudyInterventionEffectivenessSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiagnosisDescriptor != target.DiagnosisDescriptor)
            {
                source.DiagnosisDescriptor = target.DiagnosisDescriptor;
            }
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }
            if (source.PopulationServedDescriptor != target.PopulationServedDescriptor)
            {
                source.PopulationServedDescriptor = target.PopulationServedDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsImprovementIndexSupported)
                && target.ImprovementIndex != source.ImprovementIndex)
            {
                target.ImprovementIndex = source.ImprovementIndex;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterventionEffectivenessRatingDescriptorSupported)
                && target.InterventionEffectivenessRatingDescriptor != source.InterventionEffectivenessRatingDescriptor)
            {
                target.InterventionEffectivenessRatingDescriptor = source.InterventionEffectivenessRatingDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudyInterventionEffectiveness source, IInterventionStudyInterventionEffectiveness target, Action<IInterventionStudyInterventionEffectiveness, IInterventionStudyInterventionEffectiveness> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudyInterventionEffectivenessSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudyInterventionEffectivenessSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DiagnosisDescriptor = source.DiagnosisDescriptor;
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsImprovementIndexSupported)
                target.ImprovementIndex = source.ImprovementIndex;
            else
                targetSynchSupport.IsImprovementIndexSupported = false;

            if (sourceSynchSupport.IsInterventionEffectivenessRatingDescriptorSupported)
                target.InterventionEffectivenessRatingDescriptor = source.InterventionEffectivenessRatingDescriptor;
            else
                targetSynchSupport.IsInterventionEffectivenessRatingDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudyInterventionEffectivenessSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsImprovementIndexSupported { get; set; }
        bool IsInterventionEffectivenessRatingDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyLearningResourceMetadataURIMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudyLearningResourceMetadataURI source, IInterventionStudyLearningResourceMetadataURI target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudyLearningResourceMetadataURISynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningResourceMetadataURI != target.LearningResourceMetadataURI)
            {
                source.LearningResourceMetadataURI = target.LearningResourceMetadataURI;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudyLearningResourceMetadataURI source, IInterventionStudyLearningResourceMetadataURI target, Action<IInterventionStudyLearningResourceMetadataURI, IInterventionStudyLearningResourceMetadataURI> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudyLearningResourceMetadataURISynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudyLearningResourceMetadataURISynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningResourceMetadataURI = source.LearningResourceMetadataURI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudyLearningResourceMetadataURISynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyPopulationServedMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudyPopulationServed source, IInterventionStudyPopulationServed target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudyPopulationServedSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PopulationServedDescriptor != target.PopulationServedDescriptor)
            {
                source.PopulationServedDescriptor = target.PopulationServedDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudyPopulationServed source, IInterventionStudyPopulationServed target, Action<IInterventionStudyPopulationServed, IInterventionStudyPopulationServed> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudyPopulationServedSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudyPopulationServedSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudyPopulationServedSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyStateAbbreviationMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudyStateAbbreviation source, IInterventionStudyStateAbbreviation target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudyStateAbbreviationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudyStateAbbreviation source, IInterventionStudyStateAbbreviation target, Action<IInterventionStudyStateAbbreviation, IInterventionStudyStateAbbreviation> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudyStateAbbreviationSynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudyStateAbbreviationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudyStateAbbreviationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class InterventionStudyURIMapper 
    {
        public static bool SynchronizeTo(this IInterventionStudyURI source, IInterventionStudyURI target)
        {
            bool isModified = false;

            var sourceSupport = source as IInterventionStudyURISynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.URI != target.URI)
            {
                source.URI = target.URI;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IInterventionStudyURI source, IInterventionStudyURI target, Action<IInterventionStudyURI, IInterventionStudyURI> onMapped)
        {
            var sourceSynchSupport = source as IInterventionStudyURISynchronizationSourceSupport;
            var targetSynchSupport = target as IInterventionStudyURISynchronizationSourceSupport;

            // Copy contextual primary key values
            target.URI = source.URI;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInterventionStudyURISynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: LanguageDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LanguageDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LanguageDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILanguageDescriptor source, ILanguageDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILanguageDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptorId != target.LanguageDescriptorId)
            {
                source.LanguageDescriptorId = target.LanguageDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILanguageDescriptor source, ILanguageDescriptor target, Action<ILanguageDescriptor, ILanguageDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILanguageDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILanguageDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LanguageDescriptorId = source.LanguageDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILanguageDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LanguageInstructionProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LanguageInstructionProgramServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LanguageInstructionProgramServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILanguageInstructionProgramServiceDescriptor source, ILanguageInstructionProgramServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILanguageInstructionProgramServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageInstructionProgramServiceDescriptorId != target.LanguageInstructionProgramServiceDescriptorId)
            {
                source.LanguageInstructionProgramServiceDescriptorId = target.LanguageInstructionProgramServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILanguageInstructionProgramServiceDescriptor source, ILanguageInstructionProgramServiceDescriptor target, Action<ILanguageInstructionProgramServiceDescriptor, ILanguageInstructionProgramServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILanguageInstructionProgramServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILanguageInstructionProgramServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LanguageInstructionProgramServiceDescriptorId = source.LanguageInstructionProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILanguageInstructionProgramServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LanguageUseDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LanguageUseDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LanguageUseDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILanguageUseDescriptor source, ILanguageUseDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILanguageUseDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptorId != target.LanguageUseDescriptorId)
            {
                source.LanguageUseDescriptorId = target.LanguageUseDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILanguageUseDescriptor source, ILanguageUseDescriptor target, Action<ILanguageUseDescriptor, ILanguageUseDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILanguageUseDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILanguageUseDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LanguageUseDescriptorId = source.LanguageUseDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILanguageUseDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LearningObjective

namespace EdFi.Ods.Entities.Common.EdFi //.LearningObjectiveAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LearningObjectiveMapper 
    {
        public static bool SynchronizeTo(this ILearningObjective source, ILearningObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningObjectiveId != target.LearningObjectiveId)
            {
                source.LearningObjectiveId = target.LearningObjectiveId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNomenclatureSupported)
                && target.Nomenclature != source.Nomenclature)
            {
                target.Nomenclature = source.Nomenclature;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsObjectiveSupported)
                && target.Objective != source.Objective)
            {
                target.Objective = source.Objective;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParentLearningObjectiveIdSupported)
                && target.ParentLearningObjectiveId != source.ParentLearningObjectiveId)
            {
                target.ParentLearningObjectiveId = source.ParentLearningObjectiveId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParentNamespaceSupported)
                && target.ParentNamespace != source.ParentNamespace)
            {
                target.ParentNamespace = source.ParentNamespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSuccessCriteriaSupported)
                && target.SuccessCriteria != source.SuccessCriteria)
            {
                target.SuccessCriteria = source.SuccessCriteria;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // LearningObjectiveContentStandard
            if (sourceSupport == null || sourceSupport.IsLearningObjectiveContentStandardSupported)
            {
                if (source.LearningObjectiveContentStandard == null)
                {
                    if (target.LearningObjectiveContentStandard != null)
                    {
                        target.LearningObjectiveContentStandard = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.LearningObjectiveContentStandard == null)
                    {
                        var itemType = target.GetType().GetProperty("LearningObjectiveContentStandard").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.LearningObjectiveContentStandard = (ILearningObjectiveContentStandard) newItem;
                    }

                    isModified |= source.LearningObjectiveContentStandard.Synchronize(target.LearningObjectiveContentStandard);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsLearningObjectiveAcademicSubjectsSupported)
            {
                isModified |= 
                    source.LearningObjectiveAcademicSubjects.SynchronizeCollectionTo(
                        target.LearningObjectiveAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.LearningObjective = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningObjectiveAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsLearningObjectiveGradeLevelsSupported)
            {
                isModified |= 
                    source.LearningObjectiveGradeLevels.SynchronizeCollectionTo(
                        target.LearningObjectiveGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.LearningObjective = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningObjectiveGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsLearningObjectiveLearningStandardsSupported)
            {
                isModified |= 
                    source.LearningObjectiveLearningStandards.SynchronizeCollectionTo(
                        target.LearningObjectiveLearningStandards, 
                        onChildAdded: child => 
                            {
                                child.LearningObjective = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningObjectiveLearningStandardIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningObjective source, ILearningObjective target, Action<ILearningObjective, ILearningObjective> onMapped)
        {
            var sourceSynchSupport = source as ILearningObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningObjectiveSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningObjectiveId = source.LearningObjectiveId;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsNomenclatureSupported)
                target.Nomenclature = source.Nomenclature;
            else
                targetSynchSupport.IsNomenclatureSupported = false;

            if (sourceSynchSupport.IsObjectiveSupported)
                target.Objective = source.Objective;
            else
                targetSynchSupport.IsObjectiveSupported = false;

            if (sourceSynchSupport.IsParentLearningObjectiveIdSupported)
                target.ParentLearningObjectiveId = source.ParentLearningObjectiveId;
            else
                targetSynchSupport.IsParentLearningObjectiveIdSupported = false;

            if (sourceSynchSupport.IsParentNamespaceSupported)
                target.ParentNamespace = source.ParentNamespace;
            else
                targetSynchSupport.IsParentNamespaceSupported = false;

            if (sourceSynchSupport.IsSuccessCriteriaSupported)
                target.SuccessCriteria = source.SuccessCriteria;
            else
                targetSynchSupport.IsSuccessCriteriaSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ParentLearningObjectiveResourceId = source.ParentLearningObjectiveResourceId;
                target.ParentLearningObjectiveDiscriminator = source.ParentLearningObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // LearningObjectiveContentStandard (Source)
            if (sourceSynchSupport.IsLearningObjectiveContentStandardSupported)
            {
                var itemProperty = target.GetType().GetProperty("LearningObjectiveContentStandard");
                
                if (itemProperty != null)
                {                    
                    if (source.LearningObjectiveContentStandard == null)
                    {
                        target.LearningObjectiveContentStandard = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetLearningObjectiveContentStandard = Activator.CreateInstance(itemType);
                        (targetLearningObjectiveContentStandard as IChildEntity)?.SetParent(target);
                        source.LearningObjectiveContentStandard.Map(targetLearningObjectiveContentStandard);
                        
                        // Update the target reference appropriately
                        target.LearningObjectiveContentStandard = (ILearningObjectiveContentStandard) targetLearningObjectiveContentStandard;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsLearningObjectiveContentStandardSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsLearningObjectiveAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsLearningObjectiveAcademicSubjectIncluded = sourceSynchSupport.IsLearningObjectiveAcademicSubjectIncluded;
                source.LearningObjectiveAcademicSubjects.MapCollectionTo(target.LearningObjectiveAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsLearningObjectiveAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsLearningObjectiveGradeLevelsSupported)
            {    
                targetSynchSupport.IsLearningObjectiveGradeLevelIncluded = sourceSynchSupport.IsLearningObjectiveGradeLevelIncluded;
                source.LearningObjectiveGradeLevels.MapCollectionTo(target.LearningObjectiveGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsLearningObjectiveGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsLearningObjectiveLearningStandardsSupported)
            {    
                targetSynchSupport.IsLearningObjectiveLearningStandardIncluded = sourceSynchSupport.IsLearningObjectiveLearningStandardIncluded;
                source.LearningObjectiveLearningStandards.MapCollectionTo(target.LearningObjectiveLearningStandards, target);
            }
            else
            {
                targetSynchSupport.IsLearningObjectiveLearningStandardsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDescriptionSupported { get; set; }
        bool IsLearningObjectiveAcademicSubjectsSupported { get; set; }
        bool IsLearningObjectiveContentStandardSupported { get; set; }
        bool IsLearningObjectiveGradeLevelsSupported { get; set; }
        bool IsLearningObjectiveLearningStandardsSupported { get; set; }
        bool IsNomenclatureSupported { get; set; }
        bool IsObjectiveSupported { get; set; }
        bool IsParentLearningObjectiveIdSupported { get; set; }
        bool IsParentNamespaceSupported { get; set; }
        bool IsSuccessCriteriaSupported { get; set; }
        Func<ILearningObjectiveAcademicSubject, bool> IsLearningObjectiveAcademicSubjectIncluded { get; set; }
        Func<ILearningObjectiveGradeLevel, bool> IsLearningObjectiveGradeLevelIncluded { get; set; }
        Func<ILearningObjectiveLearningStandard, bool> IsLearningObjectiveLearningStandardIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningObjectiveAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this ILearningObjectiveAcademicSubject source, ILearningObjectiveAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningObjectiveAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningObjectiveAcademicSubject source, ILearningObjectiveAcademicSubject target, Action<ILearningObjectiveAcademicSubject, ILearningObjectiveAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as ILearningObjectiveAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningObjectiveAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningObjectiveAcademicSubjectSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningObjectiveContentStandardMapper 
    {
        public static bool SynchronizeTo(this ILearningObjectiveContentStandard source, ILearningObjectiveContentStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningObjectiveContentStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMandatingEducationOrganizationIdSupported)
                && target.MandatingEducationOrganizationId != source.MandatingEducationOrganizationId)
            {
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationDateSupported)
                && target.PublicationDate != source.PublicationDate)
            {
                target.PublicationDate = source.PublicationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationStatusDescriptorSupported)
                && target.PublicationStatusDescriptor != source.PublicationStatusDescriptor)
            {
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationYearSupported)
                && target.PublicationYear != source.PublicationYear)
            {
                target.PublicationYear = source.PublicationYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleSupported)
                && target.Title != source.Title)
            {
                target.Title = source.Title;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsURISupported)
                && target.URI != source.URI)
            {
                target.URI = source.URI;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsVersionSupported)
                && target.Version != source.Version)
            {
                target.Version = source.Version;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsLearningObjectiveContentStandardAuthorsSupported)
            {
                isModified |= 
                    source.LearningObjectiveContentStandardAuthors.SynchronizeCollectionTo(
                        target.LearningObjectiveContentStandardAuthors, 
                        onChildAdded: child => 
                            {
                                child.LearningObjectiveContentStandard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningObjectiveContentStandardAuthorIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningObjectiveContentStandard source, ILearningObjectiveContentStandard target, Action<ILearningObjectiveContentStandard, ILearningObjectiveContentStandard> onMapped)
        {
            var sourceSynchSupport = source as ILearningObjectiveContentStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningObjectiveContentStandardSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsMandatingEducationOrganizationIdSupported)
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;
            else
                targetSynchSupport.IsMandatingEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsPublicationDateSupported)
                target.PublicationDate = source.PublicationDate;
            else
                targetSynchSupport.IsPublicationDateSupported = false;

            if (sourceSynchSupport.IsPublicationStatusDescriptorSupported)
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;
            else
                targetSynchSupport.IsPublicationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsPublicationYearSupported)
                target.PublicationYear = source.PublicationYear;
            else
                targetSynchSupport.IsPublicationYearSupported = false;

            if (sourceSynchSupport.IsTitleSupported)
                target.Title = source.Title;
            else
                targetSynchSupport.IsTitleSupported = false;

            if (sourceSynchSupport.IsURISupported)
                target.URI = source.URI;
            else
                targetSynchSupport.IsURISupported = false;

            if (sourceSynchSupport.IsVersionSupported)
                target.Version = source.Version;
            else
                targetSynchSupport.IsVersionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.MandatingEducationOrganizationResourceId = source.MandatingEducationOrganizationResourceId;
                target.MandatingEducationOrganizationDiscriminator = source.MandatingEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsLearningObjectiveContentStandardAuthorsSupported)
            {    
                targetSynchSupport.IsLearningObjectiveContentStandardAuthorIncluded = sourceSynchSupport.IsLearningObjectiveContentStandardAuthorIncluded;
                source.LearningObjectiveContentStandardAuthors.MapCollectionTo(target.LearningObjectiveContentStandardAuthors, target);
            }
            else
            {
                targetSynchSupport.IsLearningObjectiveContentStandardAuthorsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningObjectiveContentStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLearningObjectiveContentStandardAuthorsSupported { get; set; }
        bool IsMandatingEducationOrganizationIdSupported { get; set; }
        bool IsPublicationDateSupported { get; set; }
        bool IsPublicationStatusDescriptorSupported { get; set; }
        bool IsPublicationYearSupported { get; set; }
        bool IsTitleSupported { get; set; }
        bool IsURISupported { get; set; }
        bool IsVersionSupported { get; set; }
        Func<ILearningObjectiveContentStandardAuthor, bool> IsLearningObjectiveContentStandardAuthorIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningObjectiveContentStandardAuthorMapper 
    {
        public static bool SynchronizeTo(this ILearningObjectiveContentStandardAuthor source, ILearningObjectiveContentStandardAuthor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningObjectiveContentStandardAuthorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Author != target.Author)
            {
                source.Author = target.Author;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningObjectiveContentStandardAuthor source, ILearningObjectiveContentStandardAuthor target, Action<ILearningObjectiveContentStandardAuthor, ILearningObjectiveContentStandardAuthor> onMapped)
        {
            var sourceSynchSupport = source as ILearningObjectiveContentStandardAuthorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningObjectiveContentStandardAuthorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Author = source.Author;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningObjectiveContentStandardAuthorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningObjectiveGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ILearningObjectiveGradeLevel source, ILearningObjectiveGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningObjectiveGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningObjectiveGradeLevel source, ILearningObjectiveGradeLevel target, Action<ILearningObjectiveGradeLevel, ILearningObjectiveGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ILearningObjectiveGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningObjectiveGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningObjectiveGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningObjectiveLearningStandardMapper 
    {
        public static bool SynchronizeTo(this ILearningObjectiveLearningStandard source, ILearningObjectiveLearningStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningObjectiveLearningStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardId != target.LearningStandardId)
            {
                source.LearningStandardId = target.LearningStandardId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningObjectiveLearningStandard source, ILearningObjectiveLearningStandard target, Action<ILearningObjectiveLearningStandard, ILearningObjectiveLearningStandard> onMapped)
        {
            var sourceSynchSupport = source as ILearningObjectiveLearningStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningObjectiveLearningStandardSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningObjectiveLearningStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: LearningStandard

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardMapper 
    {
        public static bool SynchronizeTo(this ILearningStandard source, ILearningStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardId != target.LearningStandardId)
            {
                source.LearningStandardId = target.LearningStandardId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLearningStandardCategoryDescriptorSupported)
                && target.LearningStandardCategoryDescriptor != source.LearningStandardCategoryDescriptor)
            {
                target.LearningStandardCategoryDescriptor = source.LearningStandardCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLearningStandardItemCodeSupported)
                && target.LearningStandardItemCode != source.LearningStandardItemCode)
            {
                target.LearningStandardItemCode = source.LearningStandardItemCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLearningStandardScopeDescriptorSupported)
                && target.LearningStandardScopeDescriptor != source.LearningStandardScopeDescriptor)
            {
                target.LearningStandardScopeDescriptor = source.LearningStandardScopeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParentLearningStandardIdSupported)
                && target.ParentLearningStandardId != source.ParentLearningStandardId)
            {
                target.ParentLearningStandardId = source.ParentLearningStandardId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSuccessCriteriaSupported)
                && target.SuccessCriteria != source.SuccessCriteria)
            {
                target.SuccessCriteria = source.SuccessCriteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsURISupported)
                && target.URI != source.URI)
            {
                target.URI = source.URI;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // LearningStandardContentStandard
            if (sourceSupport == null || sourceSupport.IsLearningStandardContentStandardSupported)
            {
                if (source.LearningStandardContentStandard == null)
                {
                    if (target.LearningStandardContentStandard != null)
                    {
                        target.LearningStandardContentStandard = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.LearningStandardContentStandard == null)
                    {
                        var itemType = target.GetType().GetProperty("LearningStandardContentStandard").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.LearningStandardContentStandard = (ILearningStandardContentStandard) newItem;
                    }

                    isModified |= source.LearningStandardContentStandard.Synchronize(target.LearningStandardContentStandard);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsLearningStandardAcademicSubjectsSupported)
            {
                isModified |= 
                    source.LearningStandardAcademicSubjects.SynchronizeCollectionTo(
                        target.LearningStandardAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.LearningStandard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningStandardAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsLearningStandardGradeLevelsSupported)
            {
                isModified |= 
                    source.LearningStandardGradeLevels.SynchronizeCollectionTo(
                        target.LearningStandardGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.LearningStandard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningStandardGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsLearningStandardIdentificationCodesSupported)
            {
                isModified |= 
                    source.LearningStandardIdentificationCodes.SynchronizeCollectionTo(
                        target.LearningStandardIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.LearningStandard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningStandardIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsLearningStandardPrerequisiteLearningStandardsSupported)
            {
                isModified |= 
                    source.LearningStandardPrerequisiteLearningStandards.SynchronizeCollectionTo(
                        target.LearningStandardPrerequisiteLearningStandards, 
                        onChildAdded: child => 
                            {
                                child.LearningStandard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningStandardPrerequisiteLearningStandardIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningStandard source, ILearningStandard target, Action<ILearningStandard, ILearningStandard> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsLearningStandardCategoryDescriptorSupported)
                target.LearningStandardCategoryDescriptor = source.LearningStandardCategoryDescriptor;
            else
                targetSynchSupport.IsLearningStandardCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsLearningStandardItemCodeSupported)
                target.LearningStandardItemCode = source.LearningStandardItemCode;
            else
                targetSynchSupport.IsLearningStandardItemCodeSupported = false;

            if (sourceSynchSupport.IsLearningStandardScopeDescriptorSupported)
                target.LearningStandardScopeDescriptor = source.LearningStandardScopeDescriptor;
            else
                targetSynchSupport.IsLearningStandardScopeDescriptorSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsParentLearningStandardIdSupported)
                target.ParentLearningStandardId = source.ParentLearningStandardId;
            else
                targetSynchSupport.IsParentLearningStandardIdSupported = false;

            if (sourceSynchSupport.IsSuccessCriteriaSupported)
                target.SuccessCriteria = source.SuccessCriteria;
            else
                targetSynchSupport.IsSuccessCriteriaSupported = false;

            if (sourceSynchSupport.IsURISupported)
                target.URI = source.URI;
            else
                targetSynchSupport.IsURISupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ParentLearningStandardResourceId = source.ParentLearningStandardResourceId;
                target.ParentLearningStandardDiscriminator = source.ParentLearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // LearningStandardContentStandard (Source)
            if (sourceSynchSupport.IsLearningStandardContentStandardSupported)
            {
                var itemProperty = target.GetType().GetProperty("LearningStandardContentStandard");
                
                if (itemProperty != null)
                {                    
                    if (source.LearningStandardContentStandard == null)
                    {
                        target.LearningStandardContentStandard = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetLearningStandardContentStandard = Activator.CreateInstance(itemType);
                        (targetLearningStandardContentStandard as IChildEntity)?.SetParent(target);
                        source.LearningStandardContentStandard.Map(targetLearningStandardContentStandard);
                        
                        // Update the target reference appropriately
                        target.LearningStandardContentStandard = (ILearningStandardContentStandard) targetLearningStandardContentStandard;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsLearningStandardContentStandardSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsLearningStandardAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsLearningStandardAcademicSubjectIncluded = sourceSynchSupport.IsLearningStandardAcademicSubjectIncluded;
                source.LearningStandardAcademicSubjects.MapCollectionTo(target.LearningStandardAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsLearningStandardAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsLearningStandardGradeLevelsSupported)
            {    
                targetSynchSupport.IsLearningStandardGradeLevelIncluded = sourceSynchSupport.IsLearningStandardGradeLevelIncluded;
                source.LearningStandardGradeLevels.MapCollectionTo(target.LearningStandardGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsLearningStandardGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsLearningStandardIdentificationCodesSupported)
            {    
                targetSynchSupport.IsLearningStandardIdentificationCodeIncluded = sourceSynchSupport.IsLearningStandardIdentificationCodeIncluded;
                source.LearningStandardIdentificationCodes.MapCollectionTo(target.LearningStandardIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsLearningStandardIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsLearningStandardPrerequisiteLearningStandardsSupported)
            {    
                targetSynchSupport.IsLearningStandardPrerequisiteLearningStandardIncluded = sourceSynchSupport.IsLearningStandardPrerequisiteLearningStandardIncluded;
                source.LearningStandardPrerequisiteLearningStandards.MapCollectionTo(target.LearningStandardPrerequisiteLearningStandards, target);
            }
            else
            {
                targetSynchSupport.IsLearningStandardPrerequisiteLearningStandardsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCourseTitleSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsLearningStandardAcademicSubjectsSupported { get; set; }
        bool IsLearningStandardCategoryDescriptorSupported { get; set; }
        bool IsLearningStandardContentStandardSupported { get; set; }
        bool IsLearningStandardGradeLevelsSupported { get; set; }
        bool IsLearningStandardIdentificationCodesSupported { get; set; }
        bool IsLearningStandardItemCodeSupported { get; set; }
        bool IsLearningStandardPrerequisiteLearningStandardsSupported { get; set; }
        bool IsLearningStandardScopeDescriptorSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsParentLearningStandardIdSupported { get; set; }
        bool IsSuccessCriteriaSupported { get; set; }
        bool IsURISupported { get; set; }
        Func<ILearningStandardAcademicSubject, bool> IsLearningStandardAcademicSubjectIncluded { get; set; }
        Func<ILearningStandardGradeLevel, bool> IsLearningStandardGradeLevelIncluded { get; set; }
        Func<ILearningStandardIdentificationCode, bool> IsLearningStandardIdentificationCodeIncluded { get; set; }
        Func<ILearningStandardPrerequisiteLearningStandard, bool> IsLearningStandardPrerequisiteLearningStandardIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardAcademicSubject source, ILearningStandardAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningStandardAcademicSubject source, ILearningStandardAcademicSubject target, Action<ILearningStandardAcademicSubject, ILearningStandardAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardAcademicSubjectSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardContentStandardMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardContentStandard source, ILearningStandardContentStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardContentStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMandatingEducationOrganizationIdSupported)
                && target.MandatingEducationOrganizationId != source.MandatingEducationOrganizationId)
            {
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationDateSupported)
                && target.PublicationDate != source.PublicationDate)
            {
                target.PublicationDate = source.PublicationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationStatusDescriptorSupported)
                && target.PublicationStatusDescriptor != source.PublicationStatusDescriptor)
            {
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPublicationYearSupported)
                && target.PublicationYear != source.PublicationYear)
            {
                target.PublicationYear = source.PublicationYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleSupported)
                && target.Title != source.Title)
            {
                target.Title = source.Title;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsURISupported)
                && target.URI != source.URI)
            {
                target.URI = source.URI;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsVersionSupported)
                && target.Version != source.Version)
            {
                target.Version = source.Version;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsLearningStandardContentStandardAuthorsSupported)
            {
                isModified |= 
                    source.LearningStandardContentStandardAuthors.SynchronizeCollectionTo(
                        target.LearningStandardContentStandardAuthors, 
                        onChildAdded: child => 
                            {
                                child.LearningStandardContentStandard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLearningStandardContentStandardAuthorIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningStandardContentStandard source, ILearningStandardContentStandard target, Action<ILearningStandardContentStandard, ILearningStandardContentStandard> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardContentStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardContentStandardSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsMandatingEducationOrganizationIdSupported)
                target.MandatingEducationOrganizationId = source.MandatingEducationOrganizationId;
            else
                targetSynchSupport.IsMandatingEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsPublicationDateSupported)
                target.PublicationDate = source.PublicationDate;
            else
                targetSynchSupport.IsPublicationDateSupported = false;

            if (sourceSynchSupport.IsPublicationStatusDescriptorSupported)
                target.PublicationStatusDescriptor = source.PublicationStatusDescriptor;
            else
                targetSynchSupport.IsPublicationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsPublicationYearSupported)
                target.PublicationYear = source.PublicationYear;
            else
                targetSynchSupport.IsPublicationYearSupported = false;

            if (sourceSynchSupport.IsTitleSupported)
                target.Title = source.Title;
            else
                targetSynchSupport.IsTitleSupported = false;

            if (sourceSynchSupport.IsURISupported)
                target.URI = source.URI;
            else
                targetSynchSupport.IsURISupported = false;

            if (sourceSynchSupport.IsVersionSupported)
                target.Version = source.Version;
            else
                targetSynchSupport.IsVersionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.MandatingEducationOrganizationResourceId = source.MandatingEducationOrganizationResourceId;
                target.MandatingEducationOrganizationDiscriminator = source.MandatingEducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsLearningStandardContentStandardAuthorsSupported)
            {    
                targetSynchSupport.IsLearningStandardContentStandardAuthorIncluded = sourceSynchSupport.IsLearningStandardContentStandardAuthorIncluded;
                source.LearningStandardContentStandardAuthors.MapCollectionTo(target.LearningStandardContentStandardAuthors, target);
            }
            else
            {
                targetSynchSupport.IsLearningStandardContentStandardAuthorsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardContentStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLearningStandardContentStandardAuthorsSupported { get; set; }
        bool IsMandatingEducationOrganizationIdSupported { get; set; }
        bool IsPublicationDateSupported { get; set; }
        bool IsPublicationStatusDescriptorSupported { get; set; }
        bool IsPublicationYearSupported { get; set; }
        bool IsTitleSupported { get; set; }
        bool IsURISupported { get; set; }
        bool IsVersionSupported { get; set; }
        Func<ILearningStandardContentStandardAuthor, bool> IsLearningStandardContentStandardAuthorIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardContentStandardAuthorMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardContentStandardAuthor source, ILearningStandardContentStandardAuthor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardContentStandardAuthorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Author != target.Author)
            {
                source.Author = target.Author;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningStandardContentStandardAuthor source, ILearningStandardContentStandardAuthor target, Action<ILearningStandardContentStandardAuthor, ILearningStandardContentStandardAuthor> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardContentStandardAuthorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardContentStandardAuthorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Author = source.Author;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardContentStandardAuthorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardGradeLevel source, ILearningStandardGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningStandardGradeLevel source, ILearningStandardGradeLevel target, Action<ILearningStandardGradeLevel, ILearningStandardGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardIdentificationCode source, ILearningStandardIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContentStandardName != target.ContentStandardName)
            {
                source.ContentStandardName = target.ContentStandardName;
            }
            if (source.IdentificationCode != target.IdentificationCode)
            {
                source.IdentificationCode = target.IdentificationCode;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningStandardIdentificationCode source, ILearningStandardIdentificationCode target, Action<ILearningStandardIdentificationCode, ILearningStandardIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ContentStandardName = source.ContentStandardName;
            target.IdentificationCode = source.IdentificationCode;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardIdentificationCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardPrerequisiteLearningStandardMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardPrerequisiteLearningStandard source, ILearningStandardPrerequisiteLearningStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardPrerequisiteLearningStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PrerequisiteLearningStandardId != target.PrerequisiteLearningStandardId)
            {
                source.PrerequisiteLearningStandardId = target.PrerequisiteLearningStandardId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningStandardPrerequisiteLearningStandard source, ILearningStandardPrerequisiteLearningStandard target, Action<ILearningStandardPrerequisiteLearningStandard, ILearningStandardPrerequisiteLearningStandard> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardPrerequisiteLearningStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardPrerequisiteLearningStandardSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.PrerequisiteLearningStandardId = source.PrerequisiteLearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PrerequisiteLearningStandardResourceId = source.PrerequisiteLearningStandardResourceId;
                target.PrerequisiteLearningStandardDiscriminator = source.PrerequisiteLearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardPrerequisiteLearningStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: LearningStandardCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardCategoryDescriptor source, ILearningStandardCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardCategoryDescriptorId != target.LearningStandardCategoryDescriptorId)
            {
                source.LearningStandardCategoryDescriptorId = target.LearningStandardCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILearningStandardCategoryDescriptor source, ILearningStandardCategoryDescriptor target, Action<ILearningStandardCategoryDescriptor, ILearningStandardCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningStandardCategoryDescriptorId = source.LearningStandardCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LearningStandardEquivalenceAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardEquivalenceAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardEquivalenceAssociationMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardEquivalenceAssociation source, ILearningStandardEquivalenceAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardEquivalenceAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SourceLearningStandardId != target.SourceLearningStandardId)
            {
                source.SourceLearningStandardId = target.SourceLearningStandardId;
            }
            if (source.TargetLearningStandardId != target.TargetLearningStandardId)
            {
                source.TargetLearningStandardId = target.TargetLearningStandardId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEffectiveDateSupported)
                && target.EffectiveDate != source.EffectiveDate)
            {
                target.EffectiveDate = source.EffectiveDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLearningStandardEquivalenceStrengthDescriptionSupported)
                && target.LearningStandardEquivalenceStrengthDescription != source.LearningStandardEquivalenceStrengthDescription)
            {
                target.LearningStandardEquivalenceStrengthDescription = source.LearningStandardEquivalenceStrengthDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLearningStandardEquivalenceStrengthDescriptorSupported)
                && target.LearningStandardEquivalenceStrengthDescriptor != source.LearningStandardEquivalenceStrengthDescriptor)
            {
                target.LearningStandardEquivalenceStrengthDescriptor = source.LearningStandardEquivalenceStrengthDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILearningStandardEquivalenceAssociation source, ILearningStandardEquivalenceAssociation target, Action<ILearningStandardEquivalenceAssociation, ILearningStandardEquivalenceAssociation> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardEquivalenceAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardEquivalenceAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SourceLearningStandardId = source.SourceLearningStandardId;
            target.TargetLearningStandardId = source.TargetLearningStandardId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEffectiveDateSupported)
                target.EffectiveDate = source.EffectiveDate;
            else
                targetSynchSupport.IsEffectiveDateSupported = false;

            if (sourceSynchSupport.IsLearningStandardEquivalenceStrengthDescriptionSupported)
                target.LearningStandardEquivalenceStrengthDescription = source.LearningStandardEquivalenceStrengthDescription;
            else
                targetSynchSupport.IsLearningStandardEquivalenceStrengthDescriptionSupported = false;

            if (sourceSynchSupport.IsLearningStandardEquivalenceStrengthDescriptorSupported)
                target.LearningStandardEquivalenceStrengthDescriptor = source.LearningStandardEquivalenceStrengthDescriptor;
            else
                targetSynchSupport.IsLearningStandardEquivalenceStrengthDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SourceLearningStandardResourceId = source.SourceLearningStandardResourceId;
                target.SourceLearningStandardDiscriminator = source.SourceLearningStandardDiscriminator;
                target.TargetLearningStandardResourceId = source.TargetLearningStandardResourceId;
                target.TargetLearningStandardDiscriminator = source.TargetLearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardEquivalenceAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEffectiveDateSupported { get; set; }
        bool IsLearningStandardEquivalenceStrengthDescriptionSupported { get; set; }
        bool IsLearningStandardEquivalenceStrengthDescriptorSupported { get; set; }
    }
 
}
// Aggregate: LearningStandardEquivalenceStrengthDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardEquivalenceStrengthDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardEquivalenceStrengthDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardEquivalenceStrengthDescriptor source, ILearningStandardEquivalenceStrengthDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardEquivalenceStrengthDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardEquivalenceStrengthDescriptorId != target.LearningStandardEquivalenceStrengthDescriptorId)
            {
                source.LearningStandardEquivalenceStrengthDescriptorId = target.LearningStandardEquivalenceStrengthDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILearningStandardEquivalenceStrengthDescriptor source, ILearningStandardEquivalenceStrengthDescriptor target, Action<ILearningStandardEquivalenceStrengthDescriptor, ILearningStandardEquivalenceStrengthDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardEquivalenceStrengthDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardEquivalenceStrengthDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningStandardEquivalenceStrengthDescriptorId = source.LearningStandardEquivalenceStrengthDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardEquivalenceStrengthDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LearningStandardScopeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LearningStandardScopeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LearningStandardScopeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILearningStandardScopeDescriptor source, ILearningStandardScopeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILearningStandardScopeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardScopeDescriptorId != target.LearningStandardScopeDescriptorId)
            {
                source.LearningStandardScopeDescriptorId = target.LearningStandardScopeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILearningStandardScopeDescriptor source, ILearningStandardScopeDescriptor target, Action<ILearningStandardScopeDescriptor, ILearningStandardScopeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILearningStandardScopeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILearningStandardScopeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LearningStandardScopeDescriptorId = source.LearningStandardScopeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILearningStandardScopeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LevelOfEducationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LevelOfEducationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LevelOfEducationDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILevelOfEducationDescriptor source, ILevelOfEducationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILevelOfEducationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LevelOfEducationDescriptorId != target.LevelOfEducationDescriptorId)
            {
                source.LevelOfEducationDescriptorId = target.LevelOfEducationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILevelOfEducationDescriptor source, ILevelOfEducationDescriptor target, Action<ILevelOfEducationDescriptor, ILevelOfEducationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILevelOfEducationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILevelOfEducationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LevelOfEducationDescriptorId = source.LevelOfEducationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILevelOfEducationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LicenseStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LicenseStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LicenseStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILicenseStatusDescriptor source, ILicenseStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILicenseStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LicenseStatusDescriptorId != target.LicenseStatusDescriptorId)
            {
                source.LicenseStatusDescriptorId = target.LicenseStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILicenseStatusDescriptor source, ILicenseStatusDescriptor target, Action<ILicenseStatusDescriptor, ILicenseStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILicenseStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILicenseStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LicenseStatusDescriptorId = source.LicenseStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILicenseStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LicenseTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LicenseTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LicenseTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILicenseTypeDescriptor source, ILicenseTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILicenseTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LicenseTypeDescriptorId != target.LicenseTypeDescriptorId)
            {
                source.LicenseTypeDescriptorId = target.LicenseTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILicenseTypeDescriptor source, ILicenseTypeDescriptor target, Action<ILicenseTypeDescriptor, ILicenseTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILicenseTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILicenseTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LicenseTypeDescriptorId = source.LicenseTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILicenseTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LimitedEnglishProficiencyDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LimitedEnglishProficiencyDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LimitedEnglishProficiencyDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILimitedEnglishProficiencyDescriptor source, ILimitedEnglishProficiencyDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LimitedEnglishProficiencyDescriptorId != target.LimitedEnglishProficiencyDescriptorId)
            {
                source.LimitedEnglishProficiencyDescriptorId = target.LimitedEnglishProficiencyDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILimitedEnglishProficiencyDescriptor source, ILimitedEnglishProficiencyDescriptor target, Action<ILimitedEnglishProficiencyDescriptor, ILimitedEnglishProficiencyDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LimitedEnglishProficiencyDescriptorId = source.LimitedEnglishProficiencyDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILimitedEnglishProficiencyDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LocaleDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LocaleDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LocaleDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILocaleDescriptor source, ILocaleDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocaleDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocaleDescriptorId != target.LocaleDescriptorId)
            {
                source.LocaleDescriptorId = target.LocaleDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILocaleDescriptor source, ILocaleDescriptor target, Action<ILocaleDescriptor, ILocaleDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILocaleDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILocaleDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocaleDescriptorId = source.LocaleDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocaleDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Entities.Common.EdFi //.LocalEducationAgencyAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyMapper 
    {
        public static bool SynchronizeTo(this ILocalEducationAgency source, ILocalEducationAgency target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocalEducationAgencySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocalEducationAgencyId != target.LocalEducationAgencyId)
            {
                source.LocalEducationAgencyId = target.LocalEducationAgencyId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCharterStatusDescriptorSupported)
                && target.CharterStatusDescriptor != source.CharterStatusDescriptor)
            {
                target.CharterStatusDescriptor = source.CharterStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationServiceCenterIdSupported)
                && target.EducationServiceCenterId != source.EducationServiceCenterId)
            {
                target.EducationServiceCenterId = source.EducationServiceCenterId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocalEducationAgencyCategoryDescriptorSupported)
                && target.LocalEducationAgencyCategoryDescriptor != source.LocalEducationAgencyCategoryDescriptor)
            {
                target.LocalEducationAgencyCategoryDescriptor = source.LocalEducationAgencyCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParentLocalEducationAgencyIdSupported)
                && target.ParentLocalEducationAgencyId != source.ParentLocalEducationAgencyId)
            {
                target.ParentLocalEducationAgencyId = source.ParentLocalEducationAgencyId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStateEducationAgencyIdSupported)
                && target.StateEducationAgencyId != source.StateEducationAgencyId)
            {
                target.StateEducationAgencyId = source.StateEducationAgencyId;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsLocalEducationAgencyAccountabilitiesSupported)
            {
                isModified |= 
                    source.LocalEducationAgencyAccountabilities.SynchronizeCollectionTo(
                        target.LocalEducationAgencyAccountabilities, 
                        onChildAdded: child => 
                            {
                                child.LocalEducationAgency = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLocalEducationAgencyAccountabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsLocalEducationAgencyFederalFundsSupported)
            {
                isModified |= 
                    source.LocalEducationAgencyFederalFunds.SynchronizeCollectionTo(
                        target.LocalEducationAgencyFederalFunds, 
                        onChildAdded: child => 
                            {
                                child.LocalEducationAgency = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsLocalEducationAgencyFederalFundsIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILocalEducationAgency source, ILocalEducationAgency target, Action<ILocalEducationAgency, ILocalEducationAgency> onMapped)
        {
            var sourceSynchSupport = source as ILocalEducationAgencySynchronizationSourceSupport;
            var targetSynchSupport = target as ILocalEducationAgencySynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalEducationAgencyId = source.LocalEducationAgencyId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCharterStatusDescriptorSupported)
                target.CharterStatusDescriptor = source.CharterStatusDescriptor;
            else
                targetSynchSupport.IsCharterStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsEducationServiceCenterIdSupported)
                target.EducationServiceCenterId = source.EducationServiceCenterId;
            else
                targetSynchSupport.IsEducationServiceCenterIdSupported = false;

            if (sourceSynchSupport.IsLocalEducationAgencyCategoryDescriptorSupported)
                target.LocalEducationAgencyCategoryDescriptor = source.LocalEducationAgencyCategoryDescriptor;
            else
                targetSynchSupport.IsLocalEducationAgencyCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsParentLocalEducationAgencyIdSupported)
                target.ParentLocalEducationAgencyId = source.ParentLocalEducationAgencyId;
            else
                targetSynchSupport.IsParentLocalEducationAgencyIdSupported = false;

            if (sourceSynchSupport.IsStateEducationAgencyIdSupported)
                target.StateEducationAgencyId = source.StateEducationAgencyId;
            else
                targetSynchSupport.IsStateEducationAgencyIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationServiceCenterResourceId = source.EducationServiceCenterResourceId;
                target.ParentLocalEducationAgencyResourceId = source.ParentLocalEducationAgencyResourceId;
                target.StateEducationAgencyResourceId = source.StateEducationAgencyResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists

            if (sourceSynchSupport.IsLocalEducationAgencyAccountabilitiesSupported)
            {    
                targetSynchSupport.IsLocalEducationAgencyAccountabilityIncluded = sourceSynchSupport.IsLocalEducationAgencyAccountabilityIncluded;
                source.LocalEducationAgencyAccountabilities.MapCollectionTo(target.LocalEducationAgencyAccountabilities, target);
            }
            else
            {
                targetSynchSupport.IsLocalEducationAgencyAccountabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsLocalEducationAgencyFederalFundsSupported)
            {    
                targetSynchSupport.IsLocalEducationAgencyFederalFundsIncluded = sourceSynchSupport.IsLocalEducationAgencyFederalFundsIncluded;
                source.LocalEducationAgencyFederalFunds.MapCollectionTo(target.LocalEducationAgencyFederalFunds, target);
            }
            else
            {
                targetSynchSupport.IsLocalEducationAgencyFederalFundsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocalEducationAgencySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCharterStatusDescriptorSupported { get; set; }
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsEducationServiceCenterIdSupported { get; set; }
        bool IsLocalEducationAgencyAccountabilitiesSupported { get; set; }
        bool IsLocalEducationAgencyCategoryDescriptorSupported { get; set; }
        bool IsLocalEducationAgencyFederalFundsSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsParentLocalEducationAgencyIdSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsStateEducationAgencyIdSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
        Func<ILocalEducationAgencyAccountability, bool> IsLocalEducationAgencyAccountabilityIncluded { get; set; }
        Func<ILocalEducationAgencyFederalFunds, bool> IsLocalEducationAgencyFederalFundsIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyAccountabilityMapper 
    {
        public static bool SynchronizeTo(this ILocalEducationAgencyAccountability source, ILocalEducationAgencyAccountability target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocalEducationAgencyAccountabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGunFreeSchoolsActReportingStatusDescriptorSupported)
                && target.GunFreeSchoolsActReportingStatusDescriptor != source.GunFreeSchoolsActReportingStatusDescriptor)
            {
                target.GunFreeSchoolsActReportingStatusDescriptor = source.GunFreeSchoolsActReportingStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolChoiceImplementStatusDescriptorSupported)
                && target.SchoolChoiceImplementStatusDescriptor != source.SchoolChoiceImplementStatusDescriptor)
            {
                target.SchoolChoiceImplementStatusDescriptor = source.SchoolChoiceImplementStatusDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILocalEducationAgencyAccountability source, ILocalEducationAgencyAccountability target, Action<ILocalEducationAgencyAccountability, ILocalEducationAgencyAccountability> onMapped)
        {
            var sourceSynchSupport = source as ILocalEducationAgencyAccountabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as ILocalEducationAgencyAccountabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGunFreeSchoolsActReportingStatusDescriptorSupported)
                target.GunFreeSchoolsActReportingStatusDescriptor = source.GunFreeSchoolsActReportingStatusDescriptor;
            else
                targetSynchSupport.IsGunFreeSchoolsActReportingStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolChoiceImplementStatusDescriptorSupported)
                target.SchoolChoiceImplementStatusDescriptor = source.SchoolChoiceImplementStatusDescriptor;
            else
                targetSynchSupport.IsSchoolChoiceImplementStatusDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocalEducationAgencyAccountabilitySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsGunFreeSchoolsActReportingStatusDescriptorSupported { get; set; }
        bool IsSchoolChoiceImplementStatusDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyFederalFundsMapper 
    {
        public static bool SynchronizeTo(this ILocalEducationAgencyFederalFunds source, ILocalEducationAgencyFederalFunds target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocalEducationAgencyFederalFundsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FiscalYear != target.FiscalYear)
            {
                source.FiscalYear = target.FiscalYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsInnovativeDollarsSpentSupported)
                && target.InnovativeDollarsSpent != source.InnovativeDollarsSpent)
            {
                target.InnovativeDollarsSpent = source.InnovativeDollarsSpent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInnovativeDollarsSpentStrategicPrioritiesSupported)
                && target.InnovativeDollarsSpentStrategicPriorities != source.InnovativeDollarsSpentStrategicPriorities)
            {
                target.InnovativeDollarsSpentStrategicPriorities = source.InnovativeDollarsSpentStrategicPriorities;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInnovativeProgramsFundsReceivedSupported)
                && target.InnovativeProgramsFundsReceived != source.InnovativeProgramsFundsReceived)
            {
                target.InnovativeProgramsFundsReceived = source.InnovativeProgramsFundsReceived;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolImprovementAllocationSupported)
                && target.SchoolImprovementAllocation != source.SchoolImprovementAllocation)
            {
                target.SchoolImprovementAllocation = source.SchoolImprovementAllocation;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolImprovementReservedFundsPercentageSupported)
                && target.SchoolImprovementReservedFundsPercentage != source.SchoolImprovementReservedFundsPercentage)
            {
                target.SchoolImprovementReservedFundsPercentage = source.SchoolImprovementReservedFundsPercentage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStateAssessmentAdministrationFundingSupported)
                && target.StateAssessmentAdministrationFunding != source.StateAssessmentAdministrationFunding)
            {
                target.StateAssessmentAdministrationFunding = source.StateAssessmentAdministrationFunding;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSupplementalEducationalServicesFundsSpentSupported)
                && target.SupplementalEducationalServicesFundsSpent != source.SupplementalEducationalServicesFundsSpent)
            {
                target.SupplementalEducationalServicesFundsSpent = source.SupplementalEducationalServicesFundsSpent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSupplementalEducationalServicesPerPupilExpenditureSupported)
                && target.SupplementalEducationalServicesPerPupilExpenditure != source.SupplementalEducationalServicesPerPupilExpenditure)
            {
                target.SupplementalEducationalServicesPerPupilExpenditure = source.SupplementalEducationalServicesPerPupilExpenditure;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILocalEducationAgencyFederalFunds source, ILocalEducationAgencyFederalFunds target, Action<ILocalEducationAgencyFederalFunds, ILocalEducationAgencyFederalFunds> onMapped)
        {
            var sourceSynchSupport = source as ILocalEducationAgencyFederalFundsSynchronizationSourceSupport;
            var targetSynchSupport = target as ILocalEducationAgencyFederalFundsSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsInnovativeDollarsSpentSupported)
                target.InnovativeDollarsSpent = source.InnovativeDollarsSpent;
            else
                targetSynchSupport.IsInnovativeDollarsSpentSupported = false;

            if (sourceSynchSupport.IsInnovativeDollarsSpentStrategicPrioritiesSupported)
                target.InnovativeDollarsSpentStrategicPriorities = source.InnovativeDollarsSpentStrategicPriorities;
            else
                targetSynchSupport.IsInnovativeDollarsSpentStrategicPrioritiesSupported = false;

            if (sourceSynchSupport.IsInnovativeProgramsFundsReceivedSupported)
                target.InnovativeProgramsFundsReceived = source.InnovativeProgramsFundsReceived;
            else
                targetSynchSupport.IsInnovativeProgramsFundsReceivedSupported = false;

            if (sourceSynchSupport.IsSchoolImprovementAllocationSupported)
                target.SchoolImprovementAllocation = source.SchoolImprovementAllocation;
            else
                targetSynchSupport.IsSchoolImprovementAllocationSupported = false;

            if (sourceSynchSupport.IsSchoolImprovementReservedFundsPercentageSupported)
                target.SchoolImprovementReservedFundsPercentage = source.SchoolImprovementReservedFundsPercentage;
            else
                targetSynchSupport.IsSchoolImprovementReservedFundsPercentageSupported = false;

            if (sourceSynchSupport.IsStateAssessmentAdministrationFundingSupported)
                target.StateAssessmentAdministrationFunding = source.StateAssessmentAdministrationFunding;
            else
                targetSynchSupport.IsStateAssessmentAdministrationFundingSupported = false;

            if (sourceSynchSupport.IsSupplementalEducationalServicesFundsSpentSupported)
                target.SupplementalEducationalServicesFundsSpent = source.SupplementalEducationalServicesFundsSpent;
            else
                targetSynchSupport.IsSupplementalEducationalServicesFundsSpentSupported = false;

            if (sourceSynchSupport.IsSupplementalEducationalServicesPerPupilExpenditureSupported)
                target.SupplementalEducationalServicesPerPupilExpenditure = source.SupplementalEducationalServicesPerPupilExpenditure;
            else
                targetSynchSupport.IsSupplementalEducationalServicesPerPupilExpenditureSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocalEducationAgencyFederalFundsSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsInnovativeDollarsSpentSupported { get; set; }
        bool IsInnovativeDollarsSpentStrategicPrioritiesSupported { get; set; }
        bool IsInnovativeProgramsFundsReceivedSupported { get; set; }
        bool IsSchoolImprovementAllocationSupported { get; set; }
        bool IsSchoolImprovementReservedFundsPercentageSupported { get; set; }
        bool IsStateAssessmentAdministrationFundingSupported { get; set; }
        bool IsSupplementalEducationalServicesFundsSpentSupported { get; set; }
        bool IsSupplementalEducationalServicesPerPupilExpenditureSupported { get; set; }
    }
 
}
// Aggregate: LocalEducationAgencyCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.LocalEducationAgencyCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILocalEducationAgencyCategoryDescriptor source, ILocalEducationAgencyCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocalEducationAgencyCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocalEducationAgencyCategoryDescriptorId != target.LocalEducationAgencyCategoryDescriptorId)
            {
                source.LocalEducationAgencyCategoryDescriptorId = target.LocalEducationAgencyCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILocalEducationAgencyCategoryDescriptor source, ILocalEducationAgencyCategoryDescriptor target, Action<ILocalEducationAgencyCategoryDescriptor, ILocalEducationAgencyCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILocalEducationAgencyCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILocalEducationAgencyCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalEducationAgencyCategoryDescriptorId = source.LocalEducationAgencyCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocalEducationAgencyCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Location

namespace EdFi.Ods.Entities.Common.EdFi //.LocationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LocationMapper 
    {
        public static bool SynchronizeTo(this ILocation source, ILocation target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocationSynchronizationSourceSupport;

            // Allow PK column updates on Location
            if (
                 (target.ClassroomIdentificationCode != source.ClassroomIdentificationCode)
                || (target.SchoolId != source.SchoolId))
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ClassroomIdentificationCode != target.ClassroomIdentificationCode)
            {
                source.ClassroomIdentificationCode = target.ClassroomIdentificationCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaximumNumberOfSeatsSupported)
                && target.MaximumNumberOfSeats != source.MaximumNumberOfSeats)
            {
                target.MaximumNumberOfSeats = source.MaximumNumberOfSeats;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOptimalNumberOfSeatsSupported)
                && target.OptimalNumberOfSeats != source.OptimalNumberOfSeats)
            {
                target.OptimalNumberOfSeats = source.OptimalNumberOfSeats;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ILocation source, ILocation target, Action<ILocation, ILocation> onMapped)
        {
            var sourceSynchSupport = source as ILocationSynchronizationSourceSupport;
            var targetSynchSupport = target as ILocationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ClassroomIdentificationCode = source.ClassroomIdentificationCode;
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaximumNumberOfSeatsSupported)
                target.MaximumNumberOfSeats = source.MaximumNumberOfSeats;
            else
                targetSynchSupport.IsMaximumNumberOfSeatsSupported = false;

            if (sourceSynchSupport.IsOptimalNumberOfSeatsSupported)
                target.OptimalNumberOfSeats = source.OptimalNumberOfSeats;
            else
                targetSynchSupport.IsOptimalNumberOfSeatsSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMaximumNumberOfSeatsSupported { get; set; }
        bool IsOptimalNumberOfSeatsSupported { get; set; }
    }
 
}
// Aggregate: MagnetSpecialProgramEmphasisSchoolDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MagnetSpecialProgramEmphasisSchoolDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class MagnetSpecialProgramEmphasisSchoolDescriptorMapper 
    {
        public static bool SynchronizeTo(this IMagnetSpecialProgramEmphasisSchoolDescriptor source, IMagnetSpecialProgramEmphasisSchoolDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IMagnetSpecialProgramEmphasisSchoolDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MagnetSpecialProgramEmphasisSchoolDescriptorId != target.MagnetSpecialProgramEmphasisSchoolDescriptorId)
            {
                source.MagnetSpecialProgramEmphasisSchoolDescriptorId = target.MagnetSpecialProgramEmphasisSchoolDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IMagnetSpecialProgramEmphasisSchoolDescriptor source, IMagnetSpecialProgramEmphasisSchoolDescriptor target, Action<IMagnetSpecialProgramEmphasisSchoolDescriptor, IMagnetSpecialProgramEmphasisSchoolDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IMagnetSpecialProgramEmphasisSchoolDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IMagnetSpecialProgramEmphasisSchoolDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MagnetSpecialProgramEmphasisSchoolDescriptorId = source.MagnetSpecialProgramEmphasisSchoolDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IMagnetSpecialProgramEmphasisSchoolDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: MediumOfInstructionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MediumOfInstructionDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class MediumOfInstructionDescriptorMapper 
    {
        public static bool SynchronizeTo(this IMediumOfInstructionDescriptor source, IMediumOfInstructionDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IMediumOfInstructionDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MediumOfInstructionDescriptorId != target.MediumOfInstructionDescriptorId)
            {
                source.MediumOfInstructionDescriptorId = target.MediumOfInstructionDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IMediumOfInstructionDescriptor source, IMediumOfInstructionDescriptor target, Action<IMediumOfInstructionDescriptor, IMediumOfInstructionDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IMediumOfInstructionDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IMediumOfInstructionDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MediumOfInstructionDescriptorId = source.MediumOfInstructionDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IMediumOfInstructionDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: MethodCreditEarnedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MethodCreditEarnedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class MethodCreditEarnedDescriptorMapper 
    {
        public static bool SynchronizeTo(this IMethodCreditEarnedDescriptor source, IMethodCreditEarnedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IMethodCreditEarnedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MethodCreditEarnedDescriptorId != target.MethodCreditEarnedDescriptorId)
            {
                source.MethodCreditEarnedDescriptorId = target.MethodCreditEarnedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IMethodCreditEarnedDescriptor source, IMethodCreditEarnedDescriptor target, Action<IMethodCreditEarnedDescriptor, IMethodCreditEarnedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IMethodCreditEarnedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IMethodCreditEarnedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MethodCreditEarnedDescriptorId = source.MethodCreditEarnedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IMethodCreditEarnedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: MigrantEducationProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MigrantEducationProgramServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class MigrantEducationProgramServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IMigrantEducationProgramServiceDescriptor source, IMigrantEducationProgramServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IMigrantEducationProgramServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MigrantEducationProgramServiceDescriptorId != target.MigrantEducationProgramServiceDescriptorId)
            {
                source.MigrantEducationProgramServiceDescriptorId = target.MigrantEducationProgramServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IMigrantEducationProgramServiceDescriptor source, IMigrantEducationProgramServiceDescriptor target, Action<IMigrantEducationProgramServiceDescriptor, IMigrantEducationProgramServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IMigrantEducationProgramServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IMigrantEducationProgramServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MigrantEducationProgramServiceDescriptorId = source.MigrantEducationProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IMigrantEducationProgramServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: MonitoredDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.MonitoredDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class MonitoredDescriptorMapper 
    {
        public static bool SynchronizeTo(this IMonitoredDescriptor source, IMonitoredDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IMonitoredDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MonitoredDescriptorId != target.MonitoredDescriptorId)
            {
                source.MonitoredDescriptorId = target.MonitoredDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IMonitoredDescriptor source, IMonitoredDescriptor target, Action<IMonitoredDescriptor, IMonitoredDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IMonitoredDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IMonitoredDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.MonitoredDescriptorId = source.MonitoredDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IMonitoredDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: NeglectedOrDelinquentProgramDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.NeglectedOrDelinquentProgramDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class NeglectedOrDelinquentProgramDescriptorMapper 
    {
        public static bool SynchronizeTo(this INeglectedOrDelinquentProgramDescriptor source, INeglectedOrDelinquentProgramDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as INeglectedOrDelinquentProgramDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.NeglectedOrDelinquentProgramDescriptorId != target.NeglectedOrDelinquentProgramDescriptorId)
            {
                source.NeglectedOrDelinquentProgramDescriptorId = target.NeglectedOrDelinquentProgramDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this INeglectedOrDelinquentProgramDescriptor source, INeglectedOrDelinquentProgramDescriptor target, Action<INeglectedOrDelinquentProgramDescriptor, INeglectedOrDelinquentProgramDescriptor> onMapped)
        {
            var sourceSynchSupport = source as INeglectedOrDelinquentProgramDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as INeglectedOrDelinquentProgramDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.NeglectedOrDelinquentProgramDescriptorId = source.NeglectedOrDelinquentProgramDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface INeglectedOrDelinquentProgramDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: NeglectedOrDelinquentProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.NeglectedOrDelinquentProgramServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class NeglectedOrDelinquentProgramServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this INeglectedOrDelinquentProgramServiceDescriptor source, INeglectedOrDelinquentProgramServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as INeglectedOrDelinquentProgramServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.NeglectedOrDelinquentProgramServiceDescriptorId != target.NeglectedOrDelinquentProgramServiceDescriptorId)
            {
                source.NeglectedOrDelinquentProgramServiceDescriptorId = target.NeglectedOrDelinquentProgramServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this INeglectedOrDelinquentProgramServiceDescriptor source, INeglectedOrDelinquentProgramServiceDescriptor target, Action<INeglectedOrDelinquentProgramServiceDescriptor, INeglectedOrDelinquentProgramServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as INeglectedOrDelinquentProgramServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as INeglectedOrDelinquentProgramServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.NeglectedOrDelinquentProgramServiceDescriptorId = source.NeglectedOrDelinquentProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface INeglectedOrDelinquentProgramServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: NetworkPurposeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.NetworkPurposeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class NetworkPurposeDescriptorMapper 
    {
        public static bool SynchronizeTo(this INetworkPurposeDescriptor source, INetworkPurposeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as INetworkPurposeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.NetworkPurposeDescriptorId != target.NetworkPurposeDescriptorId)
            {
                source.NetworkPurposeDescriptorId = target.NetworkPurposeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this INetworkPurposeDescriptor source, INetworkPurposeDescriptor target, Action<INetworkPurposeDescriptor, INetworkPurposeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as INetworkPurposeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as INetworkPurposeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.NetworkPurposeDescriptorId = source.NetworkPurposeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface INetworkPurposeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ObjectiveAssessment

namespace EdFi.Ods.Entities.Common.EdFi //.ObjectiveAssessmentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentMapper 
    {
        public static bool SynchronizeTo(this IObjectiveAssessment source, IObjectiveAssessment target)
        {
            bool isModified = false;

            var sourceSupport = source as IObjectiveAssessmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.IdentificationCode != target.IdentificationCode)
            {
                source.IdentificationCode = target.IdentificationCode;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRawScoreSupported)
                && target.MaxRawScore != source.MaxRawScore)
            {
                target.MaxRawScore = source.MaxRawScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNomenclatureSupported)
                && target.Nomenclature != source.Nomenclature)
            {
                target.Nomenclature = source.Nomenclature;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParentIdentificationCodeSupported)
                && target.ParentIdentificationCode != source.ParentIdentificationCode)
            {
                target.ParentIdentificationCode = source.ParentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentOfAssessmentSupported)
                && target.PercentOfAssessment != source.PercentOfAssessment)
            {
                target.PercentOfAssessment = source.PercentOfAssessment;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsObjectiveAssessmentAssessmentItemsSupported)
            {
                isModified |= 
                    source.ObjectiveAssessmentAssessmentItems.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentAssessmentItems, 
                        onChildAdded: child => 
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsObjectiveAssessmentAssessmentItemIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsObjectiveAssessmentLearningObjectivesSupported)
            {
                isModified |= 
                    source.ObjectiveAssessmentLearningObjectives.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentLearningObjectives, 
                        onChildAdded: child => 
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsObjectiveAssessmentLearningObjectiveIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsObjectiveAssessmentLearningStandardsSupported)
            {
                isModified |= 
                    source.ObjectiveAssessmentLearningStandards.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentLearningStandards, 
                        onChildAdded: child => 
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsObjectiveAssessmentLearningStandardIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsObjectiveAssessmentPerformanceLevelsSupported)
            {
                isModified |= 
                    source.ObjectiveAssessmentPerformanceLevels.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentPerformanceLevels, 
                        onChildAdded: child => 
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsObjectiveAssessmentPerformanceLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsObjectiveAssessmentScoresSupported)
            {
                isModified |= 
                    source.ObjectiveAssessmentScores.SynchronizeCollectionTo(
                        target.ObjectiveAssessmentScores, 
                        onChildAdded: child => 
                            {
                                child.ObjectiveAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsObjectiveAssessmentScoreIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IObjectiveAssessment source, IObjectiveAssessment target, Action<IObjectiveAssessment, IObjectiveAssessment> onMapped)
        {
            var sourceSynchSupport = source as IObjectiveAssessmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IObjectiveAssessmentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.IdentificationCode = source.IdentificationCode;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsMaxRawScoreSupported)
                target.MaxRawScore = source.MaxRawScore;
            else
                targetSynchSupport.IsMaxRawScoreSupported = false;

            if (sourceSynchSupport.IsNomenclatureSupported)
                target.Nomenclature = source.Nomenclature;
            else
                targetSynchSupport.IsNomenclatureSupported = false;

            if (sourceSynchSupport.IsParentIdentificationCodeSupported)
                target.ParentIdentificationCode = source.ParentIdentificationCode;
            else
                targetSynchSupport.IsParentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsPercentOfAssessmentSupported)
                target.PercentOfAssessment = source.PercentOfAssessment;
            else
                targetSynchSupport.IsPercentOfAssessmentSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
                target.ParentObjectiveAssessmentResourceId = source.ParentObjectiveAssessmentResourceId;
                target.ParentObjectiveAssessmentDiscriminator = source.ParentObjectiveAssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsObjectiveAssessmentAssessmentItemsSupported)
            {    
                targetSynchSupport.IsObjectiveAssessmentAssessmentItemIncluded = sourceSynchSupport.IsObjectiveAssessmentAssessmentItemIncluded;
                source.ObjectiveAssessmentAssessmentItems.MapCollectionTo(target.ObjectiveAssessmentAssessmentItems, target);
            }
            else
            {
                targetSynchSupport.IsObjectiveAssessmentAssessmentItemsSupported = false;
            }

            if (sourceSynchSupport.IsObjectiveAssessmentLearningObjectivesSupported)
            {    
                targetSynchSupport.IsObjectiveAssessmentLearningObjectiveIncluded = sourceSynchSupport.IsObjectiveAssessmentLearningObjectiveIncluded;
                source.ObjectiveAssessmentLearningObjectives.MapCollectionTo(target.ObjectiveAssessmentLearningObjectives, target);
            }
            else
            {
                targetSynchSupport.IsObjectiveAssessmentLearningObjectivesSupported = false;
            }

            if (sourceSynchSupport.IsObjectiveAssessmentLearningStandardsSupported)
            {    
                targetSynchSupport.IsObjectiveAssessmentLearningStandardIncluded = sourceSynchSupport.IsObjectiveAssessmentLearningStandardIncluded;
                source.ObjectiveAssessmentLearningStandards.MapCollectionTo(target.ObjectiveAssessmentLearningStandards, target);
            }
            else
            {
                targetSynchSupport.IsObjectiveAssessmentLearningStandardsSupported = false;
            }

            if (sourceSynchSupport.IsObjectiveAssessmentPerformanceLevelsSupported)
            {    
                targetSynchSupport.IsObjectiveAssessmentPerformanceLevelIncluded = sourceSynchSupport.IsObjectiveAssessmentPerformanceLevelIncluded;
                source.ObjectiveAssessmentPerformanceLevels.MapCollectionTo(target.ObjectiveAssessmentPerformanceLevels, target);
            }
            else
            {
                targetSynchSupport.IsObjectiveAssessmentPerformanceLevelsSupported = false;
            }

            if (sourceSynchSupport.IsObjectiveAssessmentScoresSupported)
            {    
                targetSynchSupport.IsObjectiveAssessmentScoreIncluded = sourceSynchSupport.IsObjectiveAssessmentScoreIncluded;
                source.ObjectiveAssessmentScores.MapCollectionTo(target.ObjectiveAssessmentScores, target);
            }
            else
            {
                targetSynchSupport.IsObjectiveAssessmentScoresSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IObjectiveAssessmentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsMaxRawScoreSupported { get; set; }
        bool IsNomenclatureSupported { get; set; }
        bool IsObjectiveAssessmentAssessmentItemsSupported { get; set; }
        bool IsObjectiveAssessmentLearningObjectivesSupported { get; set; }
        bool IsObjectiveAssessmentLearningStandardsSupported { get; set; }
        bool IsObjectiveAssessmentPerformanceLevelsSupported { get; set; }
        bool IsObjectiveAssessmentScoresSupported { get; set; }
        bool IsParentIdentificationCodeSupported { get; set; }
        bool IsPercentOfAssessmentSupported { get; set; }
        Func<IObjectiveAssessmentAssessmentItem, bool> IsObjectiveAssessmentAssessmentItemIncluded { get; set; }
        Func<IObjectiveAssessmentLearningObjective, bool> IsObjectiveAssessmentLearningObjectiveIncluded { get; set; }
        Func<IObjectiveAssessmentLearningStandard, bool> IsObjectiveAssessmentLearningStandardIncluded { get; set; }
        Func<IObjectiveAssessmentPerformanceLevel, bool> IsObjectiveAssessmentPerformanceLevelIncluded { get; set; }
        Func<IObjectiveAssessmentScore, bool> IsObjectiveAssessmentScoreIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentAssessmentItemMapper 
    {
        public static bool SynchronizeTo(this IObjectiveAssessmentAssessmentItem source, IObjectiveAssessmentAssessmentItem target)
        {
            bool isModified = false;

            var sourceSupport = source as IObjectiveAssessmentAssessmentItemSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentItemIdentificationCode != target.AssessmentItemIdentificationCode)
            {
                source.AssessmentItemIdentificationCode = target.AssessmentItemIdentificationCode;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IObjectiveAssessmentAssessmentItem source, IObjectiveAssessmentAssessmentItem target, Action<IObjectiveAssessmentAssessmentItem, IObjectiveAssessmentAssessmentItem> onMapped)
        {
            var sourceSynchSupport = source as IObjectiveAssessmentAssessmentItemSynchronizationSourceSupport;
            var targetSynchSupport = target as IObjectiveAssessmentAssessmentItemSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentItemIdentificationCode = source.AssessmentItemIdentificationCode;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentItemResourceId = source.AssessmentItemResourceId;
                target.AssessmentItemDiscriminator = source.AssessmentItemDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IObjectiveAssessmentAssessmentItemSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentLearningObjectiveMapper 
    {
        public static bool SynchronizeTo(this IObjectiveAssessmentLearningObjective source, IObjectiveAssessmentLearningObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IObjectiveAssessmentLearningObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningObjectiveId != target.LearningObjectiveId)
            {
                source.LearningObjectiveId = target.LearningObjectiveId;
            }
            if (source.LearningObjectiveNamespace != target.LearningObjectiveNamespace)
            {
                source.LearningObjectiveNamespace = target.LearningObjectiveNamespace;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IObjectiveAssessmentLearningObjective source, IObjectiveAssessmentLearningObjective target, Action<IObjectiveAssessmentLearningObjective, IObjectiveAssessmentLearningObjective> onMapped)
        {
            var sourceSynchSupport = source as IObjectiveAssessmentLearningObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IObjectiveAssessmentLearningObjectiveSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningObjectiveId = source.LearningObjectiveId;
            target.LearningObjectiveNamespace = source.LearningObjectiveNamespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningObjectiveResourceId = source.LearningObjectiveResourceId;
                target.LearningObjectiveDiscriminator = source.LearningObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IObjectiveAssessmentLearningObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentLearningStandardMapper 
    {
        public static bool SynchronizeTo(this IObjectiveAssessmentLearningStandard source, IObjectiveAssessmentLearningStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as IObjectiveAssessmentLearningStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardId != target.LearningStandardId)
            {
                source.LearningStandardId = target.LearningStandardId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IObjectiveAssessmentLearningStandard source, IObjectiveAssessmentLearningStandard target, Action<IObjectiveAssessmentLearningStandard, IObjectiveAssessmentLearningStandard> onMapped)
        {
            var sourceSynchSupport = source as IObjectiveAssessmentLearningStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as IObjectiveAssessmentLearningStandardSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IObjectiveAssessmentLearningStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this IObjectiveAssessmentPerformanceLevel source, IObjectiveAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }
            if (source.PerformanceLevelDescriptor != target.PerformanceLevelDescriptor)
            {
                source.PerformanceLevelDescriptor = target.PerformanceLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaximumScoreSupported)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumScoreSupported)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IObjectiveAssessmentPerformanceLevel source, IObjectiveAssessmentPerformanceLevel target, Action<IObjectiveAssessmentPerformanceLevel, IObjectiveAssessmentPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as IObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaximumScoreSupported)
                target.MaximumScore = source.MaximumScore;
            else
                targetSynchSupport.IsMaximumScoreSupported = false;

            if (sourceSynchSupport.IsMinimumScoreSupported)
                target.MinimumScore = source.MinimumScore;
            else
                targetSynchSupport.IsMinimumScoreSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMaximumScoreSupported { get; set; }
        bool IsMinimumScoreSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ObjectiveAssessmentScoreMapper 
    {
        public static bool SynchronizeTo(this IObjectiveAssessmentScore source, IObjectiveAssessmentScore target)
        {
            bool isModified = false;

            var sourceSupport = source as IObjectiveAssessmentScoreSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaximumScoreSupported)
                && target.MaximumScore != source.MaximumScore)
            {
                target.MaximumScore = source.MaximumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumScoreSupported)
                && target.MinimumScore != source.MinimumScore)
            {
                target.MinimumScore = source.MinimumScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IObjectiveAssessmentScore source, IObjectiveAssessmentScore target, Action<IObjectiveAssessmentScore, IObjectiveAssessmentScore> onMapped)
        {
            var sourceSynchSupport = source as IObjectiveAssessmentScoreSynchronizationSourceSupport;
            var targetSynchSupport = target as IObjectiveAssessmentScoreSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaximumScoreSupported)
                target.MaximumScore = source.MaximumScore;
            else
                targetSynchSupport.IsMaximumScoreSupported = false;

            if (sourceSynchSupport.IsMinimumScoreSupported)
                target.MinimumScore = source.MinimumScore;
            else
                targetSynchSupport.IsMinimumScoreSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IObjectiveAssessmentScoreSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMaximumScoreSupported { get; set; }
        bool IsMinimumScoreSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: OldEthnicityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.OldEthnicityDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OldEthnicityDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOldEthnicityDescriptor source, IOldEthnicityDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOldEthnicityDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OldEthnicityDescriptorId != target.OldEthnicityDescriptorId)
            {
                source.OldEthnicityDescriptorId = target.OldEthnicityDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOldEthnicityDescriptor source, IOldEthnicityDescriptor target, Action<IOldEthnicityDescriptor, IOldEthnicityDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOldEthnicityDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOldEthnicityDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OldEthnicityDescriptorId = source.OldEthnicityDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOldEthnicityDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Entities.Common.EdFi //.OpenStaffPositionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPosition source, IOpenStaffPosition target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDatePostedSupported)
                && target.DatePosted != source.DatePosted)
            {
                target.DatePosted = source.DatePosted;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDatePostingRemovedSupported)
                && target.DatePostingRemoved != source.DatePostingRemoved)
            {
                target.DatePostingRemoved = source.DatePostingRemoved;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmploymentStatusDescriptorSupported)
                && target.EmploymentStatusDescriptor != source.EmploymentStatusDescriptor)
            {
                target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPositionTitleSupported)
                && target.PositionTitle != source.PositionTitle)
            {
                target.PositionTitle = source.PositionTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPostingResultDescriptorSupported)
                && target.PostingResultDescriptor != source.PostingResultDescriptor)
            {
                target.PostingResultDescriptor = source.PostingResultDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramAssignmentDescriptorSupported)
                && target.ProgramAssignmentDescriptor != source.ProgramAssignmentDescriptor)
            {
                target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffClassificationDescriptorSupported)
                && target.StaffClassificationDescriptor != source.StaffClassificationDescriptor)
            {
                target.StaffClassificationDescriptor = source.StaffClassificationDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsOpenStaffPositionAcademicSubjectsSupported)
            {
                isModified |= 
                    source.OpenStaffPositionAcademicSubjects.SynchronizeCollectionTo(
                        target.OpenStaffPositionAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.OpenStaffPosition = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsOpenStaffPositionAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsOpenStaffPositionInstructionalGradeLevelsSupported)
            {
                isModified |= 
                    source.OpenStaffPositionInstructionalGradeLevels.SynchronizeCollectionTo(
                        target.OpenStaffPositionInstructionalGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.OpenStaffPosition = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsOpenStaffPositionInstructionalGradeLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IOpenStaffPosition source, IOpenStaffPosition target, Action<IOpenStaffPosition, IOpenStaffPosition> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDatePostedSupported)
                target.DatePosted = source.DatePosted;
            else
                targetSynchSupport.IsDatePostedSupported = false;

            if (sourceSynchSupport.IsDatePostingRemovedSupported)
                target.DatePostingRemoved = source.DatePostingRemoved;
            else
                targetSynchSupport.IsDatePostingRemovedSupported = false;

            if (sourceSynchSupport.IsEmploymentStatusDescriptorSupported)
                target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;
            else
                targetSynchSupport.IsEmploymentStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsPositionTitleSupported)
                target.PositionTitle = source.PositionTitle;
            else
                targetSynchSupport.IsPositionTitleSupported = false;

            if (sourceSynchSupport.IsPostingResultDescriptorSupported)
                target.PostingResultDescriptor = source.PostingResultDescriptor;
            else
                targetSynchSupport.IsPostingResultDescriptorSupported = false;

            if (sourceSynchSupport.IsProgramAssignmentDescriptorSupported)
                target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
            else
                targetSynchSupport.IsProgramAssignmentDescriptorSupported = false;

            if (sourceSynchSupport.IsStaffClassificationDescriptorSupported)
                target.StaffClassificationDescriptor = source.StaffClassificationDescriptor;
            else
                targetSynchSupport.IsStaffClassificationDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsOpenStaffPositionAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsOpenStaffPositionAcademicSubjectIncluded = sourceSynchSupport.IsOpenStaffPositionAcademicSubjectIncluded;
                source.OpenStaffPositionAcademicSubjects.MapCollectionTo(target.OpenStaffPositionAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsOpenStaffPositionAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsOpenStaffPositionInstructionalGradeLevelsSupported)
            {    
                targetSynchSupport.IsOpenStaffPositionInstructionalGradeLevelIncluded = sourceSynchSupport.IsOpenStaffPositionInstructionalGradeLevelIncluded;
                source.OpenStaffPositionInstructionalGradeLevels.MapCollectionTo(target.OpenStaffPositionInstructionalGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsOpenStaffPositionInstructionalGradeLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDatePostedSupported { get; set; }
        bool IsDatePostingRemovedSupported { get; set; }
        bool IsEmploymentStatusDescriptorSupported { get; set; }
        bool IsOpenStaffPositionAcademicSubjectsSupported { get; set; }
        bool IsOpenStaffPositionInstructionalGradeLevelsSupported { get; set; }
        bool IsPositionTitleSupported { get; set; }
        bool IsPostingResultDescriptorSupported { get; set; }
        bool IsProgramAssignmentDescriptorSupported { get; set; }
        bool IsStaffClassificationDescriptorSupported { get; set; }
        Func<IOpenStaffPositionAcademicSubject, bool> IsOpenStaffPositionAcademicSubjectIncluded { get; set; }
        Func<IOpenStaffPositionInstructionalGradeLevel, bool> IsOpenStaffPositionInstructionalGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionAcademicSubject source, IOpenStaffPositionAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionAcademicSubject source, IOpenStaffPositionAcademicSubject target, Action<IOpenStaffPositionAcademicSubject, IOpenStaffPositionAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionAcademicSubjectSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionInstructionalGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionInstructionalGradeLevel source, IOpenStaffPositionInstructionalGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionInstructionalGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionInstructionalGradeLevel source, IOpenStaffPositionInstructionalGradeLevel target, Action<IOpenStaffPositionInstructionalGradeLevel, IOpenStaffPositionInstructionalGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionInstructionalGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionInstructionalGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionInstructionalGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: OperationalStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.OperationalStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OperationalStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOperationalStatusDescriptor source, IOperationalStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOperationalStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OperationalStatusDescriptorId != target.OperationalStatusDescriptorId)
            {
                source.OperationalStatusDescriptorId = target.OperationalStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOperationalStatusDescriptor source, IOperationalStatusDescriptor target, Action<IOperationalStatusDescriptor, IOperationalStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOperationalStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOperationalStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OperationalStatusDescriptorId = source.OperationalStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOperationalStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: OtherNameTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.OtherNameTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OtherNameTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOtherNameTypeDescriptor source, IOtherNameTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOtherNameTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OtherNameTypeDescriptorId != target.OtherNameTypeDescriptorId)
            {
                source.OtherNameTypeDescriptorId = target.OtherNameTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOtherNameTypeDescriptor source, IOtherNameTypeDescriptor target, Action<IOtherNameTypeDescriptor, IOtherNameTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOtherNameTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOtherNameTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OtherNameTypeDescriptorId = source.OtherNameTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOtherNameTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Parent

namespace EdFi.Ods.Entities.Common.EdFi //.ParentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ParentMapper 
    {
        public static bool SynchronizeTo(this IParent source, IParent target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLoginIdSupported)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParentUniqueIdSupported)
                && target.ParentUniqueId != source.ParentUniqueId)
            {
                target.ParentUniqueId = source.ParentUniqueId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsParentAddressesSupported)
            {
                isModified |= 
                    source.ParentAddresses.SynchronizeCollectionTo(
                        target.ParentAddresses, 
                        onChildAdded: child => 
                            {
                                child.Parent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsParentElectronicMailsSupported)
            {
                isModified |= 
                    source.ParentElectronicMails.SynchronizeCollectionTo(
                        target.ParentElectronicMails, 
                        onChildAdded: child => 
                            {
                                child.Parent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsParentInternationalAddressesSupported)
            {
                isModified |= 
                    source.ParentInternationalAddresses.SynchronizeCollectionTo(
                        target.ParentInternationalAddresses, 
                        onChildAdded: child => 
                            {
                                child.Parent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsParentLanguagesSupported)
            {
                isModified |= 
                    source.ParentLanguages.SynchronizeCollectionTo(
                        target.ParentLanguages, 
                        onChildAdded: child => 
                            {
                                child.Parent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsParentOtherNamesSupported)
            {
                isModified |= 
                    source.ParentOtherNames.SynchronizeCollectionTo(
                        target.ParentOtherNames, 
                        onChildAdded: child => 
                            {
                                child.Parent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentOtherNameIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsParentPersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.ParentPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.ParentPersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Parent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentPersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsParentTelephonesSupported)
            {
                isModified |= 
                    source.ParentTelephones.SynchronizeCollectionTo(
                        target.ParentTelephones, 
                        onChildAdded: child => 
                            {
                                child.Parent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentTelephoneIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParent source, IParent target, Action<IParent, IParent> onMapped)
        {
            var sourceSynchSupport = source as IParentSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ParentUniqueId = source.ParentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsLoginIdSupported)
                target.LoginId = source.LoginId;
            else
                targetSynchSupport.IsLoginIdSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsParentUniqueIdSupported)
                target.ParentUniqueId = source.ParentUniqueId;
            else
                targetSynchSupport.IsParentUniqueIdSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsParentAddressesSupported)
            {    
                targetSynchSupport.IsParentAddressIncluded = sourceSynchSupport.IsParentAddressIncluded;
                source.ParentAddresses.MapCollectionTo(target.ParentAddresses, target);
            }
            else
            {
                targetSynchSupport.IsParentAddressesSupported = false;
            }

            if (sourceSynchSupport.IsParentElectronicMailsSupported)
            {    
                targetSynchSupport.IsParentElectronicMailIncluded = sourceSynchSupport.IsParentElectronicMailIncluded;
                source.ParentElectronicMails.MapCollectionTo(target.ParentElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsParentElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsParentInternationalAddressesSupported)
            {    
                targetSynchSupport.IsParentInternationalAddressIncluded = sourceSynchSupport.IsParentInternationalAddressIncluded;
                source.ParentInternationalAddresses.MapCollectionTo(target.ParentInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsParentInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsParentLanguagesSupported)
            {    
                targetSynchSupport.IsParentLanguageIncluded = sourceSynchSupport.IsParentLanguageIncluded;
                source.ParentLanguages.MapCollectionTo(target.ParentLanguages, target);
            }
            else
            {
                targetSynchSupport.IsParentLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsParentOtherNamesSupported)
            {    
                targetSynchSupport.IsParentOtherNameIncluded = sourceSynchSupport.IsParentOtherNameIncluded;
                source.ParentOtherNames.MapCollectionTo(target.ParentOtherNames, target);
            }
            else
            {
                targetSynchSupport.IsParentOtherNamesSupported = false;
            }

            if (sourceSynchSupport.IsParentPersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsParentPersonalIdentificationDocumentIncluded = sourceSynchSupport.IsParentPersonalIdentificationDocumentIncluded;
                source.ParentPersonalIdentificationDocuments.MapCollectionTo(target.ParentPersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsParentPersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsParentTelephonesSupported)
            {    
                targetSynchSupport.IsParentTelephoneIncluded = sourceSynchSupport.IsParentTelephoneIncluded;
                source.ParentTelephones.MapCollectionTo(target.ParentTelephones, target);
            }
            else
            {
                targetSynchSupport.IsParentTelephonesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsLoginIdSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsParentAddressesSupported { get; set; }
        bool IsParentElectronicMailsSupported { get; set; }
        bool IsParentInternationalAddressesSupported { get; set; }
        bool IsParentLanguagesSupported { get; set; }
        bool IsParentOtherNamesSupported { get; set; }
        bool IsParentPersonalIdentificationDocumentsSupported { get; set; }
        bool IsParentTelephonesSupported { get; set; }
        bool IsParentUniqueIdSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        Func<IParentAddress, bool> IsParentAddressIncluded { get; set; }
        Func<IParentElectronicMail, bool> IsParentElectronicMailIncluded { get; set; }
        Func<IParentInternationalAddress, bool> IsParentInternationalAddressIncluded { get; set; }
        Func<IParentLanguage, bool> IsParentLanguageIncluded { get; set; }
        Func<IParentOtherName, bool> IsParentOtherNameIncluded { get; set; }
        Func<IParentPersonalIdentificationDocument, bool> IsParentPersonalIdentificationDocumentIncluded { get; set; }
        Func<IParentTelephone, bool> IsParentTelephoneIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentAddressMapper 
    {
        public static bool SynchronizeTo(this IParentAddress source, IParentAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsParentAddressPeriodsSupported)
            {
                isModified |= 
                    source.ParentAddressPeriods.SynchronizeCollectionTo(
                        target.ParentAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.ParentAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentAddressPeriodIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentAddress source, IParentAddress target, Action<IParentAddress, IParentAddress> onMapped)
        {
            var sourceSynchSupport = source as IParentAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsParentAddressPeriodsSupported)
            {    
                targetSynchSupport.IsParentAddressPeriodIncluded = sourceSynchSupport.IsParentAddressPeriodIncluded;
                source.ParentAddressPeriods.MapCollectionTo(target.ParentAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsParentAddressPeriodsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        bool IsParentAddressPeriodsSupported { get; set; }
        Func<IParentAddressPeriod, bool> IsParentAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this IParentAddressPeriod source, IParentAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentAddressPeriod source, IParentAddressPeriod target, Action<IParentAddressPeriod, IParentAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as IParentAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentAddressPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentElectronicMailMapper 
    {
        public static bool SynchronizeTo(this IParentElectronicMail source, IParentElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentElectronicMail source, IParentElectronicMail target, Action<IParentElectronicMail, IParentElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as IParentElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentElectronicMailSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentInternationalAddressMapper 
    {
        public static bool SynchronizeTo(this IParentInternationalAddress source, IParentInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentInternationalAddress source, IParentInternationalAddress target, Action<IParentInternationalAddress, IParentInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as IParentInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentInternationalAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentLanguageMapper 
    {
        public static bool SynchronizeTo(this IParentLanguage source, IParentLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsParentLanguageUsesSupported)
            {
                isModified |= 
                    source.ParentLanguageUses.SynchronizeCollectionTo(
                        target.ParentLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.ParentLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsParentLanguageUseIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentLanguage source, IParentLanguage target, Action<IParentLanguage, IParentLanguage> onMapped)
        {
            var sourceSynchSupport = source as IParentLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsParentLanguageUsesSupported)
            {    
                targetSynchSupport.IsParentLanguageUseIncluded = sourceSynchSupport.IsParentLanguageUseIncluded;
                source.ParentLanguageUses.MapCollectionTo(target.ParentLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsParentLanguageUsesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentLanguageSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsParentLanguageUsesSupported { get; set; }
        Func<IParentLanguageUse, bool> IsParentLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentLanguageUseMapper 
    {
        public static bool SynchronizeTo(this IParentLanguageUse source, IParentLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentLanguageUse source, IParentLanguageUse target, Action<IParentLanguageUse, IParentLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as IParentLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentLanguageUseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentOtherNameMapper 
    {
        public static bool SynchronizeTo(this IParentOtherName source, IParentOtherName target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentOtherNameSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OtherNameTypeDescriptor != target.OtherNameTypeDescriptor)
            {
                source.OtherNameTypeDescriptor = target.OtherNameTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentOtherName source, IParentOtherName target, Action<IParentOtherName, IParentOtherName> onMapped)
        {
            var sourceSynchSupport = source as IParentOtherNameSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentOtherNameSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentOtherNameSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentPersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IParentPersonalIdentificationDocument source, IParentPersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentPersonalIdentificationDocument source, IParentPersonalIdentificationDocument target, Action<IParentPersonalIdentificationDocument, IParentPersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IParentPersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentPersonalIdentificationDocumentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ParentTelephoneMapper 
    {
        public static bool SynchronizeTo(this IParentTelephone source, IParentTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IParentTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IParentTelephone source, IParentTelephone target, Action<IParentTelephone, IParentTelephone> onMapped)
        {
            var sourceSynchSupport = source as IParentTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IParentTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParentTelephoneSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
}
// Aggregate: ParticipationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ParticipationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ParticipationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IParticipationDescriptor source, IParticipationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IParticipationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ParticipationDescriptorId != target.ParticipationDescriptorId)
            {
                source.ParticipationDescriptorId = target.ParticipationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IParticipationDescriptor source, IParticipationDescriptor target, Action<IParticipationDescriptor, IParticipationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IParticipationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IParticipationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ParticipationDescriptorId = source.ParticipationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParticipationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ParticipationStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ParticipationStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ParticipationStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IParticipationStatusDescriptor source, IParticipationStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IParticipationStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ParticipationStatusDescriptorId != target.ParticipationStatusDescriptorId)
            {
                source.ParticipationStatusDescriptorId = target.ParticipationStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IParticipationStatusDescriptor source, IParticipationStatusDescriptor target, Action<IParticipationStatusDescriptor, IParticipationStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IParticipationStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IParticipationStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ParticipationStatusDescriptorId = source.ParticipationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IParticipationStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Payroll

namespace EdFi.Ods.Entities.Common.EdFi //.PayrollAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PayrollMapper 
    {
        public static bool SynchronizeTo(this IPayroll source, IPayroll target)
        {
            bool isModified = false;

            var sourceSupport = source as IPayrollSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccountIdentifier != target.AccountIdentifier)
            {
                source.AccountIdentifier = target.AccountIdentifier;
            }
            if (source.AsOfDate != target.AsOfDate)
            {
                source.AsOfDate = target.AsOfDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FiscalYear != target.FiscalYear)
            {
                source.FiscalYear = target.FiscalYear;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAmountToDateSupported)
                && target.AmountToDate != source.AmountToDate)
            {
                target.AmountToDate = source.AmountToDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IPayroll source, IPayroll target, Action<IPayroll, IPayroll> onMapped)
        {
            var sourceSynchSupport = source as IPayrollSynchronizationSourceSupport;
            var targetSynchSupport = target as IPayrollSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccountIdentifier = source.AccountIdentifier;
            target.AsOfDate = source.AsOfDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FiscalYear = source.FiscalYear;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAmountToDateSupported)
                target.AmountToDate = source.AmountToDate;
            else
                targetSynchSupport.IsAmountToDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AccountResourceId = source.AccountResourceId;
                target.AccountDiscriminator = source.AccountDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPayrollSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAmountToDateSupported { get; set; }
    }
 
}
// Aggregate: PerformanceBaseConversionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PerformanceBaseConversionDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceBaseConversionDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPerformanceBaseConversionDescriptor source, IPerformanceBaseConversionDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceBaseConversionDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceBaseConversionDescriptorId != target.PerformanceBaseConversionDescriptorId)
            {
                source.PerformanceBaseConversionDescriptorId = target.PerformanceBaseConversionDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceBaseConversionDescriptor source, IPerformanceBaseConversionDescriptor target, Action<IPerformanceBaseConversionDescriptor, IPerformanceBaseConversionDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceBaseConversionDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceBaseConversionDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceBaseConversionDescriptorId = source.PerformanceBaseConversionDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceBaseConversionDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PerformanceLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PerformanceLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPerformanceLevelDescriptor source, IPerformanceLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceLevelDescriptorId != target.PerformanceLevelDescriptorId)
            {
                source.PerformanceLevelDescriptorId = target.PerformanceLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceLevelDescriptor source, IPerformanceLevelDescriptor target, Action<IPerformanceLevelDescriptor, IPerformanceLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceLevelDescriptorId = source.PerformanceLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PersonalInformationVerificationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PersonalInformationVerificationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PersonalInformationVerificationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPersonalInformationVerificationDescriptor source, IPersonalInformationVerificationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPersonalInformationVerificationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PersonalInformationVerificationDescriptorId != target.PersonalInformationVerificationDescriptorId)
            {
                source.PersonalInformationVerificationDescriptorId = target.PersonalInformationVerificationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPersonalInformationVerificationDescriptor source, IPersonalInformationVerificationDescriptor target, Action<IPersonalInformationVerificationDescriptor, IPersonalInformationVerificationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPersonalInformationVerificationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPersonalInformationVerificationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PersonalInformationVerificationDescriptorId = source.PersonalInformationVerificationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPersonalInformationVerificationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PlatformTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PlatformTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PlatformTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPlatformTypeDescriptor source, IPlatformTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPlatformTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PlatformTypeDescriptorId != target.PlatformTypeDescriptorId)
            {
                source.PlatformTypeDescriptorId = target.PlatformTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPlatformTypeDescriptor source, IPlatformTypeDescriptor target, Action<IPlatformTypeDescriptor, IPlatformTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPlatformTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPlatformTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PlatformTypeDescriptorId = source.PlatformTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPlatformTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PopulationServedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PopulationServedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PopulationServedDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPopulationServedDescriptor source, IPopulationServedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPopulationServedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PopulationServedDescriptorId != target.PopulationServedDescriptorId)
            {
                source.PopulationServedDescriptorId = target.PopulationServedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPopulationServedDescriptor source, IPopulationServedDescriptor target, Action<IPopulationServedDescriptor, IPopulationServedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPopulationServedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPopulationServedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PopulationServedDescriptorId = source.PopulationServedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPopulationServedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PostingResultDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PostingResultDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PostingResultDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPostingResultDescriptor source, IPostingResultDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostingResultDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PostingResultDescriptorId != target.PostingResultDescriptorId)
            {
                source.PostingResultDescriptorId = target.PostingResultDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPostingResultDescriptor source, IPostingResultDescriptor target, Action<IPostingResultDescriptor, IPostingResultDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPostingResultDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostingResultDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PostingResultDescriptorId = source.PostingResultDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostingResultDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PostSecondaryEvent

namespace EdFi.Ods.Entities.Common.EdFi //.PostSecondaryEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryEventMapper 
    {
        public static bool SynchronizeTo(this IPostSecondaryEvent source, IPostSecondaryEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostSecondaryEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.PostSecondaryEventCategoryDescriptor != target.PostSecondaryEventCategoryDescriptor)
            {
                source.PostSecondaryEventCategoryDescriptor = target.PostSecondaryEventCategoryDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPostSecondaryInstitutionIdSupported)
                && target.PostSecondaryInstitutionId != source.PostSecondaryInstitutionId)
            {
                target.PostSecondaryInstitutionId = source.PostSecondaryInstitutionId;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IPostSecondaryEvent source, IPostSecondaryEvent target, Action<IPostSecondaryEvent, IPostSecondaryEvent> onMapped)
        {
            var sourceSynchSupport = source as IPostSecondaryEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostSecondaryEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EventDate = source.EventDate;
            target.PostSecondaryEventCategoryDescriptor = source.PostSecondaryEventCategoryDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPostSecondaryInstitutionIdSupported)
                target.PostSecondaryInstitutionId = source.PostSecondaryInstitutionId;
            else
                targetSynchSupport.IsPostSecondaryInstitutionIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PostSecondaryInstitutionResourceId = source.PostSecondaryInstitutionResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostSecondaryEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPostSecondaryInstitutionIdSupported { get; set; }
    }
 
}
// Aggregate: PostSecondaryEventCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PostSecondaryEventCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryEventCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPostSecondaryEventCategoryDescriptor source, IPostSecondaryEventCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostSecondaryEventCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PostSecondaryEventCategoryDescriptorId != target.PostSecondaryEventCategoryDescriptorId)
            {
                source.PostSecondaryEventCategoryDescriptorId = target.PostSecondaryEventCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPostSecondaryEventCategoryDescriptor source, IPostSecondaryEventCategoryDescriptor target, Action<IPostSecondaryEventCategoryDescriptor, IPostSecondaryEventCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPostSecondaryEventCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostSecondaryEventCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PostSecondaryEventCategoryDescriptorId = source.PostSecondaryEventCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostSecondaryEventCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PostSecondaryInstitution

namespace EdFi.Ods.Entities.Common.EdFi //.PostSecondaryInstitutionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionMapper 
    {
        public static bool SynchronizeTo(this IPostSecondaryInstitution source, IPostSecondaryInstitution target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostSecondaryInstitutionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PostSecondaryInstitutionId != target.PostSecondaryInstitutionId)
            {
                source.PostSecondaryInstitutionId = target.PostSecondaryInstitutionId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAdministrativeFundingControlDescriptorSupported)
                && target.AdministrativeFundingControlDescriptor != source.AdministrativeFundingControlDescriptor)
            {
                target.AdministrativeFundingControlDescriptor = source.AdministrativeFundingControlDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPostSecondaryInstitutionLevelDescriptorSupported)
                && target.PostSecondaryInstitutionLevelDescriptor != source.PostSecondaryInstitutionLevelDescriptor)
            {
                target.PostSecondaryInstitutionLevelDescriptor = source.PostSecondaryInstitutionLevelDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsPostSecondaryInstitutionMediumOfInstructionsSupported)
            {
                isModified |= 
                    source.PostSecondaryInstitutionMediumOfInstructions.SynchronizeCollectionTo(
                        target.PostSecondaryInstitutionMediumOfInstructions, 
                        onChildAdded: child => 
                            {
                                child.PostSecondaryInstitution = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPostSecondaryInstitutionMediumOfInstructionIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IPostSecondaryInstitution source, IPostSecondaryInstitution target, Action<IPostSecondaryInstitution, IPostSecondaryInstitution> onMapped)
        {
            var sourceSynchSupport = source as IPostSecondaryInstitutionSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostSecondaryInstitutionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PostSecondaryInstitutionId = source.PostSecondaryInstitutionId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAdministrativeFundingControlDescriptorSupported)
                target.AdministrativeFundingControlDescriptor = source.AdministrativeFundingControlDescriptor;
            else
                targetSynchSupport.IsAdministrativeFundingControlDescriptorSupported = false;

            if (sourceSynchSupport.IsPostSecondaryInstitutionLevelDescriptorSupported)
                target.PostSecondaryInstitutionLevelDescriptor = source.PostSecondaryInstitutionLevelDescriptor;
            else
                targetSynchSupport.IsPostSecondaryInstitutionLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists

            if (sourceSynchSupport.IsPostSecondaryInstitutionMediumOfInstructionsSupported)
            {    
                targetSynchSupport.IsPostSecondaryInstitutionMediumOfInstructionIncluded = sourceSynchSupport.IsPostSecondaryInstitutionMediumOfInstructionIncluded;
                source.PostSecondaryInstitutionMediumOfInstructions.MapCollectionTo(target.PostSecondaryInstitutionMediumOfInstructions, target);
            }
            else
            {
                targetSynchSupport.IsPostSecondaryInstitutionMediumOfInstructionsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostSecondaryInstitutionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAdministrativeFundingControlDescriptorSupported { get; set; }
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsPostSecondaryInstitutionLevelDescriptorSupported { get; set; }
        bool IsPostSecondaryInstitutionMediumOfInstructionsSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
        Func<IPostSecondaryInstitutionMediumOfInstruction, bool> IsPostSecondaryInstitutionMediumOfInstructionIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionMediumOfInstructionMapper 
    {
        public static bool SynchronizeTo(this IPostSecondaryInstitutionMediumOfInstruction source, IPostSecondaryInstitutionMediumOfInstruction target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostSecondaryInstitutionMediumOfInstructionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MediumOfInstructionDescriptor != target.MediumOfInstructionDescriptor)
            {
                source.MediumOfInstructionDescriptor = target.MediumOfInstructionDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IPostSecondaryInstitutionMediumOfInstruction source, IPostSecondaryInstitutionMediumOfInstruction target, Action<IPostSecondaryInstitutionMediumOfInstruction, IPostSecondaryInstitutionMediumOfInstruction> onMapped)
        {
            var sourceSynchSupport = source as IPostSecondaryInstitutionMediumOfInstructionSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostSecondaryInstitutionMediumOfInstructionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.MediumOfInstructionDescriptor = source.MediumOfInstructionDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostSecondaryInstitutionMediumOfInstructionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: PostSecondaryInstitutionLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PostSecondaryInstitutionLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPostSecondaryInstitutionLevelDescriptor source, IPostSecondaryInstitutionLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostSecondaryInstitutionLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PostSecondaryInstitutionLevelDescriptorId != target.PostSecondaryInstitutionLevelDescriptorId)
            {
                source.PostSecondaryInstitutionLevelDescriptorId = target.PostSecondaryInstitutionLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPostSecondaryInstitutionLevelDescriptor source, IPostSecondaryInstitutionLevelDescriptor target, Action<IPostSecondaryInstitutionLevelDescriptor, IPostSecondaryInstitutionLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPostSecondaryInstitutionLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostSecondaryInstitutionLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PostSecondaryInstitutionLevelDescriptorId = source.PostSecondaryInstitutionLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostSecondaryInstitutionLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProficiencyDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProficiencyDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProficiencyDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProficiencyDescriptor source, IProficiencyDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProficiencyDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProficiencyDescriptorId != target.ProficiencyDescriptorId)
            {
                source.ProficiencyDescriptorId = target.ProficiencyDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProficiencyDescriptor source, IProficiencyDescriptor target, Action<IProficiencyDescriptor, IProficiencyDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProficiencyDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProficiencyDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProficiencyDescriptorId = source.ProficiencyDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProficiencyDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Program

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgramMapper 
    {
        public static bool SynchronizeTo(this IProgram source, IProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsProgramIdSupported)
                && target.ProgramId != source.ProgramId)
            {
                target.ProgramId = source.ProgramId;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsProgramCharacteristicsSupported)
            {
                isModified |= 
                    source.ProgramCharacteristics.SynchronizeCollectionTo(
                        target.ProgramCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.Program = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProgramCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProgramLearningObjectivesSupported)
            {
                isModified |= 
                    source.ProgramLearningObjectives.SynchronizeCollectionTo(
                        target.ProgramLearningObjectives, 
                        onChildAdded: child => 
                            {
                                child.Program = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProgramLearningObjectiveIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProgramLearningStandardsSupported)
            {
                isModified |= 
                    source.ProgramLearningStandards.SynchronizeCollectionTo(
                        target.ProgramLearningStandards, 
                        onChildAdded: child => 
                            {
                                child.Program = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProgramLearningStandardIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProgramServicesSupported)
            {
                isModified |= 
                    source.ProgramServices.SynchronizeCollectionTo(
                        target.ProgramServices, 
                        onChildAdded: child => 
                            {
                                child.Program = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProgramServiceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProgramSponsorsSupported)
            {
                isModified |= 
                    source.ProgramSponsors.SynchronizeCollectionTo(
                        target.ProgramSponsors, 
                        onChildAdded: child => 
                            {
                                child.Program = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProgramSponsorIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IProgram source, IProgram target, Action<IProgram, IProgram> onMapped)
        {
            var sourceSynchSupport = source as IProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsProgramIdSupported)
                target.ProgramId = source.ProgramId;
            else
                targetSynchSupport.IsProgramIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsProgramCharacteristicsSupported)
            {    
                targetSynchSupport.IsProgramCharacteristicIncluded = sourceSynchSupport.IsProgramCharacteristicIncluded;
                source.ProgramCharacteristics.MapCollectionTo(target.ProgramCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsProgramCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsProgramLearningObjectivesSupported)
            {    
                targetSynchSupport.IsProgramLearningObjectiveIncluded = sourceSynchSupport.IsProgramLearningObjectiveIncluded;
                source.ProgramLearningObjectives.MapCollectionTo(target.ProgramLearningObjectives, target);
            }
            else
            {
                targetSynchSupport.IsProgramLearningObjectivesSupported = false;
            }

            if (sourceSynchSupport.IsProgramLearningStandardsSupported)
            {    
                targetSynchSupport.IsProgramLearningStandardIncluded = sourceSynchSupport.IsProgramLearningStandardIncluded;
                source.ProgramLearningStandards.MapCollectionTo(target.ProgramLearningStandards, target);
            }
            else
            {
                targetSynchSupport.IsProgramLearningStandardsSupported = false;
            }

            if (sourceSynchSupport.IsProgramServicesSupported)
            {    
                targetSynchSupport.IsProgramServiceIncluded = sourceSynchSupport.IsProgramServiceIncluded;
                source.ProgramServices.MapCollectionTo(target.ProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsProgramServicesSupported = false;
            }

            if (sourceSynchSupport.IsProgramSponsorsSupported)
            {    
                targetSynchSupport.IsProgramSponsorIncluded = sourceSynchSupport.IsProgramSponsorIncluded;
                source.ProgramSponsors.MapCollectionTo(target.ProgramSponsors, target);
            }
            else
            {
                targetSynchSupport.IsProgramSponsorsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsProgramCharacteristicsSupported { get; set; }
        bool IsProgramIdSupported { get; set; }
        bool IsProgramLearningObjectivesSupported { get; set; }
        bool IsProgramLearningStandardsSupported { get; set; }
        bool IsProgramServicesSupported { get; set; }
        bool IsProgramSponsorsSupported { get; set; }
        Func<IProgramCharacteristic, bool> IsProgramCharacteristicIncluded { get; set; }
        Func<IProgramLearningObjective, bool> IsProgramLearningObjectiveIncluded { get; set; }
        Func<IProgramLearningStandard, bool> IsProgramLearningStandardIncluded { get; set; }
        Func<IProgramService, bool> IsProgramServiceIncluded { get; set; }
        Func<IProgramSponsor, bool> IsProgramSponsorIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProgramCharacteristicMapper 
    {
        public static bool SynchronizeTo(this IProgramCharacteristic source, IProgramCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramCharacteristicDescriptor != target.ProgramCharacteristicDescriptor)
            {
                source.ProgramCharacteristicDescriptor = target.ProgramCharacteristicDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IProgramCharacteristic source, IProgramCharacteristic target, Action<IProgramCharacteristic, IProgramCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as IProgramCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ProgramCharacteristicDescriptor = source.ProgramCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramCharacteristicSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProgramLearningObjectiveMapper 
    {
        public static bool SynchronizeTo(this IProgramLearningObjective source, IProgramLearningObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramLearningObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningObjectiveId != target.LearningObjectiveId)
            {
                source.LearningObjectiveId = target.LearningObjectiveId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IProgramLearningObjective source, IProgramLearningObjective target, Action<IProgramLearningObjective, IProgramLearningObjective> onMapped)
        {
            var sourceSynchSupport = source as IProgramLearningObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramLearningObjectiveSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningObjectiveId = source.LearningObjectiveId;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningObjectiveResourceId = source.LearningObjectiveResourceId;
                target.LearningObjectiveDiscriminator = source.LearningObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramLearningObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProgramLearningStandardMapper 
    {
        public static bool SynchronizeTo(this IProgramLearningStandard source, IProgramLearningStandard target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramLearningStandardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningStandardId != target.LearningStandardId)
            {
                source.LearningStandardId = target.LearningStandardId;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IProgramLearningStandard source, IProgramLearningStandard target, Action<IProgramLearningStandard, IProgramLearningStandard> onMapped)
        {
            var sourceSynchSupport = source as IProgramLearningStandardSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramLearningStandardSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningStandardId = source.LearningStandardId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.LearningStandardResourceId = source.LearningStandardResourceId;
                target.LearningStandardDiscriminator = source.LearningStandardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramLearningStandardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IProgramService source, IProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ServiceDescriptor != target.ServiceDescriptor)
            {
                source.ServiceDescriptor = target.ServiceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IProgramService source, IProgramService target, Action<IProgramService, IProgramService> onMapped)
        {
            var sourceSynchSupport = source as IProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ServiceDescriptor = source.ServiceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProgramSponsorMapper 
    {
        public static bool SynchronizeTo(this IProgramSponsor source, IProgramSponsor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramSponsorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramSponsorDescriptor != target.ProgramSponsorDescriptor)
            {
                source.ProgramSponsorDescriptor = target.ProgramSponsorDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IProgramSponsor source, IProgramSponsor target, Action<IProgramSponsor, IProgramSponsor> onMapped)
        {
            var sourceSynchSupport = source as IProgramSponsorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramSponsorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ProgramSponsorDescriptor = source.ProgramSponsorDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramSponsorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: ProgramAssignmentDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramAssignmentDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgramAssignmentDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProgramAssignmentDescriptor source, IProgramAssignmentDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramAssignmentDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramAssignmentDescriptorId != target.ProgramAssignmentDescriptorId)
            {
                source.ProgramAssignmentDescriptorId = target.ProgramAssignmentDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgramAssignmentDescriptor source, IProgramAssignmentDescriptor target, Action<IProgramAssignmentDescriptor, IProgramAssignmentDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgramAssignmentDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramAssignmentDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramAssignmentDescriptorId = source.ProgramAssignmentDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramAssignmentDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProgramCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramCharacteristicDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgramCharacteristicDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProgramCharacteristicDescriptor source, IProgramCharacteristicDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramCharacteristicDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramCharacteristicDescriptorId != target.ProgramCharacteristicDescriptorId)
            {
                source.ProgramCharacteristicDescriptorId = target.ProgramCharacteristicDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgramCharacteristicDescriptor source, IProgramCharacteristicDescriptor target, Action<IProgramCharacteristicDescriptor, IProgramCharacteristicDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgramCharacteristicDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramCharacteristicDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramCharacteristicDescriptorId = source.ProgramCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramCharacteristicDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProgramSponsorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramSponsorDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgramSponsorDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProgramSponsorDescriptor source, IProgramSponsorDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramSponsorDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramSponsorDescriptorId != target.ProgramSponsorDescriptorId)
            {
                source.ProgramSponsorDescriptorId = target.ProgramSponsorDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgramSponsorDescriptor source, IProgramSponsorDescriptor target, Action<IProgramSponsorDescriptor, IProgramSponsorDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgramSponsorDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramSponsorDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramSponsorDescriptorId = source.ProgramSponsorDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramSponsorDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProgramTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgramTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgramTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProgramTypeDescriptor source, IProgramTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramTypeDescriptorId != target.ProgramTypeDescriptorId)
            {
                source.ProgramTypeDescriptorId = target.ProgramTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgramTypeDescriptor source, IProgramTypeDescriptor target, Action<IProgramTypeDescriptor, IProgramTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgramTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramTypeDescriptorId = source.ProgramTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProgressDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgressDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgressDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProgressDescriptor source, IProgressDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgressDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgressDescriptorId != target.ProgressDescriptorId)
            {
                source.ProgressDescriptorId = target.ProgressDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgressDescriptor source, IProgressDescriptor target, Action<IProgressDescriptor, IProgressDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgressDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgressDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgressDescriptorId = source.ProgressDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgressDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProgressLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProgressLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgressLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProgressLevelDescriptor source, IProgressLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgressLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgressLevelDescriptorId != target.ProgressLevelDescriptorId)
            {
                source.ProgressLevelDescriptorId = target.ProgressLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgressLevelDescriptor source, IProgressLevelDescriptor target, Action<IProgressLevelDescriptor, IProgressLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgressLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgressLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgressLevelDescriptorId = source.ProgressLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgressLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProviderCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProviderCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProviderCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProviderCategoryDescriptor source, IProviderCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProviderCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProviderCategoryDescriptorId != target.ProviderCategoryDescriptorId)
            {
                source.ProviderCategoryDescriptorId = target.ProviderCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProviderCategoryDescriptor source, IProviderCategoryDescriptor target, Action<IProviderCategoryDescriptor, IProviderCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProviderCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProviderCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProviderCategoryDescriptorId = source.ProviderCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProviderCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProviderProfitabilityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProviderProfitabilityDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProviderProfitabilityDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProviderProfitabilityDescriptor source, IProviderProfitabilityDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProviderProfitabilityDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProviderProfitabilityDescriptorId != target.ProviderProfitabilityDescriptorId)
            {
                source.ProviderProfitabilityDescriptorId = target.ProviderProfitabilityDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProviderProfitabilityDescriptor source, IProviderProfitabilityDescriptor target, Action<IProviderProfitabilityDescriptor, IProviderProfitabilityDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProviderProfitabilityDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProviderProfitabilityDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProviderProfitabilityDescriptorId = source.ProviderProfitabilityDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProviderProfitabilityDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProviderStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ProviderStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProviderStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProviderStatusDescriptor source, IProviderStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProviderStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProviderStatusDescriptorId != target.ProviderStatusDescriptorId)
            {
                source.ProviderStatusDescriptorId = target.ProviderStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProviderStatusDescriptor source, IProviderStatusDescriptor target, Action<IProviderStatusDescriptor, IProviderStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProviderStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProviderStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProviderStatusDescriptorId = source.ProviderStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProviderStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PublicationStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.PublicationStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PublicationStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPublicationStatusDescriptor source, IPublicationStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPublicationStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PublicationStatusDescriptorId != target.PublicationStatusDescriptorId)
            {
                source.PublicationStatusDescriptorId = target.PublicationStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPublicationStatusDescriptor source, IPublicationStatusDescriptor target, Action<IPublicationStatusDescriptor, IPublicationStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPublicationStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPublicationStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PublicationStatusDescriptorId = source.PublicationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPublicationStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: QuestionFormDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.QuestionFormDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class QuestionFormDescriptorMapper 
    {
        public static bool SynchronizeTo(this IQuestionFormDescriptor source, IQuestionFormDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuestionFormDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.QuestionFormDescriptorId != target.QuestionFormDescriptorId)
            {
                source.QuestionFormDescriptorId = target.QuestionFormDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuestionFormDescriptor source, IQuestionFormDescriptor target, Action<IQuestionFormDescriptor, IQuestionFormDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IQuestionFormDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuestionFormDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.QuestionFormDescriptorId = source.QuestionFormDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuestionFormDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RaceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RaceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RaceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRaceDescriptor source, IRaceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRaceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptorId != target.RaceDescriptorId)
            {
                source.RaceDescriptorId = target.RaceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRaceDescriptor source, IRaceDescriptor target, Action<IRaceDescriptor, IRaceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRaceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRaceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RaceDescriptorId = source.RaceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRaceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ReasonExitedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ReasonExitedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ReasonExitedDescriptorMapper 
    {
        public static bool SynchronizeTo(this IReasonExitedDescriptor source, IReasonExitedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IReasonExitedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ReasonExitedDescriptorId != target.ReasonExitedDescriptorId)
            {
                source.ReasonExitedDescriptorId = target.ReasonExitedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IReasonExitedDescriptor source, IReasonExitedDescriptor target, Action<IReasonExitedDescriptor, IReasonExitedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IReasonExitedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IReasonExitedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ReasonExitedDescriptorId = source.ReasonExitedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IReasonExitedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ReasonNotTestedDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ReasonNotTestedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ReasonNotTestedDescriptorMapper 
    {
        public static bool SynchronizeTo(this IReasonNotTestedDescriptor source, IReasonNotTestedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IReasonNotTestedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ReasonNotTestedDescriptorId != target.ReasonNotTestedDescriptorId)
            {
                source.ReasonNotTestedDescriptorId = target.ReasonNotTestedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IReasonNotTestedDescriptor source, IReasonNotTestedDescriptor target, Action<IReasonNotTestedDescriptor, IReasonNotTestedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IReasonNotTestedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IReasonNotTestedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ReasonNotTestedDescriptorId = source.ReasonNotTestedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IReasonNotTestedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RecognitionTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RecognitionTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RecognitionTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRecognitionTypeDescriptor source, IRecognitionTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecognitionTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecognitionTypeDescriptorId != target.RecognitionTypeDescriptorId)
            {
                source.RecognitionTypeDescriptorId = target.RecognitionTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecognitionTypeDescriptor source, IRecognitionTypeDescriptor target, Action<IRecognitionTypeDescriptor, IRecognitionTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRecognitionTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecognitionTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RecognitionTypeDescriptorId = source.RecognitionTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecognitionTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RelationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RelationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RelationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRelationDescriptor source, IRelationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRelationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RelationDescriptorId != target.RelationDescriptorId)
            {
                source.RelationDescriptorId = target.RelationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRelationDescriptor source, IRelationDescriptor target, Action<IRelationDescriptor, IRelationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRelationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRelationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RelationDescriptorId = source.RelationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRelationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RepeatIdentifierDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RepeatIdentifierDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RepeatIdentifierDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRepeatIdentifierDescriptor source, IRepeatIdentifierDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRepeatIdentifierDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RepeatIdentifierDescriptorId != target.RepeatIdentifierDescriptorId)
            {
                source.RepeatIdentifierDescriptorId = target.RepeatIdentifierDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRepeatIdentifierDescriptor source, IRepeatIdentifierDescriptor target, Action<IRepeatIdentifierDescriptor, IRepeatIdentifierDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRepeatIdentifierDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRepeatIdentifierDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RepeatIdentifierDescriptorId = source.RepeatIdentifierDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRepeatIdentifierDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ReportCard

namespace EdFi.Ods.Entities.Common.EdFi //.ReportCardAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ReportCardMapper 
    {
        public static bool SynchronizeTo(this IReportCard source, IReportCard target)
        {
            bool isModified = false;

            var sourceSupport = source as IReportCardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.GradingPeriodDescriptor != target.GradingPeriodDescriptor)
            {
                source.GradingPeriodDescriptor = target.GradingPeriodDescriptor;
            }
            if (source.GradingPeriodSchoolId != target.GradingPeriodSchoolId)
            {
                source.GradingPeriodSchoolId = target.GradingPeriodSchoolId;
            }
            if (source.GradingPeriodSchoolYear != target.GradingPeriodSchoolYear)
            {
                source.GradingPeriodSchoolYear = target.GradingPeriodSchoolYear;
            }
            if (source.GradingPeriodSequence != target.GradingPeriodSequence)
            {
                source.GradingPeriodSequence = target.GradingPeriodSequence;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGPACumulativeSupported)
                && target.GPACumulative != source.GPACumulative)
            {
                target.GPACumulative = source.GPACumulative;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGPAGivenGradingPeriodSupported)
                && target.GPAGivenGradingPeriod != source.GPAGivenGradingPeriod)
            {
                target.GPAGivenGradingPeriod = source.GPAGivenGradingPeriod;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumberOfDaysAbsentSupported)
                && target.NumberOfDaysAbsent != source.NumberOfDaysAbsent)
            {
                target.NumberOfDaysAbsent = source.NumberOfDaysAbsent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumberOfDaysInAttendanceSupported)
                && target.NumberOfDaysInAttendance != source.NumberOfDaysInAttendance)
            {
                target.NumberOfDaysInAttendance = source.NumberOfDaysInAttendance;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumberOfDaysTardySupported)
                && target.NumberOfDaysTardy != source.NumberOfDaysTardy)
            {
                target.NumberOfDaysTardy = source.NumberOfDaysTardy;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsReportCardGradesSupported)
            {
                isModified |= 
                    source.ReportCardGrades.SynchronizeCollectionTo(
                        target.ReportCardGrades, 
                        onChildAdded: child => 
                            {
                                child.ReportCard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsReportCardGradeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsReportCardGradePointAveragesSupported)
            {
                isModified |= 
                    source.ReportCardGradePointAverages.SynchronizeCollectionTo(
                        target.ReportCardGradePointAverages, 
                        onChildAdded: child => 
                            {
                                child.ReportCard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsReportCardGradePointAverageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsReportCardStudentCompetencyObjectivesSupported)
            {
                isModified |= 
                    source.ReportCardStudentCompetencyObjectives.SynchronizeCollectionTo(
                        target.ReportCardStudentCompetencyObjectives, 
                        onChildAdded: child => 
                            {
                                child.ReportCard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsReportCardStudentCompetencyObjectiveIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsReportCardStudentLearningObjectivesSupported)
            {
                isModified |= 
                    source.ReportCardStudentLearningObjectives.SynchronizeCollectionTo(
                        target.ReportCardStudentLearningObjectives, 
                        onChildAdded: child => 
                            {
                                child.ReportCard = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsReportCardStudentLearningObjectiveIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IReportCard source, IReportCard target, Action<IReportCard, IReportCard> onMapped)
        {
            var sourceSynchSupport = source as IReportCardSynchronizationSourceSupport;
            var targetSynchSupport = target as IReportCardSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodSchoolId = source.GradingPeriodSchoolId;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;
            target.GradingPeriodSequence = source.GradingPeriodSequence;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGPACumulativeSupported)
                target.GPACumulative = source.GPACumulative;
            else
                targetSynchSupport.IsGPACumulativeSupported = false;

            if (sourceSynchSupport.IsGPAGivenGradingPeriodSupported)
                target.GPAGivenGradingPeriod = source.GPAGivenGradingPeriod;
            else
                targetSynchSupport.IsGPAGivenGradingPeriodSupported = false;

            if (sourceSynchSupport.IsNumberOfDaysAbsentSupported)
                target.NumberOfDaysAbsent = source.NumberOfDaysAbsent;
            else
                targetSynchSupport.IsNumberOfDaysAbsentSupported = false;

            if (sourceSynchSupport.IsNumberOfDaysInAttendanceSupported)
                target.NumberOfDaysInAttendance = source.NumberOfDaysInAttendance;
            else
                targetSynchSupport.IsNumberOfDaysInAttendanceSupported = false;

            if (sourceSynchSupport.IsNumberOfDaysTardySupported)
                target.NumberOfDaysTardy = source.NumberOfDaysTardy;
            else
                targetSynchSupport.IsNumberOfDaysTardySupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsReportCardGradesSupported)
            {    
                targetSynchSupport.IsReportCardGradeIncluded = sourceSynchSupport.IsReportCardGradeIncluded;
                source.ReportCardGrades.MapCollectionTo(target.ReportCardGrades, target);
            }
            else
            {
                targetSynchSupport.IsReportCardGradesSupported = false;
            }

            if (sourceSynchSupport.IsReportCardGradePointAveragesSupported)
            {    
                targetSynchSupport.IsReportCardGradePointAverageIncluded = sourceSynchSupport.IsReportCardGradePointAverageIncluded;
                source.ReportCardGradePointAverages.MapCollectionTo(target.ReportCardGradePointAverages, target);
            }
            else
            {
                targetSynchSupport.IsReportCardGradePointAveragesSupported = false;
            }

            if (sourceSynchSupport.IsReportCardStudentCompetencyObjectivesSupported)
            {    
                targetSynchSupport.IsReportCardStudentCompetencyObjectiveIncluded = sourceSynchSupport.IsReportCardStudentCompetencyObjectiveIncluded;
                source.ReportCardStudentCompetencyObjectives.MapCollectionTo(target.ReportCardStudentCompetencyObjectives, target);
            }
            else
            {
                targetSynchSupport.IsReportCardStudentCompetencyObjectivesSupported = false;
            }

            if (sourceSynchSupport.IsReportCardStudentLearningObjectivesSupported)
            {    
                targetSynchSupport.IsReportCardStudentLearningObjectiveIncluded = sourceSynchSupport.IsReportCardStudentLearningObjectiveIncluded;
                source.ReportCardStudentLearningObjectives.MapCollectionTo(target.ReportCardStudentLearningObjectives, target);
            }
            else
            {
                targetSynchSupport.IsReportCardStudentLearningObjectivesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IReportCardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsGPACumulativeSupported { get; set; }
        bool IsGPAGivenGradingPeriodSupported { get; set; }
        bool IsNumberOfDaysAbsentSupported { get; set; }
        bool IsNumberOfDaysInAttendanceSupported { get; set; }
        bool IsNumberOfDaysTardySupported { get; set; }
        bool IsReportCardGradePointAveragesSupported { get; set; }
        bool IsReportCardGradesSupported { get; set; }
        bool IsReportCardStudentCompetencyObjectivesSupported { get; set; }
        bool IsReportCardStudentLearningObjectivesSupported { get; set; }
        Func<IReportCardGrade, bool> IsReportCardGradeIncluded { get; set; }
        Func<IReportCardGradePointAverage, bool> IsReportCardGradePointAverageIncluded { get; set; }
        Func<IReportCardStudentCompetencyObjective, bool> IsReportCardStudentCompetencyObjectiveIncluded { get; set; }
        Func<IReportCardStudentLearningObjective, bool> IsReportCardStudentLearningObjectiveIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ReportCardGradeMapper 
    {
        public static bool SynchronizeTo(this IReportCardGrade source, IReportCardGrade target)
        {
            bool isModified = false;

            var sourceSupport = source as IReportCardGradeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.GradeTypeDescriptor != target.GradeTypeDescriptor)
            {
                source.GradeTypeDescriptor = target.GradeTypeDescriptor;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IReportCardGrade source, IReportCardGrade target, Action<IReportCardGrade, IReportCardGrade> onMapped)
        {
            var sourceSynchSupport = source as IReportCardGradeSynchronizationSourceSupport;
            var targetSynchSupport = target as IReportCardGradeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.GradeTypeDescriptor = source.GradeTypeDescriptor;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradeResourceId = source.GradeResourceId;
                target.GradeDiscriminator = source.GradeDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IReportCardGradeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ReportCardGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this IReportCardGradePointAverage source, IReportCardGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as IReportCardGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradePointAverageTypeDescriptor != target.GradePointAverageTypeDescriptor)
            {
                source.GradePointAverageTypeDescriptor = target.GradePointAverageTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageValueSupported)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsCumulativeSupported)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxGradePointAverageValueSupported)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IReportCardGradePointAverage source, IReportCardGradePointAverage target, Action<IReportCardGradePointAverage, IReportCardGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as IReportCardGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as IReportCardGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageValueSupported)
                target.GradePointAverageValue = source.GradePointAverageValue;
            else
                targetSynchSupport.IsGradePointAverageValueSupported = false;

            if (sourceSynchSupport.IsIsCumulativeSupported)
                target.IsCumulative = source.IsCumulative;
            else
                targetSynchSupport.IsIsCumulativeSupported = false;

            if (sourceSynchSupport.IsMaxGradePointAverageValueSupported)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
            else
                targetSynchSupport.IsMaxGradePointAverageValueSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IReportCardGradePointAverageSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsGradePointAverageValueSupported { get; set; }
        bool IsIsCumulativeSupported { get; set; }
        bool IsMaxGradePointAverageValueSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ReportCardStudentCompetencyObjectiveMapper 
    {
        public static bool SynchronizeTo(this IReportCardStudentCompetencyObjective source, IReportCardStudentCompetencyObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IReportCardStudentCompetencyObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Objective != target.Objective)
            {
                source.Objective = target.Objective;
            }
            if (source.ObjectiveEducationOrganizationId != target.ObjectiveEducationOrganizationId)
            {
                source.ObjectiveEducationOrganizationId = target.ObjectiveEducationOrganizationId;
            }
            if (source.ObjectiveGradeLevelDescriptor != target.ObjectiveGradeLevelDescriptor)
            {
                source.ObjectiveGradeLevelDescriptor = target.ObjectiveGradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IReportCardStudentCompetencyObjective source, IReportCardStudentCompetencyObjective target, Action<IReportCardStudentCompetencyObjective, IReportCardStudentCompetencyObjective> onMapped)
        {
            var sourceSynchSupport = source as IReportCardStudentCompetencyObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IReportCardStudentCompetencyObjectiveSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Objective = source.Objective;
            target.ObjectiveEducationOrganizationId = source.ObjectiveEducationOrganizationId;
            target.ObjectiveGradeLevelDescriptor = source.ObjectiveGradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentCompetencyObjectiveResourceId = source.StudentCompetencyObjectiveResourceId;
                target.StudentCompetencyObjectiveDiscriminator = source.StudentCompetencyObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IReportCardStudentCompetencyObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ReportCardStudentLearningObjectiveMapper 
    {
        public static bool SynchronizeTo(this IReportCardStudentLearningObjective source, IReportCardStudentLearningObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IReportCardStudentLearningObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LearningObjectiveId != target.LearningObjectiveId)
            {
                source.LearningObjectiveId = target.LearningObjectiveId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IReportCardStudentLearningObjective source, IReportCardStudentLearningObjective target, Action<IReportCardStudentLearningObjective, IReportCardStudentLearningObjective> onMapped)
        {
            var sourceSynchSupport = source as IReportCardStudentLearningObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IReportCardStudentLearningObjectiveSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LearningObjectiveId = source.LearningObjectiveId;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentLearningObjectiveResourceId = source.StudentLearningObjectiveResourceId;
                target.StudentLearningObjectiveDiscriminator = source.StudentLearningObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IReportCardStudentLearningObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: ReporterDescriptionDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ReporterDescriptionDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ReporterDescriptionDescriptorMapper 
    {
        public static bool SynchronizeTo(this IReporterDescriptionDescriptor source, IReporterDescriptionDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IReporterDescriptionDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ReporterDescriptionDescriptorId != target.ReporterDescriptionDescriptorId)
            {
                source.ReporterDescriptionDescriptorId = target.ReporterDescriptionDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IReporterDescriptionDescriptor source, IReporterDescriptionDescriptor target, Action<IReporterDescriptionDescriptor, IReporterDescriptionDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IReporterDescriptionDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IReporterDescriptionDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ReporterDescriptionDescriptorId = source.ReporterDescriptionDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IReporterDescriptionDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ResidencyStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ResidencyStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ResidencyStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IResidencyStatusDescriptor source, IResidencyStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IResidencyStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ResidencyStatusDescriptorId != target.ResidencyStatusDescriptorId)
            {
                source.ResidencyStatusDescriptorId = target.ResidencyStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IResidencyStatusDescriptor source, IResidencyStatusDescriptor target, Action<IResidencyStatusDescriptor, IResidencyStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IResidencyStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IResidencyStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ResidencyStatusDescriptorId = source.ResidencyStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IResidencyStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ResponseIndicatorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ResponseIndicatorDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ResponseIndicatorDescriptorMapper 
    {
        public static bool SynchronizeTo(this IResponseIndicatorDescriptor source, IResponseIndicatorDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IResponseIndicatorDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ResponseIndicatorDescriptorId != target.ResponseIndicatorDescriptorId)
            {
                source.ResponseIndicatorDescriptorId = target.ResponseIndicatorDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IResponseIndicatorDescriptor source, IResponseIndicatorDescriptor target, Action<IResponseIndicatorDescriptor, IResponseIndicatorDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IResponseIndicatorDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IResponseIndicatorDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ResponseIndicatorDescriptorId = source.ResponseIndicatorDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IResponseIndicatorDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ResponsibilityDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ResponsibilityDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ResponsibilityDescriptorMapper 
    {
        public static bool SynchronizeTo(this IResponsibilityDescriptor source, IResponsibilityDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IResponsibilityDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ResponsibilityDescriptorId != target.ResponsibilityDescriptorId)
            {
                source.ResponsibilityDescriptorId = target.ResponsibilityDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IResponsibilityDescriptor source, IResponsibilityDescriptor target, Action<IResponsibilityDescriptor, IResponsibilityDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IResponsibilityDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IResponsibilityDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ResponsibilityDescriptorId = source.ResponsibilityDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IResponsibilityDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RestraintEvent

namespace EdFi.Ods.Entities.Common.EdFi //.RestraintEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RestraintEventMapper 
    {
        public static bool SynchronizeTo(this IRestraintEvent source, IRestraintEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IRestraintEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RestraintEventIdentifier != target.RestraintEventIdentifier)
            {
                source.RestraintEventIdentifier = target.RestraintEventIdentifier;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEducationalEnvironmentDescriptorSupported)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventDateSupported)
                && target.EventDate != source.EventDate)
            {
                target.EventDate = source.EventDate;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsRestraintEventProgramsSupported)
            {
                isModified |= 
                    source.RestraintEventPrograms.SynchronizeCollectionTo(
                        target.RestraintEventPrograms, 
                        onChildAdded: child => 
                            {
                                child.RestraintEvent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsRestraintEventProgramIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsRestraintEventReasonsSupported)
            {
                isModified |= 
                    source.RestraintEventReasons.SynchronizeCollectionTo(
                        target.RestraintEventReasons, 
                        onChildAdded: child => 
                            {
                                child.RestraintEvent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsRestraintEventReasonIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IRestraintEvent source, IRestraintEvent target, Action<IRestraintEvent, IRestraintEvent> onMapped)
        {
            var sourceSynchSupport = source as IRestraintEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IRestraintEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RestraintEventIdentifier = source.RestraintEventIdentifier;
            target.SchoolId = source.SchoolId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEducationalEnvironmentDescriptorSupported)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
            else
                targetSynchSupport.IsEducationalEnvironmentDescriptorSupported = false;

            if (sourceSynchSupport.IsEventDateSupported)
                target.EventDate = source.EventDate;
            else
                targetSynchSupport.IsEventDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsRestraintEventProgramsSupported)
            {    
                targetSynchSupport.IsRestraintEventProgramIncluded = sourceSynchSupport.IsRestraintEventProgramIncluded;
                source.RestraintEventPrograms.MapCollectionTo(target.RestraintEventPrograms, target);
            }
            else
            {
                targetSynchSupport.IsRestraintEventProgramsSupported = false;
            }

            if (sourceSynchSupport.IsRestraintEventReasonsSupported)
            {    
                targetSynchSupport.IsRestraintEventReasonIncluded = sourceSynchSupport.IsRestraintEventReasonIncluded;
                source.RestraintEventReasons.MapCollectionTo(target.RestraintEventReasons, target);
            }
            else
            {
                targetSynchSupport.IsRestraintEventReasonsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRestraintEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEducationalEnvironmentDescriptorSupported { get; set; }
        bool IsEventDateSupported { get; set; }
        bool IsRestraintEventProgramsSupported { get; set; }
        bool IsRestraintEventReasonsSupported { get; set; }
        Func<IRestraintEventProgram, bool> IsRestraintEventProgramIncluded { get; set; }
        Func<IRestraintEventReason, bool> IsRestraintEventReasonIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class RestraintEventProgramMapper 
    {
        public static bool SynchronizeTo(this IRestraintEventProgram source, IRestraintEventProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IRestraintEventProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IRestraintEventProgram source, IRestraintEventProgram target, Action<IRestraintEventProgram, IRestraintEventProgram> onMapped)
        {
            var sourceSynchSupport = source as IRestraintEventProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IRestraintEventProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRestraintEventProgramSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class RestraintEventReasonMapper 
    {
        public static bool SynchronizeTo(this IRestraintEventReason source, IRestraintEventReason target)
        {
            bool isModified = false;

            var sourceSupport = source as IRestraintEventReasonSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RestraintEventReasonDescriptor != target.RestraintEventReasonDescriptor)
            {
                source.RestraintEventReasonDescriptor = target.RestraintEventReasonDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IRestraintEventReason source, IRestraintEventReason target, Action<IRestraintEventReason, IRestraintEventReason> onMapped)
        {
            var sourceSynchSupport = source as IRestraintEventReasonSynchronizationSourceSupport;
            var targetSynchSupport = target as IRestraintEventReasonSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RestraintEventReasonDescriptor = source.RestraintEventReasonDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRestraintEventReasonSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: RestraintEventReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RestraintEventReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RestraintEventReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRestraintEventReasonDescriptor source, IRestraintEventReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRestraintEventReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RestraintEventReasonDescriptorId != target.RestraintEventReasonDescriptorId)
            {
                source.RestraintEventReasonDescriptorId = target.RestraintEventReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRestraintEventReasonDescriptor source, IRestraintEventReasonDescriptor target, Action<IRestraintEventReasonDescriptor, IRestraintEventReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRestraintEventReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRestraintEventReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RestraintEventReasonDescriptorId = source.RestraintEventReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRestraintEventReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ResultDatatypeTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ResultDatatypeTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ResultDatatypeTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IResultDatatypeTypeDescriptor source, IResultDatatypeTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IResultDatatypeTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ResultDatatypeTypeDescriptorId != target.ResultDatatypeTypeDescriptorId)
            {
                source.ResultDatatypeTypeDescriptorId = target.ResultDatatypeTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IResultDatatypeTypeDescriptor source, IResultDatatypeTypeDescriptor target, Action<IResultDatatypeTypeDescriptor, IResultDatatypeTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IResultDatatypeTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IResultDatatypeTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ResultDatatypeTypeDescriptorId = source.ResultDatatypeTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IResultDatatypeTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RetestIndicatorDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.RetestIndicatorDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RetestIndicatorDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRetestIndicatorDescriptor source, IRetestIndicatorDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRetestIndicatorDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RetestIndicatorDescriptorId != target.RetestIndicatorDescriptorId)
            {
                source.RetestIndicatorDescriptorId = target.RetestIndicatorDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRetestIndicatorDescriptor source, IRetestIndicatorDescriptor target, Action<IRetestIndicatorDescriptor, IRetestIndicatorDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRetestIndicatorDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRetestIndicatorDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RetestIndicatorDescriptorId = source.RetestIndicatorDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRetestIndicatorDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: School

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolMapper 
    {
        public static bool SynchronizeTo(this ISchool source, ISchool target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAdministrativeFundingControlDescriptorSupported)
                && target.AdministrativeFundingControlDescriptor != source.AdministrativeFundingControlDescriptor)
            {
                target.AdministrativeFundingControlDescriptor = source.AdministrativeFundingControlDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCharterApprovalAgencyTypeDescriptorSupported)
                && target.CharterApprovalAgencyTypeDescriptor != source.CharterApprovalAgencyTypeDescriptor)
            {
                target.CharterApprovalAgencyTypeDescriptor = source.CharterApprovalAgencyTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCharterApprovalSchoolYearSupported)
                && target.CharterApprovalSchoolYear != source.CharterApprovalSchoolYear)
            {
                target.CharterApprovalSchoolYear = source.CharterApprovalSchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCharterStatusDescriptorSupported)
                && target.CharterStatusDescriptor != source.CharterStatusDescriptor)
            {
                target.CharterStatusDescriptor = source.CharterStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInternetAccessDescriptorSupported)
                && target.InternetAccessDescriptor != source.InternetAccessDescriptor)
            {
                target.InternetAccessDescriptor = source.InternetAccessDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocalEducationAgencyIdSupported)
                && target.LocalEducationAgencyId != source.LocalEducationAgencyId)
            {
                target.LocalEducationAgencyId = source.LocalEducationAgencyId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported)
                && target.MagnetSpecialProgramEmphasisSchoolDescriptor != source.MagnetSpecialProgramEmphasisSchoolDescriptor)
            {
                target.MagnetSpecialProgramEmphasisSchoolDescriptor = source.MagnetSpecialProgramEmphasisSchoolDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolTypeDescriptorSupported)
                && target.SchoolTypeDescriptor != source.SchoolTypeDescriptor)
            {
                target.SchoolTypeDescriptor = source.SchoolTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleIPartASchoolDesignationDescriptorSupported)
                && target.TitleIPartASchoolDesignationDescriptor != source.TitleIPartASchoolDesignationDescriptor)
            {
                target.TitleIPartASchoolDesignationDescriptor = source.TitleIPartASchoolDesignationDescriptor;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSchoolCategoriesSupported)
            {
                isModified |= 
                    source.SchoolCategories.SynchronizeCollectionTo(
                        target.SchoolCategories, 
                        onChildAdded: child => 
                            {
                                child.School = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSchoolCategoryIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSchoolGradeLevelsSupported)
            {
                isModified |= 
                    source.SchoolGradeLevels.SynchronizeCollectionTo(
                        target.SchoolGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.School = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSchoolGradeLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISchool source, ISchool target, Action<ISchool, ISchool> onMapped)
        {
            var sourceSynchSupport = source as ISchoolSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAdministrativeFundingControlDescriptorSupported)
                target.AdministrativeFundingControlDescriptor = source.AdministrativeFundingControlDescriptor;
            else
                targetSynchSupport.IsAdministrativeFundingControlDescriptorSupported = false;

            if (sourceSynchSupport.IsCharterApprovalAgencyTypeDescriptorSupported)
                target.CharterApprovalAgencyTypeDescriptor = source.CharterApprovalAgencyTypeDescriptor;
            else
                targetSynchSupport.IsCharterApprovalAgencyTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCharterApprovalSchoolYearSupported)
                target.CharterApprovalSchoolYear = source.CharterApprovalSchoolYear;
            else
                targetSynchSupport.IsCharterApprovalSchoolYearSupported = false;

            if (sourceSynchSupport.IsCharterStatusDescriptorSupported)
                target.CharterStatusDescriptor = source.CharterStatusDescriptor;
            else
                targetSynchSupport.IsCharterStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsInternetAccessDescriptorSupported)
                target.InternetAccessDescriptor = source.InternetAccessDescriptor;
            else
                targetSynchSupport.IsInternetAccessDescriptorSupported = false;

            if (sourceSynchSupport.IsLocalEducationAgencyIdSupported)
                target.LocalEducationAgencyId = source.LocalEducationAgencyId;
            else
                targetSynchSupport.IsLocalEducationAgencyIdSupported = false;

            if (sourceSynchSupport.IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported)
                target.MagnetSpecialProgramEmphasisSchoolDescriptor = source.MagnetSpecialProgramEmphasisSchoolDescriptor;
            else
                targetSynchSupport.IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolTypeDescriptorSupported)
                target.SchoolTypeDescriptor = source.SchoolTypeDescriptor;
            else
                targetSynchSupport.IsSchoolTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsTitleIPartASchoolDesignationDescriptorSupported)
                target.TitleIPartASchoolDesignationDescriptor = source.TitleIPartASchoolDesignationDescriptor;
            else
                targetSynchSupport.IsTitleIPartASchoolDesignationDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CharterApprovalSchoolYearTypeResourceId = source.CharterApprovalSchoolYearTypeResourceId;
                target.LocalEducationAgencyResourceId = source.LocalEducationAgencyResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists

            if (sourceSynchSupport.IsSchoolCategoriesSupported)
            {    
                targetSynchSupport.IsSchoolCategoryIncluded = sourceSynchSupport.IsSchoolCategoryIncluded;
                source.SchoolCategories.MapCollectionTo(target.SchoolCategories, target);
            }
            else
            {
                targetSynchSupport.IsSchoolCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsSchoolGradeLevelsSupported)
            {    
                targetSynchSupport.IsSchoolGradeLevelIncluded = sourceSynchSupport.IsSchoolGradeLevelIncluded;
                source.SchoolGradeLevels.MapCollectionTo(target.SchoolGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsSchoolGradeLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAdministrativeFundingControlDescriptorSupported { get; set; }
        bool IsCharterApprovalAgencyTypeDescriptorSupported { get; set; }
        bool IsCharterApprovalSchoolYearSupported { get; set; }
        bool IsCharterStatusDescriptorSupported { get; set; }
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsInternetAccessDescriptorSupported { get; set; }
        bool IsLocalEducationAgencyIdSupported { get; set; }
        bool IsMagnetSpecialProgramEmphasisSchoolDescriptorSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsSchoolCategoriesSupported { get; set; }
        bool IsSchoolGradeLevelsSupported { get; set; }
        bool IsSchoolTypeDescriptorSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsTitleIPartASchoolDesignationDescriptorSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
        Func<ISchoolCategory, bool> IsSchoolCategoryIncluded { get; set; }
        Func<ISchoolGradeLevel, bool> IsSchoolGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SchoolCategoryMapper 
    {
        public static bool SynchronizeTo(this ISchoolCategory source, ISchoolCategory target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolCategorySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolCategoryDescriptor != target.SchoolCategoryDescriptor)
            {
                source.SchoolCategoryDescriptor = target.SchoolCategoryDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISchoolCategory source, ISchoolCategory target, Action<ISchoolCategory, ISchoolCategory> onMapped)
        {
            var sourceSynchSupport = source as ISchoolCategorySynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolCategorySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolCategoryDescriptor = source.SchoolCategoryDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolCategorySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class SchoolGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ISchoolGradeLevel source, ISchoolGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISchoolGradeLevel source, ISchoolGradeLevel target, Action<ISchoolGradeLevel, ISchoolGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ISchoolGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SchoolCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISchoolCategoryDescriptor source, ISchoolCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolCategoryDescriptorId != target.SchoolCategoryDescriptorId)
            {
                source.SchoolCategoryDescriptorId = target.SchoolCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolCategoryDescriptor source, ISchoolCategoryDescriptor target, Action<ISchoolCategoryDescriptor, ISchoolCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISchoolCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolCategoryDescriptorId = source.SchoolCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SchoolChoiceImplementStatusDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolChoiceImplementStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolChoiceImplementStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISchoolChoiceImplementStatusDescriptor source, ISchoolChoiceImplementStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolChoiceImplementStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolChoiceImplementStatusDescriptorId != target.SchoolChoiceImplementStatusDescriptorId)
            {
                source.SchoolChoiceImplementStatusDescriptorId = target.SchoolChoiceImplementStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolChoiceImplementStatusDescriptor source, ISchoolChoiceImplementStatusDescriptor target, Action<ISchoolChoiceImplementStatusDescriptor, ISchoolChoiceImplementStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISchoolChoiceImplementStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolChoiceImplementStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolChoiceImplementStatusDescriptorId = source.SchoolChoiceImplementStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolChoiceImplementStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SchoolFoodServiceProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolFoodServiceProgramServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolFoodServiceProgramServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISchoolFoodServiceProgramServiceDescriptor source, ISchoolFoodServiceProgramServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolFoodServiceProgramServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolFoodServiceProgramServiceDescriptorId != target.SchoolFoodServiceProgramServiceDescriptorId)
            {
                source.SchoolFoodServiceProgramServiceDescriptorId = target.SchoolFoodServiceProgramServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolFoodServiceProgramServiceDescriptor source, ISchoolFoodServiceProgramServiceDescriptor target, Action<ISchoolFoodServiceProgramServiceDescriptor, ISchoolFoodServiceProgramServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISchoolFoodServiceProgramServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolFoodServiceProgramServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolFoodServiceProgramServiceDescriptorId = source.SchoolFoodServiceProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolFoodServiceProgramServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SchoolTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISchoolTypeDescriptor source, ISchoolTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolTypeDescriptorId != target.SchoolTypeDescriptorId)
            {
                source.SchoolTypeDescriptorId = target.SchoolTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolTypeDescriptor source, ISchoolTypeDescriptor target, Action<ISchoolTypeDescriptor, ISchoolTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISchoolTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolTypeDescriptorId = source.SchoolTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SchoolYearType

namespace EdFi.Ods.Entities.Common.EdFi //.SchoolYearTypeAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolYearTypeMapper 
    {
        public static bool SynchronizeTo(this ISchoolYearType source, ISchoolYearType target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolYearTypeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCurrentSchoolYearSupported)
                && target.CurrentSchoolYear != source.CurrentSchoolYear)
            {
                target.CurrentSchoolYear = source.CurrentSchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearDescriptionSupported)
                && target.SchoolYearDescription != source.SchoolYearDescription)
            {
                target.SchoolYearDescription = source.SchoolYearDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISchoolYearType source, ISchoolYearType target, Action<ISchoolYearType, ISchoolYearType> onMapped)
        {
            var sourceSynchSupport = source as ISchoolYearTypeSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolYearTypeSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCurrentSchoolYearSupported)
                target.CurrentSchoolYear = source.CurrentSchoolYear;
            else
                targetSynchSupport.IsCurrentSchoolYearSupported = false;

            if (sourceSynchSupport.IsSchoolYearDescriptionSupported)
                target.SchoolYearDescription = source.SchoolYearDescription;
            else
                targetSynchSupport.IsSchoolYearDescriptionSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolYearTypeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCurrentSchoolYearSupported { get; set; }
        bool IsSchoolYearDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Section

namespace EdFi.Ods.Entities.Common.EdFi //.SectionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SectionMapper 
    {
        public static bool SynchronizeTo(this ISection source, ISection target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionSynchronizationSourceSupport;

            // Allow PK column updates on Section
            if (
                 (target.LocalCourseCode != source.LocalCourseCode)
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (target.SectionIdentifier != source.SectionIdentifier)
                || (target.SessionName != source.SessionName))
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAvailableCreditConversionSupported)
                && target.AvailableCreditConversion != source.AvailableCreditConversion)
            {
                target.AvailableCreditConversion = source.AvailableCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAvailableCreditsSupported)
                && target.AvailableCredits != source.AvailableCredits)
            {
                target.AvailableCredits = source.AvailableCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAvailableCreditTypeDescriptorSupported)
                && target.AvailableCreditTypeDescriptor != source.AvailableCreditTypeDescriptor)
            {
                target.AvailableCreditTypeDescriptor = source.AvailableCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationalEnvironmentDescriptorSupported)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInstructionLanguageDescriptorSupported)
                && target.InstructionLanguageDescriptor != source.InstructionLanguageDescriptor)
            {
                target.InstructionLanguageDescriptor = source.InstructionLanguageDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocationClassroomIdentificationCodeSupported)
                && target.LocationClassroomIdentificationCode != source.LocationClassroomIdentificationCode)
            {
                target.LocationClassroomIdentificationCode = source.LocationClassroomIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocationSchoolIdSupported)
                && target.LocationSchoolId != source.LocationSchoolId)
            {
                target.LocationSchoolId = source.LocationSchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMediumOfInstructionDescriptorSupported)
                && target.MediumOfInstructionDescriptor != source.MediumOfInstructionDescriptor)
            {
                target.MediumOfInstructionDescriptor = source.MediumOfInstructionDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOfficialAttendancePeriodSupported)
                && target.OfficialAttendancePeriod != source.OfficialAttendancePeriod)
            {
                target.OfficialAttendancePeriod = source.OfficialAttendancePeriod;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPopulationServedDescriptorSupported)
                && target.PopulationServedDescriptor != source.PopulationServedDescriptor)
            {
                target.PopulationServedDescriptor = source.PopulationServedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSectionNameSupported)
                && target.SectionName != source.SectionName)
            {
                target.SectionName = source.SectionName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSequenceOfCourseSupported)
                && target.SequenceOfCourse != source.SequenceOfCourse)
            {
                target.SequenceOfCourse = source.SequenceOfCourse;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSectionCharacteristicsSupported)
            {
                isModified |= 
                    source.SectionCharacteristics.SynchronizeCollectionTo(
                        target.SectionCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.Section = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionClassPeriodsSupported)
            {
                isModified |= 
                    source.SectionClassPeriods.SynchronizeCollectionTo(
                        target.SectionClassPeriods, 
                        onChildAdded: child => 
                            {
                                child.Section = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionClassPeriodIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionCourseLevelCharacteristicsSupported)
            {
                isModified |= 
                    source.SectionCourseLevelCharacteristics.SynchronizeCollectionTo(
                        target.SectionCourseLevelCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.Section = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionCourseLevelCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionOfferedGradeLevelsSupported)
            {
                isModified |= 
                    source.SectionOfferedGradeLevels.SynchronizeCollectionTo(
                        target.SectionOfferedGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.Section = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionOfferedGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSectionProgramsSupported)
            {
                isModified |= 
                    source.SectionPrograms.SynchronizeCollectionTo(
                        target.SectionPrograms, 
                        onChildAdded: child => 
                            {
                                child.Section = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSectionProgramIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISection source, ISection target, Action<ISection, ISection> onMapped)
        {
            var sourceSynchSupport = source as ISectionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAvailableCreditConversionSupported)
                target.AvailableCreditConversion = source.AvailableCreditConversion;
            else
                targetSynchSupport.IsAvailableCreditConversionSupported = false;

            if (sourceSynchSupport.IsAvailableCreditsSupported)
                target.AvailableCredits = source.AvailableCredits;
            else
                targetSynchSupport.IsAvailableCreditsSupported = false;

            if (sourceSynchSupport.IsAvailableCreditTypeDescriptorSupported)
                target.AvailableCreditTypeDescriptor = source.AvailableCreditTypeDescriptor;
            else
                targetSynchSupport.IsAvailableCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsEducationalEnvironmentDescriptorSupported)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
            else
                targetSynchSupport.IsEducationalEnvironmentDescriptorSupported = false;

            if (sourceSynchSupport.IsInstructionLanguageDescriptorSupported)
                target.InstructionLanguageDescriptor = source.InstructionLanguageDescriptor;
            else
                targetSynchSupport.IsInstructionLanguageDescriptorSupported = false;

            if (sourceSynchSupport.IsLocationClassroomIdentificationCodeSupported)
                target.LocationClassroomIdentificationCode = source.LocationClassroomIdentificationCode;
            else
                targetSynchSupport.IsLocationClassroomIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsLocationSchoolIdSupported)
                target.LocationSchoolId = source.LocationSchoolId;
            else
                targetSynchSupport.IsLocationSchoolIdSupported = false;

            if (sourceSynchSupport.IsMediumOfInstructionDescriptorSupported)
                target.MediumOfInstructionDescriptor = source.MediumOfInstructionDescriptor;
            else
                targetSynchSupport.IsMediumOfInstructionDescriptorSupported = false;

            if (sourceSynchSupport.IsOfficialAttendancePeriodSupported)
                target.OfficialAttendancePeriod = source.OfficialAttendancePeriod;
            else
                targetSynchSupport.IsOfficialAttendancePeriodSupported = false;

            if (sourceSynchSupport.IsPopulationServedDescriptorSupported)
                target.PopulationServedDescriptor = source.PopulationServedDescriptor;
            else
                targetSynchSupport.IsPopulationServedDescriptorSupported = false;

            if (sourceSynchSupport.IsSectionNameSupported)
                target.SectionName = source.SectionName;
            else
                targetSynchSupport.IsSectionNameSupported = false;

            if (sourceSynchSupport.IsSequenceOfCourseSupported)
                target.SequenceOfCourse = source.SequenceOfCourse;
            else
                targetSynchSupport.IsSequenceOfCourseSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseOfferingResourceId = source.CourseOfferingResourceId;
                target.CourseOfferingDiscriminator = source.CourseOfferingDiscriminator;
                target.LocationResourceId = source.LocationResourceId;
                target.LocationDiscriminator = source.LocationDiscriminator;
                target.LocationSchoolResourceId = source.LocationSchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsSectionCharacteristicsSupported)
            {    
                targetSynchSupport.IsSectionCharacteristicIncluded = sourceSynchSupport.IsSectionCharacteristicIncluded;
                source.SectionCharacteristics.MapCollectionTo(target.SectionCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsSectionCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsSectionClassPeriodsSupported)
            {    
                targetSynchSupport.IsSectionClassPeriodIncluded = sourceSynchSupport.IsSectionClassPeriodIncluded;
                source.SectionClassPeriods.MapCollectionTo(target.SectionClassPeriods, target);
            }
            else
            {
                targetSynchSupport.IsSectionClassPeriodsSupported = false;
            }

            if (sourceSynchSupport.IsSectionCourseLevelCharacteristicsSupported)
            {    
                targetSynchSupport.IsSectionCourseLevelCharacteristicIncluded = sourceSynchSupport.IsSectionCourseLevelCharacteristicIncluded;
                source.SectionCourseLevelCharacteristics.MapCollectionTo(target.SectionCourseLevelCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsSectionCourseLevelCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsSectionOfferedGradeLevelsSupported)
            {    
                targetSynchSupport.IsSectionOfferedGradeLevelIncluded = sourceSynchSupport.IsSectionOfferedGradeLevelIncluded;
                source.SectionOfferedGradeLevels.MapCollectionTo(target.SectionOfferedGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsSectionOfferedGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsSectionProgramsSupported)
            {    
                targetSynchSupport.IsSectionProgramIncluded = sourceSynchSupport.IsSectionProgramIncluded;
                source.SectionPrograms.MapCollectionTo(target.SectionPrograms, target);
            }
            else
            {
                targetSynchSupport.IsSectionProgramsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAvailableCreditConversionSupported { get; set; }
        bool IsAvailableCreditsSupported { get; set; }
        bool IsAvailableCreditTypeDescriptorSupported { get; set; }
        bool IsEducationalEnvironmentDescriptorSupported { get; set; }
        bool IsInstructionLanguageDescriptorSupported { get; set; }
        bool IsLocationClassroomIdentificationCodeSupported { get; set; }
        bool IsLocationSchoolIdSupported { get; set; }
        bool IsMediumOfInstructionDescriptorSupported { get; set; }
        bool IsOfficialAttendancePeriodSupported { get; set; }
        bool IsPopulationServedDescriptorSupported { get; set; }
        bool IsSectionCharacteristicsSupported { get; set; }
        bool IsSectionClassPeriodsSupported { get; set; }
        bool IsSectionCourseLevelCharacteristicsSupported { get; set; }
        bool IsSectionNameSupported { get; set; }
        bool IsSectionOfferedGradeLevelsSupported { get; set; }
        bool IsSectionProgramsSupported { get; set; }
        bool IsSequenceOfCourseSupported { get; set; }
        Func<ISectionCharacteristic, bool> IsSectionCharacteristicIncluded { get; set; }
        Func<ISectionClassPeriod, bool> IsSectionClassPeriodIncluded { get; set; }
        Func<ISectionCourseLevelCharacteristic, bool> IsSectionCourseLevelCharacteristicIncluded { get; set; }
        Func<ISectionOfferedGradeLevel, bool> IsSectionOfferedGradeLevelIncluded { get; set; }
        Func<ISectionProgram, bool> IsSectionProgramIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionCharacteristicMapper 
    {
        public static bool SynchronizeTo(this ISectionCharacteristic source, ISectionCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SectionCharacteristicDescriptor != target.SectionCharacteristicDescriptor)
            {
                source.SectionCharacteristicDescriptor = target.SectionCharacteristicDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISectionCharacteristic source, ISectionCharacteristic target, Action<ISectionCharacteristic, ISectionCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as ISectionCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SectionCharacteristicDescriptor = source.SectionCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionCharacteristicSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionClassPeriodMapper 
    {
        public static bool SynchronizeTo(this ISectionClassPeriod source, ISectionClassPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionClassPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ClassPeriodName != target.ClassPeriodName)
            {
                source.ClassPeriodName = target.ClassPeriodName;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISectionClassPeriod source, ISectionClassPeriod target, Action<ISectionClassPeriod, ISectionClassPeriod> onMapped)
        {
            var sourceSynchSupport = source as ISectionClassPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionClassPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ClassPeriodName = source.ClassPeriodName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ClassPeriodResourceId = source.ClassPeriodResourceId;
                target.ClassPeriodDiscriminator = source.ClassPeriodDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionClassPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionCourseLevelCharacteristicMapper 
    {
        public static bool SynchronizeTo(this ISectionCourseLevelCharacteristic source, ISectionCourseLevelCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionCourseLevelCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseLevelCharacteristicDescriptor != target.CourseLevelCharacteristicDescriptor)
            {
                source.CourseLevelCharacteristicDescriptor = target.CourseLevelCharacteristicDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISectionCourseLevelCharacteristic source, ISectionCourseLevelCharacteristic target, Action<ISectionCourseLevelCharacteristic, ISectionCourseLevelCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as ISectionCourseLevelCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionCourseLevelCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CourseLevelCharacteristicDescriptor = source.CourseLevelCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionCourseLevelCharacteristicSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionOfferedGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ISectionOfferedGradeLevel source, ISectionOfferedGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionOfferedGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISectionOfferedGradeLevel source, ISectionOfferedGradeLevel target, Action<ISectionOfferedGradeLevel, ISectionOfferedGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ISectionOfferedGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionOfferedGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionOfferedGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class SectionProgramMapper 
    {
        public static bool SynchronizeTo(this ISectionProgram source, ISectionProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISectionProgram source, ISectionProgram target, Action<ISectionProgram, ISectionProgram> onMapped)
        {
            var sourceSynchSupport = source as ISectionProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionProgramSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SectionAttendanceTakenEvent

namespace EdFi.Ods.Entities.Common.EdFi //.SectionAttendanceTakenEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SectionAttendanceTakenEventMapper 
    {
        public static bool SynchronizeTo(this ISectionAttendanceTakenEvent source, ISectionAttendanceTakenEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionAttendanceTakenEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CalendarCode != target.CalendarCode)
            {
                source.CalendarCode = target.CalendarCode;
            }
            if (source.Date != target.Date)
            {
                source.Date = target.Date;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEventDateSupported)
                && target.EventDate != source.EventDate)
            {
                target.EventDate = source.EventDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffUniqueIdSupported)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISectionAttendanceTakenEvent source, ISectionAttendanceTakenEvent target, Action<ISectionAttendanceTakenEvent, ISectionAttendanceTakenEvent> onMapped)
        {
            var sourceSynchSupport = source as ISectionAttendanceTakenEventSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionAttendanceTakenEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CalendarCode = source.CalendarCode;
            target.Date = source.Date;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEventDateSupported)
                target.EventDate = source.EventDate;
            else
                targetSynchSupport.IsEventDateSupported = false;

            if (sourceSynchSupport.IsStaffUniqueIdSupported)
                target.StaffUniqueId = source.StaffUniqueId;
            else
                targetSynchSupport.IsStaffUniqueIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CalendarDateResourceId = source.CalendarDateResourceId;
                target.CalendarDateDiscriminator = source.CalendarDateDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionAttendanceTakenEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEventDateSupported { get; set; }
        bool IsStaffUniqueIdSupported { get; set; }
    }
 
}
// Aggregate: SectionCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SectionCharacteristicDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SectionCharacteristicDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISectionCharacteristicDescriptor source, ISectionCharacteristicDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISectionCharacteristicDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SectionCharacteristicDescriptorId != target.SectionCharacteristicDescriptorId)
            {
                source.SectionCharacteristicDescriptorId = target.SectionCharacteristicDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISectionCharacteristicDescriptor source, ISectionCharacteristicDescriptor target, Action<ISectionCharacteristicDescriptor, ISectionCharacteristicDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISectionCharacteristicDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISectionCharacteristicDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SectionCharacteristicDescriptorId = source.SectionCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISectionCharacteristicDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SeparationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SeparationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SeparationDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISeparationDescriptor source, ISeparationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISeparationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SeparationDescriptorId != target.SeparationDescriptorId)
            {
                source.SeparationDescriptorId = target.SeparationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISeparationDescriptor source, ISeparationDescriptor target, Action<ISeparationDescriptor, ISeparationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISeparationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISeparationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SeparationDescriptorId = source.SeparationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISeparationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SeparationReasonDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SeparationReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SeparationReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISeparationReasonDescriptor source, ISeparationReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISeparationReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SeparationReasonDescriptorId != target.SeparationReasonDescriptorId)
            {
                source.SeparationReasonDescriptorId = target.SeparationReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISeparationReasonDescriptor source, ISeparationReasonDescriptor target, Action<ISeparationReasonDescriptor, ISeparationReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISeparationReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISeparationReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SeparationReasonDescriptorId = source.SeparationReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISeparationReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.ServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IServiceDescriptor source, IServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ServiceDescriptorId != target.ServiceDescriptorId)
            {
                source.ServiceDescriptorId = target.ServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IServiceDescriptor source, IServiceDescriptor target, Action<IServiceDescriptor, IServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ServiceDescriptorId = source.ServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Session

namespace EdFi.Ods.Entities.Common.EdFi //.SessionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SessionMapper 
    {
        public static bool SynchronizeTo(this ISession source, ISession target)
        {
            bool isModified = false;

            var sourceSupport = source as ISessionSynchronizationSourceSupport;

            // Allow PK column updates on Session
            if (
                 (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (target.SessionName != source.SessionName))
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalInstructionalDaysSupported)
                && target.TotalInstructionalDays != source.TotalInstructionalDays)
            {
                target.TotalInstructionalDays = source.TotalInstructionalDays;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSessionAcademicWeeksSupported)
            {
                isModified |= 
                    source.SessionAcademicWeeks.SynchronizeCollectionTo(
                        target.SessionAcademicWeeks, 
                        onChildAdded: child => 
                            {
                                child.Session = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSessionAcademicWeekIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSessionGradingPeriodsSupported)
            {
                isModified |= 
                    source.SessionGradingPeriods.SynchronizeCollectionTo(
                        target.SessionGradingPeriods, 
                        onChildAdded: child => 
                            {
                                child.Session = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSessionGradingPeriodIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISession source, ISession target, Action<ISession, ISession> onMapped)
        {
            var sourceSynchSupport = source as ISessionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISessionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            if (sourceSynchSupport.IsTotalInstructionalDaysSupported)
                target.TotalInstructionalDays = source.TotalInstructionalDays;
            else
                targetSynchSupport.IsTotalInstructionalDaysSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsSessionAcademicWeeksSupported)
            {    
                targetSynchSupport.IsSessionAcademicWeekIncluded = sourceSynchSupport.IsSessionAcademicWeekIncluded;
                source.SessionAcademicWeeks.MapCollectionTo(target.SessionAcademicWeeks, target);
            }
            else
            {
                targetSynchSupport.IsSessionAcademicWeeksSupported = false;
            }

            if (sourceSynchSupport.IsSessionGradingPeriodsSupported)
            {    
                targetSynchSupport.IsSessionGradingPeriodIncluded = sourceSynchSupport.IsSessionGradingPeriodIncluded;
                source.SessionGradingPeriods.MapCollectionTo(target.SessionGradingPeriods, target);
            }
            else
            {
                targetSynchSupport.IsSessionGradingPeriodsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISessionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsSessionAcademicWeeksSupported { get; set; }
        bool IsSessionGradingPeriodsSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
        bool IsTotalInstructionalDaysSupported { get; set; }
        Func<ISessionAcademicWeek, bool> IsSessionAcademicWeekIncluded { get; set; }
        Func<ISessionGradingPeriod, bool> IsSessionGradingPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SessionAcademicWeekMapper 
    {
        public static bool SynchronizeTo(this ISessionAcademicWeek source, ISessionAcademicWeek target)
        {
            bool isModified = false;

            var sourceSupport = source as ISessionAcademicWeekSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.WeekIdentifier != target.WeekIdentifier)
            {
                source.WeekIdentifier = target.WeekIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISessionAcademicWeek source, ISessionAcademicWeek target, Action<ISessionAcademicWeek, ISessionAcademicWeek> onMapped)
        {
            var sourceSynchSupport = source as ISessionAcademicWeekSynchronizationSourceSupport;
            var targetSynchSupport = target as ISessionAcademicWeekSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.WeekIdentifier = source.WeekIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AcademicWeekResourceId = source.AcademicWeekResourceId;
                target.AcademicWeekDiscriminator = source.AcademicWeekDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISessionAcademicWeekSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class SessionGradingPeriodMapper 
    {
        public static bool SynchronizeTo(this ISessionGradingPeriod source, ISessionGradingPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as ISessionGradingPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradingPeriodDescriptor != target.GradingPeriodDescriptor)
            {
                source.GradingPeriodDescriptor = target.GradingPeriodDescriptor;
            }
            if (source.PeriodSequence != target.PeriodSequence)
            {
                source.PeriodSequence = target.PeriodSequence;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISessionGradingPeriod source, ISessionGradingPeriod target, Action<ISessionGradingPeriod, ISessionGradingPeriod> onMapped)
        {
            var sourceSynchSupport = source as ISessionGradingPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as ISessionGradingPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.PeriodSequence = source.PeriodSequence;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISessionGradingPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SexDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SexDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SexDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISexDescriptor source, ISexDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISexDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SexDescriptorId != target.SexDescriptorId)
            {
                source.SexDescriptorId = target.SexDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISexDescriptor source, ISexDescriptor target, Action<ISexDescriptor, ISexDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISexDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISexDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SexDescriptorId = source.SexDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISexDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SpecialEducationProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SpecialEducationProgramServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SpecialEducationProgramServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISpecialEducationProgramServiceDescriptor source, ISpecialEducationProgramServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISpecialEducationProgramServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SpecialEducationProgramServiceDescriptorId != target.SpecialEducationProgramServiceDescriptorId)
            {
                source.SpecialEducationProgramServiceDescriptorId = target.SpecialEducationProgramServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISpecialEducationProgramServiceDescriptor source, ISpecialEducationProgramServiceDescriptor target, Action<ISpecialEducationProgramServiceDescriptor, ISpecialEducationProgramServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISpecialEducationProgramServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISpecialEducationProgramServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SpecialEducationProgramServiceDescriptorId = source.SpecialEducationProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISpecialEducationProgramServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SpecialEducationSettingDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SpecialEducationSettingDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SpecialEducationSettingDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISpecialEducationSettingDescriptor source, ISpecialEducationSettingDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISpecialEducationSettingDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SpecialEducationSettingDescriptorId != target.SpecialEducationSettingDescriptorId)
            {
                source.SpecialEducationSettingDescriptorId = target.SpecialEducationSettingDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISpecialEducationSettingDescriptor source, ISpecialEducationSettingDescriptor target, Action<ISpecialEducationSettingDescriptor, ISpecialEducationSettingDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISpecialEducationSettingDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISpecialEducationSettingDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SpecialEducationSettingDescriptorId = source.SpecialEducationSettingDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISpecialEducationSettingDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Staff

namespace EdFi.Ods.Entities.Common.EdFi //.StaffAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffMapper 
    {
        public static bool SynchronizeTo(this IStaff source, IStaff target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBirthDateSupported)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitizenshipStatusDescriptorSupported)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported)
                && target.HighestCompletedLevelOfEducationDescriptor != source.HighestCompletedLevelOfEducationDescriptor)
            {
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighlyQualifiedTeacherSupported)
                && target.HighlyQualifiedTeacher != source.HighlyQualifiedTeacher)
            {
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLoginIdSupported)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOldEthnicityDescriptorSupported)
                && target.OldEthnicityDescriptor != source.OldEthnicityDescriptor)
            {
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffUniqueIdSupported)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfPriorProfessionalExperienceSupported)
                && target.YearsOfPriorProfessionalExperience != source.YearsOfPriorProfessionalExperience)
            {
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfPriorTeachingExperienceSupported)
                && target.YearsOfPriorTeachingExperience != source.YearsOfPriorTeachingExperience)
            {
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffAddressesSupported)
            {
                isModified |= 
                    source.StaffAddresses.SynchronizeCollectionTo(
                        target.StaffAddresses, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffCredentialsSupported)
            {
                isModified |= 
                    source.StaffCredentials.SynchronizeCollectionTo(
                        target.StaffCredentials, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffCredentialIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffElectronicMailsSupported)
            {
                isModified |= 
                    source.StaffElectronicMails.SynchronizeCollectionTo(
                        target.StaffElectronicMails, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffIdentificationCodesSupported)
            {
                isModified |= 
                    source.StaffIdentificationCodes.SynchronizeCollectionTo(
                        target.StaffIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.StaffIdentificationDocuments.SynchronizeCollectionTo(
                        target.StaffIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffInternationalAddressesSupported)
            {
                isModified |= 
                    source.StaffInternationalAddresses.SynchronizeCollectionTo(
                        target.StaffInternationalAddresses, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffLanguagesSupported)
            {
                isModified |= 
                    source.StaffLanguages.SynchronizeCollectionTo(
                        target.StaffLanguages, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffOtherNamesSupported)
            {
                isModified |= 
                    source.StaffOtherNames.SynchronizeCollectionTo(
                        target.StaffOtherNames, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffOtherNameIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffPersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.StaffPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.StaffPersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffPersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffRacesSupported)
            {
                isModified |= 
                    source.StaffRaces.SynchronizeCollectionTo(
                        target.StaffRaces, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffRecognitionsSupported)
            {
                isModified |= 
                    source.StaffRecognitions.SynchronizeCollectionTo(
                        target.StaffRecognitions, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffRecognitionIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffTelephonesSupported)
            {
                isModified |= 
                    source.StaffTelephones.SynchronizeCollectionTo(
                        target.StaffTelephones, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffTribalAffiliationsSupported)
            {
                isModified |= 
                    source.StaffTribalAffiliations.SynchronizeCollectionTo(
                        target.StaffTribalAffiliations, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffTribalAffiliationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffVisasSupported)
            {
                isModified |= 
                    source.StaffVisas.SynchronizeCollectionTo(
                        target.StaffVisas, 
                        onChildAdded: child => 
                            {
                                child.Staff = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffVisaIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaff source, IStaff target, Action<IStaff, IStaff> onMapped)
        {
            var sourceSynchSupport = source as IStaffSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBirthDateSupported)
                target.BirthDate = source.BirthDate;
            else
                targetSynchSupport.IsBirthDateSupported = false;

            if (sourceSynchSupport.IsCitizenshipStatusDescriptorSupported)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
            else
                targetSynchSupport.IsCitizenshipStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHighestCompletedLevelOfEducationDescriptorSupported)
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
            else
                targetSynchSupport.IsHighestCompletedLevelOfEducationDescriptorSupported = false;

            if (sourceSynchSupport.IsHighlyQualifiedTeacherSupported)
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
            else
                targetSynchSupport.IsHighlyQualifiedTeacherSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsLoginIdSupported)
                target.LoginId = source.LoginId;
            else
                targetSynchSupport.IsLoginIdSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsOldEthnicityDescriptorSupported)
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
            else
                targetSynchSupport.IsOldEthnicityDescriptorSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsStaffUniqueIdSupported)
                target.StaffUniqueId = source.StaffUniqueId;
            else
                targetSynchSupport.IsStaffUniqueIdSupported = false;

            if (sourceSynchSupport.IsYearsOfPriorProfessionalExperienceSupported)
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
            else
                targetSynchSupport.IsYearsOfPriorProfessionalExperienceSupported = false;

            if (sourceSynchSupport.IsYearsOfPriorTeachingExperienceSupported)
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
            else
                targetSynchSupport.IsYearsOfPriorTeachingExperienceSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffAddressesSupported)
            {    
                targetSynchSupport.IsStaffAddressIncluded = sourceSynchSupport.IsStaffAddressIncluded;
                source.StaffAddresses.MapCollectionTo(target.StaffAddresses, target);
            }
            else
            {
                targetSynchSupport.IsStaffAddressesSupported = false;
            }

            if (sourceSynchSupport.IsStaffCredentialsSupported)
            {    
                targetSynchSupport.IsStaffCredentialIncluded = sourceSynchSupport.IsStaffCredentialIncluded;
                source.StaffCredentials.MapCollectionTo(target.StaffCredentials, target);
            }
            else
            {
                targetSynchSupport.IsStaffCredentialsSupported = false;
            }

            if (sourceSynchSupport.IsStaffElectronicMailsSupported)
            {    
                targetSynchSupport.IsStaffElectronicMailIncluded = sourceSynchSupport.IsStaffElectronicMailIncluded;
                source.StaffElectronicMails.MapCollectionTo(target.StaffElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsStaffElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsStaffIdentificationCodesSupported)
            {    
                targetSynchSupport.IsStaffIdentificationCodeIncluded = sourceSynchSupport.IsStaffIdentificationCodeIncluded;
                source.StaffIdentificationCodes.MapCollectionTo(target.StaffIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsStaffIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsStaffIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsStaffIdentificationDocumentIncluded = sourceSynchSupport.IsStaffIdentificationDocumentIncluded;
                source.StaffIdentificationDocuments.MapCollectionTo(target.StaffIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsStaffIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsStaffInternationalAddressesSupported)
            {    
                targetSynchSupport.IsStaffInternationalAddressIncluded = sourceSynchSupport.IsStaffInternationalAddressIncluded;
                source.StaffInternationalAddresses.MapCollectionTo(target.StaffInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsStaffInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsStaffLanguagesSupported)
            {    
                targetSynchSupport.IsStaffLanguageIncluded = sourceSynchSupport.IsStaffLanguageIncluded;
                source.StaffLanguages.MapCollectionTo(target.StaffLanguages, target);
            }
            else
            {
                targetSynchSupport.IsStaffLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsStaffOtherNamesSupported)
            {    
                targetSynchSupport.IsStaffOtherNameIncluded = sourceSynchSupport.IsStaffOtherNameIncluded;
                source.StaffOtherNames.MapCollectionTo(target.StaffOtherNames, target);
            }
            else
            {
                targetSynchSupport.IsStaffOtherNamesSupported = false;
            }

            if (sourceSynchSupport.IsStaffPersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsStaffPersonalIdentificationDocumentIncluded = sourceSynchSupport.IsStaffPersonalIdentificationDocumentIncluded;
                source.StaffPersonalIdentificationDocuments.MapCollectionTo(target.StaffPersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsStaffPersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsStaffRacesSupported)
            {    
                targetSynchSupport.IsStaffRaceIncluded = sourceSynchSupport.IsStaffRaceIncluded;
                source.StaffRaces.MapCollectionTo(target.StaffRaces, target);
            }
            else
            {
                targetSynchSupport.IsStaffRacesSupported = false;
            }

            if (sourceSynchSupport.IsStaffRecognitionsSupported)
            {    
                targetSynchSupport.IsStaffRecognitionIncluded = sourceSynchSupport.IsStaffRecognitionIncluded;
                source.StaffRecognitions.MapCollectionTo(target.StaffRecognitions, target);
            }
            else
            {
                targetSynchSupport.IsStaffRecognitionsSupported = false;
            }

            if (sourceSynchSupport.IsStaffTelephonesSupported)
            {    
                targetSynchSupport.IsStaffTelephoneIncluded = sourceSynchSupport.IsStaffTelephoneIncluded;
                source.StaffTelephones.MapCollectionTo(target.StaffTelephones, target);
            }
            else
            {
                targetSynchSupport.IsStaffTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsStaffTribalAffiliationsSupported)
            {    
                targetSynchSupport.IsStaffTribalAffiliationIncluded = sourceSynchSupport.IsStaffTribalAffiliationIncluded;
                source.StaffTribalAffiliations.MapCollectionTo(target.StaffTribalAffiliations, target);
            }
            else
            {
                targetSynchSupport.IsStaffTribalAffiliationsSupported = false;
            }

            if (sourceSynchSupport.IsStaffVisasSupported)
            {    
                targetSynchSupport.IsStaffVisaIncluded = sourceSynchSupport.IsStaffVisaIncluded;
                source.StaffVisas.MapCollectionTo(target.StaffVisas, target);
            }
            else
            {
                targetSynchSupport.IsStaffVisasSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBirthDateSupported { get; set; }
        bool IsCitizenshipStatusDescriptorSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHighestCompletedLevelOfEducationDescriptorSupported { get; set; }
        bool IsHighlyQualifiedTeacherSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsLoginIdSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsOldEthnicityDescriptorSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsStaffAddressesSupported { get; set; }
        bool IsStaffCredentialsSupported { get; set; }
        bool IsStaffElectronicMailsSupported { get; set; }
        bool IsStaffIdentificationCodesSupported { get; set; }
        bool IsStaffIdentificationDocumentsSupported { get; set; }
        bool IsStaffInternationalAddressesSupported { get; set; }
        bool IsStaffLanguagesSupported { get; set; }
        bool IsStaffOtherNamesSupported { get; set; }
        bool IsStaffPersonalIdentificationDocumentsSupported { get; set; }
        bool IsStaffRacesSupported { get; set; }
        bool IsStaffRecognitionsSupported { get; set; }
        bool IsStaffTelephonesSupported { get; set; }
        bool IsStaffTribalAffiliationsSupported { get; set; }
        bool IsStaffUniqueIdSupported { get; set; }
        bool IsStaffVisasSupported { get; set; }
        bool IsYearsOfPriorProfessionalExperienceSupported { get; set; }
        bool IsYearsOfPriorTeachingExperienceSupported { get; set; }
        Func<IStaffAddress, bool> IsStaffAddressIncluded { get; set; }
        Func<IStaffCredential, bool> IsStaffCredentialIncluded { get; set; }
        Func<IStaffElectronicMail, bool> IsStaffElectronicMailIncluded { get; set; }
        Func<IStaffIdentificationCode, bool> IsStaffIdentificationCodeIncluded { get; set; }
        Func<IStaffIdentificationDocument, bool> IsStaffIdentificationDocumentIncluded { get; set; }
        Func<IStaffInternationalAddress, bool> IsStaffInternationalAddressIncluded { get; set; }
        Func<IStaffLanguage, bool> IsStaffLanguageIncluded { get; set; }
        Func<IStaffOtherName, bool> IsStaffOtherNameIncluded { get; set; }
        Func<IStaffPersonalIdentificationDocument, bool> IsStaffPersonalIdentificationDocumentIncluded { get; set; }
        Func<IStaffRace, bool> IsStaffRaceIncluded { get; set; }
        Func<IStaffRecognition, bool> IsStaffRecognitionIncluded { get; set; }
        Func<IStaffTelephone, bool> IsStaffTelephoneIncluded { get; set; }
        Func<IStaffTribalAffiliation, bool> IsStaffTribalAffiliationIncluded { get; set; }
        Func<IStaffVisa, bool> IsStaffVisaIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffAddressMapper 
    {
        public static bool SynchronizeTo(this IStaffAddress source, IStaffAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffAddressPeriodsSupported)
            {
                isModified |= 
                    source.StaffAddressPeriods.SynchronizeCollectionTo(
                        target.StaffAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.StaffAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffAddressPeriodIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffAddress source, IStaffAddress target, Action<IStaffAddress, IStaffAddress> onMapped)
        {
            var sourceSynchSupport = source as IStaffAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffAddressPeriodsSupported)
            {    
                targetSynchSupport.IsStaffAddressPeriodIncluded = sourceSynchSupport.IsStaffAddressPeriodIncluded;
                source.StaffAddressPeriods.MapCollectionTo(target.StaffAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsStaffAddressPeriodsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        bool IsStaffAddressPeriodsSupported { get; set; }
        Func<IStaffAddressPeriod, bool> IsStaffAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this IStaffAddressPeriod source, IStaffAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffAddressPeriod source, IStaffAddressPeriod target, Action<IStaffAddressPeriod, IStaffAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as IStaffAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffAddressPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffCredentialMapper 
    {
        public static bool SynchronizeTo(this IStaffCredential source, IStaffCredential target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffCredentialSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialIdentifier != target.CredentialIdentifier)
            {
                source.CredentialIdentifier = target.CredentialIdentifier;
            }
            if (source.StateOfIssueStateAbbreviationDescriptor != target.StateOfIssueStateAbbreviationDescriptor)
            {
                source.StateOfIssueStateAbbreviationDescriptor = target.StateOfIssueStateAbbreviationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffCredential source, IStaffCredential target, Action<IStaffCredential, IStaffCredential> onMapped)
        {
            var sourceSynchSupport = source as IStaffCredentialSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffCredentialSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffCredentialSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffElectronicMailMapper 
    {
        public static bool SynchronizeTo(this IStaffElectronicMail source, IStaffElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffElectronicMail source, IStaffElectronicMail target, Action<IStaffElectronicMail, IStaffElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as IStaffElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffElectronicMailSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this IStaffIdentificationCode source, IStaffIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffIdentificationSystemDescriptor != target.StaffIdentificationSystemDescriptor)
            {
                source.StaffIdentificationSystemDescriptor = target.StaffIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssigningOrganizationIdentificationCodeSupported)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffIdentificationCode source, IStaffIdentificationCode target, Action<IStaffIdentificationCode, IStaffIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as IStaffIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffIdentificationSystemDescriptor = source.StaffIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssigningOrganizationIdentificationCodeSupported)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            else
                targetSynchSupport.IsAssigningOrganizationIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffIdentificationCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssigningOrganizationIdentificationCodeSupported { get; set; }
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IStaffIdentificationDocument source, IStaffIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffIdentificationDocument source, IStaffIdentificationDocument target, Action<IStaffIdentificationDocument, IStaffIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IStaffIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffIdentificationDocumentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffInternationalAddressMapper 
    {
        public static bool SynchronizeTo(this IStaffInternationalAddress source, IStaffInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffInternationalAddress source, IStaffInternationalAddress target, Action<IStaffInternationalAddress, IStaffInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as IStaffInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffInternationalAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffLanguageMapper 
    {
        public static bool SynchronizeTo(this IStaffLanguage source, IStaffLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffLanguageUsesSupported)
            {
                isModified |= 
                    source.StaffLanguageUses.SynchronizeCollectionTo(
                        target.StaffLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.StaffLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffLanguageUseIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffLanguage source, IStaffLanguage target, Action<IStaffLanguage, IStaffLanguage> onMapped)
        {
            var sourceSynchSupport = source as IStaffLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffLanguageUsesSupported)
            {    
                targetSynchSupport.IsStaffLanguageUseIncluded = sourceSynchSupport.IsStaffLanguageUseIncluded;
                source.StaffLanguageUses.MapCollectionTo(target.StaffLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsStaffLanguageUsesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffLanguageSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsStaffLanguageUsesSupported { get; set; }
        Func<IStaffLanguageUse, bool> IsStaffLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffLanguageUseMapper 
    {
        public static bool SynchronizeTo(this IStaffLanguageUse source, IStaffLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffLanguageUse source, IStaffLanguageUse target, Action<IStaffLanguageUse, IStaffLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as IStaffLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffLanguageUseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffOtherNameMapper 
    {
        public static bool SynchronizeTo(this IStaffOtherName source, IStaffOtherName target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffOtherNameSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OtherNameTypeDescriptor != target.OtherNameTypeDescriptor)
            {
                source.OtherNameTypeDescriptor = target.OtherNameTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffOtherName source, IStaffOtherName target, Action<IStaffOtherName, IStaffOtherName> onMapped)
        {
            var sourceSynchSupport = source as IStaffOtherNameSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffOtherNameSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffOtherNameSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffPersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IStaffPersonalIdentificationDocument source, IStaffPersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffPersonalIdentificationDocument source, IStaffPersonalIdentificationDocument target, Action<IStaffPersonalIdentificationDocument, IStaffPersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IStaffPersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffPersonalIdentificationDocumentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffRaceMapper 
    {
        public static bool SynchronizeTo(this IStaffRace source, IStaffRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffRace source, IStaffRace target, Action<IStaffRace, IStaffRace> onMapped)
        {
            var sourceSynchSupport = source as IStaffRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffRaceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffRecognitionMapper 
    {
        public static bool SynchronizeTo(this IStaffRecognition source, IStaffRecognition target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffRecognitionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecognitionTypeDescriptor != target.RecognitionTypeDescriptor)
            {
                source.RecognitionTypeDescriptor = target.RecognitionTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionAwardDateSupported)
                && target.RecognitionAwardDate != source.RecognitionAwardDate)
            {
                target.RecognitionAwardDate = source.RecognitionAwardDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionAwardExpiresDateSupported)
                && target.RecognitionAwardExpiresDate != source.RecognitionAwardExpiresDate)
            {
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionDescriptionSupported)
                && target.RecognitionDescription != source.RecognitionDescription)
            {
                target.RecognitionDescription = source.RecognitionDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffRecognition source, IStaffRecognition target, Action<IStaffRecognition, IStaffRecognition> onMapped)
        {
            var sourceSynchSupport = source as IStaffRecognitionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffRecognitionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RecognitionTypeDescriptor = source.RecognitionTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            if (sourceSynchSupport.IsRecognitionAwardDateSupported)
                target.RecognitionAwardDate = source.RecognitionAwardDate;
            else
                targetSynchSupport.IsRecognitionAwardDateSupported = false;

            if (sourceSynchSupport.IsRecognitionAwardExpiresDateSupported)
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
            else
                targetSynchSupport.IsRecognitionAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsRecognitionDescriptionSupported)
                target.RecognitionDescription = source.RecognitionDescription;
            else
                targetSynchSupport.IsRecognitionDescriptionSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffRecognitionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
        bool IsRecognitionAwardDateSupported { get; set; }
        bool IsRecognitionAwardExpiresDateSupported { get; set; }
        bool IsRecognitionDescriptionSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTelephoneMapper 
    {
        public static bool SynchronizeTo(this IStaffTelephone source, IStaffTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffTelephone source, IStaffTelephone target, Action<IStaffTelephone, IStaffTelephone> onMapped)
        {
            var sourceSynchSupport = source as IStaffTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTelephoneSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTribalAffiliationMapper 
    {
        public static bool SynchronizeTo(this IStaffTribalAffiliation source, IStaffTribalAffiliation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTribalAffiliationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TribalAffiliationDescriptor != target.TribalAffiliationDescriptor)
            {
                source.TribalAffiliationDescriptor = target.TribalAffiliationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffTribalAffiliation source, IStaffTribalAffiliation target, Action<IStaffTribalAffiliation, IStaffTribalAffiliation> onMapped)
        {
            var sourceSynchSupport = source as IStaffTribalAffiliationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTribalAffiliationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TribalAffiliationDescriptor = source.TribalAffiliationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTribalAffiliationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffVisaMapper 
    {
        public static bool SynchronizeTo(this IStaffVisa source, IStaffVisa target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffVisaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptor != target.VisaDescriptor)
            {
                source.VisaDescriptor = target.VisaDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffVisa source, IStaffVisa target, Action<IStaffVisa, IStaffVisa> onMapped)
        {
            var sourceSynchSupport = source as IStaffVisaSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffVisaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffVisaSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StaffAbsenceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StaffAbsenceEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffAbsenceEventMapper 
    {
        public static bool SynchronizeTo(this IStaffAbsenceEvent source, IStaffAbsenceEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffAbsenceEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AbsenceEventCategoryDescriptor != target.AbsenceEventCategoryDescriptor)
            {
                source.AbsenceEventCategoryDescriptor = target.AbsenceEventCategoryDescriptor;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAbsenceEventReasonSupported)
                && target.AbsenceEventReason != source.AbsenceEventReason)
            {
                target.AbsenceEventReason = source.AbsenceEventReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHoursAbsentSupported)
                && target.HoursAbsent != source.HoursAbsent)
            {
                target.HoursAbsent = source.HoursAbsent;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffAbsenceEvent source, IStaffAbsenceEvent target, Action<IStaffAbsenceEvent, IStaffAbsenceEvent> onMapped)
        {
            var sourceSynchSupport = source as IStaffAbsenceEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffAbsenceEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AbsenceEventCategoryDescriptor = source.AbsenceEventCategoryDescriptor;
            target.EventDate = source.EventDate;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAbsenceEventReasonSupported)
                target.AbsenceEventReason = source.AbsenceEventReason;
            else
                targetSynchSupport.IsAbsenceEventReasonSupported = false;

            if (sourceSynchSupport.IsHoursAbsentSupported)
                target.HoursAbsent = source.HoursAbsent;
            else
                targetSynchSupport.IsHoursAbsentSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffAbsenceEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAbsenceEventReasonSupported { get; set; }
        bool IsHoursAbsentSupported { get; set; }
    }
 
}
// Aggregate: StaffClassificationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StaffClassificationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffClassificationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStaffClassificationDescriptor source, IStaffClassificationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffClassificationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffClassificationDescriptorId != target.StaffClassificationDescriptorId)
            {
                source.StaffClassificationDescriptorId = target.StaffClassificationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffClassificationDescriptor source, IStaffClassificationDescriptor target, Action<IStaffClassificationDescriptor, IStaffClassificationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStaffClassificationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffClassificationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffClassificationDescriptorId = source.StaffClassificationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffClassificationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StaffCohortAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffCohortAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffCohortAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffCohortAssociation source, IStaffCohortAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffCohortAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.CohortIdentifier != target.CohortIdentifier)
            {
                source.CohortIdentifier = target.CohortIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentRecordAccessSupported)
                && target.StudentRecordAccess != source.StudentRecordAccess)
            {
                target.StudentRecordAccess = source.StudentRecordAccess;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffCohortAssociation source, IStaffCohortAssociation target, Action<IStaffCohortAssociation, IStaffCohortAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffCohortAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffCohortAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.CohortIdentifier = source.CohortIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsStudentRecordAccessSupported)
                target.StudentRecordAccess = source.StudentRecordAccess;
            else
                targetSynchSupport.IsStudentRecordAccessSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CohortResourceId = source.CohortResourceId;
                target.CohortDiscriminator = source.CohortDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffCohortAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsStudentRecordAccessSupported { get; set; }
    }
 
}
// Aggregate: StaffDisciplineIncidentAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffDisciplineIncidentAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffDisciplineIncidentAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffDisciplineIncidentAssociation source, IStaffDisciplineIncidentAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffDisciplineIncidentAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IncidentIdentifier != target.IncidentIdentifier)
            {
                source.IncidentIdentifier = target.IncidentIdentifier;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported)
            {
                isModified |= 
                    source.StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes.SynchronizeCollectionTo(
                        target.StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes, 
                        onChildAdded: child => 
                            {
                                child.StaffDisciplineIncidentAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffDisciplineIncidentAssociation source, IStaffDisciplineIncidentAssociation target, Action<IStaffDisciplineIncidentAssociation, IStaffDisciplineIncidentAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffDisciplineIncidentAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffDisciplineIncidentAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.DisciplineIncidentResourceId = source.DisciplineIncidentResourceId;
                target.DisciplineIncidentDiscriminator = source.DisciplineIncidentDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported)
            {    
                targetSynchSupport.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded = sourceSynchSupport.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded;
                source.StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes.MapCollectionTo(target.StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodes, target);
            }
            else
            {
                targetSynchSupport.IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffDisciplineIncidentAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodesSupported { get; set; }
        Func<IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode, bool> IsStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeMapper 
    {
        public static bool SynchronizeTo(this IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode source, IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisciplineIncidentParticipationCodeDescriptor != target.DisciplineIncidentParticipationCodeDescriptor)
            {
                source.DisciplineIncidentParticipationCodeDescriptor = target.DisciplineIncidentParticipationCodeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode source, IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode target, Action<IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode, IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode> onMapped)
        {
            var sourceSynchSupport = source as IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisciplineIncidentParticipationCodeDescriptor = source.DisciplineIncidentParticipationCodeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffDisciplineIncidentAssociationDisciplineIncidentParticipationCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffEducationOrganizationAssignmentAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationAssignmentAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationAssignmentAssociation source, IStaffEducationOrganizationAssignmentAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.StaffClassificationDescriptor != target.StaffClassificationDescriptor)
            {
                source.StaffClassificationDescriptor = target.StaffClassificationDescriptor;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCredentialIdentifierSupported)
                && target.CredentialIdentifier != source.CredentialIdentifier)
            {
                target.CredentialIdentifier = source.CredentialIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmploymentEducationOrganizationIdSupported)
                && target.EmploymentEducationOrganizationId != source.EmploymentEducationOrganizationId)
            {
                target.EmploymentEducationOrganizationId = source.EmploymentEducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmploymentHireDateSupported)
                && target.EmploymentHireDate != source.EmploymentHireDate)
            {
                target.EmploymentHireDate = source.EmploymentHireDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmploymentStatusDescriptorSupported)
                && target.EmploymentStatusDescriptor != source.EmploymentStatusDescriptor)
            {
                target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfAssignmentSupported)
                && target.OrderOfAssignment != source.OrderOfAssignment)
            {
                target.OrderOfAssignment = source.OrderOfAssignment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPositionTitleSupported)
                && target.PositionTitle != source.PositionTitle)
            {
                target.PositionTitle = source.PositionTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStateOfIssueStateAbbreviationDescriptorSupported)
                && target.StateOfIssueStateAbbreviationDescriptor != source.StateOfIssueStateAbbreviationDescriptor)
            {
                target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationAssignmentAssociation source, IStaffEducationOrganizationAssignmentAssociation target, Action<IStaffEducationOrganizationAssignmentAssociation, IStaffEducationOrganizationAssignmentAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StaffClassificationDescriptor = source.StaffClassificationDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCredentialIdentifierSupported)
                target.CredentialIdentifier = source.CredentialIdentifier;
            else
                targetSynchSupport.IsCredentialIdentifierSupported = false;

            if (sourceSynchSupport.IsEmploymentEducationOrganizationIdSupported)
                target.EmploymentEducationOrganizationId = source.EmploymentEducationOrganizationId;
            else
                targetSynchSupport.IsEmploymentEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEmploymentHireDateSupported)
                target.EmploymentHireDate = source.EmploymentHireDate;
            else
                targetSynchSupport.IsEmploymentHireDateSupported = false;

            if (sourceSynchSupport.IsEmploymentStatusDescriptorSupported)
                target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;
            else
                targetSynchSupport.IsEmploymentStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsOrderOfAssignmentSupported)
                target.OrderOfAssignment = source.OrderOfAssignment;
            else
                targetSynchSupport.IsOrderOfAssignmentSupported = false;

            if (sourceSynchSupport.IsPositionTitleSupported)
                target.PositionTitle = source.PositionTitle;
            else
                targetSynchSupport.IsPositionTitleSupported = false;

            if (sourceSynchSupport.IsStateOfIssueStateAbbreviationDescriptorSupported)
                target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;
            else
                targetSynchSupport.IsStateOfIssueStateAbbreviationDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.EmploymentStaffEducationOrganizationEmploymentAssociationResourceId = source.EmploymentStaffEducationOrganizationEmploymentAssociationResourceId;
                target.EmploymentStaffEducationOrganizationEmploymentAssociationDiscriminator = source.EmploymentStaffEducationOrganizationEmploymentAssociationDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationAssignmentAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCredentialIdentifierSupported { get; set; }
        bool IsEmploymentEducationOrganizationIdSupported { get; set; }
        bool IsEmploymentHireDateSupported { get; set; }
        bool IsEmploymentStatusDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsOrderOfAssignmentSupported { get; set; }
        bool IsPositionTitleSupported { get; set; }
        bool IsStateOfIssueStateAbbreviationDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StaffEducationOrganizationContactAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffEducationOrganizationContactAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationContactAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationContactAssociation source, IStaffEducationOrganizationContactAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationContactAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ContactTitle != target.ContactTitle)
            {
                source.ContactTitle = target.ContactTitle;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsContactTypeDescriptorSupported)
                && target.ContactTypeDescriptor != source.ContactTypeDescriptor)
            {
                target.ContactTypeDescriptor = source.ContactTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsElectronicMailAddressSupported)
                && target.ElectronicMailAddress != source.ElectronicMailAddress)
            {
                target.ElectronicMailAddress = source.ElectronicMailAddress;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // StaffEducationOrganizationContactAssociationAddress
            if (sourceSupport == null || sourceSupport.IsStaffEducationOrganizationContactAssociationAddressSupported)
            {
                if (source.StaffEducationOrganizationContactAssociationAddress == null)
                {
                    if (target.StaffEducationOrganizationContactAssociationAddress != null)
                    {
                        target.StaffEducationOrganizationContactAssociationAddress = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffEducationOrganizationContactAssociationAddress == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffEducationOrganizationContactAssociationAddress").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffEducationOrganizationContactAssociationAddress = (IStaffEducationOrganizationContactAssociationAddress) newItem;
                    }

                    isModified |= source.StaffEducationOrganizationContactAssociationAddress.Synchronize(target.StaffEducationOrganizationContactAssociationAddress);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffEducationOrganizationContactAssociationTelephonesSupported)
            {
                isModified |= 
                    source.StaffEducationOrganizationContactAssociationTelephones.SynchronizeCollectionTo(
                        target.StaffEducationOrganizationContactAssociationTelephones, 
                        onChildAdded: child => 
                            {
                                child.StaffEducationOrganizationContactAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffEducationOrganizationContactAssociationTelephoneIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationContactAssociation source, IStaffEducationOrganizationContactAssociation target, Action<IStaffEducationOrganizationContactAssociation, IStaffEducationOrganizationContactAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationContactAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationContactAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ContactTitle = source.ContactTitle;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsContactTypeDescriptorSupported)
                target.ContactTypeDescriptor = source.ContactTypeDescriptor;
            else
                targetSynchSupport.IsContactTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsElectronicMailAddressSupported)
                target.ElectronicMailAddress = source.ElectronicMailAddress;
            else
                targetSynchSupport.IsElectronicMailAddressSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StaffEducationOrganizationContactAssociationAddress (Source)
            if (sourceSynchSupport.IsStaffEducationOrganizationContactAssociationAddressSupported)
            {
                var itemProperty = target.GetType().GetProperty("StaffEducationOrganizationContactAssociationAddress");
                
                if (itemProperty != null)
                {                    
                    if (source.StaffEducationOrganizationContactAssociationAddress == null)
                    {
                        target.StaffEducationOrganizationContactAssociationAddress = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffEducationOrganizationContactAssociationAddress = Activator.CreateInstance(itemType);
                        (targetStaffEducationOrganizationContactAssociationAddress as IChildEntity)?.SetParent(target);
                        source.StaffEducationOrganizationContactAssociationAddress.Map(targetStaffEducationOrganizationContactAssociationAddress);
                        
                        // Update the target reference appropriately
                        target.StaffEducationOrganizationContactAssociationAddress = (IStaffEducationOrganizationContactAssociationAddress) targetStaffEducationOrganizationContactAssociationAddress;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStaffEducationOrganizationContactAssociationAddressSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffEducationOrganizationContactAssociationTelephonesSupported)
            {    
                targetSynchSupport.IsStaffEducationOrganizationContactAssociationTelephoneIncluded = sourceSynchSupport.IsStaffEducationOrganizationContactAssociationTelephoneIncluded;
                source.StaffEducationOrganizationContactAssociationTelephones.MapCollectionTo(target.StaffEducationOrganizationContactAssociationTelephones, target);
            }
            else
            {
                targetSynchSupport.IsStaffEducationOrganizationContactAssociationTelephonesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationContactAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsContactTypeDescriptorSupported { get; set; }
        bool IsElectronicMailAddressSupported { get; set; }
        bool IsStaffEducationOrganizationContactAssociationAddressSupported { get; set; }
        bool IsStaffEducationOrganizationContactAssociationTelephonesSupported { get; set; }
        Func<IStaffEducationOrganizationContactAssociationTelephone, bool> IsStaffEducationOrganizationContactAssociationTelephoneIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationContactAssociationAddressMapper 
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationContactAssociationAddress source, IStaffEducationOrganizationContactAssociationAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationContactAssociationAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressTypeDescriptorSupported)
                && target.AddressTypeDescriptor != source.AddressTypeDescriptor)
            {
                target.AddressTypeDescriptor = source.AddressTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitySupported)
                && target.City != source.City)
            {
                target.City = source.City;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPostalCodeSupported)
                && target.PostalCode != source.PostalCode)
            {
                target.PostalCode = source.PostalCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStateAbbreviationDescriptorSupported)
                && target.StateAbbreviationDescriptor != source.StateAbbreviationDescriptor)
            {
                target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStreetNumberNameSupported)
                && target.StreetNumberName != source.StreetNumberName)
            {
                target.StreetNumberName = source.StreetNumberName;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported)
            {
                isModified |= 
                    source.StaffEducationOrganizationContactAssociationAddressPeriods.SynchronizeCollectionTo(
                        target.StaffEducationOrganizationContactAssociationAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.StaffEducationOrganizationContactAssociationAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffEducationOrganizationContactAssociationAddressPeriodIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationContactAssociationAddress source, IStaffEducationOrganizationContactAssociationAddress target, Action<IStaffEducationOrganizationContactAssociationAddress, IStaffEducationOrganizationContactAssociationAddress> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationContactAssociationAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationContactAssociationAddressSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressTypeDescriptorSupported)
                target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            else
                targetSynchSupport.IsAddressTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCitySupported)
                target.City = source.City;
            else
                targetSynchSupport.IsCitySupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            if (sourceSynchSupport.IsPostalCodeSupported)
                target.PostalCode = source.PostalCode;
            else
                targetSynchSupport.IsPostalCodeSupported = false;

            if (sourceSynchSupport.IsStateAbbreviationDescriptorSupported)
                target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            else
                targetSynchSupport.IsStateAbbreviationDescriptorSupported = false;

            if (sourceSynchSupport.IsStreetNumberNameSupported)
                target.StreetNumberName = source.StreetNumberName;
            else
                targetSynchSupport.IsStreetNumberNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported)
            {    
                targetSynchSupport.IsStaffEducationOrganizationContactAssociationAddressPeriodIncluded = sourceSynchSupport.IsStaffEducationOrganizationContactAssociationAddressPeriodIncluded;
                source.StaffEducationOrganizationContactAssociationAddressPeriods.MapCollectionTo(target.StaffEducationOrganizationContactAssociationAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationContactAssociationAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAddressTypeDescriptorSupported { get; set; }
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCitySupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        bool IsPostalCodeSupported { get; set; }
        bool IsStaffEducationOrganizationContactAssociationAddressPeriodsSupported { get; set; }
        bool IsStateAbbreviationDescriptorSupported { get; set; }
        bool IsStreetNumberNameSupported { get; set; }
        Func<IStaffEducationOrganizationContactAssociationAddressPeriod, bool> IsStaffEducationOrganizationContactAssociationAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationContactAssociationAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationContactAssociationAddressPeriod source, IStaffEducationOrganizationContactAssociationAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationContactAssociationAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationContactAssociationAddressPeriod source, IStaffEducationOrganizationContactAssociationAddressPeriod target, Action<IStaffEducationOrganizationContactAssociationAddressPeriod, IStaffEducationOrganizationContactAssociationAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationContactAssociationAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationContactAssociationAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationContactAssociationAddressPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationContactAssociationTelephoneMapper 
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationContactAssociationTelephone source, IStaffEducationOrganizationContactAssociationTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationContactAssociationTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationContactAssociationTelephone source, IStaffEducationOrganizationContactAssociationTelephone target, Action<IStaffEducationOrganizationContactAssociationTelephone, IStaffEducationOrganizationContactAssociationTelephone> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationContactAssociationTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationContactAssociationTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationContactAssociationTelephoneSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
}
// Aggregate: StaffEducationOrganizationEmploymentAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffEducationOrganizationEmploymentAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationEmploymentAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationEmploymentAssociation source, IStaffEducationOrganizationEmploymentAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EmploymentStatusDescriptor != target.EmploymentStatusDescriptor)
            {
                source.EmploymentStatusDescriptor = target.EmploymentStatusDescriptor;
            }
            if (source.HireDate != target.HireDate)
            {
                source.HireDate = target.HireDate;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCredentialIdentifierSupported)
                && target.CredentialIdentifier != source.CredentialIdentifier)
            {
                target.CredentialIdentifier = source.CredentialIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDepartmentSupported)
                && target.Department != source.Department)
            {
                target.Department = source.Department;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFullTimeEquivalencySupported)
                && target.FullTimeEquivalency != source.FullTimeEquivalency)
            {
                target.FullTimeEquivalency = source.FullTimeEquivalency;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHourlyWageSupported)
                && target.HourlyWage != source.HourlyWage)
            {
                target.HourlyWage = source.HourlyWage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOfferDateSupported)
                && target.OfferDate != source.OfferDate)
            {
                target.OfferDate = source.OfferDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSeparationDescriptorSupported)
                && target.SeparationDescriptor != source.SeparationDescriptor)
            {
                target.SeparationDescriptor = source.SeparationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSeparationReasonDescriptorSupported)
                && target.SeparationReasonDescriptor != source.SeparationReasonDescriptor)
            {
                target.SeparationReasonDescriptor = source.SeparationReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStateOfIssueStateAbbreviationDescriptorSupported)
                && target.StateOfIssueStateAbbreviationDescriptor != source.StateOfIssueStateAbbreviationDescriptor)
            {
                target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationEmploymentAssociation source, IStaffEducationOrganizationEmploymentAssociation target, Action<IStaffEducationOrganizationEmploymentAssociation, IStaffEducationOrganizationEmploymentAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EmploymentStatusDescriptor = source.EmploymentStatusDescriptor;
            target.HireDate = source.HireDate;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCredentialIdentifierSupported)
                target.CredentialIdentifier = source.CredentialIdentifier;
            else
                targetSynchSupport.IsCredentialIdentifierSupported = false;

            if (sourceSynchSupport.IsDepartmentSupported)
                target.Department = source.Department;
            else
                targetSynchSupport.IsDepartmentSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsFullTimeEquivalencySupported)
                target.FullTimeEquivalency = source.FullTimeEquivalency;
            else
                targetSynchSupport.IsFullTimeEquivalencySupported = false;

            if (sourceSynchSupport.IsHourlyWageSupported)
                target.HourlyWage = source.HourlyWage;
            else
                targetSynchSupport.IsHourlyWageSupported = false;

            if (sourceSynchSupport.IsOfferDateSupported)
                target.OfferDate = source.OfferDate;
            else
                targetSynchSupport.IsOfferDateSupported = false;

            if (sourceSynchSupport.IsSeparationDescriptorSupported)
                target.SeparationDescriptor = source.SeparationDescriptor;
            else
                targetSynchSupport.IsSeparationDescriptorSupported = false;

            if (sourceSynchSupport.IsSeparationReasonDescriptorSupported)
                target.SeparationReasonDescriptor = source.SeparationReasonDescriptor;
            else
                targetSynchSupport.IsSeparationReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsStateOfIssueStateAbbreviationDescriptorSupported)
                target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;
            else
                targetSynchSupport.IsStateOfIssueStateAbbreviationDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationEmploymentAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCredentialIdentifierSupported { get; set; }
        bool IsDepartmentSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsFullTimeEquivalencySupported { get; set; }
        bool IsHourlyWageSupported { get; set; }
        bool IsOfferDateSupported { get; set; }
        bool IsSeparationDescriptorSupported { get; set; }
        bool IsSeparationReasonDescriptorSupported { get; set; }
        bool IsStateOfIssueStateAbbreviationDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StaffIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StaffIdentificationSystemDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffIdentificationSystemDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStaffIdentificationSystemDescriptor source, IStaffIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffIdentificationSystemDescriptorId != target.StaffIdentificationSystemDescriptorId)
            {
                source.StaffIdentificationSystemDescriptorId = target.StaffIdentificationSystemDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffIdentificationSystemDescriptor source, IStaffIdentificationSystemDescriptor target, Action<IStaffIdentificationSystemDescriptor, IStaffIdentificationSystemDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStaffIdentificationSystemDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffIdentificationSystemDescriptorId = source.StaffIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffIdentificationSystemDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StaffLeave

namespace EdFi.Ods.Entities.Common.EdFi //.StaffLeaveAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffLeaveMapper 
    {
        public static bool SynchronizeTo(this IStaffLeave source, IStaffLeave target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffLeaveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.StaffLeaveEventCategoryDescriptor != target.StaffLeaveEventCategoryDescriptor)
            {
                source.StaffLeaveEventCategoryDescriptor = target.StaffLeaveEventCategoryDescriptor;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonSupported)
                && target.Reason != source.Reason)
            {
                target.Reason = source.Reason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSubstituteAssignedSupported)
                && target.SubstituteAssigned != source.SubstituteAssigned)
            {
                target.SubstituteAssigned = source.SubstituteAssigned;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffLeave source, IStaffLeave target, Action<IStaffLeave, IStaffLeave> onMapped)
        {
            var sourceSynchSupport = source as IStaffLeaveSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffLeaveSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.StaffLeaveEventCategoryDescriptor = source.StaffLeaveEventCategoryDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonSupported)
                target.Reason = source.Reason;
            else
                targetSynchSupport.IsReasonSupported = false;

            if (sourceSynchSupport.IsSubstituteAssignedSupported)
                target.SubstituteAssigned = source.SubstituteAssigned;
            else
                targetSynchSupport.IsSubstituteAssignedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffLeaveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsReasonSupported { get; set; }
        bool IsSubstituteAssignedSupported { get; set; }
    }
 
}
// Aggregate: StaffLeaveEventCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StaffLeaveEventCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffLeaveEventCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStaffLeaveEventCategoryDescriptor source, IStaffLeaveEventCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffLeaveEventCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffLeaveEventCategoryDescriptorId != target.StaffLeaveEventCategoryDescriptorId)
            {
                source.StaffLeaveEventCategoryDescriptorId = target.StaffLeaveEventCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffLeaveEventCategoryDescriptor source, IStaffLeaveEventCategoryDescriptor target, Action<IStaffLeaveEventCategoryDescriptor, IStaffLeaveEventCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStaffLeaveEventCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffLeaveEventCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffLeaveEventCategoryDescriptorId = source.StaffLeaveEventCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffLeaveEventCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StaffProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffProgramAssociation source, IStaffProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentRecordAccessSupported)
                && target.StudentRecordAccess != source.StudentRecordAccess)
            {
                target.StudentRecordAccess = source.StudentRecordAccess;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffProgramAssociation source, IStaffProgramAssociation target, Action<IStaffProgramAssociation, IStaffProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsStudentRecordAccessSupported)
                target.StudentRecordAccess = source.StudentRecordAccess;
            else
                targetSynchSupport.IsStudentRecordAccessSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsStudentRecordAccessSupported { get; set; }
    }
 
}
// Aggregate: StaffSchoolAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffSchoolAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffSchoolAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffSchoolAssociation source, IStaffSchoolAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSchoolAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramAssignmentDescriptor != target.ProgramAssignmentDescriptor)
            {
                source.ProgramAssignmentDescriptor = target.ProgramAssignmentDescriptor;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCalendarCodeSupported)
                && target.CalendarCode != source.CalendarCode)
            {
                target.CalendarCode = source.CalendarCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffSchoolAssociationAcademicSubjectsSupported)
            {
                isModified |= 
                    source.StaffSchoolAssociationAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffSchoolAssociationAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.StaffSchoolAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffSchoolAssociationAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffSchoolAssociationGradeLevelsSupported)
            {
                isModified |= 
                    source.StaffSchoolAssociationGradeLevels.SynchronizeCollectionTo(
                        target.StaffSchoolAssociationGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.StaffSchoolAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffSchoolAssociationGradeLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffSchoolAssociation source, IStaffSchoolAssociation target, Action<IStaffSchoolAssociation, IStaffSchoolAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffSchoolAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSchoolAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
            target.SchoolId = source.SchoolId;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCalendarCodeSupported)
                target.CalendarCode = source.CalendarCode;
            else
                targetSynchSupport.IsCalendarCodeSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CalendarResourceId = source.CalendarResourceId;
                target.CalendarDiscriminator = source.CalendarDiscriminator;
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffSchoolAssociationAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsStaffSchoolAssociationAcademicSubjectIncluded = sourceSynchSupport.IsStaffSchoolAssociationAcademicSubjectIncluded;
                source.StaffSchoolAssociationAcademicSubjects.MapCollectionTo(target.StaffSchoolAssociationAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsStaffSchoolAssociationAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsStaffSchoolAssociationGradeLevelsSupported)
            {    
                targetSynchSupport.IsStaffSchoolAssociationGradeLevelIncluded = sourceSynchSupport.IsStaffSchoolAssociationGradeLevelIncluded;
                source.StaffSchoolAssociationGradeLevels.MapCollectionTo(target.StaffSchoolAssociationGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsStaffSchoolAssociationGradeLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSchoolAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCalendarCodeSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsStaffSchoolAssociationAcademicSubjectsSupported { get; set; }
        bool IsStaffSchoolAssociationGradeLevelsSupported { get; set; }
        Func<IStaffSchoolAssociationAcademicSubject, bool> IsStaffSchoolAssociationAcademicSubjectIncluded { get; set; }
        Func<IStaffSchoolAssociationGradeLevel, bool> IsStaffSchoolAssociationGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffSchoolAssociationAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IStaffSchoolAssociationAcademicSubject source, IStaffSchoolAssociationAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSchoolAssociationAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffSchoolAssociationAcademicSubject source, IStaffSchoolAssociationAcademicSubject target, Action<IStaffSchoolAssociationAcademicSubject, IStaffSchoolAssociationAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IStaffSchoolAssociationAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSchoolAssociationAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSchoolAssociationAcademicSubjectSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffSchoolAssociationGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IStaffSchoolAssociationGradeLevel source, IStaffSchoolAssociationGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSchoolAssociationGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffSchoolAssociationGradeLevel source, IStaffSchoolAssociationGradeLevel target, Action<IStaffSchoolAssociationGradeLevel, IStaffSchoolAssociationGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IStaffSchoolAssociationGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSchoolAssociationGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSchoolAssociationGradeLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StaffSectionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StaffSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffSectionAssociation source, IStaffSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsClassroomPositionDescriptorSupported)
                && target.ClassroomPositionDescriptor != source.ClassroomPositionDescriptor)
            {
                target.ClassroomPositionDescriptor = source.ClassroomPositionDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighlyQualifiedTeacherSupported)
                && target.HighlyQualifiedTeacher != source.HighlyQualifiedTeacher)
            {
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentageContributionSupported)
                && target.PercentageContribution != source.PercentageContribution)
            {
                target.PercentageContribution = source.PercentageContribution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherStudentDataLinkExclusionSupported)
                && target.TeacherStudentDataLinkExclusion != source.TeacherStudentDataLinkExclusion)
            {
                target.TeacherStudentDataLinkExclusion = source.TeacherStudentDataLinkExclusion;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStaffSectionAssociation source, IStaffSectionAssociation target, Action<IStaffSectionAssociation, IStaffSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsClassroomPositionDescriptorSupported)
                target.ClassroomPositionDescriptor = source.ClassroomPositionDescriptor;
            else
                targetSynchSupport.IsClassroomPositionDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsHighlyQualifiedTeacherSupported)
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
            else
                targetSynchSupport.IsHighlyQualifiedTeacherSupported = false;

            if (sourceSynchSupport.IsPercentageContributionSupported)
                target.PercentageContribution = source.PercentageContribution;
            else
                targetSynchSupport.IsPercentageContributionSupported = false;

            if (sourceSynchSupport.IsTeacherStudentDataLinkExclusionSupported)
                target.TeacherStudentDataLinkExclusion = source.TeacherStudentDataLinkExclusion;
            else
                targetSynchSupport.IsTeacherStudentDataLinkExclusionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSectionAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsClassroomPositionDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsHighlyQualifiedTeacherSupported { get; set; }
        bool IsPercentageContributionSupported { get; set; }
        bool IsTeacherStudentDataLinkExclusionSupported { get; set; }
    }
 
}
// Aggregate: StateAbbreviationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StateAbbreviationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StateAbbreviationDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStateAbbreviationDescriptor source, IStateAbbreviationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStateAbbreviationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StateAbbreviationDescriptorId != target.StateAbbreviationDescriptorId)
            {
                source.StateAbbreviationDescriptorId = target.StateAbbreviationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStateAbbreviationDescriptor source, IStateAbbreviationDescriptor target, Action<IStateAbbreviationDescriptor, IStateAbbreviationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStateAbbreviationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStateAbbreviationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StateAbbreviationDescriptorId = source.StateAbbreviationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStateAbbreviationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Entities.Common.EdFi //.StateEducationAgencyAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyMapper 
    {
        public static bool SynchronizeTo(this IStateEducationAgency source, IStateEducationAgency target)
        {
            bool isModified = false;

            var sourceSupport = source as IStateEducationAgencySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StateEducationAgencyId != target.StateEducationAgencyId)
            {
                source.StateEducationAgencyId = target.StateEducationAgencyId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStateEducationAgencyAccountabilitiesSupported)
            {
                isModified |= 
                    source.StateEducationAgencyAccountabilities.SynchronizeCollectionTo(
                        target.StateEducationAgencyAccountabilities, 
                        onChildAdded: child => 
                            {
                                child.StateEducationAgency = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStateEducationAgencyAccountabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStateEducationAgencyFederalFundsSupported)
            {
                isModified |= 
                    source.StateEducationAgencyFederalFunds.SynchronizeCollectionTo(
                        target.StateEducationAgencyFederalFunds, 
                        onChildAdded: child => 
                            {
                                child.StateEducationAgency = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStateEducationAgencyFederalFundsIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStateEducationAgency source, IStateEducationAgency target, Action<IStateEducationAgency, IStateEducationAgency> onMapped)
        {
            var sourceSynchSupport = source as IStateEducationAgencySynchronizationSourceSupport;
            var targetSynchSupport = target as IStateEducationAgencySynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StateEducationAgencyId = source.StateEducationAgencyId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists

            if (sourceSynchSupport.IsStateEducationAgencyAccountabilitiesSupported)
            {    
                targetSynchSupport.IsStateEducationAgencyAccountabilityIncluded = sourceSynchSupport.IsStateEducationAgencyAccountabilityIncluded;
                source.StateEducationAgencyAccountabilities.MapCollectionTo(target.StateEducationAgencyAccountabilities, target);
            }
            else
            {
                targetSynchSupport.IsStateEducationAgencyAccountabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsStateEducationAgencyFederalFundsSupported)
            {    
                targetSynchSupport.IsStateEducationAgencyFederalFundsIncluded = sourceSynchSupport.IsStateEducationAgencyFederalFundsIncluded;
                source.StateEducationAgencyFederalFunds.MapCollectionTo(target.StateEducationAgencyFederalFunds, target);
            }
            else
            {
                targetSynchSupport.IsStateEducationAgencyFederalFundsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStateEducationAgencySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsStateEducationAgencyAccountabilitiesSupported { get; set; }
        bool IsStateEducationAgencyFederalFundsSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
        Func<IStateEducationAgencyAccountability, bool> IsStateEducationAgencyAccountabilityIncluded { get; set; }
        Func<IStateEducationAgencyFederalFunds, bool> IsStateEducationAgencyFederalFundsIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyAccountabilityMapper 
    {
        public static bool SynchronizeTo(this IStateEducationAgencyAccountability source, IStateEducationAgencyAccountability target)
        {
            bool isModified = false;

            var sourceSupport = source as IStateEducationAgencyAccountabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCTEGraduationRateInclusionSupported)
                && target.CTEGraduationRateInclusion != source.CTEGraduationRateInclusion)
            {
                target.CTEGraduationRateInclusion = source.CTEGraduationRateInclusion;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStateEducationAgencyAccountability source, IStateEducationAgencyAccountability target, Action<IStateEducationAgencyAccountability, IStateEducationAgencyAccountability> onMapped)
        {
            var sourceSynchSupport = source as IStateEducationAgencyAccountabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IStateEducationAgencyAccountabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCTEGraduationRateInclusionSupported)
                target.CTEGraduationRateInclusion = source.CTEGraduationRateInclusion;
            else
                targetSynchSupport.IsCTEGraduationRateInclusionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStateEducationAgencyAccountabilitySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCTEGraduationRateInclusionSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyFederalFundsMapper 
    {
        public static bool SynchronizeTo(this IStateEducationAgencyFederalFunds source, IStateEducationAgencyFederalFunds target)
        {
            bool isModified = false;

            var sourceSupport = source as IStateEducationAgencyFederalFundsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FiscalYear != target.FiscalYear)
            {
                source.FiscalYear = target.FiscalYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalProgramsFundingAllocationSupported)
                && target.FederalProgramsFundingAllocation != source.FederalProgramsFundingAllocation)
            {
                target.FederalProgramsFundingAllocation = source.FederalProgramsFundingAllocation;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStateEducationAgencyFederalFunds source, IStateEducationAgencyFederalFunds target, Action<IStateEducationAgencyFederalFunds, IStateEducationAgencyFederalFunds> onMapped)
        {
            var sourceSynchSupport = source as IStateEducationAgencyFederalFundsSynchronizationSourceSupport;
            var targetSynchSupport = target as IStateEducationAgencyFederalFundsSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FiscalYear = source.FiscalYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalProgramsFundingAllocationSupported)
                target.FederalProgramsFundingAllocation = source.FederalProgramsFundingAllocation;
            else
                targetSynchSupport.IsFederalProgramsFundingAllocationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStateEducationAgencyFederalFundsSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsFederalProgramsFundingAllocationSupported { get; set; }
    }
 
}
// Aggregate: Student

namespace EdFi.Ods.Entities.Common.EdFi //.StudentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentMapper 
    {
        public static bool SynchronizeTo(this IStudent source, IStudent target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBirthCitySupported)
                && target.BirthCity != source.BirthCity)
            {
                target.BirthCity = source.BirthCity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthCountryDescriptorSupported)
                && target.BirthCountryDescriptor != source.BirthCountryDescriptor)
            {
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthDateSupported)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthInternationalProvinceSupported)
                && target.BirthInternationalProvince != source.BirthInternationalProvince)
            {
                target.BirthInternationalProvince = source.BirthInternationalProvince;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthSexDescriptorSupported)
                && target.BirthSexDescriptor != source.BirthSexDescriptor)
            {
                target.BirthSexDescriptor = source.BirthSexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthStateAbbreviationDescriptorSupported)
                && target.BirthStateAbbreviationDescriptor != source.BirthStateAbbreviationDescriptor)
            {
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitizenshipStatusDescriptorSupported)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateEnteredUSSupported)
                && target.DateEnteredUS != source.DateEnteredUS)
            {
                target.DateEnteredUS = source.DateEnteredUS;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMultipleBirthStatusSupported)
                && target.MultipleBirthStatus != source.MultipleBirthStatus)
            {
                target.MultipleBirthStatus = source.MultipleBirthStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentUniqueIdSupported)
                && target.StudentUniqueId != source.StudentUniqueId)
            {
                target.StudentUniqueId = source.StudentUniqueId;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.StudentIdentificationDocuments.SynchronizeCollectionTo(
                        target.StudentIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Student = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentOtherNamesSupported)
            {
                isModified |= 
                    source.StudentOtherNames.SynchronizeCollectionTo(
                        target.StudentOtherNames, 
                        onChildAdded: child => 
                            {
                                child.Student = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentOtherNameIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentPersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.StudentPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.StudentPersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Student = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentPersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentVisasSupported)
            {
                isModified |= 
                    source.StudentVisas.SynchronizeCollectionTo(
                        target.StudentVisas, 
                        onChildAdded: child => 
                            {
                                child.Student = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentVisaIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudent source, IStudent target, Action<IStudent, IStudent> onMapped)
        {
            var sourceSynchSupport = source as IStudentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBirthCitySupported)
                target.BirthCity = source.BirthCity;
            else
                targetSynchSupport.IsBirthCitySupported = false;

            if (sourceSynchSupport.IsBirthCountryDescriptorSupported)
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
            else
                targetSynchSupport.IsBirthCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsBirthDateSupported)
                target.BirthDate = source.BirthDate;
            else
                targetSynchSupport.IsBirthDateSupported = false;

            if (sourceSynchSupport.IsBirthInternationalProvinceSupported)
                target.BirthInternationalProvince = source.BirthInternationalProvince;
            else
                targetSynchSupport.IsBirthInternationalProvinceSupported = false;

            if (sourceSynchSupport.IsBirthSexDescriptorSupported)
                target.BirthSexDescriptor = source.BirthSexDescriptor;
            else
                targetSynchSupport.IsBirthSexDescriptorSupported = false;

            if (sourceSynchSupport.IsBirthStateAbbreviationDescriptorSupported)
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
            else
                targetSynchSupport.IsBirthStateAbbreviationDescriptorSupported = false;

            if (sourceSynchSupport.IsCitizenshipStatusDescriptorSupported)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
            else
                targetSynchSupport.IsCitizenshipStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsDateEnteredUSSupported)
                target.DateEnteredUS = source.DateEnteredUS;
            else
                targetSynchSupport.IsDateEnteredUSSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsMultipleBirthStatusSupported)
                target.MultipleBirthStatus = source.MultipleBirthStatus;
            else
                targetSynchSupport.IsMultipleBirthStatusSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsStudentUniqueIdSupported)
                target.StudentUniqueId = source.StudentUniqueId;
            else
                targetSynchSupport.IsStudentUniqueIdSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsStudentIdentificationDocumentIncluded = sourceSynchSupport.IsStudentIdentificationDocumentIncluded;
                source.StudentIdentificationDocuments.MapCollectionTo(target.StudentIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsStudentIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsStudentOtherNamesSupported)
            {    
                targetSynchSupport.IsStudentOtherNameIncluded = sourceSynchSupport.IsStudentOtherNameIncluded;
                source.StudentOtherNames.MapCollectionTo(target.StudentOtherNames, target);
            }
            else
            {
                targetSynchSupport.IsStudentOtherNamesSupported = false;
            }

            if (sourceSynchSupport.IsStudentPersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsStudentPersonalIdentificationDocumentIncluded = sourceSynchSupport.IsStudentPersonalIdentificationDocumentIncluded;
                source.StudentPersonalIdentificationDocuments.MapCollectionTo(target.StudentPersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsStudentPersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsStudentVisasSupported)
            {    
                targetSynchSupport.IsStudentVisaIncluded = sourceSynchSupport.IsStudentVisaIncluded;
                source.StudentVisas.MapCollectionTo(target.StudentVisas, target);
            }
            else
            {
                targetSynchSupport.IsStudentVisasSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBirthCitySupported { get; set; }
        bool IsBirthCountryDescriptorSupported { get; set; }
        bool IsBirthDateSupported { get; set; }
        bool IsBirthInternationalProvinceSupported { get; set; }
        bool IsBirthSexDescriptorSupported { get; set; }
        bool IsBirthStateAbbreviationDescriptorSupported { get; set; }
        bool IsCitizenshipStatusDescriptorSupported { get; set; }
        bool IsDateEnteredUSSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsMultipleBirthStatusSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsStudentIdentificationDocumentsSupported { get; set; }
        bool IsStudentOtherNamesSupported { get; set; }
        bool IsStudentPersonalIdentificationDocumentsSupported { get; set; }
        bool IsStudentUniqueIdSupported { get; set; }
        bool IsStudentVisasSupported { get; set; }
        Func<IStudentIdentificationDocument, bool> IsStudentIdentificationDocumentIncluded { get; set; }
        Func<IStudentOtherName, bool> IsStudentOtherNameIncluded { get; set; }
        Func<IStudentPersonalIdentificationDocument, bool> IsStudentPersonalIdentificationDocumentIncluded { get; set; }
        Func<IStudentVisa, bool> IsStudentVisaIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IStudentIdentificationDocument source, IStudentIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentIdentificationDocument source, IStudentIdentificationDocument target, Action<IStudentIdentificationDocument, IStudentIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IStudentIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentIdentificationDocumentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentOtherNameMapper 
    {
        public static bool SynchronizeTo(this IStudentOtherName source, IStudentOtherName target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentOtherNameSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OtherNameTypeDescriptor != target.OtherNameTypeDescriptor)
            {
                source.OtherNameTypeDescriptor = target.OtherNameTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentOtherName source, IStudentOtherName target, Action<IStudentOtherName, IStudentOtherName> onMapped)
        {
            var sourceSynchSupport = source as IStudentOtherNameSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentOtherNameSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentOtherNameSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentPersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IStudentPersonalIdentificationDocument source, IStudentPersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentPersonalIdentificationDocument source, IStudentPersonalIdentificationDocument target, Action<IStudentPersonalIdentificationDocument, IStudentPersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IStudentPersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentPersonalIdentificationDocumentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentVisaMapper 
    {
        public static bool SynchronizeTo(this IStudentVisa source, IStudentVisa target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentVisaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptor != target.VisaDescriptor)
            {
                source.VisaDescriptor = target.VisaDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentVisa source, IStudentVisa target, Action<IStudentVisa, IStudentVisa> onMapped)
        {
            var sourceSynchSupport = source as IStudentVisaSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentVisaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentVisaSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StudentAcademicRecord

namespace EdFi.Ods.Entities.Common.EdFi //.StudentAcademicRecordAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordMapper 
    {
        public static bool SynchronizeTo(this IStudentAcademicRecord source, IStudentAcademicRecord target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAcademicRecordSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditConversionSupported)
                && target.CumulativeAttemptedCreditConversion != source.CumulativeAttemptedCreditConversion)
            {
                target.CumulativeAttemptedCreditConversion = source.CumulativeAttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditsSupported)
                && target.CumulativeAttemptedCredits != source.CumulativeAttemptedCredits)
            {
                target.CumulativeAttemptedCredits = source.CumulativeAttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported)
                && target.CumulativeAttemptedCreditTypeDescriptor != source.CumulativeAttemptedCreditTypeDescriptor)
            {
                target.CumulativeAttemptedCreditTypeDescriptor = source.CumulativeAttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditConversionSupported)
                && target.CumulativeEarnedCreditConversion != source.CumulativeEarnedCreditConversion)
            {
                target.CumulativeEarnedCreditConversion = source.CumulativeEarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditsSupported)
                && target.CumulativeEarnedCredits != source.CumulativeEarnedCredits)
            {
                target.CumulativeEarnedCredits = source.CumulativeEarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditTypeDescriptorSupported)
                && target.CumulativeEarnedCreditTypeDescriptor != source.CumulativeEarnedCreditTypeDescriptor)
            {
                target.CumulativeEarnedCreditTypeDescriptor = source.CumulativeEarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeGradePointAverageSupported)
                && target.CumulativeGradePointAverage != source.CumulativeGradePointAverage)
            {
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeGradePointsEarnedSupported)
                && target.CumulativeGradePointsEarned != source.CumulativeGradePointsEarned)
            {
                target.CumulativeGradePointsEarned = source.CumulativeGradePointsEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeValueQualifierSupported)
                && target.GradeValueQualifier != source.GradeValueQualifier)
            {
                target.GradeValueQualifier = source.GradeValueQualifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProjectedGraduationDateSupported)
                && target.ProjectedGraduationDate != source.ProjectedGraduationDate)
            {
                target.ProjectedGraduationDate = source.ProjectedGraduationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditConversionSupported)
                && target.SessionAttemptedCreditConversion != source.SessionAttemptedCreditConversion)
            {
                target.SessionAttemptedCreditConversion = source.SessionAttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditsSupported)
                && target.SessionAttemptedCredits != source.SessionAttemptedCredits)
            {
                target.SessionAttemptedCredits = source.SessionAttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditTypeDescriptorSupported)
                && target.SessionAttemptedCreditTypeDescriptor != source.SessionAttemptedCreditTypeDescriptor)
            {
                target.SessionAttemptedCreditTypeDescriptor = source.SessionAttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditConversionSupported)
                && target.SessionEarnedCreditConversion != source.SessionEarnedCreditConversion)
            {
                target.SessionEarnedCreditConversion = source.SessionEarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditsSupported)
                && target.SessionEarnedCredits != source.SessionEarnedCredits)
            {
                target.SessionEarnedCredits = source.SessionEarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditTypeDescriptorSupported)
                && target.SessionEarnedCreditTypeDescriptor != source.SessionEarnedCreditTypeDescriptor)
            {
                target.SessionEarnedCreditTypeDescriptor = source.SessionEarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionGradePointAverageSupported)
                && target.SessionGradePointAverage != source.SessionGradePointAverage)
            {
                target.SessionGradePointAverage = source.SessionGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionGradePointsEarnedSupported)
                && target.SessionGradePointsEarned != source.SessionGradePointsEarned)
            {
                target.SessionGradePointsEarned = source.SessionGradePointsEarned;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // StudentAcademicRecordClassRanking
            if (sourceSupport == null || sourceSupport.IsStudentAcademicRecordClassRankingSupported)
            {
                if (source.StudentAcademicRecordClassRanking == null)
                {
                    if (target.StudentAcademicRecordClassRanking != null)
                    {
                        target.StudentAcademicRecordClassRanking = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StudentAcademicRecordClassRanking == null)
                    {
                        var itemType = target.GetType().GetProperty("StudentAcademicRecordClassRanking").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StudentAcademicRecordClassRanking = (IStudentAcademicRecordClassRanking) newItem;
                    }

                    isModified |= source.StudentAcademicRecordClassRanking.Synchronize(target.StudentAcademicRecordClassRanking);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentAcademicRecordAcademicHonorsSupported)
            {
                isModified |= 
                    source.StudentAcademicRecordAcademicHonors.SynchronizeCollectionTo(
                        target.StudentAcademicRecordAcademicHonors, 
                        onChildAdded: child => 
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAcademicRecordAcademicHonorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAcademicRecordDiplomasSupported)
            {
                isModified |= 
                    source.StudentAcademicRecordDiplomas.SynchronizeCollectionTo(
                        target.StudentAcademicRecordDiplomas, 
                        onChildAdded: child => 
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAcademicRecordDiplomaIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAcademicRecordGradePointAveragesSupported)
            {
                isModified |= 
                    source.StudentAcademicRecordGradePointAverages.SynchronizeCollectionTo(
                        target.StudentAcademicRecordGradePointAverages, 
                        onChildAdded: child => 
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAcademicRecordGradePointAverageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAcademicRecordRecognitionsSupported)
            {
                isModified |= 
                    source.StudentAcademicRecordRecognitions.SynchronizeCollectionTo(
                        target.StudentAcademicRecordRecognitions, 
                        onChildAdded: child => 
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAcademicRecordRecognitionIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAcademicRecordReportCardsSupported)
            {
                isModified |= 
                    source.StudentAcademicRecordReportCards.SynchronizeCollectionTo(
                        target.StudentAcademicRecordReportCards, 
                        onChildAdded: child => 
                            {
                                child.StudentAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAcademicRecordReportCardIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAcademicRecord source, IStudentAcademicRecord target, Action<IStudentAcademicRecord, IStudentAcademicRecord> onMapped)
        {
            var sourceSynchSupport = source as IStudentAcademicRecordSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAcademicRecordSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.StudentUniqueId = source.StudentUniqueId;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCumulativeAttemptedCreditConversionSupported)
                target.CumulativeAttemptedCreditConversion = source.CumulativeAttemptedCreditConversion;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsCumulativeAttemptedCreditsSupported)
                target.CumulativeAttemptedCredits = source.CumulativeAttemptedCredits;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported)
                target.CumulativeAttemptedCreditTypeDescriptor = source.CumulativeAttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditConversionSupported)
                target.CumulativeEarnedCreditConversion = source.CumulativeEarnedCreditConversion;
            else
                targetSynchSupport.IsCumulativeEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditsSupported)
                target.CumulativeEarnedCredits = source.CumulativeEarnedCredits;
            else
                targetSynchSupport.IsCumulativeEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditTypeDescriptorSupported)
                target.CumulativeEarnedCreditTypeDescriptor = source.CumulativeEarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsCumulativeEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCumulativeGradePointAverageSupported)
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
            else
                targetSynchSupport.IsCumulativeGradePointAverageSupported = false;

            if (sourceSynchSupport.IsCumulativeGradePointsEarnedSupported)
                target.CumulativeGradePointsEarned = source.CumulativeGradePointsEarned;
            else
                targetSynchSupport.IsCumulativeGradePointsEarnedSupported = false;

            if (sourceSynchSupport.IsGradeValueQualifierSupported)
                target.GradeValueQualifier = source.GradeValueQualifier;
            else
                targetSynchSupport.IsGradeValueQualifierSupported = false;

            if (sourceSynchSupport.IsProjectedGraduationDateSupported)
                target.ProjectedGraduationDate = source.ProjectedGraduationDate;
            else
                targetSynchSupport.IsProjectedGraduationDateSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditConversionSupported)
                target.SessionAttemptedCreditConversion = source.SessionAttemptedCreditConversion;
            else
                targetSynchSupport.IsSessionAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditsSupported)
                target.SessionAttemptedCredits = source.SessionAttemptedCredits;
            else
                targetSynchSupport.IsSessionAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditTypeDescriptorSupported)
                target.SessionAttemptedCreditTypeDescriptor = source.SessionAttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsSessionAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditConversionSupported)
                target.SessionEarnedCreditConversion = source.SessionEarnedCreditConversion;
            else
                targetSynchSupport.IsSessionEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditsSupported)
                target.SessionEarnedCredits = source.SessionEarnedCredits;
            else
                targetSynchSupport.IsSessionEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditTypeDescriptorSupported)
                target.SessionEarnedCreditTypeDescriptor = source.SessionEarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsSessionEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSessionGradePointAverageSupported)
                target.SessionGradePointAverage = source.SessionGradePointAverage;
            else
                targetSynchSupport.IsSessionGradePointAverageSupported = false;

            if (sourceSynchSupport.IsSessionGradePointsEarnedSupported)
                target.SessionGradePointsEarned = source.SessionGradePointsEarned;
            else
                targetSynchSupport.IsSessionGradePointsEarnedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StudentAcademicRecordClassRanking (Source)
            if (sourceSynchSupport.IsStudentAcademicRecordClassRankingSupported)
            {
                var itemProperty = target.GetType().GetProperty("StudentAcademicRecordClassRanking");
                
                if (itemProperty != null)
                {                    
                    if (source.StudentAcademicRecordClassRanking == null)
                    {
                        target.StudentAcademicRecordClassRanking = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStudentAcademicRecordClassRanking = Activator.CreateInstance(itemType);
                        (targetStudentAcademicRecordClassRanking as IChildEntity)?.SetParent(target);
                        source.StudentAcademicRecordClassRanking.Map(targetStudentAcademicRecordClassRanking);
                        
                        // Update the target reference appropriately
                        target.StudentAcademicRecordClassRanking = (IStudentAcademicRecordClassRanking) targetStudentAcademicRecordClassRanking;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStudentAcademicRecordClassRankingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentAcademicRecordAcademicHonorsSupported)
            {    
                targetSynchSupport.IsStudentAcademicRecordAcademicHonorIncluded = sourceSynchSupport.IsStudentAcademicRecordAcademicHonorIncluded;
                source.StudentAcademicRecordAcademicHonors.MapCollectionTo(target.StudentAcademicRecordAcademicHonors, target);
            }
            else
            {
                targetSynchSupport.IsStudentAcademicRecordAcademicHonorsSupported = false;
            }

            if (sourceSynchSupport.IsStudentAcademicRecordDiplomasSupported)
            {    
                targetSynchSupport.IsStudentAcademicRecordDiplomaIncluded = sourceSynchSupport.IsStudentAcademicRecordDiplomaIncluded;
                source.StudentAcademicRecordDiplomas.MapCollectionTo(target.StudentAcademicRecordDiplomas, target);
            }
            else
            {
                targetSynchSupport.IsStudentAcademicRecordDiplomasSupported = false;
            }

            if (sourceSynchSupport.IsStudentAcademicRecordGradePointAveragesSupported)
            {    
                targetSynchSupport.IsStudentAcademicRecordGradePointAverageIncluded = sourceSynchSupport.IsStudentAcademicRecordGradePointAverageIncluded;
                source.StudentAcademicRecordGradePointAverages.MapCollectionTo(target.StudentAcademicRecordGradePointAverages, target);
            }
            else
            {
                targetSynchSupport.IsStudentAcademicRecordGradePointAveragesSupported = false;
            }

            if (sourceSynchSupport.IsStudentAcademicRecordRecognitionsSupported)
            {    
                targetSynchSupport.IsStudentAcademicRecordRecognitionIncluded = sourceSynchSupport.IsStudentAcademicRecordRecognitionIncluded;
                source.StudentAcademicRecordRecognitions.MapCollectionTo(target.StudentAcademicRecordRecognitions, target);
            }
            else
            {
                targetSynchSupport.IsStudentAcademicRecordRecognitionsSupported = false;
            }

            if (sourceSynchSupport.IsStudentAcademicRecordReportCardsSupported)
            {    
                targetSynchSupport.IsStudentAcademicRecordReportCardIncluded = sourceSynchSupport.IsStudentAcademicRecordReportCardIncluded;
                source.StudentAcademicRecordReportCards.MapCollectionTo(target.StudentAcademicRecordReportCards, target);
            }
            else
            {
                targetSynchSupport.IsStudentAcademicRecordReportCardsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAcademicRecordSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCumulativeAttemptedCreditConversionSupported { get; set; }
        bool IsCumulativeAttemptedCreditsSupported { get; set; }
        bool IsCumulativeAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsCumulativeEarnedCreditConversionSupported { get; set; }
        bool IsCumulativeEarnedCreditsSupported { get; set; }
        bool IsCumulativeEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsCumulativeGradePointAverageSupported { get; set; }
        bool IsCumulativeGradePointsEarnedSupported { get; set; }
        bool IsGradeValueQualifierSupported { get; set; }
        bool IsProjectedGraduationDateSupported { get; set; }
        bool IsSessionAttemptedCreditConversionSupported { get; set; }
        bool IsSessionAttemptedCreditsSupported { get; set; }
        bool IsSessionAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsSessionEarnedCreditConversionSupported { get; set; }
        bool IsSessionEarnedCreditsSupported { get; set; }
        bool IsSessionEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsSessionGradePointAverageSupported { get; set; }
        bool IsSessionGradePointsEarnedSupported { get; set; }
        bool IsStudentAcademicRecordAcademicHonorsSupported { get; set; }
        bool IsStudentAcademicRecordClassRankingSupported { get; set; }
        bool IsStudentAcademicRecordDiplomasSupported { get; set; }
        bool IsStudentAcademicRecordGradePointAveragesSupported { get; set; }
        bool IsStudentAcademicRecordRecognitionsSupported { get; set; }
        bool IsStudentAcademicRecordReportCardsSupported { get; set; }
        Func<IStudentAcademicRecordAcademicHonor, bool> IsStudentAcademicRecordAcademicHonorIncluded { get; set; }
        Func<IStudentAcademicRecordDiploma, bool> IsStudentAcademicRecordDiplomaIncluded { get; set; }
        Func<IStudentAcademicRecordGradePointAverage, bool> IsStudentAcademicRecordGradePointAverageIncluded { get; set; }
        Func<IStudentAcademicRecordRecognition, bool> IsStudentAcademicRecordRecognitionIncluded { get; set; }
        Func<IStudentAcademicRecordReportCard, bool> IsStudentAcademicRecordReportCardIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordAcademicHonorMapper 
    {
        public static bool SynchronizeTo(this IStudentAcademicRecordAcademicHonor source, IStudentAcademicRecordAcademicHonor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicHonorCategoryDescriptor != target.AcademicHonorCategoryDescriptor)
            {
                source.AcademicHonorCategoryDescriptor = target.AcademicHonorCategoryDescriptor;
            }
            if (source.HonorDescription != target.HonorDescription)
            {
                source.HonorDescription = target.HonorDescription;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHonorAwardDateSupported)
                && target.HonorAwardDate != source.HonorAwardDate)
            {
                target.HonorAwardDate = source.HonorAwardDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHonorAwardExpiresDateSupported)
                && target.HonorAwardExpiresDate != source.HonorAwardExpiresDate)
            {
                target.HonorAwardExpiresDate = source.HonorAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAcademicRecordAcademicHonor source, IStudentAcademicRecordAcademicHonor target, Action<IStudentAcademicRecordAcademicHonor, IStudentAcademicRecordAcademicHonor> onMapped)
        {
            var sourceSynchSupport = source as IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicHonorCategoryDescriptor = source.AcademicHonorCategoryDescriptor;
            target.HonorDescription = source.HonorDescription;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsHonorAwardDateSupported)
                target.HonorAwardDate = source.HonorAwardDate;
            else
                targetSynchSupport.IsHonorAwardDateSupported = false;

            if (sourceSynchSupport.IsHonorAwardExpiresDateSupported)
                target.HonorAwardExpiresDate = source.HonorAwardExpiresDate;
            else
                targetSynchSupport.IsHonorAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAcademicRecordAcademicHonorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsHonorAwardDateSupported { get; set; }
        bool IsHonorAwardExpiresDateSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordClassRankingMapper 
    {
        public static bool SynchronizeTo(this IStudentAcademicRecordClassRanking source, IStudentAcademicRecordClassRanking target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAcademicRecordClassRankingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsClassRankSupported)
                && target.ClassRank != source.ClassRank)
            {
                target.ClassRank = source.ClassRank;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsClassRankingDateSupported)
                && target.ClassRankingDate != source.ClassRankingDate)
            {
                target.ClassRankingDate = source.ClassRankingDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentageRankingSupported)
                && target.PercentageRanking != source.PercentageRanking)
            {
                target.PercentageRanking = source.PercentageRanking;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalNumberInClassSupported)
                && target.TotalNumberInClass != source.TotalNumberInClass)
            {
                target.TotalNumberInClass = source.TotalNumberInClass;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAcademicRecordClassRanking source, IStudentAcademicRecordClassRanking target, Action<IStudentAcademicRecordClassRanking, IStudentAcademicRecordClassRanking> onMapped)
        {
            var sourceSynchSupport = source as IStudentAcademicRecordClassRankingSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAcademicRecordClassRankingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsClassRankSupported)
                target.ClassRank = source.ClassRank;
            else
                targetSynchSupport.IsClassRankSupported = false;

            if (sourceSynchSupport.IsClassRankingDateSupported)
                target.ClassRankingDate = source.ClassRankingDate;
            else
                targetSynchSupport.IsClassRankingDateSupported = false;

            if (sourceSynchSupport.IsPercentageRankingSupported)
                target.PercentageRanking = source.PercentageRanking;
            else
                targetSynchSupport.IsPercentageRankingSupported = false;

            if (sourceSynchSupport.IsTotalNumberInClassSupported)
                target.TotalNumberInClass = source.TotalNumberInClass;
            else
                targetSynchSupport.IsTotalNumberInClassSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAcademicRecordClassRankingSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsClassRankSupported { get; set; }
        bool IsClassRankingDateSupported { get; set; }
        bool IsPercentageRankingSupported { get; set; }
        bool IsTotalNumberInClassSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordDiplomaMapper 
    {
        public static bool SynchronizeTo(this IStudentAcademicRecordDiploma source, IStudentAcademicRecordDiploma target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAcademicRecordDiplomaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiplomaAwardDate != target.DiplomaAwardDate)
            {
                source.DiplomaAwardDate = target.DiplomaAwardDate;
            }
            if (source.DiplomaTypeDescriptor != target.DiplomaTypeDescriptor)
            {
                source.DiplomaTypeDescriptor = target.DiplomaTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCTECompleterSupported)
                && target.CTECompleter != source.CTECompleter)
            {
                target.CTECompleter = source.CTECompleter;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaAwardExpiresDateSupported)
                && target.DiplomaAwardExpiresDate != source.DiplomaAwardExpiresDate)
            {
                target.DiplomaAwardExpiresDate = source.DiplomaAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaDescriptionSupported)
                && target.DiplomaDescription != source.DiplomaDescription)
            {
                target.DiplomaDescription = source.DiplomaDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaLevelDescriptorSupported)
                && target.DiplomaLevelDescriptor != source.DiplomaLevelDescriptor)
            {
                target.DiplomaLevelDescriptor = source.DiplomaLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAcademicRecordDiploma source, IStudentAcademicRecordDiploma target, Action<IStudentAcademicRecordDiploma, IStudentAcademicRecordDiploma> onMapped)
        {
            var sourceSynchSupport = source as IStudentAcademicRecordDiplomaSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAcademicRecordDiplomaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DiplomaAwardDate = source.DiplomaAwardDate;
            target.DiplomaTypeDescriptor = source.DiplomaTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsCTECompleterSupported)
                target.CTECompleter = source.CTECompleter;
            else
                targetSynchSupport.IsCTECompleterSupported = false;

            if (sourceSynchSupport.IsDiplomaAwardExpiresDateSupported)
                target.DiplomaAwardExpiresDate = source.DiplomaAwardExpiresDate;
            else
                targetSynchSupport.IsDiplomaAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsDiplomaDescriptionSupported)
                target.DiplomaDescription = source.DiplomaDescription;
            else
                targetSynchSupport.IsDiplomaDescriptionSupported = false;

            if (sourceSynchSupport.IsDiplomaLevelDescriptorSupported)
                target.DiplomaLevelDescriptor = source.DiplomaLevelDescriptor;
            else
                targetSynchSupport.IsDiplomaLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAcademicRecordDiplomaSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsCTECompleterSupported { get; set; }
        bool IsDiplomaAwardExpiresDateSupported { get; set; }
        bool IsDiplomaDescriptionSupported { get; set; }
        bool IsDiplomaLevelDescriptorSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this IStudentAcademicRecordGradePointAverage source, IStudentAcademicRecordGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAcademicRecordGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradePointAverageTypeDescriptor != target.GradePointAverageTypeDescriptor)
            {
                source.GradePointAverageTypeDescriptor = target.GradePointAverageTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageValueSupported)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsCumulativeSupported)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxGradePointAverageValueSupported)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAcademicRecordGradePointAverage source, IStudentAcademicRecordGradePointAverage target, Action<IStudentAcademicRecordGradePointAverage, IStudentAcademicRecordGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as IStudentAcademicRecordGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAcademicRecordGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageValueSupported)
                target.GradePointAverageValue = source.GradePointAverageValue;
            else
                targetSynchSupport.IsGradePointAverageValueSupported = false;

            if (sourceSynchSupport.IsIsCumulativeSupported)
                target.IsCumulative = source.IsCumulative;
            else
                targetSynchSupport.IsIsCumulativeSupported = false;

            if (sourceSynchSupport.IsMaxGradePointAverageValueSupported)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
            else
                targetSynchSupport.IsMaxGradePointAverageValueSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAcademicRecordGradePointAverageSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsGradePointAverageValueSupported { get; set; }
        bool IsIsCumulativeSupported { get; set; }
        bool IsMaxGradePointAverageValueSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordRecognitionMapper 
    {
        public static bool SynchronizeTo(this IStudentAcademicRecordRecognition source, IStudentAcademicRecordRecognition target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAcademicRecordRecognitionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecognitionTypeDescriptor != target.RecognitionTypeDescriptor)
            {
                source.RecognitionTypeDescriptor = target.RecognitionTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionAwardDateSupported)
                && target.RecognitionAwardDate != source.RecognitionAwardDate)
            {
                target.RecognitionAwardDate = source.RecognitionAwardDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionAwardExpiresDateSupported)
                && target.RecognitionAwardExpiresDate != source.RecognitionAwardExpiresDate)
            {
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionDescriptionSupported)
                && target.RecognitionDescription != source.RecognitionDescription)
            {
                target.RecognitionDescription = source.RecognitionDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAcademicRecordRecognition source, IStudentAcademicRecordRecognition target, Action<IStudentAcademicRecordRecognition, IStudentAcademicRecordRecognition> onMapped)
        {
            var sourceSynchSupport = source as IStudentAcademicRecordRecognitionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAcademicRecordRecognitionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RecognitionTypeDescriptor = source.RecognitionTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            if (sourceSynchSupport.IsRecognitionAwardDateSupported)
                target.RecognitionAwardDate = source.RecognitionAwardDate;
            else
                targetSynchSupport.IsRecognitionAwardDateSupported = false;

            if (sourceSynchSupport.IsRecognitionAwardExpiresDateSupported)
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
            else
                targetSynchSupport.IsRecognitionAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsRecognitionDescriptionSupported)
                target.RecognitionDescription = source.RecognitionDescription;
            else
                targetSynchSupport.IsRecognitionDescriptionSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAcademicRecordRecognitionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
        bool IsRecognitionAwardDateSupported { get; set; }
        bool IsRecognitionAwardExpiresDateSupported { get; set; }
        bool IsRecognitionDescriptionSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAcademicRecordReportCardMapper 
    {
        public static bool SynchronizeTo(this IStudentAcademicRecordReportCard source, IStudentAcademicRecordReportCard target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAcademicRecordReportCardSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradingPeriodDescriptor != target.GradingPeriodDescriptor)
            {
                source.GradingPeriodDescriptor = target.GradingPeriodDescriptor;
            }
            if (source.GradingPeriodSchoolId != target.GradingPeriodSchoolId)
            {
                source.GradingPeriodSchoolId = target.GradingPeriodSchoolId;
            }
            if (source.GradingPeriodSchoolYear != target.GradingPeriodSchoolYear)
            {
                source.GradingPeriodSchoolYear = target.GradingPeriodSchoolYear;
            }
            if (source.GradingPeriodSequence != target.GradingPeriodSequence)
            {
                source.GradingPeriodSequence = target.GradingPeriodSequence;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAcademicRecordReportCard source, IStudentAcademicRecordReportCard target, Action<IStudentAcademicRecordReportCard, IStudentAcademicRecordReportCard> onMapped)
        {
            var sourceSynchSupport = source as IStudentAcademicRecordReportCardSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAcademicRecordReportCardSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodSchoolId = source.GradingPeriodSchoolId;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;
            target.GradingPeriodSequence = source.GradingPeriodSequence;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ReportCardResourceId = source.ReportCardResourceId;
                target.ReportCardDiscriminator = source.ReportCardDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAcademicRecordReportCardSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StudentAssessment

namespace EdFi.Ods.Entities.Common.EdFi //.StudentAssessmentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentMapper 
    {
        public static bool SynchronizeTo(this IStudentAssessment source, IStudentAssessment target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAssessmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.StudentAssessmentIdentifier != target.StudentAssessmentIdentifier)
            {
                source.StudentAssessmentIdentifier = target.StudentAssessmentIdentifier;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAdministrationDateSupported)
                && target.AdministrationDate != source.AdministrationDate)
            {
                target.AdministrationDate = source.AdministrationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAdministrationEndDateSupported)
                && target.AdministrationEndDate != source.AdministrationEndDate)
            {
                target.AdministrationEndDate = source.AdministrationEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAdministrationEnvironmentDescriptorSupported)
                && target.AdministrationEnvironmentDescriptor != source.AdministrationEnvironmentDescriptor)
            {
                target.AdministrationEnvironmentDescriptor = source.AdministrationEnvironmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAdministrationLanguageDescriptorSupported)
                && target.AdministrationLanguageDescriptor != source.AdministrationLanguageDescriptor)
            {
                target.AdministrationLanguageDescriptor = source.AdministrationLanguageDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventCircumstanceDescriptorSupported)
                && target.EventCircumstanceDescriptor != source.EventCircumstanceDescriptor)
            {
                target.EventCircumstanceDescriptor = source.EventCircumstanceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventDescriptionSupported)
                && target.EventDescription != source.EventDescription)
            {
                target.EventDescription = source.EventDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPlatformTypeDescriptorSupported)
                && target.PlatformTypeDescriptor != source.PlatformTypeDescriptor)
            {
                target.PlatformTypeDescriptor = source.PlatformTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonNotTestedDescriptorSupported)
                && target.ReasonNotTestedDescriptor != source.ReasonNotTestedDescriptor)
            {
                target.ReasonNotTestedDescriptor = source.ReasonNotTestedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRetestIndicatorDescriptorSupported)
                && target.RetestIndicatorDescriptor != source.RetestIndicatorDescriptor)
            {
                target.RetestIndicatorDescriptor = source.RetestIndicatorDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSerialNumberSupported)
                && target.SerialNumber != source.SerialNumber)
            {
                target.SerialNumber = source.SerialNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWhenAssessedGradeLevelDescriptorSupported)
                && target.WhenAssessedGradeLevelDescriptor != source.WhenAssessedGradeLevelDescriptor)
            {
                target.WhenAssessedGradeLevelDescriptor = source.WhenAssessedGradeLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentAssessmentAccommodationsSupported)
            {
                isModified |= 
                    source.StudentAssessmentAccommodations.SynchronizeCollectionTo(
                        target.StudentAssessmentAccommodations, 
                        onChildAdded: child => 
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAssessmentAccommodationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAssessmentItemsSupported)
            {
                isModified |= 
                    source.StudentAssessmentItems.SynchronizeCollectionTo(
                        target.StudentAssessmentItems, 
                        onChildAdded: child => 
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAssessmentItemIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAssessmentPerformanceLevelsSupported)
            {
                isModified |= 
                    source.StudentAssessmentPerformanceLevels.SynchronizeCollectionTo(
                        target.StudentAssessmentPerformanceLevels, 
                        onChildAdded: child => 
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAssessmentPerformanceLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAssessmentScoreResultsSupported)
            {
                isModified |= 
                    source.StudentAssessmentScoreResults.SynchronizeCollectionTo(
                        target.StudentAssessmentScoreResults, 
                        onChildAdded: child => 
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAssessmentScoreResultIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAssessmentStudentObjectiveAssessmentsSupported)
            {
                isModified |= 
                    source.StudentAssessmentStudentObjectiveAssessments.SynchronizeCollectionTo(
                        target.StudentAssessmentStudentObjectiveAssessments, 
                        onChildAdded: child => 
                            {
                                child.StudentAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAssessmentStudentObjectiveAssessmentIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAssessment source, IStudentAssessment target, Action<IStudentAssessment, IStudentAssessment> onMapped)
        {
            var sourceSynchSupport = source as IStudentAssessmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAssessmentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.Namespace = source.Namespace;
            target.StudentAssessmentIdentifier = source.StudentAssessmentIdentifier;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAdministrationDateSupported)
                target.AdministrationDate = source.AdministrationDate;
            else
                targetSynchSupport.IsAdministrationDateSupported = false;

            if (sourceSynchSupport.IsAdministrationEndDateSupported)
                target.AdministrationEndDate = source.AdministrationEndDate;
            else
                targetSynchSupport.IsAdministrationEndDateSupported = false;

            if (sourceSynchSupport.IsAdministrationEnvironmentDescriptorSupported)
                target.AdministrationEnvironmentDescriptor = source.AdministrationEnvironmentDescriptor;
            else
                targetSynchSupport.IsAdministrationEnvironmentDescriptorSupported = false;

            if (sourceSynchSupport.IsAdministrationLanguageDescriptorSupported)
                target.AdministrationLanguageDescriptor = source.AdministrationLanguageDescriptor;
            else
                targetSynchSupport.IsAdministrationLanguageDescriptorSupported = false;

            if (sourceSynchSupport.IsEventCircumstanceDescriptorSupported)
                target.EventCircumstanceDescriptor = source.EventCircumstanceDescriptor;
            else
                targetSynchSupport.IsEventCircumstanceDescriptorSupported = false;

            if (sourceSynchSupport.IsEventDescriptionSupported)
                target.EventDescription = source.EventDescription;
            else
                targetSynchSupport.IsEventDescriptionSupported = false;

            if (sourceSynchSupport.IsPlatformTypeDescriptorSupported)
                target.PlatformTypeDescriptor = source.PlatformTypeDescriptor;
            else
                targetSynchSupport.IsPlatformTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsReasonNotTestedDescriptorSupported)
                target.ReasonNotTestedDescriptor = source.ReasonNotTestedDescriptor;
            else
                targetSynchSupport.IsReasonNotTestedDescriptorSupported = false;

            if (sourceSynchSupport.IsRetestIndicatorDescriptorSupported)
                target.RetestIndicatorDescriptor = source.RetestIndicatorDescriptor;
            else
                targetSynchSupport.IsRetestIndicatorDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsSerialNumberSupported)
                target.SerialNumber = source.SerialNumber;
            else
                targetSynchSupport.IsSerialNumberSupported = false;

            if (sourceSynchSupport.IsWhenAssessedGradeLevelDescriptorSupported)
                target.WhenAssessedGradeLevelDescriptor = source.WhenAssessedGradeLevelDescriptor;
            else
                targetSynchSupport.IsWhenAssessedGradeLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentResourceId = source.AssessmentResourceId;
                target.AssessmentDiscriminator = source.AssessmentDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentAssessmentAccommodationsSupported)
            {    
                targetSynchSupport.IsStudentAssessmentAccommodationIncluded = sourceSynchSupport.IsStudentAssessmentAccommodationIncluded;
                source.StudentAssessmentAccommodations.MapCollectionTo(target.StudentAssessmentAccommodations, target);
            }
            else
            {
                targetSynchSupport.IsStudentAssessmentAccommodationsSupported = false;
            }

            if (sourceSynchSupport.IsStudentAssessmentItemsSupported)
            {    
                targetSynchSupport.IsStudentAssessmentItemIncluded = sourceSynchSupport.IsStudentAssessmentItemIncluded;
                source.StudentAssessmentItems.MapCollectionTo(target.StudentAssessmentItems, target);
            }
            else
            {
                targetSynchSupport.IsStudentAssessmentItemsSupported = false;
            }

            if (sourceSynchSupport.IsStudentAssessmentPerformanceLevelsSupported)
            {    
                targetSynchSupport.IsStudentAssessmentPerformanceLevelIncluded = sourceSynchSupport.IsStudentAssessmentPerformanceLevelIncluded;
                source.StudentAssessmentPerformanceLevels.MapCollectionTo(target.StudentAssessmentPerformanceLevels, target);
            }
            else
            {
                targetSynchSupport.IsStudentAssessmentPerformanceLevelsSupported = false;
            }

            if (sourceSynchSupport.IsStudentAssessmentScoreResultsSupported)
            {    
                targetSynchSupport.IsStudentAssessmentScoreResultIncluded = sourceSynchSupport.IsStudentAssessmentScoreResultIncluded;
                source.StudentAssessmentScoreResults.MapCollectionTo(target.StudentAssessmentScoreResults, target);
            }
            else
            {
                targetSynchSupport.IsStudentAssessmentScoreResultsSupported = false;
            }

            if (sourceSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentsSupported)
            {    
                targetSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentIncluded = sourceSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentIncluded;
                source.StudentAssessmentStudentObjectiveAssessments.MapCollectionTo(target.StudentAssessmentStudentObjectiveAssessments, target);
            }
            else
            {
                targetSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAssessmentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAdministrationDateSupported { get; set; }
        bool IsAdministrationEndDateSupported { get; set; }
        bool IsAdministrationEnvironmentDescriptorSupported { get; set; }
        bool IsAdministrationLanguageDescriptorSupported { get; set; }
        bool IsEventCircumstanceDescriptorSupported { get; set; }
        bool IsEventDescriptionSupported { get; set; }
        bool IsPlatformTypeDescriptorSupported { get; set; }
        bool IsReasonNotTestedDescriptorSupported { get; set; }
        bool IsRetestIndicatorDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsSerialNumberSupported { get; set; }
        bool IsStudentAssessmentAccommodationsSupported { get; set; }
        bool IsStudentAssessmentItemsSupported { get; set; }
        bool IsStudentAssessmentPerformanceLevelsSupported { get; set; }
        bool IsStudentAssessmentScoreResultsSupported { get; set; }
        bool IsStudentAssessmentStudentObjectiveAssessmentsSupported { get; set; }
        bool IsWhenAssessedGradeLevelDescriptorSupported { get; set; }
        Func<IStudentAssessmentAccommodation, bool> IsStudentAssessmentAccommodationIncluded { get; set; }
        Func<IStudentAssessmentItem, bool> IsStudentAssessmentItemIncluded { get; set; }
        Func<IStudentAssessmentPerformanceLevel, bool> IsStudentAssessmentPerformanceLevelIncluded { get; set; }
        Func<IStudentAssessmentScoreResult, bool> IsStudentAssessmentScoreResultIncluded { get; set; }
        Func<IStudentAssessmentStudentObjectiveAssessment, bool> IsStudentAssessmentStudentObjectiveAssessmentIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentAccommodationMapper 
    {
        public static bool SynchronizeTo(this IStudentAssessmentAccommodation source, IStudentAssessmentAccommodation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAssessmentAccommodationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccommodationDescriptor != target.AccommodationDescriptor)
            {
                source.AccommodationDescriptor = target.AccommodationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAssessmentAccommodation source, IStudentAssessmentAccommodation target, Action<IStudentAssessmentAccommodation, IStudentAssessmentAccommodation> onMapped)
        {
            var sourceSynchSupport = source as IStudentAssessmentAccommodationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAssessmentAccommodationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AccommodationDescriptor = source.AccommodationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAssessmentAccommodationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentItemMapper 
    {
        public static bool SynchronizeTo(this IStudentAssessmentItem source, IStudentAssessmentItem target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAssessmentItemSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationCode != target.IdentificationCode)
            {
                source.IdentificationCode = target.IdentificationCode;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentItemResultDescriptorSupported)
                && target.AssessmentItemResultDescriptor != source.AssessmentItemResultDescriptor)
            {
                target.AssessmentItemResultDescriptor = source.AssessmentItemResultDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentResponseSupported)
                && target.AssessmentResponse != source.AssessmentResponse)
            {
                target.AssessmentResponse = source.AssessmentResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptiveFeedbackSupported)
                && target.DescriptiveFeedback != source.DescriptiveFeedback)
            {
                target.DescriptiveFeedback = source.DescriptiveFeedback;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRawScoreResultSupported)
                && target.RawScoreResult != source.RawScoreResult)
            {
                target.RawScoreResult = source.RawScoreResult;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResponseIndicatorDescriptorSupported)
                && target.ResponseIndicatorDescriptor != source.ResponseIndicatorDescriptor)
            {
                target.ResponseIndicatorDescriptor = source.ResponseIndicatorDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTimeAssessedSupported)
                && target.TimeAssessed != source.TimeAssessed)
            {
                target.TimeAssessed = source.TimeAssessed;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAssessmentItem source, IStudentAssessmentItem target, Action<IStudentAssessmentItem, IStudentAssessmentItem> onMapped)
        {
            var sourceSynchSupport = source as IStudentAssessmentItemSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAssessmentItemSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationCode = source.IdentificationCode;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentItemResultDescriptorSupported)
                target.AssessmentItemResultDescriptor = source.AssessmentItemResultDescriptor;
            else
                targetSynchSupport.IsAssessmentItemResultDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentResponseSupported)
                target.AssessmentResponse = source.AssessmentResponse;
            else
                targetSynchSupport.IsAssessmentResponseSupported = false;

            if (sourceSynchSupport.IsDescriptiveFeedbackSupported)
                target.DescriptiveFeedback = source.DescriptiveFeedback;
            else
                targetSynchSupport.IsDescriptiveFeedbackSupported = false;

            if (sourceSynchSupport.IsRawScoreResultSupported)
                target.RawScoreResult = source.RawScoreResult;
            else
                targetSynchSupport.IsRawScoreResultSupported = false;

            if (sourceSynchSupport.IsResponseIndicatorDescriptorSupported)
                target.ResponseIndicatorDescriptor = source.ResponseIndicatorDescriptor;
            else
                targetSynchSupport.IsResponseIndicatorDescriptorSupported = false;

            if (sourceSynchSupport.IsTimeAssessedSupported)
                target.TimeAssessed = source.TimeAssessed;
            else
                targetSynchSupport.IsTimeAssessedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AssessmentItemResourceId = source.AssessmentItemResourceId;
                target.AssessmentItemDiscriminator = source.AssessmentItemDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAssessmentItemSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAssessmentItemResultDescriptorSupported { get; set; }
        bool IsAssessmentResponseSupported { get; set; }
        bool IsDescriptiveFeedbackSupported { get; set; }
        bool IsRawScoreResultSupported { get; set; }
        bool IsResponseIndicatorDescriptorSupported { get; set; }
        bool IsTimeAssessedSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this IStudentAssessmentPerformanceLevel source, IStudentAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }
            if (source.PerformanceLevelDescriptor != target.PerformanceLevelDescriptor)
            {
                source.PerformanceLevelDescriptor = target.PerformanceLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetSupported)
                && target.PerformanceLevelMet != source.PerformanceLevelMet)
            {
                target.PerformanceLevelMet = source.PerformanceLevelMet;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAssessmentPerformanceLevel source, IStudentAssessmentPerformanceLevel target, Action<IStudentAssessmentPerformanceLevel, IStudentAssessmentPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as IStudentAssessmentPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPerformanceLevelMetSupported)
                target.PerformanceLevelMet = source.PerformanceLevelMet;
            else
                targetSynchSupport.IsPerformanceLevelMetSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAssessmentPerformanceLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPerformanceLevelMetSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentScoreResultMapper 
    {
        public static bool SynchronizeTo(this IStudentAssessmentScoreResult source, IStudentAssessmentScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAssessmentScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultSupported)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAssessmentScoreResult source, IStudentAssessmentScoreResult target, Action<IStudentAssessmentScoreResult, IStudentAssessmentScoreResult> onMapped)
        {
            var sourceSynchSupport = source as IStudentAssessmentScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAssessmentScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultSupported)
                target.Result = source.Result;
            else
                targetSynchSupport.IsResultSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAssessmentScoreResultSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsResultSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentStudentObjectiveAssessmentMapper 
    {
        public static bool SynchronizeTo(this IStudentAssessmentStudentObjectiveAssessment source, IStudentAssessmentStudentObjectiveAssessment target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationCode != target.IdentificationCode)
            {
                source.IdentificationCode = target.IdentificationCode;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported)
            {
                isModified |= 
                    source.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels.SynchronizeCollectionTo(
                        target.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels, 
                        onChildAdded: child => 
                            {
                                child.StudentAssessmentStudentObjectiveAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported)
            {
                isModified |= 
                    source.StudentAssessmentStudentObjectiveAssessmentScoreResults.SynchronizeCollectionTo(
                        target.StudentAssessmentStudentObjectiveAssessmentScoreResults, 
                        onChildAdded: child => 
                            {
                                child.StudentAssessmentStudentObjectiveAssessment = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAssessmentStudentObjectiveAssessment source, IStudentAssessmentStudentObjectiveAssessment target, Action<IStudentAssessmentStudentObjectiveAssessment, IStudentAssessmentStudentObjectiveAssessment> onMapped)
        {
            var sourceSynchSupport = source as IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationCode = source.IdentificationCode;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ObjectiveAssessmentResourceId = source.ObjectiveAssessmentResourceId;
                target.ObjectiveAssessmentDiscriminator = source.ObjectiveAssessmentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported)
            {    
                targetSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded = sourceSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded;
                source.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels.MapCollectionTo(target.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels, target);
            }
            else
            {
                targetSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported = false;
            }

            if (sourceSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported)
            {    
                targetSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded = sourceSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded;
                source.StudentAssessmentStudentObjectiveAssessmentScoreResults.MapCollectionTo(target.StudentAssessmentStudentObjectiveAssessmentScoreResults, target);
            }
            else
            {
                targetSynchSupport.IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAssessmentStudentObjectiveAssessmentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelsSupported { get; set; }
        bool IsStudentAssessmentStudentObjectiveAssessmentScoreResultsSupported { get; set; }
        Func<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, bool> IsStudentAssessmentStudentObjectiveAssessmentPerformanceLevelIncluded { get; set; }
        Func<IStudentAssessmentStudentObjectiveAssessmentScoreResult, bool> IsStudentAssessmentStudentObjectiveAssessmentScoreResultIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentStudentObjectiveAssessmentPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel source, IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAssessmentStudentObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }
            if (source.PerformanceLevelDescriptor != target.PerformanceLevelDescriptor)
            {
                source.PerformanceLevelDescriptor = target.PerformanceLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetSupported)
                && target.PerformanceLevelMet != source.PerformanceLevelMet)
            {
                target.PerformanceLevelMet = source.PerformanceLevelMet;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel source, IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel target, Action<IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, IStudentAssessmentStudentObjectiveAssessmentPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as IStudentAssessmentStudentObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAssessmentStudentObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPerformanceLevelMetSupported)
                target.PerformanceLevelMet = source.PerformanceLevelMet;
            else
                targetSynchSupport.IsPerformanceLevelMetSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAssessmentStudentObjectiveAssessmentPerformanceLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPerformanceLevelMetSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentAssessmentStudentObjectiveAssessmentScoreResultMapper 
    {
        public static bool SynchronizeTo(this IStudentAssessmentStudentObjectiveAssessmentScoreResult source, IStudentAssessmentStudentObjectiveAssessmentScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentAssessmentStudentObjectiveAssessmentScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultSupported)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentAssessmentStudentObjectiveAssessmentScoreResult source, IStudentAssessmentStudentObjectiveAssessmentScoreResult target, Action<IStudentAssessmentStudentObjectiveAssessmentScoreResult, IStudentAssessmentStudentObjectiveAssessmentScoreResult> onMapped)
        {
            var sourceSynchSupport = source as IStudentAssessmentStudentObjectiveAssessmentScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentAssessmentStudentObjectiveAssessmentScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultSupported)
                target.Result = source.Result;
            else
                targetSynchSupport.IsResultSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentAssessmentStudentObjectiveAssessmentScoreResultSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsResultSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StudentCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StudentCharacteristicDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentCharacteristicDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStudentCharacteristicDescriptor source, IStudentCharacteristicDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCharacteristicDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentCharacteristicDescriptorId != target.StudentCharacteristicDescriptorId)
            {
                source.StudentCharacteristicDescriptorId = target.StudentCharacteristicDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStudentCharacteristicDescriptor source, IStudentCharacteristicDescriptor target, Action<IStudentCharacteristicDescriptor, IStudentCharacteristicDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStudentCharacteristicDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCharacteristicDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentCharacteristicDescriptorId = source.StudentCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCharacteristicDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StudentCohortAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentCohortAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentCohortAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentCohortAssociation source, IStudentCohortAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCohortAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.CohortIdentifier != target.CohortIdentifier)
            {
                source.CohortIdentifier = target.CohortIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentCohortAssociationSectionsSupported)
            {
                isModified |= 
                    source.StudentCohortAssociationSections.SynchronizeCollectionTo(
                        target.StudentCohortAssociationSections, 
                        onChildAdded: child => 
                            {
                                child.StudentCohortAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentCohortAssociationSectionIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentCohortAssociation source, IStudentCohortAssociation target, Action<IStudentCohortAssociation, IStudentCohortAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentCohortAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCohortAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.CohortIdentifier = source.CohortIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CohortResourceId = source.CohortResourceId;
                target.CohortDiscriminator = source.CohortDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentCohortAssociationSectionsSupported)
            {    
                targetSynchSupport.IsStudentCohortAssociationSectionIncluded = sourceSynchSupport.IsStudentCohortAssociationSectionIncluded;
                source.StudentCohortAssociationSections.MapCollectionTo(target.StudentCohortAssociationSections, target);
            }
            else
            {
                targetSynchSupport.IsStudentCohortAssociationSectionsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCohortAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsStudentCohortAssociationSectionsSupported { get; set; }
        Func<IStudentCohortAssociationSection, bool> IsStudentCohortAssociationSectionIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentCohortAssociationSectionMapper 
    {
        public static bool SynchronizeTo(this IStudentCohortAssociationSection source, IStudentCohortAssociationSection target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCohortAssociationSectionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentCohortAssociationSection source, IStudentCohortAssociationSection target, Action<IStudentCohortAssociationSection, IStudentCohortAssociationSection> onMapped)
        {
            var sourceSynchSupport = source as IStudentCohortAssociationSectionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCohortAssociationSectionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCohortAssociationSectionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StudentCompetencyObjective

namespace EdFi.Ods.Entities.Common.EdFi //.StudentCompetencyObjectiveAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentCompetencyObjectiveMapper 
    {
        public static bool SynchronizeTo(this IStudentCompetencyObjective source, IStudentCompetencyObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCompetencyObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradingPeriodDescriptor != target.GradingPeriodDescriptor)
            {
                source.GradingPeriodDescriptor = target.GradingPeriodDescriptor;
            }
            if (source.GradingPeriodSchoolId != target.GradingPeriodSchoolId)
            {
                source.GradingPeriodSchoolId = target.GradingPeriodSchoolId;
            }
            if (source.GradingPeriodSchoolYear != target.GradingPeriodSchoolYear)
            {
                source.GradingPeriodSchoolYear = target.GradingPeriodSchoolYear;
            }
            if (source.GradingPeriodSequence != target.GradingPeriodSequence)
            {
                source.GradingPeriodSequence = target.GradingPeriodSequence;
            }
            if (source.Objective != target.Objective)
            {
                source.Objective = target.Objective;
            }
            if (source.ObjectiveEducationOrganizationId != target.ObjectiveEducationOrganizationId)
            {
                source.ObjectiveEducationOrganizationId = target.ObjectiveEducationOrganizationId;
            }
            if (source.ObjectiveGradeLevelDescriptor != target.ObjectiveGradeLevelDescriptor)
            {
                source.ObjectiveGradeLevelDescriptor = target.ObjectiveGradeLevelDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCompetencyLevelDescriptorSupported)
                && target.CompetencyLevelDescriptor != source.CompetencyLevelDescriptor)
            {
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiagnosticStatementSupported)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported)
            {
                isModified |= 
                    source.StudentCompetencyObjectiveGeneralStudentProgramAssociations.SynchronizeCollectionTo(
                        target.StudentCompetencyObjectiveGeneralStudentProgramAssociations, 
                        onChildAdded: child => 
                            {
                                child.StudentCompetencyObjective = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentCompetencyObjectiveStudentSectionAssociationsSupported)
            {
                isModified |= 
                    source.StudentCompetencyObjectiveStudentSectionAssociations.SynchronizeCollectionTo(
                        target.StudentCompetencyObjectiveStudentSectionAssociations, 
                        onChildAdded: child => 
                            {
                                child.StudentCompetencyObjective = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentCompetencyObjectiveStudentSectionAssociationIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentCompetencyObjective source, IStudentCompetencyObjective target, Action<IStudentCompetencyObjective, IStudentCompetencyObjective> onMapped)
        {
            var sourceSynchSupport = source as IStudentCompetencyObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCompetencyObjectiveSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodSchoolId = source.GradingPeriodSchoolId;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;
            target.GradingPeriodSequence = source.GradingPeriodSequence;
            target.Objective = source.Objective;
            target.ObjectiveEducationOrganizationId = source.ObjectiveEducationOrganizationId;
            target.ObjectiveGradeLevelDescriptor = source.ObjectiveGradeLevelDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCompetencyLevelDescriptorSupported)
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;
            else
                targetSynchSupport.IsCompetencyLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsDiagnosticStatementSupported)
                target.DiagnosticStatement = source.DiagnosticStatement;
            else
                targetSynchSupport.IsDiagnosticStatementSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.ObjectiveCompetencyObjectiveResourceId = source.ObjectiveCompetencyObjectiveResourceId;
                target.ObjectiveCompetencyObjectiveDiscriminator = source.ObjectiveCompetencyObjectiveDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported)
            {    
                targetSynchSupport.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded = sourceSynchSupport.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded;
                source.StudentCompetencyObjectiveGeneralStudentProgramAssociations.MapCollectionTo(target.StudentCompetencyObjectiveGeneralStudentProgramAssociations, target);
            }
            else
            {
                targetSynchSupport.IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported = false;
            }

            if (sourceSynchSupport.IsStudentCompetencyObjectiveStudentSectionAssociationsSupported)
            {    
                targetSynchSupport.IsStudentCompetencyObjectiveStudentSectionAssociationIncluded = sourceSynchSupport.IsStudentCompetencyObjectiveStudentSectionAssociationIncluded;
                source.StudentCompetencyObjectiveStudentSectionAssociations.MapCollectionTo(target.StudentCompetencyObjectiveStudentSectionAssociations, target);
            }
            else
            {
                targetSynchSupport.IsStudentCompetencyObjectiveStudentSectionAssociationsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCompetencyObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCompetencyLevelDescriptorSupported { get; set; }
        bool IsDiagnosticStatementSupported { get; set; }
        bool IsStudentCompetencyObjectiveGeneralStudentProgramAssociationsSupported { get; set; }
        bool IsStudentCompetencyObjectiveStudentSectionAssociationsSupported { get; set; }
        Func<IStudentCompetencyObjectiveGeneralStudentProgramAssociation, bool> IsStudentCompetencyObjectiveGeneralStudentProgramAssociationIncluded { get; set; }
        Func<IStudentCompetencyObjectiveStudentSectionAssociation, bool> IsStudentCompetencyObjectiveStudentSectionAssociationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentCompetencyObjectiveGeneralStudentProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentCompetencyObjectiveGeneralStudentProgramAssociation source, IStudentCompetencyObjectiveGeneralStudentProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCompetencyObjectiveGeneralStudentProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentCompetencyObjectiveGeneralStudentProgramAssociation source, IStudentCompetencyObjectiveGeneralStudentProgramAssociation target, Action<IStudentCompetencyObjectiveGeneralStudentProgramAssociation, IStudentCompetencyObjectiveGeneralStudentProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentCompetencyObjectiveGeneralStudentProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCompetencyObjectiveGeneralStudentProgramAssociationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GeneralStudentProgramAssociationResourceId = source.GeneralStudentProgramAssociationResourceId;
                target.GeneralStudentProgramAssociationDiscriminator = source.GeneralStudentProgramAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCompetencyObjectiveGeneralStudentProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentCompetencyObjectiveStudentSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentCompetencyObjectiveStudentSectionAssociation source, IStudentCompetencyObjectiveStudentSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCompetencyObjectiveStudentSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentCompetencyObjectiveStudentSectionAssociation source, IStudentCompetencyObjectiveStudentSectionAssociation target, Action<IStudentCompetencyObjectiveStudentSectionAssociation, IStudentCompetencyObjectiveStudentSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentCompetencyObjectiveStudentSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCompetencyObjectiveStudentSectionAssociationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentSectionAssociationResourceId = source.StudentSectionAssociationResourceId;
                target.StudentSectionAssociationDiscriminator = source.StudentSectionAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCompetencyObjectiveStudentSectionAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StudentCTEProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentCTEProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentCTEProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentCTEProgramAssociation source, IStudentCTEProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCTEProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNonTraditionalGenderStatusSupported)
                && target.NonTraditionalGenderStatus != source.NonTraditionalGenderStatus)
            {
                target.NonTraditionalGenderStatus = source.NonTraditionalGenderStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrivateCTEProgramSupported)
                && target.PrivateCTEProgram != source.PrivateCTEProgram)
            {
                target.PrivateCTEProgram = source.PrivateCTEProgram;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTechnicalSkillsAssessmentDescriptorSupported)
                && target.TechnicalSkillsAssessmentDescriptor != source.TechnicalSkillsAssessmentDescriptor)
            {
                target.TechnicalSkillsAssessmentDescriptor = source.TechnicalSkillsAssessmentDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentCTEProgramAssociationCTEProgramsSupported)
            {
                isModified |= 
                    source.StudentCTEProgramAssociationCTEPrograms.SynchronizeCollectionTo(
                        target.StudentCTEProgramAssociationCTEPrograms, 
                        onChildAdded: child => 
                            {
                                child.StudentCTEProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentCTEProgramAssociationCTEProgramIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentCTEProgramAssociationCTEProgramServicesSupported)
            {
                isModified |= 
                    source.StudentCTEProgramAssociationCTEProgramServices.SynchronizeCollectionTo(
                        target.StudentCTEProgramAssociationCTEProgramServices, 
                        onChildAdded: child => 
                            {
                                child.StudentCTEProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentCTEProgramAssociationCTEProgramServiceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentCTEProgramAssociationServicesSupported)
            {
                isModified |= 
                    source.StudentCTEProgramAssociationServices.SynchronizeCollectionTo(
                        target.StudentCTEProgramAssociationServices, 
                        onChildAdded: child => 
                            {
                                child.StudentCTEProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentCTEProgramAssociationServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentCTEProgramAssociation source, IStudentCTEProgramAssociation target, Action<IStudentCTEProgramAssociation, IStudentCTEProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentCTEProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCTEProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsNonTraditionalGenderStatusSupported)
                target.NonTraditionalGenderStatus = source.NonTraditionalGenderStatus;
            else
                targetSynchSupport.IsNonTraditionalGenderStatusSupported = false;

            if (sourceSynchSupport.IsPrivateCTEProgramSupported)
                target.PrivateCTEProgram = source.PrivateCTEProgram;
            else
                targetSynchSupport.IsPrivateCTEProgramSupported = false;

            if (sourceSynchSupport.IsTechnicalSkillsAssessmentDescriptorSupported)
                target.TechnicalSkillsAssessmentDescriptor = source.TechnicalSkillsAssessmentDescriptor;
            else
                targetSynchSupport.IsTechnicalSkillsAssessmentDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentCTEProgramAssociationCTEProgramsSupported)
            {    
                targetSynchSupport.IsStudentCTEProgramAssociationCTEProgramIncluded = sourceSynchSupport.IsStudentCTEProgramAssociationCTEProgramIncluded;
                source.StudentCTEProgramAssociationCTEPrograms.MapCollectionTo(target.StudentCTEProgramAssociationCTEPrograms, target);
            }
            else
            {
                targetSynchSupport.IsStudentCTEProgramAssociationCTEProgramsSupported = false;
            }

            if (sourceSynchSupport.IsStudentCTEProgramAssociationCTEProgramServicesSupported)
            {    
                targetSynchSupport.IsStudentCTEProgramAssociationCTEProgramServiceIncluded = sourceSynchSupport.IsStudentCTEProgramAssociationCTEProgramServiceIncluded;
                source.StudentCTEProgramAssociationCTEProgramServices.MapCollectionTo(target.StudentCTEProgramAssociationCTEProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentCTEProgramAssociationCTEProgramServicesSupported = false;
            }

            if (sourceSynchSupport.IsStudentCTEProgramAssociationServicesSupported)
            {    
                targetSynchSupport.IsStudentCTEProgramAssociationServiceIncluded = sourceSynchSupport.IsStudentCTEProgramAssociationServiceIncluded;
                source.StudentCTEProgramAssociationServices.MapCollectionTo(target.StudentCTEProgramAssociationServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentCTEProgramAssociationServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCTEProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsNonTraditionalGenderStatusSupported { get; set; }
        bool IsPrivateCTEProgramSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsStudentCTEProgramAssociationCTEProgramsSupported { get; set; }
        bool IsStudentCTEProgramAssociationCTEProgramServicesSupported { get; set; }
        bool IsStudentCTEProgramAssociationServicesSupported { get; set; }
        bool IsTechnicalSkillsAssessmentDescriptorSupported { get; set; }
        Func<IStudentCTEProgramAssociationCTEProgram, bool> IsStudentCTEProgramAssociationCTEProgramIncluded { get; set; }
        Func<IStudentCTEProgramAssociationCTEProgramService, bool> IsStudentCTEProgramAssociationCTEProgramServiceIncluded { get; set; }
        Func<IStudentCTEProgramAssociationService, bool> IsStudentCTEProgramAssociationServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentCTEProgramAssociationCTEProgramMapper 
    {
        public static bool SynchronizeTo(this IStudentCTEProgramAssociationCTEProgram source, IStudentCTEProgramAssociationCTEProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCTEProgramAssociationCTEProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CareerPathwayDescriptor != target.CareerPathwayDescriptor)
            {
                source.CareerPathwayDescriptor = target.CareerPathwayDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCIPCodeSupported)
                && target.CIPCode != source.CIPCode)
            {
                target.CIPCode = source.CIPCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCTEProgramCompletionIndicatorSupported)
                && target.CTEProgramCompletionIndicator != source.CTEProgramCompletionIndicator)
            {
                target.CTEProgramCompletionIndicator = source.CTEProgramCompletionIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryCTEProgramIndicatorSupported)
                && target.PrimaryCTEProgramIndicator != source.PrimaryCTEProgramIndicator)
            {
                target.PrimaryCTEProgramIndicator = source.PrimaryCTEProgramIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentCTEProgramAssociationCTEProgram source, IStudentCTEProgramAssociationCTEProgram target, Action<IStudentCTEProgramAssociationCTEProgram, IStudentCTEProgramAssociationCTEProgram> onMapped)
        {
            var sourceSynchSupport = source as IStudentCTEProgramAssociationCTEProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCTEProgramAssociationCTEProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CareerPathwayDescriptor = source.CareerPathwayDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCIPCodeSupported)
                target.CIPCode = source.CIPCode;
            else
                targetSynchSupport.IsCIPCodeSupported = false;

            if (sourceSynchSupport.IsCTEProgramCompletionIndicatorSupported)
                target.CTEProgramCompletionIndicator = source.CTEProgramCompletionIndicator;
            else
                targetSynchSupport.IsCTEProgramCompletionIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryCTEProgramIndicatorSupported)
                target.PrimaryCTEProgramIndicator = source.PrimaryCTEProgramIndicator;
            else
                targetSynchSupport.IsPrimaryCTEProgramIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCTEProgramAssociationCTEProgramSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCIPCodeSupported { get; set; }
        bool IsCTEProgramCompletionIndicatorSupported { get; set; }
        bool IsPrimaryCTEProgramIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentCTEProgramAssociationCTEProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentCTEProgramAssociationCTEProgramService source, IStudentCTEProgramAssociationCTEProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCTEProgramAssociationCTEProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CTEProgramServiceDescriptor != target.CTEProgramServiceDescriptor)
            {
                source.CTEProgramServiceDescriptor = target.CTEProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCIPCodeSupported)
                && target.CIPCode != source.CIPCode)
            {
                target.CIPCode = source.CIPCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentCTEProgramAssociationCTEProgramService source, IStudentCTEProgramAssociationCTEProgramService target, Action<IStudentCTEProgramAssociationCTEProgramService, IStudentCTEProgramAssociationCTEProgramService> onMapped)
        {
            var sourceSynchSupport = source as IStudentCTEProgramAssociationCTEProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCTEProgramAssociationCTEProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CTEProgramServiceDescriptor = source.CTEProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCIPCodeSupported)
                target.CIPCode = source.CIPCode;
            else
                targetSynchSupport.IsCIPCodeSupported = false;

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCTEProgramAssociationCTEProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCIPCodeSupported { get; set; }
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentCTEProgramAssociationServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentCTEProgramAssociationService source, IStudentCTEProgramAssociationService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentCTEProgramAssociationServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ServiceDescriptor != target.ServiceDescriptor)
            {
                source.ServiceDescriptor = target.ServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentCTEProgramAssociationService source, IStudentCTEProgramAssociationService target, Action<IStudentCTEProgramAssociationService, IStudentCTEProgramAssociationService> onMapped)
        {
            var sourceSynchSupport = source as IStudentCTEProgramAssociationServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentCTEProgramAssociationServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ServiceDescriptor = source.ServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentCTEProgramAssociationServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
}
// Aggregate: StudentDisciplineIncidentAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentDisciplineIncidentAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentDisciplineIncidentAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentDisciplineIncidentAssociation source, IStudentDisciplineIncidentAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentDisciplineIncidentAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IncidentIdentifier != target.IncidentIdentifier)
            {
                source.IncidentIdentifier = target.IncidentIdentifier;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsStudentParticipationCodeDescriptorSupported)
                && target.StudentParticipationCodeDescriptor != source.StudentParticipationCodeDescriptor)
            {
                target.StudentParticipationCodeDescriptor = source.StudentParticipationCodeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentDisciplineIncidentAssociationBehaviorsSupported)
            {
                isModified |= 
                    source.StudentDisciplineIncidentAssociationBehaviors.SynchronizeCollectionTo(
                        target.StudentDisciplineIncidentAssociationBehaviors, 
                        onChildAdded: child => 
                            {
                                child.StudentDisciplineIncidentAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentDisciplineIncidentAssociationBehaviorIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentDisciplineIncidentAssociation source, IStudentDisciplineIncidentAssociation target, Action<IStudentDisciplineIncidentAssociation, IStudentDisciplineIncidentAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentDisciplineIncidentAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentDisciplineIncidentAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.IncidentIdentifier = source.IncidentIdentifier;
            target.SchoolId = source.SchoolId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsStudentParticipationCodeDescriptorSupported)
                target.StudentParticipationCodeDescriptor = source.StudentParticipationCodeDescriptor;
            else
                targetSynchSupport.IsStudentParticipationCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.DisciplineIncidentResourceId = source.DisciplineIncidentResourceId;
                target.DisciplineIncidentDiscriminator = source.DisciplineIncidentDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentDisciplineIncidentAssociationBehaviorsSupported)
            {    
                targetSynchSupport.IsStudentDisciplineIncidentAssociationBehaviorIncluded = sourceSynchSupport.IsStudentDisciplineIncidentAssociationBehaviorIncluded;
                source.StudentDisciplineIncidentAssociationBehaviors.MapCollectionTo(target.StudentDisciplineIncidentAssociationBehaviors, target);
            }
            else
            {
                targetSynchSupport.IsStudentDisciplineIncidentAssociationBehaviorsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentDisciplineIncidentAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsStudentDisciplineIncidentAssociationBehaviorsSupported { get; set; }
        bool IsStudentParticipationCodeDescriptorSupported { get; set; }
        Func<IStudentDisciplineIncidentAssociationBehavior, bool> IsStudentDisciplineIncidentAssociationBehaviorIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentDisciplineIncidentAssociationBehaviorMapper 
    {
        public static bool SynchronizeTo(this IStudentDisciplineIncidentAssociationBehavior source, IStudentDisciplineIncidentAssociationBehavior target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentDisciplineIncidentAssociationBehaviorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BehaviorDescriptor != target.BehaviorDescriptor)
            {
                source.BehaviorDescriptor = target.BehaviorDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBehaviorDetailedDescriptionSupported)
                && target.BehaviorDetailedDescription != source.BehaviorDetailedDescription)
            {
                target.BehaviorDetailedDescription = source.BehaviorDetailedDescription;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentDisciplineIncidentAssociationBehavior source, IStudentDisciplineIncidentAssociationBehavior target, Action<IStudentDisciplineIncidentAssociationBehavior, IStudentDisciplineIncidentAssociationBehavior> onMapped)
        {
            var sourceSynchSupport = source as IStudentDisciplineIncidentAssociationBehaviorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentDisciplineIncidentAssociationBehaviorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BehaviorDescriptor = source.BehaviorDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBehaviorDetailedDescriptionSupported)
                target.BehaviorDetailedDescription = source.BehaviorDetailedDescription;
            else
                targetSynchSupport.IsBehaviorDetailedDescriptionSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentDisciplineIncidentAssociationBehaviorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBehaviorDetailedDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StudentEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentEducationOrganizationAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociation source, IStudentEducationOrganizationAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLimitedEnglishProficiencyDescriptorSupported)
                && target.LimitedEnglishProficiencyDescriptor != source.LimitedEnglishProficiencyDescriptor)
            {
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLoginIdSupported)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOldEthnicityDescriptorSupported)
                && target.OldEthnicityDescriptor != source.OldEthnicityDescriptor)
            {
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfileThumbnailSupported)
                && target.ProfileThumbnail != source.ProfileThumbnail)
            {
                target.ProfileThumbnail = source.ProfileThumbnail;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationAddressesSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationAddresses.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationAddresses, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationCohortYearsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationCohortYears.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationCohortYears, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationCohortYearIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationDisabilitiesSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationDisabilities.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationDisabilities, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationElectronicMailsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationElectronicMails.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationElectronicMails, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationInternationalAddressesSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationInternationalAddresses.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationInternationalAddresses, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationLanguagesSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationLanguages.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationLanguages, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationProgramParticipationsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationProgramParticipations.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationProgramParticipations, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationProgramParticipationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationRacesSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationRaces.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationRaces, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationStudentCharacteristics.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationStudentIdentificationCodes.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationStudentIndicatorsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationStudentIndicators.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentIndicators, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationStudentIndicatorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationTelephonesSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationTelephones.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationTelephones, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationTribalAffiliationsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationTribalAffiliations.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationTribalAffiliations, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationTribalAffiliationIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociation source, IStudentEducationOrganizationAssociation target, Action<IStudentEducationOrganizationAssociation, IStudentEducationOrganizationAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLimitedEnglishProficiencyDescriptorSupported)
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
            else
                targetSynchSupport.IsLimitedEnglishProficiencyDescriptorSupported = false;

            if (sourceSynchSupport.IsLoginIdSupported)
                target.LoginId = source.LoginId;
            else
                targetSynchSupport.IsLoginIdSupported = false;

            if (sourceSynchSupport.IsOldEthnicityDescriptorSupported)
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
            else
                targetSynchSupport.IsOldEthnicityDescriptorSupported = false;

            if (sourceSynchSupport.IsProfileThumbnailSupported)
                target.ProfileThumbnail = source.ProfileThumbnail;
            else
                targetSynchSupport.IsProfileThumbnailSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationAddressesSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationAddressIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationAddressIncluded;
                source.StudentEducationOrganizationAssociationAddresses.MapCollectionTo(target.StudentEducationOrganizationAssociationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationCohortYearsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationCohortYearIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationCohortYearIncluded;
                source.StudentEducationOrganizationAssociationCohortYears.MapCollectionTo(target.StudentEducationOrganizationAssociationCohortYears, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationCohortYearsSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationDisabilitiesSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationDisabilityIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationDisabilityIncluded;
                source.StudentEducationOrganizationAssociationDisabilities.MapCollectionTo(target.StudentEducationOrganizationAssociationDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationElectronicMailsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationElectronicMailIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationElectronicMailIncluded;
                source.StudentEducationOrganizationAssociationElectronicMails.MapCollectionTo(target.StudentEducationOrganizationAssociationElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationInternationalAddressesSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationInternationalAddressIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationInternationalAddressIncluded;
                source.StudentEducationOrganizationAssociationInternationalAddresses.MapCollectionTo(target.StudentEducationOrganizationAssociationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationLanguagesSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationLanguageIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationLanguageIncluded;
                source.StudentEducationOrganizationAssociationLanguages.MapCollectionTo(target.StudentEducationOrganizationAssociationLanguages, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationProgramParticipationsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationProgramParticipationIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationProgramParticipationIncluded;
                source.StudentEducationOrganizationAssociationProgramParticipations.MapCollectionTo(target.StudentEducationOrganizationAssociationProgramParticipations, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationProgramParticipationsSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationRacesSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationRaceIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationRaceIncluded;
                source.StudentEducationOrganizationAssociationRaces.MapCollectionTo(target.StudentEducationOrganizationAssociationRaces, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationRacesSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicIncluded;
                source.StudentEducationOrganizationAssociationStudentCharacteristics.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded;
                source.StudentEducationOrganizationAssociationStudentIdentificationCodes.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentIndicatorsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentIndicatorIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentIndicatorIncluded;
                source.StudentEducationOrganizationAssociationStudentIndicators.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentIndicators, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentIndicatorsSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationTelephonesSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationTelephoneIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationTelephoneIncluded;
                source.StudentEducationOrganizationAssociationTelephones.MapCollectionTo(target.StudentEducationOrganizationAssociationTelephones, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationTribalAffiliationsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationTribalAffiliationIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationTribalAffiliationIncluded;
                source.StudentEducationOrganizationAssociationTribalAffiliations.MapCollectionTo(target.StudentEducationOrganizationAssociationTribalAffiliations, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationTribalAffiliationsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLimitedEnglishProficiencyDescriptorSupported { get; set; }
        bool IsLoginIdSupported { get; set; }
        bool IsOldEthnicityDescriptorSupported { get; set; }
        bool IsProfileThumbnailSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationAddressesSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationCohortYearsSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationDisabilitiesSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationElectronicMailsSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationInternationalAddressesSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationLanguagesSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationProgramParticipationsSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationRacesSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationStudentCharacteristicsSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationStudentIdentificationCodesSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationStudentIndicatorsSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationTelephonesSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationTribalAffiliationsSupported { get; set; }
        Func<IStudentEducationOrganizationAssociationAddress, bool> IsStudentEducationOrganizationAssociationAddressIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationCohortYear, bool> IsStudentEducationOrganizationAssociationCohortYearIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationDisability, bool> IsStudentEducationOrganizationAssociationDisabilityIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationElectronicMail, bool> IsStudentEducationOrganizationAssociationElectronicMailIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationInternationalAddress, bool> IsStudentEducationOrganizationAssociationInternationalAddressIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationLanguage, bool> IsStudentEducationOrganizationAssociationLanguageIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationProgramParticipation, bool> IsStudentEducationOrganizationAssociationProgramParticipationIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationRace, bool> IsStudentEducationOrganizationAssociationRaceIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationStudentCharacteristic, bool> IsStudentEducationOrganizationAssociationStudentCharacteristicIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationStudentIdentificationCode, bool> IsStudentEducationOrganizationAssociationStudentIdentificationCodeIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationStudentIndicator, bool> IsStudentEducationOrganizationAssociationStudentIndicatorIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationTelephone, bool> IsStudentEducationOrganizationAssociationTelephoneIncluded { get; set; }
        Func<IStudentEducationOrganizationAssociationTribalAffiliation, bool> IsStudentEducationOrganizationAssociationTribalAffiliationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationAddressMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationAddress source, IStudentEducationOrganizationAssociationAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationAddressPeriodsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationAddressPeriods.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociationAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationAddressPeriodIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationAddress source, IStudentEducationOrganizationAssociationAddress target, Action<IStudentEducationOrganizationAssociationAddress, IStudentEducationOrganizationAssociationAddress> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationAddressPeriodsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationAddressPeriodIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationAddressPeriodIncluded;
                source.StudentEducationOrganizationAssociationAddressPeriods.MapCollectionTo(target.StudentEducationOrganizationAssociationAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationAddressPeriodsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        bool IsStudentEducationOrganizationAssociationAddressPeriodsSupported { get; set; }
        Func<IStudentEducationOrganizationAssociationAddressPeriod, bool> IsStudentEducationOrganizationAssociationAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationAddressPeriod source, IStudentEducationOrganizationAssociationAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationAddressPeriod source, IStudentEducationOrganizationAssociationAddressPeriod target, Action<IStudentEducationOrganizationAssociationAddressPeriod, IStudentEducationOrganizationAssociationAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationAddressPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationCohortYearMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationCohortYear source, IStudentEducationOrganizationAssociationCohortYear target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationCohortYearSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CohortYearTypeDescriptor != target.CohortYearTypeDescriptor)
            {
                source.CohortYearTypeDescriptor = target.CohortYearTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationCohortYear source, IStudentEducationOrganizationAssociationCohortYear target, Action<IStudentEducationOrganizationAssociationCohortYear, IStudentEducationOrganizationAssociationCohortYear> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationCohortYearSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationCohortYearSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CohortYearTypeDescriptor = source.CohortYearTypeDescriptor;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationCohortYearSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationDisabilityMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationDisability source, IStudentEducationOrganizationAssociationDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationDisabilityDesignations.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociationDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationDisabilityDesignationIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationDisability source, IStudentEducationOrganizationAssociationDisability target, Action<IStudentEducationOrganizationAssociationDisability, IStudentEducationOrganizationAssociationDisability> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationDisabilityDesignationIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationDisabilityDesignationIncluded;
                source.StudentEducationOrganizationAssociationDisabilityDesignations.MapCollectionTo(target.StudentEducationOrganizationAssociationDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationDisabilitySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        bool IsStudentEducationOrganizationAssociationDisabilityDesignationsSupported { get; set; }
        Func<IStudentEducationOrganizationAssociationDisabilityDesignation, bool> IsStudentEducationOrganizationAssociationDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationDisabilityDesignation source, IStudentEducationOrganizationAssociationDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationDisabilityDesignation source, IStudentEducationOrganizationAssociationDisabilityDesignation target, Action<IStudentEducationOrganizationAssociationDisabilityDesignation, IStudentEducationOrganizationAssociationDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationDisabilityDesignationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationElectronicMailMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationElectronicMail source, IStudentEducationOrganizationAssociationElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationElectronicMail source, IStudentEducationOrganizationAssociationElectronicMail target, Action<IStudentEducationOrganizationAssociationElectronicMail, IStudentEducationOrganizationAssociationElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationElectronicMailSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationInternationalAddressMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationInternationalAddress source, IStudentEducationOrganizationAssociationInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationInternationalAddress source, IStudentEducationOrganizationAssociationInternationalAddress target, Action<IStudentEducationOrganizationAssociationInternationalAddress, IStudentEducationOrganizationAssociationInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationInternationalAddressSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationLanguageMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationLanguage source, IStudentEducationOrganizationAssociationLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationLanguageUsesSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationLanguageUses.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociationLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationLanguageUseIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationLanguage source, IStudentEducationOrganizationAssociationLanguage target, Action<IStudentEducationOrganizationAssociationLanguage, IStudentEducationOrganizationAssociationLanguage> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationLanguageUsesSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationLanguageUseIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationLanguageUseIncluded;
                source.StudentEducationOrganizationAssociationLanguageUses.MapCollectionTo(target.StudentEducationOrganizationAssociationLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationLanguageUsesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationLanguageSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsStudentEducationOrganizationAssociationLanguageUsesSupported { get; set; }
        Func<IStudentEducationOrganizationAssociationLanguageUse, bool> IsStudentEducationOrganizationAssociationLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationLanguageUseMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationLanguageUse source, IStudentEducationOrganizationAssociationLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationLanguageUse source, IStudentEducationOrganizationAssociationLanguageUse target, Action<IStudentEducationOrganizationAssociationLanguageUse, IStudentEducationOrganizationAssociationLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationLanguageUseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationProgramParticipationMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationProgramParticipation source, IStudentEducationOrganizationAssociationProgramParticipation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationProgramParticipationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociationProgramParticipation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationProgramParticipation source, IStudentEducationOrganizationAssociationProgramParticipation target, Action<IStudentEducationOrganizationAssociationProgramParticipation, IStudentEducationOrganizationAssociationProgramParticipation> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationProgramParticipationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationProgramParticipationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicIncluded;
                source.StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics.MapCollectionTo(target.StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationProgramParticipationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicsSupported { get; set; }
        Func<IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic, bool> IsStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic source, IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramCharacteristicDescriptor != target.ProgramCharacteristicDescriptor)
            {
                source.ProgramCharacteristicDescriptor = target.ProgramCharacteristicDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic source, IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic target, Action<IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic, IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ProgramCharacteristicDescriptor = source.ProgramCharacteristicDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationRaceMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationRace source, IStudentEducationOrganizationAssociationRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationRace source, IStudentEducationOrganizationAssociationRace target, Action<IStudentEducationOrganizationAssociationRace, IStudentEducationOrganizationAssociationRace> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationRaceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentCharacteristicMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentCharacteristic source, IStudentEducationOrganizationAssociationStudentCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationStudentCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentCharacteristicDescriptor != target.StudentCharacteristicDescriptor)
            {
                source.StudentCharacteristicDescriptor = target.StudentCharacteristicDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationStudentCharacteristicPeriods.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentCharacteristicPeriods, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociationStudentCharacteristic = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationStudentCharacteristic source, IStudentEducationOrganizationAssociationStudentCharacteristic target, Action<IStudentEducationOrganizationAssociationStudentCharacteristic, IStudentEducationOrganizationAssociationStudentCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationStudentCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationStudentCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StudentCharacteristicDescriptor = source.StudentCharacteristicDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded;
                source.StudentEducationOrganizationAssociationStudentCharacteristicPeriods.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentCharacteristicPeriods, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentCharacteristicSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDesignatedBySupported { get; set; }
        bool IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodsSupported { get; set; }
        Func<IStudentEducationOrganizationAssociationStudentCharacteristicPeriod, bool> IsStudentEducationOrganizationAssociationStudentCharacteristicPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentCharacteristicPeriodMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentCharacteristicPeriod source, IStudentEducationOrganizationAssociationStudentCharacteristicPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationStudentCharacteristicPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationStudentCharacteristicPeriod source, IStudentEducationOrganizationAssociationStudentCharacteristicPeriod target, Action<IStudentEducationOrganizationAssociationStudentCharacteristicPeriod, IStudentEducationOrganizationAssociationStudentCharacteristicPeriod> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationStudentCharacteristicPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationStudentCharacteristicPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentCharacteristicPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentIdentificationCode source, IStudentEducationOrganizationAssociationStudentIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationStudentIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssigningOrganizationIdentificationCode != target.AssigningOrganizationIdentificationCode)
            {
                source.AssigningOrganizationIdentificationCode = target.AssigningOrganizationIdentificationCode;
            }
            if (source.StudentIdentificationSystemDescriptor != target.StudentIdentificationSystemDescriptor)
            {
                source.StudentIdentificationSystemDescriptor = target.StudentIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationStudentIdentificationCode source, IStudentEducationOrganizationAssociationStudentIdentificationCode target, Action<IStudentEducationOrganizationAssociationStudentIdentificationCode, IStudentEducationOrganizationAssociationStudentIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationStudentIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationStudentIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            target.StudentIdentificationSystemDescriptor = source.StudentIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentIdentificationCodeSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentIndicatorMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentIndicator source, IStudentEducationOrganizationAssociationStudentIndicator target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationStudentIndicatorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IndicatorName != target.IndicatorName)
            {
                source.IndicatorName = target.IndicatorName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorSupported)
                && target.Indicator != source.Indicator)
            {
                target.Indicator = source.Indicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorGroupSupported)
                && target.IndicatorGroup != source.IndicatorGroup)
            {
                target.IndicatorGroup = source.IndicatorGroup;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported)
            {
                isModified |= 
                    source.StudentEducationOrganizationAssociationStudentIndicatorPeriods.SynchronizeCollectionTo(
                        target.StudentEducationOrganizationAssociationStudentIndicatorPeriods, 
                        onChildAdded: child => 
                            {
                                child.StudentEducationOrganizationAssociationStudentIndicator = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationStudentIndicator source, IStudentEducationOrganizationAssociationStudentIndicator target, Action<IStudentEducationOrganizationAssociationStudentIndicator, IStudentEducationOrganizationAssociationStudentIndicator> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationStudentIndicatorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationStudentIndicatorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IndicatorName = source.IndicatorName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsIndicatorSupported)
                target.Indicator = source.Indicator;
            else
                targetSynchSupport.IsIndicatorSupported = false;

            if (sourceSynchSupport.IsIndicatorGroupSupported)
                target.IndicatorGroup = source.IndicatorGroup;
            else
                targetSynchSupport.IsIndicatorGroupSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported)
            {    
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded = sourceSynchSupport.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded;
                source.StudentEducationOrganizationAssociationStudentIndicatorPeriods.MapCollectionTo(target.StudentEducationOrganizationAssociationStudentIndicatorPeriods, target);
            }
            else
            {
                targetSynchSupport.IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentIndicatorSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDesignatedBySupported { get; set; }
        bool IsIndicatorSupported { get; set; }
        bool IsIndicatorGroupSupported { get; set; }
        bool IsStudentEducationOrganizationAssociationStudentIndicatorPeriodsSupported { get; set; }
        Func<IStudentEducationOrganizationAssociationStudentIndicatorPeriod, bool> IsStudentEducationOrganizationAssociationStudentIndicatorPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationStudentIndicatorPeriodMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationStudentIndicatorPeriod source, IStudentEducationOrganizationAssociationStudentIndicatorPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationStudentIndicatorPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationStudentIndicatorPeriod source, IStudentEducationOrganizationAssociationStudentIndicatorPeriod target, Action<IStudentEducationOrganizationAssociationStudentIndicatorPeriod, IStudentEducationOrganizationAssociationStudentIndicatorPeriod> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationStudentIndicatorPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationStudentIndicatorPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationStudentIndicatorPeriodSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationTelephoneMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationTelephone source, IStudentEducationOrganizationAssociationTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationTelephone source, IStudentEducationOrganizationAssociationTelephone target, Action<IStudentEducationOrganizationAssociationTelephone, IStudentEducationOrganizationAssociationTelephone> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationTelephoneSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationAssociationTribalAffiliationMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationAssociationTribalAffiliation source, IStudentEducationOrganizationAssociationTribalAffiliation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationAssociationTribalAffiliationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TribalAffiliationDescriptor != target.TribalAffiliationDescriptor)
            {
                source.TribalAffiliationDescriptor = target.TribalAffiliationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationAssociationTribalAffiliation source, IStudentEducationOrganizationAssociationTribalAffiliation target, Action<IStudentEducationOrganizationAssociationTribalAffiliation, IStudentEducationOrganizationAssociationTribalAffiliation> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationAssociationTribalAffiliationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationAssociationTribalAffiliationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TribalAffiliationDescriptor = source.TribalAffiliationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationTribalAffiliationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StudentEducationOrganizationResponsibilityAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentEducationOrganizationResponsibilityAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentEducationOrganizationResponsibilityAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentEducationOrganizationResponsibilityAssociation source, IStudentEducationOrganizationResponsibilityAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentEducationOrganizationResponsibilityAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ResponsibilityDescriptor != target.ResponsibilityDescriptor)
            {
                source.ResponsibilityDescriptor = target.ResponsibilityDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentEducationOrganizationResponsibilityAssociation source, IStudentEducationOrganizationResponsibilityAssociation target, Action<IStudentEducationOrganizationResponsibilityAssociation, IStudentEducationOrganizationResponsibilityAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentEducationOrganizationResponsibilityAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentEducationOrganizationResponsibilityAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ResponsibilityDescriptor = source.ResponsibilityDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentEducationOrganizationResponsibilityAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Entities.Common.EdFi //.StudentGradebookEntryAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentGradebookEntryMapper 
    {
        public static bool SynchronizeTo(this IStudentGradebookEntry source, IStudentGradebookEntry target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentGradebookEntrySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.DateAssigned != target.DateAssigned)
            {
                source.DateAssigned = target.DateAssigned;
            }
            if (source.GradebookEntryTitle != target.GradebookEntryTitle)
            {
                source.GradebookEntryTitle = target.GradebookEntryTitle;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCompetencyLevelDescriptorSupported)
                && target.CompetencyLevelDescriptor != source.CompetencyLevelDescriptor)
            {
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateFulfilledSupported)
                && target.DateFulfilled != source.DateFulfilled)
            {
                target.DateFulfilled = source.DateFulfilled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiagnosticStatementSupported)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLetterGradeEarnedSupported)
                && target.LetterGradeEarned != source.LetterGradeEarned)
            {
                target.LetterGradeEarned = source.LetterGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericGradeEarnedSupported)
                && target.NumericGradeEarned != source.NumericGradeEarned)
            {
                target.NumericGradeEarned = source.NumericGradeEarned;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentGradebookEntry source, IStudentGradebookEntry target, Action<IStudentGradebookEntry, IStudentGradebookEntry> onMapped)
        {
            var sourceSynchSupport = source as IStudentGradebookEntrySynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentGradebookEntrySynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.DateAssigned = source.DateAssigned;
            target.GradebookEntryTitle = source.GradebookEntryTitle;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCompetencyLevelDescriptorSupported)
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;
            else
                targetSynchSupport.IsCompetencyLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsDateFulfilledSupported)
                target.DateFulfilled = source.DateFulfilled;
            else
                targetSynchSupport.IsDateFulfilledSupported = false;

            if (sourceSynchSupport.IsDiagnosticStatementSupported)
                target.DiagnosticStatement = source.DiagnosticStatement;
            else
                targetSynchSupport.IsDiagnosticStatementSupported = false;

            if (sourceSynchSupport.IsLetterGradeEarnedSupported)
                target.LetterGradeEarned = source.LetterGradeEarned;
            else
                targetSynchSupport.IsLetterGradeEarnedSupported = false;

            if (sourceSynchSupport.IsNumericGradeEarnedSupported)
                target.NumericGradeEarned = source.NumericGradeEarned;
            else
                targetSynchSupport.IsNumericGradeEarnedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradebookEntryResourceId = source.GradebookEntryResourceId;
                target.GradebookEntryDiscriminator = source.GradebookEntryDiscriminator;
                target.StudentSectionAssociationResourceId = source.StudentSectionAssociationResourceId;
                target.StudentSectionAssociationDiscriminator = source.StudentSectionAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentGradebookEntrySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCompetencyLevelDescriptorSupported { get; set; }
        bool IsDateFulfilledSupported { get; set; }
        bool IsDiagnosticStatementSupported { get; set; }
        bool IsLetterGradeEarnedSupported { get; set; }
        bool IsNumericGradeEarnedSupported { get; set; }
    }
 
}
// Aggregate: StudentHomelessProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentHomelessProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentHomelessProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentHomelessProgramAssociation source, IStudentHomelessProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentHomelessProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAwaitingFosterCareSupported)
                && target.AwaitingFosterCare != source.AwaitingFosterCare)
            {
                target.AwaitingFosterCare = source.AwaitingFosterCare;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHomelessPrimaryNighttimeResidenceDescriptorSupported)
                && target.HomelessPrimaryNighttimeResidenceDescriptor != source.HomelessPrimaryNighttimeResidenceDescriptor)
            {
                target.HomelessPrimaryNighttimeResidenceDescriptor = source.HomelessPrimaryNighttimeResidenceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHomelessUnaccompaniedYouthSupported)
                && target.HomelessUnaccompaniedYouth != source.HomelessUnaccompaniedYouth)
            {
                target.HomelessUnaccompaniedYouth = source.HomelessUnaccompaniedYouth;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentHomelessProgramAssociationHomelessProgramServicesSupported)
            {
                isModified |= 
                    source.StudentHomelessProgramAssociationHomelessProgramServices.SynchronizeCollectionTo(
                        target.StudentHomelessProgramAssociationHomelessProgramServices, 
                        onChildAdded: child => 
                            {
                                child.StudentHomelessProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentHomelessProgramAssociationHomelessProgramServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentHomelessProgramAssociation source, IStudentHomelessProgramAssociation target, Action<IStudentHomelessProgramAssociation, IStudentHomelessProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentHomelessProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentHomelessProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAwaitingFosterCareSupported)
                target.AwaitingFosterCare = source.AwaitingFosterCare;
            else
                targetSynchSupport.IsAwaitingFosterCareSupported = false;

            if (sourceSynchSupport.IsHomelessPrimaryNighttimeResidenceDescriptorSupported)
                target.HomelessPrimaryNighttimeResidenceDescriptor = source.HomelessPrimaryNighttimeResidenceDescriptor;
            else
                targetSynchSupport.IsHomelessPrimaryNighttimeResidenceDescriptorSupported = false;

            if (sourceSynchSupport.IsHomelessUnaccompaniedYouthSupported)
                target.HomelessUnaccompaniedYouth = source.HomelessUnaccompaniedYouth;
            else
                targetSynchSupport.IsHomelessUnaccompaniedYouthSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentHomelessProgramAssociationHomelessProgramServicesSupported)
            {    
                targetSynchSupport.IsStudentHomelessProgramAssociationHomelessProgramServiceIncluded = sourceSynchSupport.IsStudentHomelessProgramAssociationHomelessProgramServiceIncluded;
                source.StudentHomelessProgramAssociationHomelessProgramServices.MapCollectionTo(target.StudentHomelessProgramAssociationHomelessProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentHomelessProgramAssociationHomelessProgramServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentHomelessProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAwaitingFosterCareSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsHomelessPrimaryNighttimeResidenceDescriptorSupported { get; set; }
        bool IsHomelessUnaccompaniedYouthSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsStudentHomelessProgramAssociationHomelessProgramServicesSupported { get; set; }
        Func<IStudentHomelessProgramAssociationHomelessProgramService, bool> IsStudentHomelessProgramAssociationHomelessProgramServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentHomelessProgramAssociationHomelessProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentHomelessProgramAssociationHomelessProgramService source, IStudentHomelessProgramAssociationHomelessProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentHomelessProgramAssociationHomelessProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HomelessProgramServiceDescriptor != target.HomelessProgramServiceDescriptor)
            {
                source.HomelessProgramServiceDescriptor = target.HomelessProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentHomelessProgramAssociationHomelessProgramService source, IStudentHomelessProgramAssociationHomelessProgramService target, Action<IStudentHomelessProgramAssociationHomelessProgramService, IStudentHomelessProgramAssociationHomelessProgramService> onMapped)
        {
            var sourceSynchSupport = source as IStudentHomelessProgramAssociationHomelessProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentHomelessProgramAssociationHomelessProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.HomelessProgramServiceDescriptor = source.HomelessProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentHomelessProgramAssociationHomelessProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
}
// Aggregate: StudentIdentificationSystemDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StudentIdentificationSystemDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentIdentificationSystemDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStudentIdentificationSystemDescriptor source, IStudentIdentificationSystemDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentIdentificationSystemDescriptorId != target.StudentIdentificationSystemDescriptorId)
            {
                source.StudentIdentificationSystemDescriptorId = target.StudentIdentificationSystemDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStudentIdentificationSystemDescriptor source, IStudentIdentificationSystemDescriptor target, Action<IStudentIdentificationSystemDescriptor, IStudentIdentificationSystemDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStudentIdentificationSystemDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentIdentificationSystemDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentIdentificationSystemDescriptorId = source.StudentIdentificationSystemDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentIdentificationSystemDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StudentInterventionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentInterventionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentInterventionAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentInterventionAssociation source, IStudentInterventionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentInterventionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.InterventionIdentificationCode != target.InterventionIdentificationCode)
            {
                source.InterventionIdentificationCode = target.InterventionIdentificationCode;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCohortEducationOrganizationIdSupported)
                && target.CohortEducationOrganizationId != source.CohortEducationOrganizationId)
            {
                target.CohortEducationOrganizationId = source.CohortEducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCohortIdentifierSupported)
                && target.CohortIdentifier != source.CohortIdentifier)
            {
                target.CohortIdentifier = source.CohortIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiagnosticStatementSupported)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDosageSupported)
                && target.Dosage != source.Dosage)
            {
                target.Dosage = source.Dosage;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentInterventionAssociationInterventionEffectivenessesSupported)
            {
                isModified |= 
                    source.StudentInterventionAssociationInterventionEffectivenesses.SynchronizeCollectionTo(
                        target.StudentInterventionAssociationInterventionEffectivenesses, 
                        onChildAdded: child => 
                            {
                                child.StudentInterventionAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentInterventionAssociationInterventionEffectivenessIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentInterventionAssociation source, IStudentInterventionAssociation target, Action<IStudentInterventionAssociation, IStudentInterventionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentInterventionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentInterventionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.InterventionIdentificationCode = source.InterventionIdentificationCode;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCohortEducationOrganizationIdSupported)
                target.CohortEducationOrganizationId = source.CohortEducationOrganizationId;
            else
                targetSynchSupport.IsCohortEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsCohortIdentifierSupported)
                target.CohortIdentifier = source.CohortIdentifier;
            else
                targetSynchSupport.IsCohortIdentifierSupported = false;

            if (sourceSynchSupport.IsDiagnosticStatementSupported)
                target.DiagnosticStatement = source.DiagnosticStatement;
            else
                targetSynchSupport.IsDiagnosticStatementSupported = false;

            if (sourceSynchSupport.IsDosageSupported)
                target.Dosage = source.Dosage;
            else
                targetSynchSupport.IsDosageSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CohortResourceId = source.CohortResourceId;
                target.CohortDiscriminator = source.CohortDiscriminator;
                target.InterventionResourceId = source.InterventionResourceId;
                target.InterventionDiscriminator = source.InterventionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentInterventionAssociationInterventionEffectivenessesSupported)
            {    
                targetSynchSupport.IsStudentInterventionAssociationInterventionEffectivenessIncluded = sourceSynchSupport.IsStudentInterventionAssociationInterventionEffectivenessIncluded;
                source.StudentInterventionAssociationInterventionEffectivenesses.MapCollectionTo(target.StudentInterventionAssociationInterventionEffectivenesses, target);
            }
            else
            {
                targetSynchSupport.IsStudentInterventionAssociationInterventionEffectivenessesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentInterventionAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCohortEducationOrganizationIdSupported { get; set; }
        bool IsCohortIdentifierSupported { get; set; }
        bool IsDiagnosticStatementSupported { get; set; }
        bool IsDosageSupported { get; set; }
        bool IsStudentInterventionAssociationInterventionEffectivenessesSupported { get; set; }
        Func<IStudentInterventionAssociationInterventionEffectiveness, bool> IsStudentInterventionAssociationInterventionEffectivenessIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentInterventionAssociationInterventionEffectivenessMapper 
    {
        public static bool SynchronizeTo(this IStudentInterventionAssociationInterventionEffectiveness source, IStudentInterventionAssociationInterventionEffectiveness target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentInterventionAssociationInterventionEffectivenessSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiagnosisDescriptor != target.DiagnosisDescriptor)
            {
                source.DiagnosisDescriptor = target.DiagnosisDescriptor;
            }
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }
            if (source.PopulationServedDescriptor != target.PopulationServedDescriptor)
            {
                source.PopulationServedDescriptor = target.PopulationServedDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsImprovementIndexSupported)
                && target.ImprovementIndex != source.ImprovementIndex)
            {
                target.ImprovementIndex = source.ImprovementIndex;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterventionEffectivenessRatingDescriptorSupported)
                && target.InterventionEffectivenessRatingDescriptor != source.InterventionEffectivenessRatingDescriptor)
            {
                target.InterventionEffectivenessRatingDescriptor = source.InterventionEffectivenessRatingDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentInterventionAssociationInterventionEffectiveness source, IStudentInterventionAssociationInterventionEffectiveness target, Action<IStudentInterventionAssociationInterventionEffectiveness, IStudentInterventionAssociationInterventionEffectiveness> onMapped)
        {
            var sourceSynchSupport = source as IStudentInterventionAssociationInterventionEffectivenessSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentInterventionAssociationInterventionEffectivenessSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DiagnosisDescriptor = source.DiagnosisDescriptor;
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            target.PopulationServedDescriptor = source.PopulationServedDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsImprovementIndexSupported)
                target.ImprovementIndex = source.ImprovementIndex;
            else
                targetSynchSupport.IsImprovementIndexSupported = false;

            if (sourceSynchSupport.IsInterventionEffectivenessRatingDescriptorSupported)
                target.InterventionEffectivenessRatingDescriptor = source.InterventionEffectivenessRatingDescriptor;
            else
                targetSynchSupport.IsInterventionEffectivenessRatingDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentInterventionAssociationInterventionEffectivenessSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsImprovementIndexSupported { get; set; }
        bool IsInterventionEffectivenessRatingDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StudentInterventionAttendanceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StudentInterventionAttendanceEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentInterventionAttendanceEventMapper 
    {
        public static bool SynchronizeTo(this IStudentInterventionAttendanceEvent source, IStudentInterventionAttendanceEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentInterventionAttendanceEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceEventCategoryDescriptor != target.AttendanceEventCategoryDescriptor)
            {
                source.AttendanceEventCategoryDescriptor = target.AttendanceEventCategoryDescriptor;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.InterventionIdentificationCode != target.InterventionIdentificationCode)
            {
                source.InterventionIdentificationCode = target.InterventionIdentificationCode;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationalEnvironmentDescriptorSupported)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventDurationSupported)
                && target.EventDuration != source.EventDuration)
            {
                target.EventDuration = source.EventDuration;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterventionDurationSupported)
                && target.InterventionDuration != source.InterventionDuration)
            {
                target.InterventionDuration = source.InterventionDuration;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentInterventionAttendanceEvent source, IStudentInterventionAttendanceEvent target, Action<IStudentInterventionAttendanceEvent, IStudentInterventionAttendanceEvent> onMapped)
        {
            var sourceSynchSupport = source as IStudentInterventionAttendanceEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentInterventionAttendanceEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.InterventionIdentificationCode = source.InterventionIdentificationCode;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            if (sourceSynchSupport.IsEducationalEnvironmentDescriptorSupported)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
            else
                targetSynchSupport.IsEducationalEnvironmentDescriptorSupported = false;

            if (sourceSynchSupport.IsEventDurationSupported)
                target.EventDuration = source.EventDuration;
            else
                targetSynchSupport.IsEventDurationSupported = false;

            if (sourceSynchSupport.IsInterventionDurationSupported)
                target.InterventionDuration = source.InterventionDuration;
            else
                targetSynchSupport.IsInterventionDurationSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.InterventionResourceId = source.InterventionResourceId;
                target.InterventionDiscriminator = source.InterventionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentInterventionAttendanceEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAttendanceEventReasonSupported { get; set; }
        bool IsEducationalEnvironmentDescriptorSupported { get; set; }
        bool IsEventDurationSupported { get; set; }
        bool IsInterventionDurationSupported { get; set; }
    }
 
}
// Aggregate: StudentLanguageInstructionProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentLanguageInstructionProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentLanguageInstructionProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentLanguageInstructionProgramAssociation source, IStudentLanguageInstructionProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentLanguageInstructionProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDosageSupported)
                && target.Dosage != source.Dosage)
            {
                target.Dosage = source.Dosage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEnglishLearnerParticipationSupported)
                && target.EnglishLearnerParticipation != source.EnglishLearnerParticipation)
            {
                target.EnglishLearnerParticipation = source.EnglishLearnerParticipation;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported)
            {
                isModified |= 
                    source.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments.SynchronizeCollectionTo(
                        target.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments, 
                        onChildAdded: child => 
                            {
                                child.StudentLanguageInstructionProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported)
            {
                isModified |= 
                    source.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices.SynchronizeCollectionTo(
                        target.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices, 
                        onChildAdded: child => 
                            {
                                child.StudentLanguageInstructionProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentLanguageInstructionProgramAssociation source, IStudentLanguageInstructionProgramAssociation target, Action<IStudentLanguageInstructionProgramAssociation, IStudentLanguageInstructionProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentLanguageInstructionProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentLanguageInstructionProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDosageSupported)
                target.Dosage = source.Dosage;
            else
                targetSynchSupport.IsDosageSupported = false;

            if (sourceSynchSupport.IsEnglishLearnerParticipationSupported)
                target.EnglishLearnerParticipation = source.EnglishLearnerParticipation;
            else
                targetSynchSupport.IsEnglishLearnerParticipationSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported)
            {    
                targetSynchSupport.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded = sourceSynchSupport.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded;
                source.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments.MapCollectionTo(target.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments, target);
            }
            else
            {
                targetSynchSupport.IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported = false;
            }

            if (sourceSynchSupport.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported)
            {    
                targetSynchSupport.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded = sourceSynchSupport.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded;
                source.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices.MapCollectionTo(target.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentLanguageInstructionProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDosageSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsEnglishLearnerParticipationSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentsSupported { get; set; }
        bool IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServicesSupported { get; set; }
        Func<IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, bool> IsStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentIncluded { get; set; }
        Func<IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService, bool> IsStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentMapper 
    {
        public static bool SynchronizeTo(this IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment source, IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMonitoredDescriptorSupported)
                && target.MonitoredDescriptor != source.MonitoredDescriptor)
            {
                target.MonitoredDescriptor = source.MonitoredDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParticipationDescriptorSupported)
                && target.ParticipationDescriptor != source.ParticipationDescriptor)
            {
                target.ParticipationDescriptor = source.ParticipationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProficiencyDescriptorSupported)
                && target.ProficiencyDescriptor != source.ProficiencyDescriptor)
            {
                target.ProficiencyDescriptor = source.ProficiencyDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgressDescriptorSupported)
                && target.ProgressDescriptor != source.ProgressDescriptor)
            {
                target.ProgressDescriptor = source.ProgressDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment source, IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment target, Action<IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> onMapped)
        {
            var sourceSynchSupport = source as IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMonitoredDescriptorSupported)
                target.MonitoredDescriptor = source.MonitoredDescriptor;
            else
                targetSynchSupport.IsMonitoredDescriptorSupported = false;

            if (sourceSynchSupport.IsParticipationDescriptorSupported)
                target.ParticipationDescriptor = source.ParticipationDescriptor;
            else
                targetSynchSupport.IsParticipationDescriptorSupported = false;

            if (sourceSynchSupport.IsProficiencyDescriptorSupported)
                target.ProficiencyDescriptor = source.ProficiencyDescriptor;
            else
                targetSynchSupport.IsProficiencyDescriptorSupported = false;

            if (sourceSynchSupport.IsProgressDescriptorSupported)
                target.ProgressDescriptor = source.ProgressDescriptor;
            else
                targetSynchSupport.IsProgressDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMonitoredDescriptorSupported { get; set; }
        bool IsParticipationDescriptorSupported { get; set; }
        bool IsProficiencyDescriptorSupported { get; set; }
        bool IsProgressDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService source, IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageInstructionProgramServiceDescriptor != target.LanguageInstructionProgramServiceDescriptor)
            {
                source.LanguageInstructionProgramServiceDescriptor = target.LanguageInstructionProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService source, IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService target, Action<IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService, IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService> onMapped)
        {
            var sourceSynchSupport = source as IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageInstructionProgramServiceDescriptor = source.LanguageInstructionProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
}
// Aggregate: StudentLearningObjective

namespace EdFi.Ods.Entities.Common.EdFi //.StudentLearningObjectiveAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentLearningObjectiveMapper 
    {
        public static bool SynchronizeTo(this IStudentLearningObjective source, IStudentLearningObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentLearningObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradingPeriodDescriptor != target.GradingPeriodDescriptor)
            {
                source.GradingPeriodDescriptor = target.GradingPeriodDescriptor;
            }
            if (source.GradingPeriodSchoolId != target.GradingPeriodSchoolId)
            {
                source.GradingPeriodSchoolId = target.GradingPeriodSchoolId;
            }
            if (source.GradingPeriodSchoolYear != target.GradingPeriodSchoolYear)
            {
                source.GradingPeriodSchoolYear = target.GradingPeriodSchoolYear;
            }
            if (source.GradingPeriodSequence != target.GradingPeriodSequence)
            {
                source.GradingPeriodSequence = target.GradingPeriodSequence;
            }
            if (source.LearningObjectiveId != target.LearningObjectiveId)
            {
                source.LearningObjectiveId = target.LearningObjectiveId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCompetencyLevelDescriptorSupported)
                && target.CompetencyLevelDescriptor != source.CompetencyLevelDescriptor)
            {
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiagnosticStatementSupported)
                && target.DiagnosticStatement != source.DiagnosticStatement)
            {
                target.DiagnosticStatement = source.DiagnosticStatement;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentLearningObjectiveGeneralStudentProgramAssociationsSupported)
            {
                isModified |= 
                    source.StudentLearningObjectiveGeneralStudentProgramAssociations.SynchronizeCollectionTo(
                        target.StudentLearningObjectiveGeneralStudentProgramAssociations, 
                        onChildAdded: child => 
                            {
                                child.StudentLearningObjective = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentLearningObjectiveGeneralStudentProgramAssociationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentLearningObjectiveStudentSectionAssociationsSupported)
            {
                isModified |= 
                    source.StudentLearningObjectiveStudentSectionAssociations.SynchronizeCollectionTo(
                        target.StudentLearningObjectiveStudentSectionAssociations, 
                        onChildAdded: child => 
                            {
                                child.StudentLearningObjective = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentLearningObjectiveStudentSectionAssociationIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentLearningObjective source, IStudentLearningObjective target, Action<IStudentLearningObjective, IStudentLearningObjective> onMapped)
        {
            var sourceSynchSupport = source as IStudentLearningObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentLearningObjectiveSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GradingPeriodDescriptor = source.GradingPeriodDescriptor;
            target.GradingPeriodSchoolId = source.GradingPeriodSchoolId;
            target.GradingPeriodSchoolYear = source.GradingPeriodSchoolYear;
            target.GradingPeriodSequence = source.GradingPeriodSequence;
            target.LearningObjectiveId = source.LearningObjectiveId;
            target.Namespace = source.Namespace;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCompetencyLevelDescriptorSupported)
                target.CompetencyLevelDescriptor = source.CompetencyLevelDescriptor;
            else
                targetSynchSupport.IsCompetencyLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsDiagnosticStatementSupported)
                target.DiagnosticStatement = source.DiagnosticStatement;
            else
                targetSynchSupport.IsDiagnosticStatementSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GradingPeriodResourceId = source.GradingPeriodResourceId;
                target.GradingPeriodDiscriminator = source.GradingPeriodDiscriminator;
                target.LearningObjectiveResourceId = source.LearningObjectiveResourceId;
                target.LearningObjectiveDiscriminator = source.LearningObjectiveDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentLearningObjectiveGeneralStudentProgramAssociationsSupported)
            {    
                targetSynchSupport.IsStudentLearningObjectiveGeneralStudentProgramAssociationIncluded = sourceSynchSupport.IsStudentLearningObjectiveGeneralStudentProgramAssociationIncluded;
                source.StudentLearningObjectiveGeneralStudentProgramAssociations.MapCollectionTo(target.StudentLearningObjectiveGeneralStudentProgramAssociations, target);
            }
            else
            {
                targetSynchSupport.IsStudentLearningObjectiveGeneralStudentProgramAssociationsSupported = false;
            }

            if (sourceSynchSupport.IsStudentLearningObjectiveStudentSectionAssociationsSupported)
            {    
                targetSynchSupport.IsStudentLearningObjectiveStudentSectionAssociationIncluded = sourceSynchSupport.IsStudentLearningObjectiveStudentSectionAssociationIncluded;
                source.StudentLearningObjectiveStudentSectionAssociations.MapCollectionTo(target.StudentLearningObjectiveStudentSectionAssociations, target);
            }
            else
            {
                targetSynchSupport.IsStudentLearningObjectiveStudentSectionAssociationsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentLearningObjectiveSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCompetencyLevelDescriptorSupported { get; set; }
        bool IsDiagnosticStatementSupported { get; set; }
        bool IsStudentLearningObjectiveGeneralStudentProgramAssociationsSupported { get; set; }
        bool IsStudentLearningObjectiveStudentSectionAssociationsSupported { get; set; }
        Func<IStudentLearningObjectiveGeneralStudentProgramAssociation, bool> IsStudentLearningObjectiveGeneralStudentProgramAssociationIncluded { get; set; }
        Func<IStudentLearningObjectiveStudentSectionAssociation, bool> IsStudentLearningObjectiveStudentSectionAssociationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentLearningObjectiveGeneralStudentProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentLearningObjectiveGeneralStudentProgramAssociation source, IStudentLearningObjectiveGeneralStudentProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentLearningObjectiveGeneralStudentProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentLearningObjectiveGeneralStudentProgramAssociation source, IStudentLearningObjectiveGeneralStudentProgramAssociation target, Action<IStudentLearningObjectiveGeneralStudentProgramAssociation, IStudentLearningObjectiveGeneralStudentProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentLearningObjectiveGeneralStudentProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentLearningObjectiveGeneralStudentProgramAssociationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.GeneralStudentProgramAssociationResourceId = source.GeneralStudentProgramAssociationResourceId;
                target.GeneralStudentProgramAssociationDiscriminator = source.GeneralStudentProgramAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentLearningObjectiveGeneralStudentProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentLearningObjectiveStudentSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentLearningObjectiveStudentSectionAssociation source, IStudentLearningObjectiveStudentSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentLearningObjectiveStudentSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentLearningObjectiveStudentSectionAssociation source, IStudentLearningObjectiveStudentSectionAssociation target, Action<IStudentLearningObjectiveStudentSectionAssociation, IStudentLearningObjectiveStudentSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentLearningObjectiveStudentSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentLearningObjectiveStudentSectionAssociationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentSectionAssociationResourceId = source.StudentSectionAssociationResourceId;
                target.StudentSectionAssociationDiscriminator = source.StudentSectionAssociationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentLearningObjectiveStudentSectionAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StudentMigrantEducationProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentMigrantEducationProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentMigrantEducationProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentMigrantEducationProgramAssociation source, IStudentMigrantEducationProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsContinuationOfServicesReasonDescriptorSupported)
                && target.ContinuationOfServicesReasonDescriptor != source.ContinuationOfServicesReasonDescriptor)
            {
                target.ContinuationOfServicesReasonDescriptor = source.ContinuationOfServicesReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEligibilityExpirationDateSupported)
                && target.EligibilityExpirationDate != source.EligibilityExpirationDate)
            {
                target.EligibilityExpirationDate = source.EligibilityExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastQualifyingMoveSupported)
                && target.LastQualifyingMove != source.LastQualifyingMove)
            {
                target.LastQualifyingMove = source.LastQualifyingMove;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorityForServicesSupported)
                && target.PriorityForServices != source.PriorityForServices)
            {
                target.PriorityForServices = source.PriorityForServices;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsQualifyingArrivalDateSupported)
                && target.QualifyingArrivalDate != source.QualifyingArrivalDate)
            {
                target.QualifyingArrivalDate = source.QualifyingArrivalDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStateResidencyDateSupported)
                && target.StateResidencyDate != source.StateResidencyDate)
            {
                target.StateResidencyDate = source.StateResidencyDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsUSInitialEntrySupported)
                && target.USInitialEntry != source.USInitialEntry)
            {
                target.USInitialEntry = source.USInitialEntry;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsUSInitialSchoolEntrySupported)
                && target.USInitialSchoolEntry != source.USInitialSchoolEntry)
            {
                target.USInitialSchoolEntry = source.USInitialSchoolEntry;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsUSMostRecentEntrySupported)
                && target.USMostRecentEntry != source.USMostRecentEntry)
            {
                target.USMostRecentEntry = source.USMostRecentEntry;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported)
            {
                isModified |= 
                    source.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices.SynchronizeCollectionTo(
                        target.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices, 
                        onChildAdded: child => 
                            {
                                child.StudentMigrantEducationProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentMigrantEducationProgramAssociation source, IStudentMigrantEducationProgramAssociation target, Action<IStudentMigrantEducationProgramAssociation, IStudentMigrantEducationProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsContinuationOfServicesReasonDescriptorSupported)
                target.ContinuationOfServicesReasonDescriptor = source.ContinuationOfServicesReasonDescriptor;
            else
                targetSynchSupport.IsContinuationOfServicesReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsEligibilityExpirationDateSupported)
                target.EligibilityExpirationDate = source.EligibilityExpirationDate;
            else
                targetSynchSupport.IsEligibilityExpirationDateSupported = false;

            if (sourceSynchSupport.IsLastQualifyingMoveSupported)
                target.LastQualifyingMove = source.LastQualifyingMove;
            else
                targetSynchSupport.IsLastQualifyingMoveSupported = false;

            if (sourceSynchSupport.IsPriorityForServicesSupported)
                target.PriorityForServices = source.PriorityForServices;
            else
                targetSynchSupport.IsPriorityForServicesSupported = false;

            if (sourceSynchSupport.IsQualifyingArrivalDateSupported)
                target.QualifyingArrivalDate = source.QualifyingArrivalDate;
            else
                targetSynchSupport.IsQualifyingArrivalDateSupported = false;

            if (sourceSynchSupport.IsStateResidencyDateSupported)
                target.StateResidencyDate = source.StateResidencyDate;
            else
                targetSynchSupport.IsStateResidencyDateSupported = false;

            if (sourceSynchSupport.IsUSInitialEntrySupported)
                target.USInitialEntry = source.USInitialEntry;
            else
                targetSynchSupport.IsUSInitialEntrySupported = false;

            if (sourceSynchSupport.IsUSInitialSchoolEntrySupported)
                target.USInitialSchoolEntry = source.USInitialSchoolEntry;
            else
                targetSynchSupport.IsUSInitialSchoolEntrySupported = false;

            if (sourceSynchSupport.IsUSMostRecentEntrySupported)
                target.USMostRecentEntry = source.USMostRecentEntry;
            else
                targetSynchSupport.IsUSMostRecentEntrySupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported)
            {    
                targetSynchSupport.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded = sourceSynchSupport.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded;
                source.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices.MapCollectionTo(target.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentMigrantEducationProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsContinuationOfServicesReasonDescriptorSupported { get; set; }
        bool IsEligibilityExpirationDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsLastQualifyingMoveSupported { get; set; }
        bool IsPriorityForServicesSupported { get; set; }
        bool IsQualifyingArrivalDateSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsStateResidencyDateSupported { get; set; }
        bool IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServicesSupported { get; set; }
        bool IsUSInitialEntrySupported { get; set; }
        bool IsUSInitialSchoolEntrySupported { get; set; }
        bool IsUSMostRecentEntrySupported { get; set; }
        Func<IStudentMigrantEducationProgramAssociationMigrantEducationProgramService, bool> IsStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentMigrantEducationProgramAssociationMigrantEducationProgramService source, IStudentMigrantEducationProgramAssociationMigrantEducationProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MigrantEducationProgramServiceDescriptor != target.MigrantEducationProgramServiceDescriptor)
            {
                source.MigrantEducationProgramServiceDescriptor = target.MigrantEducationProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentMigrantEducationProgramAssociationMigrantEducationProgramService source, IStudentMigrantEducationProgramAssociationMigrantEducationProgramService target, Action<IStudentMigrantEducationProgramAssociationMigrantEducationProgramService, IStudentMigrantEducationProgramAssociationMigrantEducationProgramService> onMapped)
        {
            var sourceSynchSupport = source as IStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.MigrantEducationProgramServiceDescriptor = source.MigrantEducationProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentMigrantEducationProgramAssociationMigrantEducationProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
}
// Aggregate: StudentNeglectedOrDelinquentProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentNeglectedOrDelinquentProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentNeglectedOrDelinquentProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentNeglectedOrDelinquentProgramAssociation source, IStudentNeglectedOrDelinquentProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentNeglectedOrDelinquentProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsELAProgressLevelDescriptorSupported)
                && target.ELAProgressLevelDescriptor != source.ELAProgressLevelDescriptor)
            {
                target.ELAProgressLevelDescriptor = source.ELAProgressLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMathematicsProgressLevelDescriptorSupported)
                && target.MathematicsProgressLevelDescriptor != source.MathematicsProgressLevelDescriptor)
            {
                target.MathematicsProgressLevelDescriptor = source.MathematicsProgressLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNeglectedOrDelinquentProgramDescriptorSupported)
                && target.NeglectedOrDelinquentProgramDescriptor != source.NeglectedOrDelinquentProgramDescriptor)
            {
                target.NeglectedOrDelinquentProgramDescriptor = source.NeglectedOrDelinquentProgramDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported)
            {
                isModified |= 
                    source.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices.SynchronizeCollectionTo(
                        target.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices, 
                        onChildAdded: child => 
                            {
                                child.StudentNeglectedOrDelinquentProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentNeglectedOrDelinquentProgramAssociation source, IStudentNeglectedOrDelinquentProgramAssociation target, Action<IStudentNeglectedOrDelinquentProgramAssociation, IStudentNeglectedOrDelinquentProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentNeglectedOrDelinquentProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentNeglectedOrDelinquentProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsELAProgressLevelDescriptorSupported)
                target.ELAProgressLevelDescriptor = source.ELAProgressLevelDescriptor;
            else
                targetSynchSupport.IsELAProgressLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsMathematicsProgressLevelDescriptorSupported)
                target.MathematicsProgressLevelDescriptor = source.MathematicsProgressLevelDescriptor;
            else
                targetSynchSupport.IsMathematicsProgressLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsNeglectedOrDelinquentProgramDescriptorSupported)
                target.NeglectedOrDelinquentProgramDescriptor = source.NeglectedOrDelinquentProgramDescriptor;
            else
                targetSynchSupport.IsNeglectedOrDelinquentProgramDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported)
            {    
                targetSynchSupport.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded = sourceSynchSupport.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded;
                source.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices.MapCollectionTo(target.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentNeglectedOrDelinquentProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsELAProgressLevelDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsMathematicsProgressLevelDescriptorSupported { get; set; }
        bool IsNeglectedOrDelinquentProgramDescriptorSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServicesSupported { get; set; }
        Func<IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService, bool> IsStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService source, IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.NeglectedOrDelinquentProgramServiceDescriptor != target.NeglectedOrDelinquentProgramServiceDescriptor)
            {
                source.NeglectedOrDelinquentProgramServiceDescriptor = target.NeglectedOrDelinquentProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService source, IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService target, Action<IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService, IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService> onMapped)
        {
            var sourceSynchSupport = source as IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.NeglectedOrDelinquentProgramServiceDescriptor = source.NeglectedOrDelinquentProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
}
// Aggregate: StudentParentAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentParentAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentParentAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentParentAssociation source, IStudentParentAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentParentAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ParentUniqueId != target.ParentUniqueId)
            {
                source.ParentUniqueId = target.ParentUniqueId;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsContactPrioritySupported)
                && target.ContactPriority != source.ContactPriority)
            {
                target.ContactPriority = source.ContactPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsContactRestrictionsSupported)
                && target.ContactRestrictions != source.ContactRestrictions)
            {
                target.ContactRestrictions = source.ContactRestrictions;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmergencyContactStatusSupported)
                && target.EmergencyContactStatus != source.EmergencyContactStatus)
            {
                target.EmergencyContactStatus = source.EmergencyContactStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLivesWithSupported)
                && target.LivesWith != source.LivesWith)
            {
                target.LivesWith = source.LivesWith;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryContactStatusSupported)
                && target.PrimaryContactStatus != source.PrimaryContactStatus)
            {
                target.PrimaryContactStatus = source.PrimaryContactStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRelationDescriptorSupported)
                && target.RelationDescriptor != source.RelationDescriptor)
            {
                target.RelationDescriptor = source.RelationDescriptor;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentParentAssociation source, IStudentParentAssociation target, Action<IStudentParentAssociation, IStudentParentAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentParentAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentParentAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ParentUniqueId = source.ParentUniqueId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsContactPrioritySupported)
                target.ContactPriority = source.ContactPriority;
            else
                targetSynchSupport.IsContactPrioritySupported = false;

            if (sourceSynchSupport.IsContactRestrictionsSupported)
                target.ContactRestrictions = source.ContactRestrictions;
            else
                targetSynchSupport.IsContactRestrictionsSupported = false;

            if (sourceSynchSupport.IsEmergencyContactStatusSupported)
                target.EmergencyContactStatus = source.EmergencyContactStatus;
            else
                targetSynchSupport.IsEmergencyContactStatusSupported = false;

            if (sourceSynchSupport.IsLivesWithSupported)
                target.LivesWith = source.LivesWith;
            else
                targetSynchSupport.IsLivesWithSupported = false;

            if (sourceSynchSupport.IsPrimaryContactStatusSupported)
                target.PrimaryContactStatus = source.PrimaryContactStatus;
            else
                targetSynchSupport.IsPrimaryContactStatusSupported = false;

            if (sourceSynchSupport.IsRelationDescriptorSupported)
                target.RelationDescriptor = source.RelationDescriptor;
            else
                targetSynchSupport.IsRelationDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ParentResourceId = source.ParentResourceId;
                target.ParentDiscriminator = source.ParentDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentParentAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsContactPrioritySupported { get; set; }
        bool IsContactRestrictionsSupported { get; set; }
        bool IsEmergencyContactStatusSupported { get; set; }
        bool IsLivesWithSupported { get; set; }
        bool IsPrimaryContactStatusSupported { get; set; }
        bool IsRelationDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StudentParticipationCodeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.StudentParticipationCodeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentParticipationCodeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStudentParticipationCodeDescriptor source, IStudentParticipationCodeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentParticipationCodeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentParticipationCodeDescriptorId != target.StudentParticipationCodeDescriptorId)
            {
                source.StudentParticipationCodeDescriptorId = target.StudentParticipationCodeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStudentParticipationCodeDescriptor source, IStudentParticipationCodeDescriptor target, Action<IStudentParticipationCodeDescriptor, IStudentParticipationCodeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStudentParticipationCodeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentParticipationCodeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentParticipationCodeDescriptorId = source.StudentParticipationCodeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentParticipationCodeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: StudentProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentProgramAssociation source, IStudentProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentProgramAssociationServicesSupported)
            {
                isModified |= 
                    source.StudentProgramAssociationServices.SynchronizeCollectionTo(
                        target.StudentProgramAssociationServices, 
                        onChildAdded: child => 
                            {
                                child.StudentProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentProgramAssociationServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentProgramAssociation source, IStudentProgramAssociation target, Action<IStudentProgramAssociation, IStudentProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentProgramAssociationServicesSupported)
            {    
                targetSynchSupport.IsStudentProgramAssociationServiceIncluded = sourceSynchSupport.IsStudentProgramAssociationServiceIncluded;
                source.StudentProgramAssociationServices.MapCollectionTo(target.StudentProgramAssociationServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentProgramAssociationServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsStudentProgramAssociationServicesSupported { get; set; }
        Func<IStudentProgramAssociationService, bool> IsStudentProgramAssociationServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentProgramAssociationServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentProgramAssociationService source, IStudentProgramAssociationService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentProgramAssociationServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ServiceDescriptor != target.ServiceDescriptor)
            {
                source.ServiceDescriptor = target.ServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentProgramAssociationService source, IStudentProgramAssociationService target, Action<IStudentProgramAssociationService, IStudentProgramAssociationService> onMapped)
        {
            var sourceSynchSupport = source as IStudentProgramAssociationServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentProgramAssociationServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ServiceDescriptor = source.ServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentProgramAssociationServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
}
// Aggregate: StudentProgramAttendanceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StudentProgramAttendanceEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentProgramAttendanceEventMapper 
    {
        public static bool SynchronizeTo(this IStudentProgramAttendanceEvent source, IStudentProgramAttendanceEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentProgramAttendanceEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceEventCategoryDescriptor != target.AttendanceEventCategoryDescriptor)
            {
                source.AttendanceEventCategoryDescriptor = target.AttendanceEventCategoryDescriptor;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationalEnvironmentDescriptorSupported)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventDurationSupported)
                && target.EventDuration != source.EventDuration)
            {
                target.EventDuration = source.EventDuration;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramAttendanceDurationSupported)
                && target.ProgramAttendanceDuration != source.ProgramAttendanceDuration)
            {
                target.ProgramAttendanceDuration = source.ProgramAttendanceDuration;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentProgramAttendanceEvent source, IStudentProgramAttendanceEvent target, Action<IStudentProgramAttendanceEvent, IStudentProgramAttendanceEvent> onMapped)
        {
            var sourceSynchSupport = source as IStudentProgramAttendanceEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentProgramAttendanceEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            if (sourceSynchSupport.IsEducationalEnvironmentDescriptorSupported)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
            else
                targetSynchSupport.IsEducationalEnvironmentDescriptorSupported = false;

            if (sourceSynchSupport.IsEventDurationSupported)
                target.EventDuration = source.EventDuration;
            else
                targetSynchSupport.IsEventDurationSupported = false;

            if (sourceSynchSupport.IsProgramAttendanceDurationSupported)
                target.ProgramAttendanceDuration = source.ProgramAttendanceDuration;
            else
                targetSynchSupport.IsProgramAttendanceDurationSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentProgramAttendanceEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAttendanceEventReasonSupported { get; set; }
        bool IsEducationalEnvironmentDescriptorSupported { get; set; }
        bool IsEventDurationSupported { get; set; }
        bool IsProgramAttendanceDurationSupported { get; set; }
    }
 
}
// Aggregate: StudentSchoolAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSchoolAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentSchoolAssociation source, IStudentSchoolAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSchoolAssociationSynchronizationSourceSupport;

            // Allow PK column updates on StudentSchoolAssociation
            if (
                 (target.EntryDate != source.EntryDate)
                || (target.SchoolId != source.SchoolId)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EntryDate != target.EntryDate)
            {
                source.EntryDate = target.EntryDate;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCalendarCodeSupported)
                && target.CalendarCode != source.CalendarCode)
            {
                target.CalendarCode = source.CalendarCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsClassOfSchoolYearSupported)
                && target.ClassOfSchoolYear != source.ClassOfSchoolYear)
            {
                target.ClassOfSchoolYear = source.ClassOfSchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmployedWhileEnrolledSupported)
                && target.EmployedWhileEnrolled != source.EmployedWhileEnrolled)
            {
                target.EmployedWhileEnrolled = source.EmployedWhileEnrolled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEntryGradeLevelDescriptorSupported)
                && target.EntryGradeLevelDescriptor != source.EntryGradeLevelDescriptor)
            {
                target.EntryGradeLevelDescriptor = source.EntryGradeLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEntryGradeLevelReasonDescriptorSupported)
                && target.EntryGradeLevelReasonDescriptor != source.EntryGradeLevelReasonDescriptor)
            {
                target.EntryGradeLevelReasonDescriptor = source.EntryGradeLevelReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEntryTypeDescriptorSupported)
                && target.EntryTypeDescriptor != source.EntryTypeDescriptor)
            {
                target.EntryTypeDescriptor = source.EntryTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExitWithdrawDateSupported)
                && target.ExitWithdrawDate != source.ExitWithdrawDate)
            {
                target.ExitWithdrawDate = source.ExitWithdrawDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExitWithdrawTypeDescriptorSupported)
                && target.ExitWithdrawTypeDescriptor != source.ExitWithdrawTypeDescriptor)
            {
                target.ExitWithdrawTypeDescriptor = source.ExitWithdrawTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFullTimeEquivalencySupported)
                && target.FullTimeEquivalency != source.FullTimeEquivalency)
            {
                target.FullTimeEquivalency = source.FullTimeEquivalency;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGraduationPlanTypeDescriptorSupported)
                && target.GraduationPlanTypeDescriptor != source.GraduationPlanTypeDescriptor)
            {
                target.GraduationPlanTypeDescriptor = source.GraduationPlanTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGraduationSchoolYearSupported)
                && target.GraduationSchoolYear != source.GraduationSchoolYear)
            {
                target.GraduationSchoolYear = source.GraduationSchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimarySchoolSupported)
                && target.PrimarySchool != source.PrimarySchool)
            {
                target.PrimarySchool = source.PrimarySchool;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRepeatGradeIndicatorSupported)
                && target.RepeatGradeIndicator != source.RepeatGradeIndicator)
            {
                target.RepeatGradeIndicator = source.RepeatGradeIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResidencyStatusDescriptorSupported)
                && target.ResidencyStatusDescriptor != source.ResidencyStatusDescriptor)
            {
                target.ResidencyStatusDescriptor = source.ResidencyStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolChoiceTransferSupported)
                && target.SchoolChoiceTransfer != source.SchoolChoiceTransfer)
            {
                target.SchoolChoiceTransfer = source.SchoolChoiceTransfer;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermCompletionIndicatorSupported)
                && target.TermCompletionIndicator != source.TermCompletionIndicator)
            {
                target.TermCompletionIndicator = source.TermCompletionIndicator;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentSchoolAssociationAlternativeGraduationPlansSupported)
            {
                isModified |= 
                    source.StudentSchoolAssociationAlternativeGraduationPlans.SynchronizeCollectionTo(
                        target.StudentSchoolAssociationAlternativeGraduationPlans, 
                        onChildAdded: child => 
                            {
                                child.StudentSchoolAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentSchoolAssociationAlternativeGraduationPlanIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentSchoolAssociationEducationPlansSupported)
            {
                isModified |= 
                    source.StudentSchoolAssociationEducationPlans.SynchronizeCollectionTo(
                        target.StudentSchoolAssociationEducationPlans, 
                        onChildAdded: child => 
                            {
                                child.StudentSchoolAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentSchoolAssociationEducationPlanIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSchoolAssociation source, IStudentSchoolAssociation target, Action<IStudentSchoolAssociation, IStudentSchoolAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentSchoolAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSchoolAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EntryDate = source.EntryDate;
            target.SchoolId = source.SchoolId;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCalendarCodeSupported)
                target.CalendarCode = source.CalendarCode;
            else
                targetSynchSupport.IsCalendarCodeSupported = false;

            if (sourceSynchSupport.IsClassOfSchoolYearSupported)
                target.ClassOfSchoolYear = source.ClassOfSchoolYear;
            else
                targetSynchSupport.IsClassOfSchoolYearSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEmployedWhileEnrolledSupported)
                target.EmployedWhileEnrolled = source.EmployedWhileEnrolled;
            else
                targetSynchSupport.IsEmployedWhileEnrolledSupported = false;

            if (sourceSynchSupport.IsEntryGradeLevelDescriptorSupported)
                target.EntryGradeLevelDescriptor = source.EntryGradeLevelDescriptor;
            else
                targetSynchSupport.IsEntryGradeLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsEntryGradeLevelReasonDescriptorSupported)
                target.EntryGradeLevelReasonDescriptor = source.EntryGradeLevelReasonDescriptor;
            else
                targetSynchSupport.IsEntryGradeLevelReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsEntryTypeDescriptorSupported)
                target.EntryTypeDescriptor = source.EntryTypeDescriptor;
            else
                targetSynchSupport.IsEntryTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsExitWithdrawDateSupported)
                target.ExitWithdrawDate = source.ExitWithdrawDate;
            else
                targetSynchSupport.IsExitWithdrawDateSupported = false;

            if (sourceSynchSupport.IsExitWithdrawTypeDescriptorSupported)
                target.ExitWithdrawTypeDescriptor = source.ExitWithdrawTypeDescriptor;
            else
                targetSynchSupport.IsExitWithdrawTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsFullTimeEquivalencySupported)
                target.FullTimeEquivalency = source.FullTimeEquivalency;
            else
                targetSynchSupport.IsFullTimeEquivalencySupported = false;

            if (sourceSynchSupport.IsGraduationPlanTypeDescriptorSupported)
                target.GraduationPlanTypeDescriptor = source.GraduationPlanTypeDescriptor;
            else
                targetSynchSupport.IsGraduationPlanTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsGraduationSchoolYearSupported)
                target.GraduationSchoolYear = source.GraduationSchoolYear;
            else
                targetSynchSupport.IsGraduationSchoolYearSupported = false;

            if (sourceSynchSupport.IsPrimarySchoolSupported)
                target.PrimarySchool = source.PrimarySchool;
            else
                targetSynchSupport.IsPrimarySchoolSupported = false;

            if (sourceSynchSupport.IsRepeatGradeIndicatorSupported)
                target.RepeatGradeIndicator = source.RepeatGradeIndicator;
            else
                targetSynchSupport.IsRepeatGradeIndicatorSupported = false;

            if (sourceSynchSupport.IsResidencyStatusDescriptorSupported)
                target.ResidencyStatusDescriptor = source.ResidencyStatusDescriptor;
            else
                targetSynchSupport.IsResidencyStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolChoiceTransferSupported)
                target.SchoolChoiceTransfer = source.SchoolChoiceTransfer;
            else
                targetSynchSupport.IsSchoolChoiceTransferSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermCompletionIndicatorSupported)
                target.TermCompletionIndicator = source.TermCompletionIndicator;
            else
                targetSynchSupport.IsTermCompletionIndicatorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CalendarResourceId = source.CalendarResourceId;
                target.CalendarDiscriminator = source.CalendarDiscriminator;
                target.ClassOfSchoolYearTypeResourceId = source.ClassOfSchoolYearTypeResourceId;
                target.GraduationPlanResourceId = source.GraduationPlanResourceId;
                target.GraduationPlanDiscriminator = source.GraduationPlanDiscriminator;
                target.SchoolResourceId = source.SchoolResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentSchoolAssociationAlternativeGraduationPlansSupported)
            {    
                targetSynchSupport.IsStudentSchoolAssociationAlternativeGraduationPlanIncluded = sourceSynchSupport.IsStudentSchoolAssociationAlternativeGraduationPlanIncluded;
                source.StudentSchoolAssociationAlternativeGraduationPlans.MapCollectionTo(target.StudentSchoolAssociationAlternativeGraduationPlans, target);
            }
            else
            {
                targetSynchSupport.IsStudentSchoolAssociationAlternativeGraduationPlansSupported = false;
            }

            if (sourceSynchSupport.IsStudentSchoolAssociationEducationPlansSupported)
            {    
                targetSynchSupport.IsStudentSchoolAssociationEducationPlanIncluded = sourceSynchSupport.IsStudentSchoolAssociationEducationPlanIncluded;
                source.StudentSchoolAssociationEducationPlans.MapCollectionTo(target.StudentSchoolAssociationEducationPlans, target);
            }
            else
            {
                targetSynchSupport.IsStudentSchoolAssociationEducationPlansSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSchoolAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCalendarCodeSupported { get; set; }
        bool IsClassOfSchoolYearSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEmployedWhileEnrolledSupported { get; set; }
        bool IsEntryGradeLevelDescriptorSupported { get; set; }
        bool IsEntryGradeLevelReasonDescriptorSupported { get; set; }
        bool IsEntryTypeDescriptorSupported { get; set; }
        bool IsExitWithdrawDateSupported { get; set; }
        bool IsExitWithdrawTypeDescriptorSupported { get; set; }
        bool IsFullTimeEquivalencySupported { get; set; }
        bool IsGraduationPlanTypeDescriptorSupported { get; set; }
        bool IsGraduationSchoolYearSupported { get; set; }
        bool IsPrimarySchoolSupported { get; set; }
        bool IsRepeatGradeIndicatorSupported { get; set; }
        bool IsResidencyStatusDescriptorSupported { get; set; }
        bool IsSchoolChoiceTransferSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsStudentSchoolAssociationAlternativeGraduationPlansSupported { get; set; }
        bool IsStudentSchoolAssociationEducationPlansSupported { get; set; }
        bool IsTermCompletionIndicatorSupported { get; set; }
        Func<IStudentSchoolAssociationAlternativeGraduationPlan, bool> IsStudentSchoolAssociationAlternativeGraduationPlanIncluded { get; set; }
        Func<IStudentSchoolAssociationEducationPlan, bool> IsStudentSchoolAssociationEducationPlanIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolAssociationAlternativeGraduationPlanMapper 
    {
        public static bool SynchronizeTo(this IStudentSchoolAssociationAlternativeGraduationPlan source, IStudentSchoolAssociationAlternativeGraduationPlan target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSchoolAssociationAlternativeGraduationPlanSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AlternativeEducationOrganizationId != target.AlternativeEducationOrganizationId)
            {
                source.AlternativeEducationOrganizationId = target.AlternativeEducationOrganizationId;
            }
            if (source.AlternativeGraduationPlanTypeDescriptor != target.AlternativeGraduationPlanTypeDescriptor)
            {
                source.AlternativeGraduationPlanTypeDescriptor = target.AlternativeGraduationPlanTypeDescriptor;
            }
            if (source.AlternativeGraduationSchoolYear != target.AlternativeGraduationSchoolYear)
            {
                source.AlternativeGraduationSchoolYear = target.AlternativeGraduationSchoolYear;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSchoolAssociationAlternativeGraduationPlan source, IStudentSchoolAssociationAlternativeGraduationPlan target, Action<IStudentSchoolAssociationAlternativeGraduationPlan, IStudentSchoolAssociationAlternativeGraduationPlan> onMapped)
        {
            var sourceSynchSupport = source as IStudentSchoolAssociationAlternativeGraduationPlanSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSchoolAssociationAlternativeGraduationPlanSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AlternativeEducationOrganizationId = source.AlternativeEducationOrganizationId;
            target.AlternativeGraduationPlanTypeDescriptor = source.AlternativeGraduationPlanTypeDescriptor;
            target.AlternativeGraduationSchoolYear = source.AlternativeGraduationSchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AlternativeGraduationPlanResourceId = source.AlternativeGraduationPlanResourceId;
                target.AlternativeGraduationPlanDiscriminator = source.AlternativeGraduationPlanDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSchoolAssociationAlternativeGraduationPlanSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolAssociationEducationPlanMapper 
    {
        public static bool SynchronizeTo(this IStudentSchoolAssociationEducationPlan source, IStudentSchoolAssociationEducationPlan target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSchoolAssociationEducationPlanSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationPlanDescriptor != target.EducationPlanDescriptor)
            {
                source.EducationPlanDescriptor = target.EducationPlanDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSchoolAssociationEducationPlan source, IStudentSchoolAssociationEducationPlan target, Action<IStudentSchoolAssociationEducationPlan, IStudentSchoolAssociationEducationPlan> onMapped)
        {
            var sourceSynchSupport = source as IStudentSchoolAssociationEducationPlanSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSchoolAssociationEducationPlanSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationPlanDescriptor = source.EducationPlanDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSchoolAssociationEducationPlanSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: StudentSchoolAttendanceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSchoolAttendanceEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolAttendanceEventMapper 
    {
        public static bool SynchronizeTo(this IStudentSchoolAttendanceEvent source, IStudentSchoolAttendanceEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSchoolAttendanceEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceEventCategoryDescriptor != target.AttendanceEventCategoryDescriptor)
            {
                source.AttendanceEventCategoryDescriptor = target.AttendanceEventCategoryDescriptor;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsArrivalTimeSupported)
                && target.ArrivalTime != source.ArrivalTime)
            {
                target.ArrivalTime = source.ArrivalTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDepartureTimeSupported)
                && target.DepartureTime != source.DepartureTime)
            {
                target.DepartureTime = source.DepartureTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationalEnvironmentDescriptorSupported)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventDurationSupported)
                && target.EventDuration != source.EventDuration)
            {
                target.EventDuration = source.EventDuration;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolAttendanceDurationSupported)
                && target.SchoolAttendanceDuration != source.SchoolAttendanceDuration)
            {
                target.SchoolAttendanceDuration = source.SchoolAttendanceDuration;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSchoolAttendanceEvent source, IStudentSchoolAttendanceEvent target, Action<IStudentSchoolAttendanceEvent, IStudentSchoolAttendanceEvent> onMapped)
        {
            var sourceSynchSupport = source as IStudentSchoolAttendanceEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSchoolAttendanceEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            target.EventDate = source.EventDate;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsArrivalTimeSupported)
                target.ArrivalTime = source.ArrivalTime;
            else
                targetSynchSupport.IsArrivalTimeSupported = false;

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            if (sourceSynchSupport.IsDepartureTimeSupported)
                target.DepartureTime = source.DepartureTime;
            else
                targetSynchSupport.IsDepartureTimeSupported = false;

            if (sourceSynchSupport.IsEducationalEnvironmentDescriptorSupported)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
            else
                targetSynchSupport.IsEducationalEnvironmentDescriptorSupported = false;

            if (sourceSynchSupport.IsEventDurationSupported)
                target.EventDuration = source.EventDuration;
            else
                targetSynchSupport.IsEventDurationSupported = false;

            if (sourceSynchSupport.IsSchoolAttendanceDurationSupported)
                target.SchoolAttendanceDuration = source.SchoolAttendanceDuration;
            else
                targetSynchSupport.IsSchoolAttendanceDurationSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.SessionResourceId = source.SessionResourceId;
                target.SessionDiscriminator = source.SessionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSchoolAttendanceEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsArrivalTimeSupported { get; set; }
        bool IsAttendanceEventReasonSupported { get; set; }
        bool IsDepartureTimeSupported { get; set; }
        bool IsEducationalEnvironmentDescriptorSupported { get; set; }
        bool IsEventDurationSupported { get; set; }
        bool IsSchoolAttendanceDurationSupported { get; set; }
    }
 
}
// Aggregate: StudentSchoolFoodServiceProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSchoolFoodServiceProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolFoodServiceProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentSchoolFoodServiceProgramAssociation source, IStudentSchoolFoodServiceProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSchoolFoodServiceProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDirectCertificationSupported)
                && target.DirectCertification != source.DirectCertification)
            {
                target.DirectCertification = source.DirectCertification;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported)
            {
                isModified |= 
                    source.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices.SynchronizeCollectionTo(
                        target.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices, 
                        onChildAdded: child => 
                            {
                                child.StudentSchoolFoodServiceProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentSchoolFoodServiceProgramAssociation source, IStudentSchoolFoodServiceProgramAssociation target, Action<IStudentSchoolFoodServiceProgramAssociation, IStudentSchoolFoodServiceProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentSchoolFoodServiceProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSchoolFoodServiceProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDirectCertificationSupported)
                target.DirectCertification = source.DirectCertification;
            else
                targetSynchSupport.IsDirectCertificationSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported)
            {    
                targetSynchSupport.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded = sourceSynchSupport.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded;
                source.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices.MapCollectionTo(target.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSchoolFoodServiceProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDirectCertificationSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServicesSupported { get; set; }
        Func<IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService, bool> IsStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService source, IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolFoodServiceProgramServiceDescriptor != target.SchoolFoodServiceProgramServiceDescriptor)
            {
                source.SchoolFoodServiceProgramServiceDescriptor = target.SchoolFoodServiceProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService source, IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService target, Action<IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService, IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService> onMapped)
        {
            var sourceSynchSupport = source as IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolFoodServiceProgramServiceDescriptor = source.SchoolFoodServiceProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
}
// Aggregate: StudentSectionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentSectionAssociation source, IStudentSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSectionAssociationSynchronizationSourceSupport;

            // Allow PK column updates on StudentSectionAssociation
            if (
                 (target.BeginDate != source.BeginDate)
                || (target.LocalCourseCode != source.LocalCourseCode)
                || (target.SchoolId != source.SchoolId)
                || (target.SchoolYear != source.SchoolYear)
                || (target.SectionIdentifier != source.SectionIdentifier)
                || (target.SessionName != source.SessionName)
                || (target.StudentUniqueId != source.StudentUniqueId))
            {            
                isModified = true;

                var sourceWithPrimaryKeyValues = (source as IHasPrimaryKeyValues);

                if (sourceWithPrimaryKeyValues != null)
                {
                    var targetWithNewKeyValues = target as IHasCascadableKeyValues;

                    if (targetWithNewKeyValues != null)
                        targetWithNewKeyValues.NewKeyValues = sourceWithPrimaryKeyValues.GetPrimaryKeyValues();
                }
            }

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttemptStatusDescriptorSupported)
                && target.AttemptStatusDescriptor != source.AttemptStatusDescriptor)
            {
                target.AttemptStatusDescriptor = source.AttemptStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHomeroomIndicatorSupported)
                && target.HomeroomIndicator != source.HomeroomIndicator)
            {
                target.HomeroomIndicator = source.HomeroomIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRepeatIdentifierDescriptorSupported)
                && target.RepeatIdentifierDescriptor != source.RepeatIdentifierDescriptor)
            {
                target.RepeatIdentifierDescriptor = source.RepeatIdentifierDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherStudentDataLinkExclusionSupported)
                && target.TeacherStudentDataLinkExclusion != source.TeacherStudentDataLinkExclusion)
            {
                target.TeacherStudentDataLinkExclusion = source.TeacherStudentDataLinkExclusion;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSectionAssociation source, IStudentSectionAssociation target, Action<IStudentSectionAssociation, IStudentSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttemptStatusDescriptorSupported)
                target.AttemptStatusDescriptor = source.AttemptStatusDescriptor;
            else
                targetSynchSupport.IsAttemptStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsHomeroomIndicatorSupported)
                target.HomeroomIndicator = source.HomeroomIndicator;
            else
                targetSynchSupport.IsHomeroomIndicatorSupported = false;

            if (sourceSynchSupport.IsRepeatIdentifierDescriptorSupported)
                target.RepeatIdentifierDescriptor = source.RepeatIdentifierDescriptor;
            else
                targetSynchSupport.IsRepeatIdentifierDescriptorSupported = false;

            if (sourceSynchSupport.IsTeacherStudentDataLinkExclusionSupported)
                target.TeacherStudentDataLinkExclusion = source.TeacherStudentDataLinkExclusion;
            else
                targetSynchSupport.IsTeacherStudentDataLinkExclusionSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSectionAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsAttemptStatusDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsHomeroomIndicatorSupported { get; set; }
        bool IsRepeatIdentifierDescriptorSupported { get; set; }
        bool IsTeacherStudentDataLinkExclusionSupported { get; set; }
    }
 
}
// Aggregate: StudentSectionAttendanceEvent

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSectionAttendanceEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentSectionAttendanceEventMapper 
    {
        public static bool SynchronizeTo(this IStudentSectionAttendanceEvent source, IStudentSectionAttendanceEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSectionAttendanceEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceEventCategoryDescriptor != target.AttendanceEventCategoryDescriptor)
            {
                source.AttendanceEventCategoryDescriptor = target.AttendanceEventCategoryDescriptor;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsArrivalTimeSupported)
                && target.ArrivalTime != source.ArrivalTime)
            {
                target.ArrivalTime = source.ArrivalTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDepartureTimeSupported)
                && target.DepartureTime != source.DepartureTime)
            {
                target.DepartureTime = source.DepartureTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationalEnvironmentDescriptorSupported)
                && target.EducationalEnvironmentDescriptor != source.EducationalEnvironmentDescriptor)
            {
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventDurationSupported)
                && target.EventDuration != source.EventDuration)
            {
                target.EventDuration = source.EventDuration;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSectionAttendanceDurationSupported)
                && target.SectionAttendanceDuration != source.SectionAttendanceDuration)
            {
                target.SectionAttendanceDuration = source.SectionAttendanceDuration;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSectionAttendanceEvent source, IStudentSectionAttendanceEvent target, Action<IStudentSectionAttendanceEvent, IStudentSectionAttendanceEvent> onMapped)
        {
            var sourceSynchSupport = source as IStudentSectionAttendanceEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSectionAttendanceEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            target.EventDate = source.EventDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsArrivalTimeSupported)
                target.ArrivalTime = source.ArrivalTime;
            else
                targetSynchSupport.IsArrivalTimeSupported = false;

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            if (sourceSynchSupport.IsDepartureTimeSupported)
                target.DepartureTime = source.DepartureTime;
            else
                targetSynchSupport.IsDepartureTimeSupported = false;

            if (sourceSynchSupport.IsEducationalEnvironmentDescriptorSupported)
                target.EducationalEnvironmentDescriptor = source.EducationalEnvironmentDescriptor;
            else
                targetSynchSupport.IsEducationalEnvironmentDescriptorSupported = false;

            if (sourceSynchSupport.IsEventDurationSupported)
                target.EventDuration = source.EventDuration;
            else
                targetSynchSupport.IsEventDurationSupported = false;

            if (sourceSynchSupport.IsSectionAttendanceDurationSupported)
                target.SectionAttendanceDuration = source.SectionAttendanceDuration;
            else
                targetSynchSupport.IsSectionAttendanceDurationSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSectionAttendanceEventSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsArrivalTimeSupported { get; set; }
        bool IsAttendanceEventReasonSupported { get; set; }
        bool IsDepartureTimeSupported { get; set; }
        bool IsEducationalEnvironmentDescriptorSupported { get; set; }
        bool IsEventDurationSupported { get; set; }
        bool IsSectionAttendanceDurationSupported { get; set; }
    }
 
}
// Aggregate: StudentSpecialEducationProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentSpecialEducationProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociation source, IStudentSpecialEducationProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsIdeaEligibilitySupported)
                && target.IdeaEligibility != source.IdeaEligibility)
            {
                target.IdeaEligibility = source.IdeaEligibility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIEPBeginDateSupported)
                && target.IEPBeginDate != source.IEPBeginDate)
            {
                target.IEPBeginDate = source.IEPBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIEPEndDateSupported)
                && target.IEPEndDate != source.IEPEndDate)
            {
                target.IEPEndDate = source.IEPEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIEPReviewDateSupported)
                && target.IEPReviewDate != source.IEPReviewDate)
            {
                target.IEPReviewDate = source.IEPReviewDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastEvaluationDateSupported)
                && target.LastEvaluationDate != source.LastEvaluationDate)
            {
                target.LastEvaluationDate = source.LastEvaluationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMedicallyFragileSupported)
                && target.MedicallyFragile != source.MedicallyFragile)
            {
                target.MedicallyFragile = source.MedicallyFragile;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMultiplyDisabledSupported)
                && target.MultiplyDisabled != source.MultiplyDisabled)
            {
                target.MultiplyDisabled = source.MultiplyDisabled;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolHoursPerWeekSupported)
                && target.SchoolHoursPerWeek != source.SchoolHoursPerWeek)
            {
                target.SchoolHoursPerWeek = source.SchoolHoursPerWeek;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSpecialEducationHoursPerWeekSupported)
                && target.SpecialEducationHoursPerWeek != source.SpecialEducationHoursPerWeek)
            {
                target.SpecialEducationHoursPerWeek = source.SpecialEducationHoursPerWeek;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSpecialEducationSettingDescriptorSupported)
                && target.SpecialEducationSettingDescriptor != source.SpecialEducationSettingDescriptor)
            {
                target.SpecialEducationSettingDescriptor = source.SpecialEducationSettingDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentSpecialEducationProgramAssociationDisabilitiesSupported)
            {
                isModified |= 
                    source.StudentSpecialEducationProgramAssociationDisabilities.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationDisabilities, 
                        onChildAdded: child => 
                            {
                                child.StudentSpecialEducationProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentSpecialEducationProgramAssociationDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentSpecialEducationProgramAssociationServiceProvidersSupported)
            {
                isModified |= 
                    source.StudentSpecialEducationProgramAssociationServiceProviders.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationServiceProviders, 
                        onChildAdded: child => 
                            {
                                child.StudentSpecialEducationProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentSpecialEducationProgramAssociationServiceProviderIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported)
            {
                isModified |= 
                    source.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices, 
                        onChildAdded: child => 
                            {
                                child.StudentSpecialEducationProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentSpecialEducationProgramAssociation source, IStudentSpecialEducationProgramAssociation target, Action<IStudentSpecialEducationProgramAssociation, IStudentSpecialEducationProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsIdeaEligibilitySupported)
                target.IdeaEligibility = source.IdeaEligibility;
            else
                targetSynchSupport.IsIdeaEligibilitySupported = false;

            if (sourceSynchSupport.IsIEPBeginDateSupported)
                target.IEPBeginDate = source.IEPBeginDate;
            else
                targetSynchSupport.IsIEPBeginDateSupported = false;

            if (sourceSynchSupport.IsIEPEndDateSupported)
                target.IEPEndDate = source.IEPEndDate;
            else
                targetSynchSupport.IsIEPEndDateSupported = false;

            if (sourceSynchSupport.IsIEPReviewDateSupported)
                target.IEPReviewDate = source.IEPReviewDate;
            else
                targetSynchSupport.IsIEPReviewDateSupported = false;

            if (sourceSynchSupport.IsLastEvaluationDateSupported)
                target.LastEvaluationDate = source.LastEvaluationDate;
            else
                targetSynchSupport.IsLastEvaluationDateSupported = false;

            if (sourceSynchSupport.IsMedicallyFragileSupported)
                target.MedicallyFragile = source.MedicallyFragile;
            else
                targetSynchSupport.IsMedicallyFragileSupported = false;

            if (sourceSynchSupport.IsMultiplyDisabledSupported)
                target.MultiplyDisabled = source.MultiplyDisabled;
            else
                targetSynchSupport.IsMultiplyDisabledSupported = false;

            if (sourceSynchSupport.IsSchoolHoursPerWeekSupported)
                target.SchoolHoursPerWeek = source.SchoolHoursPerWeek;
            else
                targetSynchSupport.IsSchoolHoursPerWeekSupported = false;

            if (sourceSynchSupport.IsSpecialEducationHoursPerWeekSupported)
                target.SpecialEducationHoursPerWeek = source.SpecialEducationHoursPerWeek;
            else
                targetSynchSupport.IsSpecialEducationHoursPerWeekSupported = false;

            if (sourceSynchSupport.IsSpecialEducationSettingDescriptorSupported)
                target.SpecialEducationSettingDescriptor = source.SpecialEducationSettingDescriptor;
            else
                targetSynchSupport.IsSpecialEducationSettingDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentSpecialEducationProgramAssociationDisabilitiesSupported)
            {    
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationDisabilityIncluded = sourceSynchSupport.IsStudentSpecialEducationProgramAssociationDisabilityIncluded;
                source.StudentSpecialEducationProgramAssociationDisabilities.MapCollectionTo(target.StudentSpecialEducationProgramAssociationDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsStudentSpecialEducationProgramAssociationServiceProvidersSupported)
            {    
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationServiceProviderIncluded = sourceSynchSupport.IsStudentSpecialEducationProgramAssociationServiceProviderIncluded;
                source.StudentSpecialEducationProgramAssociationServiceProviders.MapCollectionTo(target.StudentSpecialEducationProgramAssociationServiceProviders, target);
            }
            else
            {
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationServiceProvidersSupported = false;
            }

            if (sourceSynchSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported)
            {    
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded = sourceSynchSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded;
                source.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices.MapCollectionTo(target.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsIdeaEligibilitySupported { get; set; }
        bool IsIEPBeginDateSupported { get; set; }
        bool IsIEPEndDateSupported { get; set; }
        bool IsIEPReviewDateSupported { get; set; }
        bool IsLastEvaluationDateSupported { get; set; }
        bool IsMedicallyFragileSupported { get; set; }
        bool IsMultiplyDisabledSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsSchoolHoursPerWeekSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsSpecialEducationHoursPerWeekSupported { get; set; }
        bool IsSpecialEducationSettingDescriptorSupported { get; set; }
        bool IsStudentSpecialEducationProgramAssociationDisabilitiesSupported { get; set; }
        bool IsStudentSpecialEducationProgramAssociationServiceProvidersSupported { get; set; }
        bool IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServicesSupported { get; set; }
        Func<IStudentSpecialEducationProgramAssociationDisability, bool> IsStudentSpecialEducationProgramAssociationDisabilityIncluded { get; set; }
        Func<IStudentSpecialEducationProgramAssociationServiceProvider, bool> IsStudentSpecialEducationProgramAssociationServiceProviderIncluded { get; set; }
        Func<IStudentSpecialEducationProgramAssociationSpecialEducationProgramService, bool> IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationDisabilityMapper 
    {
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationDisability source, IStudentSpecialEducationProgramAssociationDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSpecialEducationProgramAssociationDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.StudentSpecialEducationProgramAssociationDisabilityDesignations.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.StudentSpecialEducationProgramAssociationDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSpecialEducationProgramAssociationDisability source, IStudentSpecialEducationProgramAssociationDisability target, Action<IStudentSpecialEducationProgramAssociationDisability, IStudentSpecialEducationProgramAssociationDisability> onMapped)
        {
            var sourceSynchSupport = source as IStudentSpecialEducationProgramAssociationDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSpecialEducationProgramAssociationDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded = sourceSynchSupport.IsStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded;
                source.StudentSpecialEducationProgramAssociationDisabilityDesignations.MapCollectionTo(target.StudentSpecialEducationProgramAssociationDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationDisabilitySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        bool IsStudentSpecialEducationProgramAssociationDisabilityDesignationsSupported { get; set; }
        Func<IStudentSpecialEducationProgramAssociationDisabilityDesignation, bool> IsStudentSpecialEducationProgramAssociationDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationDisabilityDesignation source, IStudentSpecialEducationProgramAssociationDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSpecialEducationProgramAssociationDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSpecialEducationProgramAssociationDisabilityDesignation source, IStudentSpecialEducationProgramAssociationDisabilityDesignation target, Action<IStudentSpecialEducationProgramAssociationDisabilityDesignation, IStudentSpecialEducationProgramAssociationDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IStudentSpecialEducationProgramAssociationDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSpecialEducationProgramAssociationDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationDisabilityDesignationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationServiceProviderMapper 
    {
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationServiceProvider source, IStudentSpecialEducationProgramAssociationServiceProvider target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSpecialEducationProgramAssociationServiceProviderSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryProviderSupported)
                && target.PrimaryProvider != source.PrimaryProvider)
            {
                target.PrimaryProvider = source.PrimaryProvider;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSpecialEducationProgramAssociationServiceProvider source, IStudentSpecialEducationProgramAssociationServiceProvider target, Action<IStudentSpecialEducationProgramAssociationServiceProvider, IStudentSpecialEducationProgramAssociationServiceProvider> onMapped)
        {
            var sourceSynchSupport = source as IStudentSpecialEducationProgramAssociationServiceProviderSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSpecialEducationProgramAssociationServiceProviderSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryProviderSupported)
                target.PrimaryProvider = source.PrimaryProvider;
            else
                targetSynchSupport.IsPrimaryProviderSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationServiceProviderSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryProviderSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationSpecialEducationProgramService source, IStudentSpecialEducationProgramAssociationSpecialEducationProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SpecialEducationProgramServiceDescriptor != target.SpecialEducationProgramServiceDescriptor)
            {
                source.SpecialEducationProgramServiceDescriptor = target.SpecialEducationProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported)
            {
                isModified |= 
                    source.StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders.SynchronizeCollectionTo(
                        target.StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders, 
                        onChildAdded: child => 
                            {
                                child.StudentSpecialEducationProgramAssociationSpecialEducationProgramService = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSpecialEducationProgramAssociationSpecialEducationProgramService source, IStudentSpecialEducationProgramAssociationSpecialEducationProgramService target, Action<IStudentSpecialEducationProgramAssociationSpecialEducationProgramService, IStudentSpecialEducationProgramAssociationSpecialEducationProgramService> onMapped)
        {
            var sourceSynchSupport = source as IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SpecialEducationProgramServiceDescriptor = source.SpecialEducationProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported)
            {    
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded = sourceSynchSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded;
                source.StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders.MapCollectionTo(target.StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviders, target);
            }
            else
            {
                targetSynchSupport.IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
        bool IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvidersSupported { get; set; }
        Func<IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider, bool> IsStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderMapper 
    {
        public static bool SynchronizeTo(this IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider source, IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryProviderSupported)
                && target.PrimaryProvider != source.PrimaryProvider)
            {
                target.PrimaryProvider = source.PrimaryProvider;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider source, IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider target, Action<IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider, IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider> onMapped)
        {
            var sourceSynchSupport = source as IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryProviderSupported)
                target.PrimaryProvider = source.PrimaryProvider;
            else
                targetSynchSupport.IsPrimaryProviderSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProviderSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryProviderSupported { get; set; }
    }
 
}
// Aggregate: StudentTitleIPartAProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.StudentTitleIPartAProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentTitleIPartAProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStudentTitleIPartAProgramAssociation source, IStudentTitleIPartAProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramEducationOrganizationId != target.ProgramEducationOrganizationId)
            {
                source.ProgramEducationOrganizationId = target.ProgramEducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServedOutsideOfRegularSessionSupported)
                && target.ServedOutsideOfRegularSession != source.ServedOutsideOfRegularSession)
            {
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsTitleIPartAParticipantDescriptorSupported)
                && target.TitleIPartAParticipantDescriptor != source.TitleIPartAParticipantDescriptor)
            {
                target.TitleIPartAParticipantDescriptor = source.TitleIPartAParticipantDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // GeneralStudentProgramAssociationParticipationStatus
            if (sourceSupport == null || sourceSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus != null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        var itemType = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) newItem;
                    }

                    isModified |= source.GeneralStudentProgramAssociationParticipationStatus.Synchronize(target.GeneralStudentProgramAssociationParticipationStatus);
                }
            }
            
            // -------------------------------------------------------------

            // Synch inherited lists

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStudentTitleIPartAProgramAssociationServicesSupported)
            {
                isModified |= 
                    source.StudentTitleIPartAProgramAssociationServices.SynchronizeCollectionTo(
                        target.StudentTitleIPartAProgramAssociationServices, 
                        onChildAdded: child => 
                            {
                                child.StudentTitleIPartAProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentTitleIPartAProgramAssociationServiceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported)
            {
                isModified |= 
                    source.StudentTitleIPartAProgramAssociationTitleIPartAProgramServices.SynchronizeCollectionTo(
                        target.StudentTitleIPartAProgramAssociationTitleIPartAProgramServices, 
                        onChildAdded: child => 
                            {
                                child.StudentTitleIPartAProgramAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapDerivedTo(this IStudentTitleIPartAProgramAssociation source, IStudentTitleIPartAProgramAssociation target, Action<IStudentTitleIPartAProgramAssociation, IStudentTitleIPartAProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramEducationOrganizationId = source.ProgramEducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            if (sourceSynchSupport.IsServedOutsideOfRegularSessionSupported)
                target.ServedOutsideOfRegularSession = source.ServedOutsideOfRegularSession;
            else
                targetSynchSupport.IsServedOutsideOfRegularSessionSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsTitleIPartAParticipantDescriptorSupported)
                target.TitleIPartAParticipantDescriptor = source.TitleIPartAParticipantDescriptor;
            else
                targetSynchSupport.IsTitleIPartAParticipantDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // GeneralStudentProgramAssociationParticipationStatus (Source)
            if (sourceSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported)
            {
                var itemProperty = target.GetType().GetProperty("GeneralStudentProgramAssociationParticipationStatus");
                
                if (itemProperty != null)
                {                    
                    if (source.GeneralStudentProgramAssociationParticipationStatus == null)
                    {
                        target.GeneralStudentProgramAssociationParticipationStatus = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetGeneralStudentProgramAssociationParticipationStatus = Activator.CreateInstance(itemType);
                        (targetGeneralStudentProgramAssociationParticipationStatus as IChildEntity)?.SetParent(target);
                        source.GeneralStudentProgramAssociationParticipationStatus.Map(targetGeneralStudentProgramAssociationParticipationStatus);
                        
                        // Update the target reference appropriately
                        target.GeneralStudentProgramAssociationParticipationStatus = (IGeneralStudentProgramAssociationParticipationStatus) targetGeneralStudentProgramAssociationParticipationStatus;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsGeneralStudentProgramAssociationParticipationStatusSupported = false; 
            }
            // -------------------------------------------------------------

            // Map inherited lists

            // Map lists

            if (sourceSynchSupport.IsStudentTitleIPartAProgramAssociationServicesSupported)
            {    
                targetSynchSupport.IsStudentTitleIPartAProgramAssociationServiceIncluded = sourceSynchSupport.IsStudentTitleIPartAProgramAssociationServiceIncluded;
                source.StudentTitleIPartAProgramAssociationServices.MapCollectionTo(target.StudentTitleIPartAProgramAssociationServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentTitleIPartAProgramAssociationServicesSupported = false;
            }

            if (sourceSynchSupport.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported)
            {    
                targetSynchSupport.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded = sourceSynchSupport.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded;
                source.StudentTitleIPartAProgramAssociationTitleIPartAProgramServices.MapCollectionTo(target.StudentTitleIPartAProgramAssociationTitleIPartAProgramServices, target);
            }
            else
            {
                targetSynchSupport.IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentTitleIPartAProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEndDateSupported { get; set; }
        bool IsGeneralStudentProgramAssociationParticipationStatusSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
        bool IsServedOutsideOfRegularSessionSupported { get; set; }
        bool IsStudentTitleIPartAProgramAssociationServicesSupported { get; set; }
        bool IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServicesSupported { get; set; }
        bool IsTitleIPartAParticipantDescriptorSupported { get; set; }
        Func<IStudentTitleIPartAProgramAssociationService, bool> IsStudentTitleIPartAProgramAssociationServiceIncluded { get; set; }
        Func<IStudentTitleIPartAProgramAssociationTitleIPartAProgramService, bool> IsStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentTitleIPartAProgramAssociationServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentTitleIPartAProgramAssociationService source, IStudentTitleIPartAProgramAssociationService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentTitleIPartAProgramAssociationServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ServiceDescriptor != target.ServiceDescriptor)
            {
                source.ServiceDescriptor = target.ServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentTitleIPartAProgramAssociationService source, IStudentTitleIPartAProgramAssociationService target, Action<IStudentTitleIPartAProgramAssociationService, IStudentTitleIPartAProgramAssociationService> onMapped)
        {
            var sourceSynchSupport = source as IStudentTitleIPartAProgramAssociationServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentTitleIPartAProgramAssociationServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ServiceDescriptor = source.ServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentTitleIPartAProgramAssociationServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StudentTitleIPartAProgramAssociationTitleIPartAProgramServiceMapper 
    {
        public static bool SynchronizeTo(this IStudentTitleIPartAProgramAssociationTitleIPartAProgramService source, IStudentTitleIPartAProgramAssociationTitleIPartAProgramService target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TitleIPartAProgramServiceDescriptor != target.TitleIPartAProgramServiceDescriptor)
            {
                source.TitleIPartAProgramServiceDescriptor = target.TitleIPartAProgramServiceDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPrimaryIndicatorSupported)
                && target.PrimaryIndicator != source.PrimaryIndicator)
            {
                target.PrimaryIndicator = source.PrimaryIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceBeginDateSupported)
                && target.ServiceBeginDate != source.ServiceBeginDate)
            {
                target.ServiceBeginDate = source.ServiceBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsServiceEndDateSupported)
                && target.ServiceEndDate != source.ServiceEndDate)
            {
                target.ServiceEndDate = source.ServiceEndDate;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this IStudentTitleIPartAProgramAssociationTitleIPartAProgramService source, IStudentTitleIPartAProgramAssociationTitleIPartAProgramService target, Action<IStudentTitleIPartAProgramAssociationTitleIPartAProgramService, IStudentTitleIPartAProgramAssociationTitleIPartAProgramService> onMapped)
        {
            var sourceSynchSupport = source as IStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TitleIPartAProgramServiceDescriptor = source.TitleIPartAProgramServiceDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsPrimaryIndicatorSupported)
                target.PrimaryIndicator = source.PrimaryIndicator;
            else
                targetSynchSupport.IsPrimaryIndicatorSupported = false;

            if (sourceSynchSupport.IsServiceBeginDateSupported)
                target.ServiceBeginDate = source.ServiceBeginDate;
            else
                targetSynchSupport.IsServiceBeginDateSupported = false;

            if (sourceSynchSupport.IsServiceEndDateSupported)
                target.ServiceEndDate = source.ServiceEndDate;
            else
                targetSynchSupport.IsServiceEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentTitleIPartAProgramAssociationTitleIPartAProgramServiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsPrimaryIndicatorSupported { get; set; }
        bool IsServiceBeginDateSupported { get; set; }
        bool IsServiceEndDateSupported { get; set; }
    }
 
}
// Aggregate: Survey

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyMapper 
    {
        public static bool SynchronizeTo(this ISurvey source, ISurvey target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumberAdministeredSupported)
                && target.NumberAdministered != source.NumberAdministered)
            {
                target.NumberAdministered = source.NumberAdministered;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionNameSupported)
                && target.SessionName != source.SessionName)
            {
                target.SessionName = source.SessionName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSurveyCategoryDescriptorSupported)
                && target.SurveyCategoryDescriptor != source.SurveyCategoryDescriptor)
            {
                target.SurveyCategoryDescriptor = source.SurveyCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSurveyTitleSupported)
                && target.SurveyTitle != source.SurveyTitle)
            {
                target.SurveyTitle = source.SurveyTitle;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurvey source, ISurvey target, Action<ISurvey, ISurvey> onMapped)
        {
            var sourceSynchSupport = source as ISurveySynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsNumberAdministeredSupported)
                target.NumberAdministered = source.NumberAdministered;
            else
                targetSynchSupport.IsNumberAdministeredSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsSessionNameSupported)
                target.SessionName = source.SessionName;
            else
                targetSynchSupport.IsSessionNameSupported = false;

            if (sourceSynchSupport.IsSurveyCategoryDescriptorSupported)
                target.SurveyCategoryDescriptor = source.SurveyCategoryDescriptor;
            else
                targetSynchSupport.IsSurveyCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsSurveyTitleSupported)
                target.SurveyTitle = source.SurveyTitle;
            else
                targetSynchSupport.IsSurveyTitleSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.SessionResourceId = source.SessionResourceId;
                target.SessionDiscriminator = source.SessionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsNumberAdministeredSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsSessionNameSupported { get; set; }
        bool IsSurveyCategoryDescriptorSupported { get; set; }
        bool IsSurveyTitleSupported { get; set; }
    }
 
}
// Aggregate: SurveyCategoryDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyCategoryDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyCategoryDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISurveyCategoryDescriptor source, ISurveyCategoryDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyCategoryDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SurveyCategoryDescriptorId != target.SurveyCategoryDescriptorId)
            {
                source.SurveyCategoryDescriptorId = target.SurveyCategoryDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveyCategoryDescriptor source, ISurveyCategoryDescriptor target, Action<ISurveyCategoryDescriptor, ISurveyCategoryDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISurveyCategoryDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyCategoryDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SurveyCategoryDescriptorId = source.SurveyCategoryDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyCategoryDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SurveyCourseAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveyCourseAssociation source, ISurveyCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyCourseAssociation source, ISurveyCourseAssociation target, Action<ISurveyCourseAssociation, ISurveyCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveyCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyCourseAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SurveyLevelDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISurveyLevelDescriptor source, ISurveyLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SurveyLevelDescriptorId != target.SurveyLevelDescriptorId)
            {
                source.SurveyLevelDescriptorId = target.SurveyLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveyLevelDescriptor source, ISurveyLevelDescriptor target, Action<ISurveyLevelDescriptor, ISurveyLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISurveyLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SurveyLevelDescriptorId = source.SurveyLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SurveyProgramAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveyProgramAssociation source, ISurveyProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyProgramAssociation source, ISurveyProgramAssociation target, Action<ISurveyProgramAssociation, ISurveyProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveyProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProgramResourceId = source.ProgramResourceId;
                target.ProgramDiscriminator = source.ProgramDiscriminator;
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyProgramAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SurveyQuestion

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyQuestionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionMapper 
    {
        public static bool SynchronizeTo(this ISurveyQuestion source, ISurveyQuestion target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyQuestionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.QuestionCode != target.QuestionCode)
            {
                source.QuestionCode = target.QuestionCode;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsQuestionFormDescriptorSupported)
                && target.QuestionFormDescriptor != source.QuestionFormDescriptor)
            {
                target.QuestionFormDescriptor = source.QuestionFormDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsQuestionTextSupported)
                && target.QuestionText != source.QuestionText)
            {
                target.QuestionText = source.QuestionText;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSurveySectionTitleSupported)
                && target.SurveySectionTitle != source.SurveySectionTitle)
            {
                target.SurveySectionTitle = source.SurveySectionTitle;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSurveyQuestionMatricesSupported)
            {
                isModified |= 
                    source.SurveyQuestionMatrices.SynchronizeCollectionTo(
                        target.SurveyQuestionMatrices, 
                        onChildAdded: child => 
                            {
                                child.SurveyQuestion = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSurveyQuestionMatrixIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSurveyQuestionResponseChoicesSupported)
            {
                isModified |= 
                    source.SurveyQuestionResponseChoices.SynchronizeCollectionTo(
                        target.SurveyQuestionResponseChoices, 
                        onChildAdded: child => 
                            {
                                child.SurveyQuestion = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSurveyQuestionResponseChoiceIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyQuestion source, ISurveyQuestion target, Action<ISurveyQuestion, ISurveyQuestion> onMapped)
        {
            var sourceSynchSupport = source as ISurveyQuestionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyQuestionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.QuestionCode = source.QuestionCode;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsQuestionFormDescriptorSupported)
                target.QuestionFormDescriptor = source.QuestionFormDescriptor;
            else
                targetSynchSupport.IsQuestionFormDescriptorSupported = false;

            if (sourceSynchSupport.IsQuestionTextSupported)
                target.QuestionText = source.QuestionText;
            else
                targetSynchSupport.IsQuestionTextSupported = false;

            if (sourceSynchSupport.IsSurveySectionTitleSupported)
                target.SurveySectionTitle = source.SurveySectionTitle;
            else
                targetSynchSupport.IsSurveySectionTitleSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
                target.SurveySectionResourceId = source.SurveySectionResourceId;
                target.SurveySectionDiscriminator = source.SurveySectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsSurveyQuestionMatricesSupported)
            {    
                targetSynchSupport.IsSurveyQuestionMatrixIncluded = sourceSynchSupport.IsSurveyQuestionMatrixIncluded;
                source.SurveyQuestionMatrices.MapCollectionTo(target.SurveyQuestionMatrices, target);
            }
            else
            {
                targetSynchSupport.IsSurveyQuestionMatricesSupported = false;
            }

            if (sourceSynchSupport.IsSurveyQuestionResponseChoicesSupported)
            {    
                targetSynchSupport.IsSurveyQuestionResponseChoiceIncluded = sourceSynchSupport.IsSurveyQuestionResponseChoiceIncluded;
                source.SurveyQuestionResponseChoices.MapCollectionTo(target.SurveyQuestionResponseChoices, target);
            }
            else
            {
                targetSynchSupport.IsSurveyQuestionResponseChoicesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyQuestionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsQuestionFormDescriptorSupported { get; set; }
        bool IsQuestionTextSupported { get; set; }
        bool IsSurveyQuestionMatricesSupported { get; set; }
        bool IsSurveyQuestionResponseChoicesSupported { get; set; }
        bool IsSurveySectionTitleSupported { get; set; }
        Func<ISurveyQuestionMatrix, bool> IsSurveyQuestionMatrixIncluded { get; set; }
        Func<ISurveyQuestionResponseChoice, bool> IsSurveyQuestionResponseChoiceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionMatrixMapper 
    {
        public static bool SynchronizeTo(this ISurveyQuestionMatrix source, ISurveyQuestionMatrix target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyQuestionMatrixSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MatrixElement != target.MatrixElement)
            {
                source.MatrixElement = target.MatrixElement;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRawScoreSupported)
                && target.MaxRawScore != source.MaxRawScore)
            {
                target.MaxRawScore = source.MaxRawScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRawScoreSupported)
                && target.MinRawScore != source.MinRawScore)
            {
                target.MinRawScore = source.MinRawScore;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyQuestionMatrix source, ISurveyQuestionMatrix target, Action<ISurveyQuestionMatrix, ISurveyQuestionMatrix> onMapped)
        {
            var sourceSynchSupport = source as ISurveyQuestionMatrixSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyQuestionMatrixSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.MatrixElement = source.MatrixElement;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRawScoreSupported)
                target.MaxRawScore = source.MaxRawScore;
            else
                targetSynchSupport.IsMaxRawScoreSupported = false;

            if (sourceSynchSupport.IsMinRawScoreSupported)
                target.MinRawScore = source.MinRawScore;
            else
                targetSynchSupport.IsMinRawScoreSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyQuestionMatrixSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMaxRawScoreSupported { get; set; }
        bool IsMinRawScoreSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionResponseChoiceMapper 
    {
        public static bool SynchronizeTo(this ISurveyQuestionResponseChoice source, ISurveyQuestionResponseChoice target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyQuestionResponseChoiceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SortOrder != target.SortOrder)
            {
                source.SortOrder = target.SortOrder;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumericValueSupported)
                && target.NumericValue != source.NumericValue)
            {
                target.NumericValue = source.NumericValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextValueSupported)
                && target.TextValue != source.TextValue)
            {
                target.TextValue = source.TextValue;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyQuestionResponseChoice source, ISurveyQuestionResponseChoice target, Action<ISurveyQuestionResponseChoice, ISurveyQuestionResponseChoice> onMapped)
        {
            var sourceSynchSupport = source as ISurveyQuestionResponseChoiceSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyQuestionResponseChoiceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SortOrder = source.SortOrder;

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumericValueSupported)
                target.NumericValue = source.NumericValue;
            else
                targetSynchSupport.IsNumericValueSupported = false;

            if (sourceSynchSupport.IsTextValueSupported)
                target.TextValue = source.TextValue;
            else
                targetSynchSupport.IsTextValueSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyQuestionResponseChoiceSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsNumericValueSupported { get; set; }
        bool IsTextValueSupported { get; set; }
    }
 
}
// Aggregate: SurveyQuestionResponse

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyQuestionResponseAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionResponseMapper 
    {
        public static bool SynchronizeTo(this ISurveyQuestionResponse source, ISurveyQuestionResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyQuestionResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.QuestionCode != target.QuestionCode)
            {
                source.QuestionCode = target.QuestionCode;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCommentSupported)
                && target.Comment != source.Comment)
            {
                target.Comment = source.Comment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNoResponseSupported)
                && target.NoResponse != source.NoResponse)
            {
                target.NoResponse = source.NoResponse;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported)
            {
                isModified |= 
                    source.SurveyQuestionResponseSurveyQuestionMatrixElementResponses.SynchronizeCollectionTo(
                        target.SurveyQuestionResponseSurveyQuestionMatrixElementResponses, 
                        onChildAdded: child => 
                            {
                                child.SurveyQuestionResponse = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsSurveyQuestionResponseValuesSupported)
            {
                isModified |= 
                    source.SurveyQuestionResponseValues.SynchronizeCollectionTo(
                        target.SurveyQuestionResponseValues, 
                        onChildAdded: child => 
                            {
                                child.SurveyQuestionResponse = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSurveyQuestionResponseValueIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyQuestionResponse source, ISurveyQuestionResponse target, Action<ISurveyQuestionResponse, ISurveyQuestionResponse> onMapped)
        {
            var sourceSynchSupport = source as ISurveyQuestionResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyQuestionResponseSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.QuestionCode = source.QuestionCode;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCommentSupported)
                target.Comment = source.Comment;
            else
                targetSynchSupport.IsCommentSupported = false;

            if (sourceSynchSupport.IsNoResponseSupported)
                target.NoResponse = source.NoResponse;
            else
                targetSynchSupport.IsNoResponseSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyQuestionResourceId = source.SurveyQuestionResourceId;
                target.SurveyQuestionDiscriminator = source.SurveyQuestionDiscriminator;
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported)
            {    
                targetSynchSupport.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded = sourceSynchSupport.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded;
                source.SurveyQuestionResponseSurveyQuestionMatrixElementResponses.MapCollectionTo(target.SurveyQuestionResponseSurveyQuestionMatrixElementResponses, target);
            }
            else
            {
                targetSynchSupport.IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported = false;
            }

            if (sourceSynchSupport.IsSurveyQuestionResponseValuesSupported)
            {    
                targetSynchSupport.IsSurveyQuestionResponseValueIncluded = sourceSynchSupport.IsSurveyQuestionResponseValueIncluded;
                source.SurveyQuestionResponseValues.MapCollectionTo(target.SurveyQuestionResponseValues, target);
            }
            else
            {
                targetSynchSupport.IsSurveyQuestionResponseValuesSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyQuestionResponseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsCommentSupported { get; set; }
        bool IsNoResponseSupported { get; set; }
        bool IsSurveyQuestionResponseSurveyQuestionMatrixElementResponsesSupported { get; set; }
        bool IsSurveyQuestionResponseValuesSupported { get; set; }
        Func<ISurveyQuestionResponseSurveyQuestionMatrixElementResponse, bool> IsSurveyQuestionResponseSurveyQuestionMatrixElementResponseIncluded { get; set; }
        Func<ISurveyQuestionResponseValue, bool> IsSurveyQuestionResponseValueIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionResponseSurveyQuestionMatrixElementResponseMapper 
    {
        public static bool SynchronizeTo(this ISurveyQuestionResponseSurveyQuestionMatrixElementResponse source, ISurveyQuestionResponseSurveyQuestionMatrixElementResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyQuestionResponseSurveyQuestionMatrixElementResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.MatrixElement != target.MatrixElement)
            {
                source.MatrixElement = target.MatrixElement;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxNumericResponseSupported)
                && target.MaxNumericResponse != source.MaxNumericResponse)
            {
                target.MaxNumericResponse = source.MaxNumericResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinNumericResponseSupported)
                && target.MinNumericResponse != source.MinNumericResponse)
            {
                target.MinNumericResponse = source.MinNumericResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNoResponseSupported)
                && target.NoResponse != source.NoResponse)
            {
                target.NoResponse = source.NoResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNumericResponseSupported)
                && target.NumericResponse != source.NumericResponse)
            {
                target.NumericResponse = source.NumericResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextResponseSupported)
                && target.TextResponse != source.TextResponse)
            {
                target.TextResponse = source.TextResponse;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyQuestionResponseSurveyQuestionMatrixElementResponse source, ISurveyQuestionResponseSurveyQuestionMatrixElementResponse target, Action<ISurveyQuestionResponseSurveyQuestionMatrixElementResponse, ISurveyQuestionResponseSurveyQuestionMatrixElementResponse> onMapped)
        {
            var sourceSynchSupport = source as ISurveyQuestionResponseSurveyQuestionMatrixElementResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyQuestionResponseSurveyQuestionMatrixElementResponseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.MatrixElement = source.MatrixElement;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxNumericResponseSupported)
                target.MaxNumericResponse = source.MaxNumericResponse;
            else
                targetSynchSupport.IsMaxNumericResponseSupported = false;

            if (sourceSynchSupport.IsMinNumericResponseSupported)
                target.MinNumericResponse = source.MinNumericResponse;
            else
                targetSynchSupport.IsMinNumericResponseSupported = false;

            if (sourceSynchSupport.IsNoResponseSupported)
                target.NoResponse = source.NoResponse;
            else
                targetSynchSupport.IsNoResponseSupported = false;

            if (sourceSynchSupport.IsNumericResponseSupported)
                target.NumericResponse = source.NumericResponse;
            else
                targetSynchSupport.IsNumericResponseSupported = false;

            if (sourceSynchSupport.IsTextResponseSupported)
                target.TextResponse = source.TextResponse;
            else
                targetSynchSupport.IsTextResponseSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyQuestionResponseSurveyQuestionMatrixElementResponseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsMaxNumericResponseSupported { get; set; }
        bool IsMinNumericResponseSupported { get; set; }
        bool IsNoResponseSupported { get; set; }
        bool IsNumericResponseSupported { get; set; }
        bool IsTextResponseSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SurveyQuestionResponseValueMapper 
    {
        public static bool SynchronizeTo(this ISurveyQuestionResponseValue source, ISurveyQuestionResponseValue target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyQuestionResponseValueSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SurveyQuestionResponseValueIdentifier != target.SurveyQuestionResponseValueIdentifier)
            {
                source.SurveyQuestionResponseValueIdentifier = target.SurveyQuestionResponseValueIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsNumericResponseSupported)
                && target.NumericResponse != source.NumericResponse)
            {
                target.NumericResponse = source.NumericResponse;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextResponseSupported)
                && target.TextResponse != source.TextResponse)
            {
                target.TextResponse = source.TextResponse;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyQuestionResponseValue source, ISurveyQuestionResponseValue target, Action<ISurveyQuestionResponseValue, ISurveyQuestionResponseValue> onMapped)
        {
            var sourceSynchSupport = source as ISurveyQuestionResponseValueSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyQuestionResponseValueSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SurveyQuestionResponseValueIdentifier = source.SurveyQuestionResponseValueIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsNumericResponseSupported)
                target.NumericResponse = source.NumericResponse;
            else
                targetSynchSupport.IsNumericResponseSupported = false;

            if (sourceSynchSupport.IsTextResponseSupported)
                target.TextResponse = source.TextResponse;
            else
                targetSynchSupport.IsTextResponseSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyQuestionResponseValueSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsNumericResponseSupported { get; set; }
        bool IsTextResponseSupported { get; set; }
    }
 
}
// Aggregate: SurveyResponse

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyResponseAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseMapper 
    {
        public static bool SynchronizeTo(this ISurveyResponse source, ISurveyResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsElectronicMailAddressSupported)
                && target.ElectronicMailAddress != source.ElectronicMailAddress)
            {
                target.ElectronicMailAddress = source.ElectronicMailAddress;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFullNameSupported)
                && target.FullName != source.FullName)
            {
                target.FullName = source.FullName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocationSupported)
                && target.Location != source.Location)
            {
                target.Location = source.Location;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsParentUniqueIdSupported)
                && target.ParentUniqueId != source.ParentUniqueId)
            {
                target.ParentUniqueId = source.ParentUniqueId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResponseDateSupported)
                && target.ResponseDate != source.ResponseDate)
            {
                target.ResponseDate = source.ResponseDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResponseTimeSupported)
                && target.ResponseTime != source.ResponseTime)
            {
                target.ResponseTime = source.ResponseTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffUniqueIdSupported)
                && target.StaffUniqueId != source.StaffUniqueId)
            {
                target.StaffUniqueId = source.StaffUniqueId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentUniqueIdSupported)
                && target.StudentUniqueId != source.StudentUniqueId)
            {
                target.StudentUniqueId = source.StudentUniqueId;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsSurveyResponseSurveyLevelsSupported)
            {
                isModified |= 
                    source.SurveyResponseSurveyLevels.SynchronizeCollectionTo(
                        target.SurveyResponseSurveyLevels, 
                        onChildAdded: child => 
                            {
                                child.SurveyResponse = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsSurveyResponseSurveyLevelIncluded);
            }

            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyResponse source, ISurveyResponse target, Action<ISurveyResponse, ISurveyResponse> onMapped)
        {
            var sourceSynchSupport = source as ISurveyResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyResponseSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsElectronicMailAddressSupported)
                target.ElectronicMailAddress = source.ElectronicMailAddress;
            else
                targetSynchSupport.IsElectronicMailAddressSupported = false;

            if (sourceSynchSupport.IsFullNameSupported)
                target.FullName = source.FullName;
            else
                targetSynchSupport.IsFullNameSupported = false;

            if (sourceSynchSupport.IsLocationSupported)
                target.Location = source.Location;
            else
                targetSynchSupport.IsLocationSupported = false;

            if (sourceSynchSupport.IsParentUniqueIdSupported)
                target.ParentUniqueId = source.ParentUniqueId;
            else
                targetSynchSupport.IsParentUniqueIdSupported = false;

            if (sourceSynchSupport.IsResponseDateSupported)
                target.ResponseDate = source.ResponseDate;
            else
                targetSynchSupport.IsResponseDateSupported = false;

            if (sourceSynchSupport.IsResponseTimeSupported)
                target.ResponseTime = source.ResponseTime;
            else
                targetSynchSupport.IsResponseTimeSupported = false;

            if (sourceSynchSupport.IsStaffUniqueIdSupported)
                target.StaffUniqueId = source.StaffUniqueId;
            else
                targetSynchSupport.IsStaffUniqueIdSupported = false;

            if (sourceSynchSupport.IsStudentUniqueIdSupported)
                target.StudentUniqueId = source.StudentUniqueId;
            else
                targetSynchSupport.IsStudentUniqueIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ParentResourceId = source.ParentResourceId;
                target.ParentDiscriminator = source.ParentDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsSurveyResponseSurveyLevelsSupported)
            {    
                targetSynchSupport.IsSurveyResponseSurveyLevelIncluded = sourceSynchSupport.IsSurveyResponseSurveyLevelIncluded;
                source.SurveyResponseSurveyLevels.MapCollectionTo(target.SurveyResponseSurveyLevels, target);
            }
            else
            {
                targetSynchSupport.IsSurveyResponseSurveyLevelsSupported = false;
            }

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyResponseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsElectronicMailAddressSupported { get; set; }
        bool IsFullNameSupported { get; set; }
        bool IsLocationSupported { get; set; }
        bool IsParentUniqueIdSupported { get; set; }
        bool IsResponseDateSupported { get; set; }
        bool IsResponseTimeSupported { get; set; }
        bool IsStaffUniqueIdSupported { get; set; }
        bool IsStudentUniqueIdSupported { get; set; }
        bool IsSurveyResponseSurveyLevelsSupported { get; set; }
        Func<ISurveyResponseSurveyLevel, bool> IsSurveyResponseSurveyLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseSurveyLevelMapper 
    {
        public static bool SynchronizeTo(this ISurveyResponseSurveyLevel source, ISurveyResponseSurveyLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyResponseSurveyLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SurveyLevelDescriptor != target.SurveyLevelDescriptor)
            {
                source.SurveyLevelDescriptor = target.SurveyLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyResponseSurveyLevel source, ISurveyResponseSurveyLevel target, Action<ISurveyResponseSurveyLevel, ISurveyResponseSurveyLevel> onMapped)
        {
            var sourceSynchSupport = source as ISurveyResponseSurveyLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyResponseSurveyLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SurveyLevelDescriptor = source.SurveyLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyResponseSurveyLevelSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SurveyResponseEducationOrganizationTargetAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyResponseEducationOrganizationTargetAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseEducationOrganizationTargetAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveyResponseEducationOrganizationTargetAssociation source, ISurveyResponseEducationOrganizationTargetAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyResponseEducationOrganizationTargetAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyResponseEducationOrganizationTargetAssociation source, ISurveyResponseEducationOrganizationTargetAssociation target, Action<ISurveyResponseEducationOrganizationTargetAssociation, ISurveyResponseEducationOrganizationTargetAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveyResponseEducationOrganizationTargetAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyResponseEducationOrganizationTargetAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyResponseEducationOrganizationTargetAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SurveyResponseStaffTargetAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveyResponseStaffTargetAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseStaffTargetAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveyResponseStaffTargetAssociation source, ISurveyResponseStaffTargetAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyResponseStaffTargetAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveyResponseStaffTargetAssociation source, ISurveyResponseStaffTargetAssociation target, Action<ISurveyResponseStaffTargetAssociation, ISurveyResponseStaffTargetAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveyResponseStaffTargetAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyResponseStaffTargetAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.StaffUniqueId = source.StaffUniqueId;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyResponseStaffTargetAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SurveySection

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveySectionMapper 
    {
        public static bool SynchronizeTo(this ISurveySection source, ISurveySection target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveySectionTitle != target.SurveySectionTitle)
            {
                source.SurveySectionTitle = target.SurveySectionTitle;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveySection source, ISurveySection target, Action<ISurveySection, ISurveySection> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SurveySectionAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveySectionAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveySectionAssociation source, ISurveySectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveySectionAssociation source, ISurveySectionAssociation target, Action<ISurveySectionAssociation, ISurveySectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LocalCourseCode = source.LocalCourseCode;
            target.Namespace = source.Namespace;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.SurveyIdentifier = source.SurveyIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.SurveyResourceId = source.SurveyResourceId;
                target.SurveyDiscriminator = source.SurveyDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SurveySectionResponse

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionResponseAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveySectionResponseMapper 
    {
        public static bool SynchronizeTo(this ISurveySectionResponse source, ISurveySectionResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }
            if (source.SurveySectionTitle != target.SurveySectionTitle)
            {
                source.SurveySectionTitle = target.SurveySectionTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSectionRatingSupported)
                && target.SectionRating != source.SectionRating)
            {
                target.SectionRating = source.SectionRating;
                isModified = true;
            }


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveySectionResponse source, ISurveySectionResponse target, Action<ISurveySectionResponse, ISurveySectionResponse> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionResponseSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsSectionRatingSupported)
                target.SectionRating = source.SectionRating;
            else
                targetSynchSupport.IsSectionRatingSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
                target.SurveySectionResourceId = source.SurveySectionResourceId;
                target.SurveySectionDiscriminator = source.SurveySectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionResponseSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
        bool IsSectionRatingSupported { get; set; }
    }
 
}
// Aggregate: SurveySectionResponseEducationOrganizationTargetAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionResponseEducationOrganizationTargetAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveySectionResponseEducationOrganizationTargetAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveySectionResponseEducationOrganizationTargetAssociation source, ISurveySectionResponseEducationOrganizationTargetAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionResponseEducationOrganizationTargetAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }
            if (source.SurveySectionTitle != target.SurveySectionTitle)
            {
                source.SurveySectionTitle = target.SurveySectionTitle;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveySectionResponseEducationOrganizationTargetAssociation source, ISurveySectionResponseEducationOrganizationTargetAssociation target, Action<ISurveySectionResponseEducationOrganizationTargetAssociation, ISurveySectionResponseEducationOrganizationTargetAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionResponseEducationOrganizationTargetAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionResponseEducationOrganizationTargetAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SurveySectionResponseResourceId = source.SurveySectionResponseResourceId;
                target.SurveySectionResponseDiscriminator = source.SurveySectionResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionResponseEducationOrganizationTargetAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: SurveySectionResponseStaffTargetAssociation

namespace EdFi.Ods.Entities.Common.EdFi //.SurveySectionResponseStaffTargetAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveySectionResponseStaffTargetAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveySectionResponseStaffTargetAssociation source, ISurveySectionResponseStaffTargetAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionResponseStaffTargetAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }
            if (source.SurveySectionTitle != target.SurveySectionTitle)
            {
                source.SurveySectionTitle = target.SurveySectionTitle;
            }

            // Copy non-PK properties


            // Sync lists
            // Sync extensions
            isModified |= source.SynchronizeExtensionsTo(target);

            return isModified;
        }



        public static void MapTo(this ISurveySectionResponseStaffTargetAssociation source, ISurveySectionResponseStaffTargetAssociation target, Action<ISurveySectionResponseStaffTargetAssociation, ISurveySectionResponseStaffTargetAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionResponseStaffTargetAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionResponseStaffTargetAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.StaffUniqueId = source.StaffUniqueId;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.SurveySectionResponseResourceId = source.SurveySectionResponseResourceId;
                target.SurveySectionResponseDiscriminator = source.SurveySectionResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            // Map extensions
            source.MapExtensionsTo(target);

            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionResponseStaffTargetAssociationSynchronizationSourceSupport : IExtensionsSynchronizationSourceSupport
    {
    }
 
}
// Aggregate: TeachingCredentialBasisDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TeachingCredentialBasisDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeachingCredentialBasisDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITeachingCredentialBasisDescriptor source, ITeachingCredentialBasisDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeachingCredentialBasisDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeachingCredentialBasisDescriptorId != target.TeachingCredentialBasisDescriptorId)
            {
                source.TeachingCredentialBasisDescriptorId = target.TeachingCredentialBasisDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeachingCredentialBasisDescriptor source, ITeachingCredentialBasisDescriptor target, Action<ITeachingCredentialBasisDescriptor, ITeachingCredentialBasisDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITeachingCredentialBasisDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeachingCredentialBasisDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeachingCredentialBasisDescriptorId = source.TeachingCredentialBasisDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeachingCredentialBasisDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TeachingCredentialDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TeachingCredentialDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeachingCredentialDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITeachingCredentialDescriptor source, ITeachingCredentialDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeachingCredentialDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeachingCredentialDescriptorId != target.TeachingCredentialDescriptorId)
            {
                source.TeachingCredentialDescriptorId = target.TeachingCredentialDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeachingCredentialDescriptor source, ITeachingCredentialDescriptor target, Action<ITeachingCredentialDescriptor, ITeachingCredentialDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITeachingCredentialDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeachingCredentialDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeachingCredentialDescriptorId = source.TeachingCredentialDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeachingCredentialDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TechnicalSkillsAssessmentDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TechnicalSkillsAssessmentDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TechnicalSkillsAssessmentDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITechnicalSkillsAssessmentDescriptor source, ITechnicalSkillsAssessmentDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITechnicalSkillsAssessmentDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TechnicalSkillsAssessmentDescriptorId != target.TechnicalSkillsAssessmentDescriptorId)
            {
                source.TechnicalSkillsAssessmentDescriptorId = target.TechnicalSkillsAssessmentDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITechnicalSkillsAssessmentDescriptor source, ITechnicalSkillsAssessmentDescriptor target, Action<ITechnicalSkillsAssessmentDescriptor, ITechnicalSkillsAssessmentDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITechnicalSkillsAssessmentDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITechnicalSkillsAssessmentDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TechnicalSkillsAssessmentDescriptorId = source.TechnicalSkillsAssessmentDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITechnicalSkillsAssessmentDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TelephoneNumberTypeDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TelephoneNumberTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TelephoneNumberTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITelephoneNumberTypeDescriptor source, ITelephoneNumberTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITelephoneNumberTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumberTypeDescriptorId != target.TelephoneNumberTypeDescriptorId)
            {
                source.TelephoneNumberTypeDescriptorId = target.TelephoneNumberTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITelephoneNumberTypeDescriptor source, ITelephoneNumberTypeDescriptor target, Action<ITelephoneNumberTypeDescriptor, ITelephoneNumberTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITelephoneNumberTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITelephoneNumberTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TelephoneNumberTypeDescriptorId = source.TelephoneNumberTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITelephoneNumberTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TermDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TermDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TermDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITermDescriptor source, ITermDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITermDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TermDescriptorId != target.TermDescriptorId)
            {
                source.TermDescriptorId = target.TermDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITermDescriptor source, ITermDescriptor target, Action<ITermDescriptor, ITermDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITermDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITermDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TermDescriptorId = source.TermDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITermDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TitleIPartAParticipantDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TitleIPartAParticipantDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TitleIPartAParticipantDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITitleIPartAParticipantDescriptor source, ITitleIPartAParticipantDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITitleIPartAParticipantDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TitleIPartAParticipantDescriptorId != target.TitleIPartAParticipantDescriptorId)
            {
                source.TitleIPartAParticipantDescriptorId = target.TitleIPartAParticipantDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITitleIPartAParticipantDescriptor source, ITitleIPartAParticipantDescriptor target, Action<ITitleIPartAParticipantDescriptor, ITitleIPartAParticipantDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITitleIPartAParticipantDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITitleIPartAParticipantDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TitleIPartAParticipantDescriptorId = source.TitleIPartAParticipantDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITitleIPartAParticipantDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TitleIPartAProgramServiceDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TitleIPartAProgramServiceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TitleIPartAProgramServiceDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITitleIPartAProgramServiceDescriptor source, ITitleIPartAProgramServiceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITitleIPartAProgramServiceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TitleIPartAProgramServiceDescriptorId != target.TitleIPartAProgramServiceDescriptorId)
            {
                source.TitleIPartAProgramServiceDescriptorId = target.TitleIPartAProgramServiceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITitleIPartAProgramServiceDescriptor source, ITitleIPartAProgramServiceDescriptor target, Action<ITitleIPartAProgramServiceDescriptor, ITitleIPartAProgramServiceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITitleIPartAProgramServiceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITitleIPartAProgramServiceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TitleIPartAProgramServiceDescriptorId = source.TitleIPartAProgramServiceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITitleIPartAProgramServiceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TitleIPartASchoolDesignationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TitleIPartASchoolDesignationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TitleIPartASchoolDesignationDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITitleIPartASchoolDesignationDescriptor source, ITitleIPartASchoolDesignationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITitleIPartASchoolDesignationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TitleIPartASchoolDesignationDescriptorId != target.TitleIPartASchoolDesignationDescriptorId)
            {
                source.TitleIPartASchoolDesignationDescriptorId = target.TitleIPartASchoolDesignationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITitleIPartASchoolDesignationDescriptor source, ITitleIPartASchoolDesignationDescriptor target, Action<ITitleIPartASchoolDesignationDescriptor, ITitleIPartASchoolDesignationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITitleIPartASchoolDesignationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITitleIPartASchoolDesignationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TitleIPartASchoolDesignationDescriptorId = source.TitleIPartASchoolDesignationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITitleIPartASchoolDesignationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TribalAffiliationDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.TribalAffiliationDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TribalAffiliationDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITribalAffiliationDescriptor source, ITribalAffiliationDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITribalAffiliationDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TribalAffiliationDescriptorId != target.TribalAffiliationDescriptorId)
            {
                source.TribalAffiliationDescriptorId = target.TribalAffiliationDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITribalAffiliationDescriptor source, ITribalAffiliationDescriptor target, Action<ITribalAffiliationDescriptor, ITribalAffiliationDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITribalAffiliationDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITribalAffiliationDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TribalAffiliationDescriptorId = source.TribalAffiliationDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITribalAffiliationDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: VisaDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.VisaDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class VisaDescriptorMapper 
    {
        public static bool SynchronizeTo(this IVisaDescriptor source, IVisaDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IVisaDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptorId != target.VisaDescriptorId)
            {
                source.VisaDescriptorId = target.VisaDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IVisaDescriptor source, IVisaDescriptor target, Action<IVisaDescriptor, IVisaDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IVisaDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IVisaDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.VisaDescriptorId = source.VisaDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IVisaDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: WeaponDescriptor

namespace EdFi.Ods.Entities.Common.EdFi //.WeaponDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class WeaponDescriptorMapper 
    {
        public static bool SynchronizeTo(this IWeaponDescriptor source, IWeaponDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IWeaponDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.WeaponDescriptorId != target.WeaponDescriptorId)
            {
                source.WeaponDescriptorId = target.WeaponDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IWeaponDescriptor source, IWeaponDescriptor target, Action<IWeaponDescriptor, IWeaponDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IWeaponDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IWeaponDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.WeaponDescriptorId = source.WeaponDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IWeaponDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
