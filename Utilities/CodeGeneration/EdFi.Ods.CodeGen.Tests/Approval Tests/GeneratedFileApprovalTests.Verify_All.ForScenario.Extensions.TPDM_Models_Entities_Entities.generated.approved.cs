using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using EdFi.Ods.Api;
using EdFi.Ods.Api.Caching;
using EdFi.Ods.Api.Extensibility;
using EdFi.Ods.Api.NHibernate;
using EdFi.Ods.Api.NHibernate.Architecture;
using EdFi.Ods.Api.Validation;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Entities.Common.EdFi;
using EdFi.Ods.Entities.Common.TPDM;
using EdFi.Ods.Entities.Common.Records.TPDM;
using Newtonsoft.Json;

// Aggregate: AccreditationStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.AccreditationStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AccreditationStatusDescriptor table of the AccreditationStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AccreditationStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IAccreditationStatusDescriptor, Entities.Common.Records.TPDM.IAccreditationStatusDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int AccreditationStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AccreditationStatusDescriptorId", AccreditationStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAccreditationStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAccreditationStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IAccreditationStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: AidTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.AidTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AidTypeDescriptor table of the AidTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AidTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IAidTypeDescriptor, Entities.Common.Records.TPDM.IAidTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int AidTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AidTypeDescriptorId", AidTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAidTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAidTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IAidTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudent

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudent"/> entity.
    /// </summary>
    public class AnonymizedStudentReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudent table of the AnonymizedStudent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudent, Entities.Common.Records.TPDM.IAnonymizedStudentRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudent()
        {
            AnonymizedStudentDisabilities = new HashSet<AnonymizedStudentDisability>();
            AnonymizedStudentLanguages = new HashSet<AnonymizedStudentLanguage>();
            AnonymizedStudentRaces = new HashSet<AnonymizedStudentRace>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? AtriskIndicator  { get; set; }
        public virtual bool? ELLEnrollment  { get; set; }
        public virtual bool? ESLEnrollment  { get; set; }
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        public virtual int? GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int?))
                    _gradeLevelDescriptorId = string.IsNullOrWhiteSpace(_gradeLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int? _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = _gradeLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId.Value);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int?);
            }
        }
        public virtual bool? HispanicLatinoEthnicity  { get; set; }
        public virtual int? Mobility  { get; set; }
        public virtual bool? Section504Enrollment  { get; set; }
        public virtual int? SexDescriptorId 
        {
            get
            {
                if (_sexDescriptorId == default(int?))
                    _sexDescriptorId = string.IsNullOrWhiteSpace(_sexDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SexDescriptor", _sexDescriptor);

                return _sexDescriptorId;
            } 
            set
            {
                _sexDescriptorId = value;
                _sexDescriptor = null;
            }
        }

        private int? _sexDescriptorId;
        private string _sexDescriptor;

        public virtual string SexDescriptor
        {
            get
            {
                if (_sexDescriptor == null)
                    _sexDescriptor = _sexDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SexDescriptor", _sexDescriptorId.Value);
                    
                return _sexDescriptor;
            }
            set
            {
                _sexDescriptor = value;
                _sexDescriptorId = default(int?);
            }
        }
        public virtual bool? SPEDEnrollment  { get; set; }
        public virtual bool? TitleIEnrollment  { get; set; }
        public virtual int? ValueTypeDescriptorId 
        {
            get
            {
                if (_valueTypeDescriptorId == default(int?))
                    _valueTypeDescriptorId = string.IsNullOrWhiteSpace(_valueTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ValueTypeDescriptor", _valueTypeDescriptor);

                return _valueTypeDescriptorId;
            } 
            set
            {
                _valueTypeDescriptorId = value;
                _valueTypeDescriptor = null;
            }
        }

        private int? _valueTypeDescriptorId;
        private string _valueTypeDescriptor;

        public virtual string ValueTypeDescriptor
        {
            get
            {
                if (_valueTypeDescriptor == null)
                    _valueTypeDescriptor = _valueTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ValueTypeDescriptor", _valueTypeDescriptorId.Value);
                    
                return _valueTypeDescriptor;
            }
            set
            {
                _valueTypeDescriptor = value;
                _valueTypeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudent.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisability> _anonymizedStudentDisabilities;
        private ICollection<Entities.Common.TPDM.IAnonymizedStudentDisability> _anonymizedStudentDisabilitiesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisability> AnonymizedStudentDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentDisabilities)
                    if (item.AnonymizedStudent == null)
                        item.AnonymizedStudent = this;
                // -------------------------------------------------------------

                return _anonymizedStudentDisabilities;
            }
            set
            {
                _anonymizedStudentDisabilities = value;
                _anonymizedStudentDisabilitiesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IAnonymizedStudentDisability, Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisability>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IAnonymizedStudentDisability> Entities.Common.TPDM.IAnonymizedStudent.AnonymizedStudentDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentDisabilities)
                    if (item.AnonymizedStudent == null)
                        item.AnonymizedStudent = this;
                // -------------------------------------------------------------

                return _anonymizedStudentDisabilitiesCovariant;
            }
            set
            {
                AnonymizedStudentDisabilities = new HashSet<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisability>(value.Cast<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisability>());
            }
        }


        private ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguage> _anonymizedStudentLanguages;
        private ICollection<Entities.Common.TPDM.IAnonymizedStudentLanguage> _anonymizedStudentLanguagesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguage> AnonymizedStudentLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentLanguages)
                    if (item.AnonymizedStudent == null)
                        item.AnonymizedStudent = this;
                // -------------------------------------------------------------

                return _anonymizedStudentLanguages;
            }
            set
            {
                _anonymizedStudentLanguages = value;
                _anonymizedStudentLanguagesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IAnonymizedStudentLanguage, Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguage>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IAnonymizedStudentLanguage> Entities.Common.TPDM.IAnonymizedStudent.AnonymizedStudentLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentLanguages)
                    if (item.AnonymizedStudent == null)
                        item.AnonymizedStudent = this;
                // -------------------------------------------------------------

                return _anonymizedStudentLanguagesCovariant;
            }
            set
            {
                AnonymizedStudentLanguages = new HashSet<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguage>(value.Cast<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguage>());
            }
        }


        private ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentRace> _anonymizedStudentRaces;
        private ICollection<Entities.Common.TPDM.IAnonymizedStudentRace> _anonymizedStudentRacesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentRace> AnonymizedStudentRaces
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentRaces)
                    if (item.AnonymizedStudent == null)
                        item.AnonymizedStudent = this;
                // -------------------------------------------------------------

                return _anonymizedStudentRaces;
            }
            set
            {
                _anonymizedStudentRaces = value;
                _anonymizedStudentRacesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IAnonymizedStudentRace, Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentRace>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IAnonymizedStudentRace> Entities.Common.TPDM.IAnonymizedStudent.AnonymizedStudentRaces
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentRaces)
                    if (item.AnonymizedStudent == null)
                        item.AnonymizedStudent = this;
                // -------------------------------------------------------------

                return _anonymizedStudentRacesCovariant;
            }
            set
            {
                AnonymizedStudentRaces = new HashSet<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentRace>(value.Cast<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentRace>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
                { "SexDescriptor", new LookupColumnDetails { PropertyName = "SexDescriptorId", LookupTypeName = "SexDescriptor"} },
                { "ValueTypeDescriptor", new LookupColumnDetails { PropertyName = "ValueTypeDescriptorId", LookupTypeName = "ValueTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAnonymizedStudentDisabilitiesSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsAnonymizedStudentDisabilitiesSupported
        {
            get { return _isAnonymizedStudentDisabilitiesSupported; }
            set { _isAnonymizedStudentDisabilitiesSupported = value; }
        }

        private bool _isAnonymizedStudentLanguagesSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsAnonymizedStudentLanguagesSupported
        {
            get { return _isAnonymizedStudentLanguagesSupported; }
            set { _isAnonymizedStudentLanguagesSupported = value; }
        }

        private bool _isAnonymizedStudentRacesSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsAnonymizedStudentRacesSupported
        {
            get { return _isAnonymizedStudentRacesSupported; }
            set { _isAnonymizedStudentRacesSupported = value; }
        }

        private bool _isAtriskIndicatorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsAtriskIndicatorSupported
        {
            get { return _isAtriskIndicatorSupported; }
            set { _isAtriskIndicatorSupported = value; }
        }

        private bool _isELLEnrollmentSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsELLEnrollmentSupported
        {
            get { return _isELLEnrollmentSupported; }
            set { _isELLEnrollmentSupported = value; }
        }

        private bool _isESLEnrollmentSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsESLEnrollmentSupported
        {
            get { return _isESLEnrollmentSupported; }
            set { _isESLEnrollmentSupported = value; }
        }

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isGradeLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsGradeLevelDescriptorSupported
        {
            get { return _isGradeLevelDescriptorSupported; }
            set { _isGradeLevelDescriptorSupported = value; }
        }

        private bool _isHispanicLatinoEthnicitySupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported
        {
            get { return _isHispanicLatinoEthnicitySupported; }
            set { _isHispanicLatinoEthnicitySupported = value; }
        }

        private bool _isMobilitySupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsMobilitySupported
        {
            get { return _isMobilitySupported; }
            set { _isMobilitySupported = value; }
        }

        private bool _isSection504EnrollmentSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsSection504EnrollmentSupported
        {
            get { return _isSection504EnrollmentSupported; }
            set { _isSection504EnrollmentSupported = value; }
        }

        private bool _isSexDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsSexDescriptorSupported
        {
            get { return _isSexDescriptorSupported; }
            set { _isSexDescriptorSupported = value; }
        }

        private bool _isSPEDEnrollmentSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsSPEDEnrollmentSupported
        {
            get { return _isSPEDEnrollmentSupported; }
            set { _isSPEDEnrollmentSupported = value; }
        }

        private bool _isTitleIEnrollmentSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsTitleIEnrollmentSupported
        {
            get { return _isTitleIEnrollmentSupported; }
            set { _isTitleIEnrollmentSupported = value; }
        }

        private bool _isValueTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsValueTypeDescriptorSupported
        {
            get { return _isValueTypeDescriptorSupported; }
            set { _isValueTypeDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.IAnonymizedStudentDisability, bool> _isAnonymizedStudentDisabilityIncluded;
        Func<Entities.Common.TPDM.IAnonymizedStudentDisability, bool> Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsAnonymizedStudentDisabilityIncluded
        {
            get { return _isAnonymizedStudentDisabilityIncluded; }
            set { _isAnonymizedStudentDisabilityIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IAnonymizedStudentLanguage, bool> _isAnonymizedStudentLanguageIncluded;
        Func<Entities.Common.TPDM.IAnonymizedStudentLanguage, bool> Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsAnonymizedStudentLanguageIncluded
        {
            get { return _isAnonymizedStudentLanguageIncluded; }
            set { _isAnonymizedStudentLanguageIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IAnonymizedStudentRace, bool> _isAnonymizedStudentRaceIncluded;
        Func<Entities.Common.TPDM.IAnonymizedStudentRace, bool> Entities.Common.TPDM.IAnonymizedStudentSynchronizationSourceSupport.IsAnonymizedStudentRaceIncluded
        {
            get { return _isAnonymizedStudentRaceIncluded; }
            set { _isAnonymizedStudentRaceIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentDisability table of the AnonymizedStudent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentDisability : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAnonymizedStudentDisability, Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentDisabilitySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentDisability()
        {
            AnonymizedStudentDisabilityDesignations = new HashSet<AnonymizedStudentDisabilityDesignation>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual AnonymizedStudent AnonymizedStudent { get; set; }

        Entities.Common.TPDM.IAnonymizedStudent IAnonymizedStudentDisability.AnonymizedStudent
        {
            get { return AnonymizedStudent; }
            set { AnonymizedStudent = (AnonymizedStudent) value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord.AnonymizedStudentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).AnonymizedStudentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).AnonymizedStudentIdentifier = value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord.FactsAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).FactsAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).FactsAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).SchoolYear = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDescriptorId 
        {
            get
            {
                if (_disabilityDescriptorId == default(int))
                    _disabilityDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDescriptor", _disabilityDescriptor);

                return _disabilityDescriptorId;
            } 
            set
            {
                _disabilityDescriptorId = value;
                _disabilityDescriptor = null;
            }
        }

        private int _disabilityDescriptorId;
        private string _disabilityDescriptor;

        public virtual string DisabilityDescriptor
        {
            get
            {
                if (_disabilityDescriptor == null)
                    _disabilityDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDescriptor", _disabilityDescriptorId);
                    
                return _disabilityDescriptor;
            }
            set
            {
                _disabilityDescriptor = value;
                _disabilityDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? DisabilityDeterminationSourceTypeDescriptorId 
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptorId == default(int?))
                    _disabilityDeterminationSourceTypeDescriptorId = string.IsNullOrWhiteSpace(_disabilityDeterminationSourceTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptor);

                return _disabilityDeterminationSourceTypeDescriptorId;
            } 
            set
            {
                _disabilityDeterminationSourceTypeDescriptorId = value;
                _disabilityDeterminationSourceTypeDescriptor = null;
            }
        }

        private int? _disabilityDeterminationSourceTypeDescriptorId;
        private string _disabilityDeterminationSourceTypeDescriptor;

        public virtual string DisabilityDeterminationSourceTypeDescriptor
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptor == null)
                    _disabilityDeterminationSourceTypeDescriptor = _disabilityDeterminationSourceTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptorId.Value);
                    
                return _disabilityDeterminationSourceTypeDescriptor;
            }
            set
            {
                _disabilityDeterminationSourceTypeDescriptor = value;
                _disabilityDeterminationSourceTypeDescriptorId = default(int?);
            }
        }
        [StringLength(80), NoDangerousText]
        public virtual string DisabilityDiagnosis  { get; set; }
        public virtual int? OrderOfDisability  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisabilityDesignation> _anonymizedStudentDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignation> _anonymizedStudentDisabilityDesignationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisabilityDesignation> AnonymizedStudentDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentDisabilityDesignations)
                    if (item.AnonymizedStudentDisability == null)
                        item.AnonymizedStudentDisability = this;
                // -------------------------------------------------------------

                return _anonymizedStudentDisabilityDesignations;
            }
            set
            {
                _anonymizedStudentDisabilityDesignations = value;
                _anonymizedStudentDisabilityDesignationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignation, Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisabilityDesignation>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignation> Entities.Common.TPDM.IAnonymizedStudentDisability.AnonymizedStudentDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentDisabilityDesignations)
                    if (item.AnonymizedStudentDisability == null)
                        item.AnonymizedStudentDisability = this;
                // -------------------------------------------------------------

                return _anonymizedStudentDisabilityDesignationsCovariant;
            }
            set
            {
                AnonymizedStudentDisabilityDesignations = new HashSet<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisabilityDesignation>(value.Cast<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentDisabilityDesignation>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDeterminationSourceTypeDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDeterminationSourceTypeDescriptorId", LookupTypeName = "DisabilityDeterminationSourceTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (AnonymizedStudent as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDescriptorId", DisabilityDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentDisability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentDisability) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            AnonymizedStudent = (AnonymizedStudent) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAnonymizedStudentDisabilityDesignationsSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentDisabilitySynchronizationSourceSupport.IsAnonymizedStudentDisabilityDesignationsSupported
        {
            get { return _isAnonymizedStudentDisabilityDesignationsSupported; }
            set { _isAnonymizedStudentDisabilityDesignationsSupported = value; }
        }

        private bool _isDisabilityDeterminationSourceTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported
        {
            get { return _isDisabilityDeterminationSourceTypeDescriptorSupported; }
            set { _isDisabilityDeterminationSourceTypeDescriptorSupported = value; }
        }

        private bool _isDisabilityDiagnosisSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported
        {
            get { return _isDisabilityDiagnosisSupported; }
            set { _isDisabilityDiagnosisSupported = value; }
        }

        private bool _isOrderOfDisabilitySupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported
        {
            get { return _isOrderOfDisabilitySupported; }
            set { _isOrderOfDisabilitySupported = value; }
        }

        private Func<Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignation, bool> _isAnonymizedStudentDisabilityDesignationIncluded;
        Func<Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignation, bool> Entities.Common.TPDM.IAnonymizedStudentDisabilitySynchronizationSourceSupport.IsAnonymizedStudentDisabilityDesignationIncluded
        {
            get { return _isAnonymizedStudentDisabilityDesignationIncluded; }
            set { _isAnonymizedStudentDisabilityDesignationIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentDisabilityDesignation table of the AnonymizedStudent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentDisabilityDesignation : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignation, Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityDesignationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentDisabilityDesignation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual AnonymizedStudentDisability AnonymizedStudentDisability { get; set; }

        Entities.Common.TPDM.IAnonymizedStudentDisability IAnonymizedStudentDisabilityDesignation.AnonymizedStudentDisability
        {
            get { return AnonymizedStudentDisability; }
            set { AnonymizedStudentDisability = (AnonymizedStudentDisability) value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityDesignationRecord.AnonymizedStudentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord) AnonymizedStudentDisability).AnonymizedStudentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord) AnonymizedStudentDisability).AnonymizedStudentIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityDesignationRecord.DisabilityDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord) AnonymizedStudentDisability).DisabilityDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord) AnonymizedStudentDisability).DisabilityDescriptorId = value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityDesignationRecord.FactsAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord) AnonymizedStudentDisability).FactsAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord) AnonymizedStudentDisability).FactsAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityDesignationRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord) AnonymizedStudentDisability).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentDisabilityRecord) AnonymizedStudentDisability).SchoolYear = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDesignationDescriptorId 
        {
            get
            {
                if (_disabilityDesignationDescriptorId == default(int))
                    _disabilityDesignationDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDesignationDescriptor", _disabilityDesignationDescriptor);

                return _disabilityDesignationDescriptorId;
            } 
            set
            {
                _disabilityDesignationDescriptorId = value;
                _disabilityDesignationDescriptor = null;
            }
        }

        private int _disabilityDesignationDescriptorId;
        private string _disabilityDesignationDescriptor;

        public virtual string DisabilityDesignationDescriptor
        {
            get
            {
                if (_disabilityDesignationDescriptor == null)
                    _disabilityDesignationDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDesignationDescriptor", _disabilityDesignationDescriptorId);
                    
                return _disabilityDesignationDescriptor;
            }
            set
            {
                _disabilityDesignationDescriptor = value;
                _disabilityDesignationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDesignationDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDesignationDescriptorId", LookupTypeName = "DisabilityDesignationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (AnonymizedStudentDisability as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDesignationDescriptorId", DisabilityDesignationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentDisabilityDesignation) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            AnonymizedStudentDisability = (AnonymizedStudentDisability) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentLanguage table of the AnonymizedStudent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentLanguage : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAnonymizedStudentLanguage, Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentLanguageSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentLanguage()
        {
            AnonymizedStudentLanguageUses = new HashSet<AnonymizedStudentLanguageUse>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual AnonymizedStudent AnonymizedStudent { get; set; }

        Entities.Common.TPDM.IAnonymizedStudent IAnonymizedStudentLanguage.AnonymizedStudent
        {
            get { return AnonymizedStudent; }
            set { AnonymizedStudent = (AnonymizedStudent) value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord.AnonymizedStudentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).AnonymizedStudentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).AnonymizedStudentIdentifier = value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord.FactsAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).FactsAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).FactsAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).SchoolYear = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageDescriptorId 
        {
            get
            {
                if (_languageDescriptorId == default(int))
                    _languageDescriptorId = DescriptorsCache.GetCache().GetId("LanguageDescriptor", _languageDescriptor);

                return _languageDescriptorId;
            } 
            set
            {
                _languageDescriptorId = value;
                _languageDescriptor = null;
            }
        }

        private int _languageDescriptorId;
        private string _languageDescriptor;

        public virtual string LanguageDescriptor
        {
            get
            {
                if (_languageDescriptor == null)
                    _languageDescriptor = DescriptorsCache.GetCache().GetValue("LanguageDescriptor", _languageDescriptorId);
                    
                return _languageDescriptor;
            }
            set
            {
                _languageDescriptor = value;
                _languageDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguageUse> _anonymizedStudentLanguageUses;
        private ICollection<Entities.Common.TPDM.IAnonymizedStudentLanguageUse> _anonymizedStudentLanguageUsesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguageUse> AnonymizedStudentLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentLanguageUses)
                    if (item.AnonymizedStudentLanguage == null)
                        item.AnonymizedStudentLanguage = this;
                // -------------------------------------------------------------

                return _anonymizedStudentLanguageUses;
            }
            set
            {
                _anonymizedStudentLanguageUses = value;
                _anonymizedStudentLanguageUsesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IAnonymizedStudentLanguageUse, Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguageUse>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IAnonymizedStudentLanguageUse> Entities.Common.TPDM.IAnonymizedStudentLanguage.AnonymizedStudentLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentLanguageUses)
                    if (item.AnonymizedStudentLanguage == null)
                        item.AnonymizedStudentLanguage = this;
                // -------------------------------------------------------------

                return _anonymizedStudentLanguageUsesCovariant;
            }
            set
            {
                AnonymizedStudentLanguageUses = new HashSet<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguageUse>(value.Cast<Entities.NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentLanguageUse>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (AnonymizedStudent as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageDescriptorId", LanguageDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentLanguage) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            AnonymizedStudent = (AnonymizedStudent) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAnonymizedStudentLanguageUsesSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentLanguageSynchronizationSourceSupport.IsAnonymizedStudentLanguageUsesSupported
        {
            get { return _isAnonymizedStudentLanguageUsesSupported; }
            set { _isAnonymizedStudentLanguageUsesSupported = value; }
        }

        private Func<Entities.Common.TPDM.IAnonymizedStudentLanguageUse, bool> _isAnonymizedStudentLanguageUseIncluded;
        Func<Entities.Common.TPDM.IAnonymizedStudentLanguageUse, bool> Entities.Common.TPDM.IAnonymizedStudentLanguageSynchronizationSourceSupport.IsAnonymizedStudentLanguageUseIncluded
        {
            get { return _isAnonymizedStudentLanguageUseIncluded; }
            set { _isAnonymizedStudentLanguageUseIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentLanguageUse table of the AnonymizedStudent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentLanguageUse : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAnonymizedStudentLanguageUse, Entities.Common.Records.TPDM.IAnonymizedStudentLanguageUseRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentLanguageUseSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentLanguageUse()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual AnonymizedStudentLanguage AnonymizedStudentLanguage { get; set; }

        Entities.Common.TPDM.IAnonymizedStudentLanguage IAnonymizedStudentLanguageUse.AnonymizedStudentLanguage
        {
            get { return AnonymizedStudentLanguage; }
            set { AnonymizedStudentLanguage = (AnonymizedStudentLanguage) value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentLanguageUseRecord.AnonymizedStudentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord) AnonymizedStudentLanguage).AnonymizedStudentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord) AnonymizedStudentLanguage).AnonymizedStudentIdentifier = value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentLanguageUseRecord.FactsAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord) AnonymizedStudentLanguage).FactsAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord) AnonymizedStudentLanguage).FactsAsOfDate = value; }
        }

        int Entities.Common.Records.TPDM.IAnonymizedStudentLanguageUseRecord.LanguageDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord) AnonymizedStudentLanguage).LanguageDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord) AnonymizedStudentLanguage).LanguageDescriptorId = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentLanguageUseRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord) AnonymizedStudentLanguage).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentLanguageRecord) AnonymizedStudentLanguage).SchoolYear = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageUseDescriptorId 
        {
            get
            {
                if (_languageUseDescriptorId == default(int))
                    _languageUseDescriptorId = DescriptorsCache.GetCache().GetId("LanguageUseDescriptor", _languageUseDescriptor);

                return _languageUseDescriptorId;
            } 
            set
            {
                _languageUseDescriptorId = value;
                _languageUseDescriptor = null;
            }
        }

        private int _languageUseDescriptorId;
        private string _languageUseDescriptor;

        public virtual string LanguageUseDescriptor
        {
            get
            {
                if (_languageUseDescriptor == null)
                    _languageUseDescriptor = DescriptorsCache.GetCache().GetValue("LanguageUseDescriptor", _languageUseDescriptorId);
                    
                return _languageUseDescriptor;
            }
            set
            {
                _languageUseDescriptor = value;
                _languageUseDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
                { "LanguageUseDescriptor", new LookupColumnDetails { PropertyName = "LanguageUseDescriptorId", LookupTypeName = "LanguageUseDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (AnonymizedStudentLanguage as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageUseDescriptorId", LanguageUseDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentLanguageUse) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            AnonymizedStudentLanguage = (AnonymizedStudentLanguage) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentRace table of the AnonymizedStudent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentRace : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAnonymizedStudentRace, Entities.Common.Records.TPDM.IAnonymizedStudentRaceRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentRaceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentRace()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual AnonymizedStudent AnonymizedStudent { get; set; }

        Entities.Common.TPDM.IAnonymizedStudent IAnonymizedStudentRace.AnonymizedStudent
        {
            get { return AnonymizedStudent; }
            set { AnonymizedStudent = (AnonymizedStudent) value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentRaceRecord.AnonymizedStudentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).AnonymizedStudentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).AnonymizedStudentIdentifier = value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentRaceRecord.FactsAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).FactsAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).FactsAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentRaceRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentRecord) AnonymizedStudent).SchoolYear = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int RaceDescriptorId 
        {
            get
            {
                if (_raceDescriptorId == default(int))
                    _raceDescriptorId = DescriptorsCache.GetCache().GetId("RaceDescriptor", _raceDescriptor);

                return _raceDescriptorId;
            } 
            set
            {
                _raceDescriptorId = value;
                _raceDescriptor = null;
            }
        }

        private int _raceDescriptorId;
        private string _raceDescriptor;

        public virtual string RaceDescriptor
        {
            get
            {
                if (_raceDescriptor == null)
                    _raceDescriptor = DescriptorsCache.GetCache().GetValue("RaceDescriptor", _raceDescriptorId);
                    
                return _raceDescriptor;
            }
            set
            {
                _raceDescriptor = value;
                _raceDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RaceDescriptor", new LookupColumnDetails { PropertyName = "RaceDescriptorId", LookupTypeName = "RaceDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (AnonymizedStudent as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RaceDescriptorId", RaceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentRace) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            AnonymizedStudent = (AnonymizedStudent) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudentAcademicRecord

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentAcademicRecordAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudentAcademicRecord"/> entity.
    /// </summary>
    public class AnonymizedStudentAcademicRecordReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentAcademicRecord table of the AnonymizedStudentAcademicRecord aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentAcademicRecord : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudentAcademicRecord, Entities.Common.Records.TPDM.IAnonymizedStudentAcademicRecordRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentAcademicRecordSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentAcademicRecord()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? CumulativeGradePointAverage  { get; set; }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? GPAMax  { get; set; }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? SessionGradePointAverage  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentReferenceData AnonymizedStudentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentAcademicRecord.AnonymizedStudentDiscriminator
        {
            get { return AnonymizedStudentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAcademicRecord.AnonymizedStudentResourceId
        {
            get { return AnonymizedStudentReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentAcademicRecord.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAcademicRecord.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAcademicRecord.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentAcademicRecord)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentAcademicRecord) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCumulativeGradePointAverageSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAcademicRecordSynchronizationSourceSupport.IsCumulativeGradePointAverageSupported
        {
            get { return _isCumulativeGradePointAverageSupported; }
            set { _isCumulativeGradePointAverageSupported = value; }
        }

        private bool _isGPAMaxSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAcademicRecordSynchronizationSourceSupport.IsGPAMaxSupported
        {
            get { return _isGPAMaxSupported; }
            set { _isGPAMaxSupported = value; }
        }

        private bool _isSessionGradePointAverageSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAcademicRecordSynchronizationSourceSupport.IsSessionGradePointAverageSupported
        {
            get { return _isSessionGradePointAverageSupported; }
            set { _isSessionGradePointAverageSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudentAssessment

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudentAssessment"/> entity.
    /// </summary>
    public class AnonymizedStudentAssessmentReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime AdministrationDate { get; set; }
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual string AssessmentIdentifier { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual short TakenSchoolYear { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AdministrationDate", AdministrationDate);
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("AssessmentIdentifier", AssessmentIdentifier);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TakenSchoolYear", TakenSchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentAssessment table of the AnonymizedStudentAssessment aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentAssessment : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudentAssessment, Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentAssessmentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentAssessment()
        {
           AnonymizedStudentAssessmentPerformanceLevelPersistentList = new HashSet<AnonymizedStudentAssessmentPerformanceLevel>();
           AnonymizedStudentAssessmentScoreResultPersistentList = new HashSet<AnonymizedStudentAssessmentScoreResult>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime AdministrationDate 
        {
            get { return _administrationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _administrationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _administrationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AssessmentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short TakenSchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int?))
                    _academicSubjectDescriptorId = string.IsNullOrWhiteSpace(_academicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int? _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = _academicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId.Value);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int?);
            }
        }
        public virtual int? AssessmentCategoryDescriptorId 
        {
            get
            {
                if (_assessmentCategoryDescriptorId == default(int?))
                    _assessmentCategoryDescriptorId = string.IsNullOrWhiteSpace(_assessmentCategoryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AssessmentCategoryDescriptor", _assessmentCategoryDescriptor);

                return _assessmentCategoryDescriptorId;
            } 
            set
            {
                _assessmentCategoryDescriptorId = value;
                _assessmentCategoryDescriptor = null;
            }
        }

        private int? _assessmentCategoryDescriptorId;
        private string _assessmentCategoryDescriptor;

        public virtual string AssessmentCategoryDescriptor
        {
            get
            {
                if (_assessmentCategoryDescriptor == null)
                    _assessmentCategoryDescriptor = _assessmentCategoryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AssessmentCategoryDescriptor", _assessmentCategoryDescriptorId.Value);
                    
                return _assessmentCategoryDescriptor;
            }
            set
            {
                _assessmentCategoryDescriptor = value;
                _assessmentCategoryDescriptorId = default(int?);
            }
        }
        [StringLength(100), NoDangerousText]
        public virtual string AssessmentTitle  { get; set; }
        public virtual int? GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int?))
                    _gradeLevelDescriptorId = string.IsNullOrWhiteSpace(_gradeLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int? _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = _gradeLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId.Value);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int?);
            }
        }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentPerformanceLevel AnonymizedStudentAssessmentPerformanceLevel
        {
            get
            {
                // Return the item in the list, if one exists
                if (AnonymizedStudentAssessmentPerformanceLevelPersistentList.Any())
                    return AnonymizedStudentAssessmentPerformanceLevelPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (AnonymizedStudentAssessmentPerformanceLevelPersistentList.Any())
                    AnonymizedStudentAssessmentPerformanceLevelPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.AnonymizedStudentAssessment = this;

                    AnonymizedStudentAssessmentPerformanceLevelPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IAnonymizedStudentAssessmentPerformanceLevel Entities.Common.TPDM.IAnonymizedStudentAssessment.AnonymizedStudentAssessmentPerformanceLevel
        {
            get { return AnonymizedStudentAssessmentPerformanceLevel; }
            set { AnonymizedStudentAssessmentPerformanceLevel = (Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentPerformanceLevel) value; }
        }

        private ICollection<Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentPerformanceLevel> _anonymizedStudentAssessmentPerformanceLevelPersistentList;

        public virtual ICollection<Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentPerformanceLevel> AnonymizedStudentAssessmentPerformanceLevelPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentAssessmentPerformanceLevelPersistentList)
                    if (item.AnonymizedStudentAssessment == null)
                        item.AnonymizedStudentAssessment = this;
                // -------------------------------------------------------------

                return _anonymizedStudentAssessmentPerformanceLevelPersistentList;
            }
            set
            {
                _anonymizedStudentAssessmentPerformanceLevelPersistentList = value;
            }
        }

        [ValidateObject]
        public virtual Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentScoreResult AnonymizedStudentAssessmentScoreResult
        {
            get
            {
                // Return the item in the list, if one exists
                if (AnonymizedStudentAssessmentScoreResultPersistentList.Any())
                    return AnonymizedStudentAssessmentScoreResultPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (AnonymizedStudentAssessmentScoreResultPersistentList.Any())
                    AnonymizedStudentAssessmentScoreResultPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.AnonymizedStudentAssessment = this;

                    AnonymizedStudentAssessmentScoreResultPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IAnonymizedStudentAssessmentScoreResult Entities.Common.TPDM.IAnonymizedStudentAssessment.AnonymizedStudentAssessmentScoreResult
        {
            get { return AnonymizedStudentAssessmentScoreResult; }
            set { AnonymizedStudentAssessmentScoreResult = (Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentScoreResult) value; }
        }

        private ICollection<Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentScoreResult> _anonymizedStudentAssessmentScoreResultPersistentList;

        public virtual ICollection<Entities.NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentScoreResult> AnonymizedStudentAssessmentScoreResultPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _anonymizedStudentAssessmentScoreResultPersistentList)
                    if (item.AnonymizedStudentAssessment == null)
                        item.AnonymizedStudentAssessment = this;
                // -------------------------------------------------------------

                return _anonymizedStudentAssessmentScoreResultPersistentList;
            }
            set
            {
                _anonymizedStudentAssessmentScoreResultPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentReferenceData AnonymizedStudentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentAssessment.AnonymizedStudentDiscriminator
        {
            get { return AnonymizedStudentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAssessment.AnonymizedStudentResourceId
        {
            get { return AnonymizedStudentReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData TakenSchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TakenSchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAssessment.TakenSchoolYearTypeResourceId
        {
            get { return TakenSchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "AssessmentCategoryDescriptor", new LookupColumnDetails { PropertyName = "AssessmentCategoryDescriptorId", LookupTypeName = "AssessmentCategoryDescriptor"} },
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AdministrationDate", AdministrationDate);
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("AssessmentIdentifier", AssessmentIdentifier);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TakenSchoolYear", TakenSchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentAssessment)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentAssessment) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported
        {
            get { return _isAcademicSubjectDescriptorSupported; }
            set { _isAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isAnonymizedStudentAssessmentPerformanceLevelSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentSynchronizationSourceSupport.IsAnonymizedStudentAssessmentPerformanceLevelSupported
        {
            get { return _isAnonymizedStudentAssessmentPerformanceLevelSupported; }
            set { _isAnonymizedStudentAssessmentPerformanceLevelSupported = value; }
        }

        private bool _isAnonymizedStudentAssessmentScoreResultSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentSynchronizationSourceSupport.IsAnonymizedStudentAssessmentScoreResultSupported
        {
            get { return _isAnonymizedStudentAssessmentScoreResultSupported; }
            set { _isAnonymizedStudentAssessmentScoreResultSupported = value; }
        }

        private bool _isAssessmentCategoryDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentSynchronizationSourceSupport.IsAssessmentCategoryDescriptorSupported
        {
            get { return _isAssessmentCategoryDescriptorSupported; }
            set { _isAssessmentCategoryDescriptorSupported = value; }
        }

        private bool _isAssessmentTitleSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentSynchronizationSourceSupport.IsAssessmentTitleSupported
        {
            get { return _isAssessmentTitleSupported; }
            set { _isAssessmentTitleSupported = value; }
        }

        private bool _isGradeLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentSynchronizationSourceSupport.IsGradeLevelDescriptorSupported
        {
            get { return _isGradeLevelDescriptorSupported; }
            set { _isGradeLevelDescriptorSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentAssessmentPerformanceLevel table of the AnonymizedStudentAssessment aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentAssessmentPerformanceLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAnonymizedStudentAssessmentPerformanceLevel, Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentPerformanceLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentAssessmentPerformanceLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual AnonymizedStudentAssessment AnonymizedStudentAssessment { get; set; }

        Entities.Common.TPDM.IAnonymizedStudentAssessment IAnonymizedStudentAssessmentPerformanceLevel.AnonymizedStudentAssessment
        {
            get { return AnonymizedStudentAssessment; }
            set { AnonymizedStudentAssessment = (AnonymizedStudentAssessment) value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentPerformanceLevelRecord.AdministrationDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AdministrationDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AdministrationDate = value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentPerformanceLevelRecord.AnonymizedStudentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AnonymizedStudentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AnonymizedStudentIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentPerformanceLevelRecord.AssessmentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AssessmentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AssessmentIdentifier = value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentPerformanceLevelRecord.FactsAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).FactsAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).FactsAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentPerformanceLevelRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).SchoolYear = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentPerformanceLevelRecord.TakenSchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).TakenSchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).TakenSchoolYear = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int AssessmentReportingMethodDescriptorId 
        {
            get
            {
                if (_assessmentReportingMethodDescriptorId == default(int))
                    _assessmentReportingMethodDescriptorId = DescriptorsCache.GetCache().GetId("AssessmentReportingMethodDescriptor", _assessmentReportingMethodDescriptor);

                return _assessmentReportingMethodDescriptorId;
            } 
            set
            {
                _assessmentReportingMethodDescriptorId = value;
                _assessmentReportingMethodDescriptor = null;
            }
        }

        private int _assessmentReportingMethodDescriptorId;
        private string _assessmentReportingMethodDescriptor;

        public virtual string AssessmentReportingMethodDescriptor
        {
            get
            {
                if (_assessmentReportingMethodDescriptor == null)
                    _assessmentReportingMethodDescriptor = DescriptorsCache.GetCache().GetValue("AssessmentReportingMethodDescriptor", _assessmentReportingMethodDescriptorId);
                    
                return _assessmentReportingMethodDescriptor;
            }
            set
            {
                _assessmentReportingMethodDescriptor = value;
                _assessmentReportingMethodDescriptorId = default(int);
            }
        }
        [RequiredWithNonDefault]
        public virtual int PerformanceLevelDescriptorId 
        {
            get
            {
                if (_performanceLevelDescriptorId == default(int))
                    _performanceLevelDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceLevelDescriptor", _performanceLevelDescriptor);

                return _performanceLevelDescriptorId;
            } 
            set
            {
                _performanceLevelDescriptorId = value;
                _performanceLevelDescriptor = null;
            }
        }

        private int _performanceLevelDescriptorId;
        private string _performanceLevelDescriptor;

        public virtual string PerformanceLevelDescriptor
        {
            get
            {
                if (_performanceLevelDescriptor == null)
                    _performanceLevelDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceLevelDescriptor", _performanceLevelDescriptorId);
                    
                return _performanceLevelDescriptor;
            }
            set
            {
                _performanceLevelDescriptor = value;
                _performanceLevelDescriptorId = default(int);
            }
        }
        public virtual bool PerformanceLevelMet  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AssessmentReportingMethodDescriptor", new LookupColumnDetails { PropertyName = "AssessmentReportingMethodDescriptorId", LookupTypeName = "AssessmentReportingMethodDescriptor"} },
                { "PerformanceLevelDescriptor", new LookupColumnDetails { PropertyName = "PerformanceLevelDescriptorId", LookupTypeName = "PerformanceLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (AnonymizedStudentAssessment as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentAssessmentPerformanceLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentAssessmentPerformanceLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            AnonymizedStudentAssessment = (AnonymizedStudentAssessment) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAssessmentReportingMethodDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport.IsAssessmentReportingMethodDescriptorSupported
        {
            get { return _isAssessmentReportingMethodDescriptorSupported; }
            set { _isAssessmentReportingMethodDescriptorSupported = value; }
        }

        private bool _isPerformanceLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport.IsPerformanceLevelDescriptorSupported
        {
            get { return _isPerformanceLevelDescriptorSupported; }
            set { _isPerformanceLevelDescriptorSupported = value; }
        }

        private bool _isPerformanceLevelMetSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport.IsPerformanceLevelMetSupported
        {
            get { return _isPerformanceLevelMetSupported; }
            set { _isPerformanceLevelMetSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentAssessmentScoreResult table of the AnonymizedStudentAssessment aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentAssessmentScoreResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAnonymizedStudentAssessmentScoreResult, Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentScoreResultRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentAssessmentScoreResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual AnonymizedStudentAssessment AnonymizedStudentAssessment { get; set; }

        Entities.Common.TPDM.IAnonymizedStudentAssessment IAnonymizedStudentAssessmentScoreResult.AnonymizedStudentAssessment
        {
            get { return AnonymizedStudentAssessment; }
            set { AnonymizedStudentAssessment = (AnonymizedStudentAssessment) value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentScoreResultRecord.AdministrationDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AdministrationDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AdministrationDate = value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentScoreResultRecord.AnonymizedStudentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AnonymizedStudentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AnonymizedStudentIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentScoreResultRecord.AssessmentIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AssessmentIdentifier; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).AssessmentIdentifier = value; }
        }

        DateTime Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentScoreResultRecord.FactsAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).FactsAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).FactsAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentScoreResultRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).SchoolYear = value; }
        }

        short Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentScoreResultRecord.TakenSchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).TakenSchoolYear; }
            set { ((Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentRecord) AnonymizedStudentAssessment).TakenSchoolYear = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int AssessmentReportingMethodDescriptorId 
        {
            get
            {
                if (_assessmentReportingMethodDescriptorId == default(int))
                    _assessmentReportingMethodDescriptorId = DescriptorsCache.GetCache().GetId("AssessmentReportingMethodDescriptor", _assessmentReportingMethodDescriptor);

                return _assessmentReportingMethodDescriptorId;
            } 
            set
            {
                _assessmentReportingMethodDescriptorId = value;
                _assessmentReportingMethodDescriptor = null;
            }
        }

        private int _assessmentReportingMethodDescriptorId;
        private string _assessmentReportingMethodDescriptor;

        public virtual string AssessmentReportingMethodDescriptor
        {
            get
            {
                if (_assessmentReportingMethodDescriptor == null)
                    _assessmentReportingMethodDescriptor = DescriptorsCache.GetCache().GetValue("AssessmentReportingMethodDescriptor", _assessmentReportingMethodDescriptorId);
                    
                return _assessmentReportingMethodDescriptor;
            }
            set
            {
                _assessmentReportingMethodDescriptor = value;
                _assessmentReportingMethodDescriptorId = default(int);
            }
        }
        [RequiredWithNonDefault, StringLength(35), NoDangerousText]
        public virtual string Result  { get; set; }
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AssessmentReportingMethodDescriptor", new LookupColumnDetails { PropertyName = "AssessmentReportingMethodDescriptorId", LookupTypeName = "AssessmentReportingMethodDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (AnonymizedStudentAssessment as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentAssessmentScoreResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentAssessmentScoreResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            AnonymizedStudentAssessment = (AnonymizedStudentAssessment) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAssessmentReportingMethodDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport.IsAssessmentReportingMethodDescriptorSupported
        {
            get { return _isAssessmentReportingMethodDescriptorSupported; }
            set { _isAssessmentReportingMethodDescriptorSupported = value; }
        }

        private bool _isResultSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport.IsResultSupported
        {
            get { return _isResultSupported; }
            set { _isResultSupported = value; }
        }

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudentAssessmentCourseAssociation

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentAssessmentCourseAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudentAssessmentCourseAssociation"/> entity.
    /// </summary>
    public class AnonymizedStudentAssessmentCourseAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime AdministrationDate { get; set; }
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual string AssessmentIdentifier { get; set; }
        public virtual string CourseCode { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual short TakenSchoolYear { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AdministrationDate", AdministrationDate);
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("AssessmentIdentifier", AssessmentIdentifier);
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TakenSchoolYear", TakenSchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentAssessmentCourseAssociation table of the AnonymizedStudentAssessmentCourseAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentAssessmentCourseAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudentAssessmentCourseAssociation, Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentCourseAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentAssessmentCourseAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime AdministrationDate 
        {
            get { return _administrationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _administrationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _administrationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AssessmentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short TakenSchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentReferenceData AnonymizedStudentAssessmentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudentAssessment discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentAssessmentCourseAssociation.AnonymizedStudentAssessmentDiscriminator
        {
            get { return AnonymizedStudentAssessmentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudentAssessment resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAssessmentCourseAssociation.AnonymizedStudentAssessmentResourceId
        {
            get { return AnonymizedStudentAssessmentReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.CourseAggregate.EdFi.CourseReferenceData CourseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Course discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentAssessmentCourseAssociation.CourseDiscriminator
        {
            get { return CourseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Course resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAssessmentCourseAssociation.CourseResourceId
        {
            get { return CourseReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AdministrationDate", AdministrationDate);
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("AssessmentIdentifier", AssessmentIdentifier);
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TakenSchoolYear", TakenSchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentAssessmentCourseAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentAssessmentCourseAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudentAssessmentSectionAssociation

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentAssessmentSectionAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudentAssessmentSectionAssociation"/> entity.
    /// </summary>
    public class AnonymizedStudentAssessmentSectionAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime AdministrationDate { get; set; }
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual string AssessmentIdentifier { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual string LocalCourseCode { get; set; }
        public virtual int SchoolId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string SectionIdentifier { get; set; }
        public virtual string SessionName { get; set; }
        public virtual short TakenSchoolYear { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AdministrationDate", AdministrationDate);
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("AssessmentIdentifier", AssessmentIdentifier);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("TakenSchoolYear", TakenSchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentAssessmentSectionAssociation table of the AnonymizedStudentAssessmentSectionAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentAssessmentSectionAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudentAssessmentSectionAssociation, Entities.Common.Records.TPDM.IAnonymizedStudentAssessmentSectionAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentAssessmentSectionAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime AdministrationDate 
        {
            get { return _administrationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _administrationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _administrationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AssessmentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string LocalCourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SchoolId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SectionIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SessionName  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short TakenSchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.AnonymizedStudentAssessmentAggregate.TPDM.AnonymizedStudentAssessmentReferenceData AnonymizedStudentAssessmentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudentAssessment discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentAssessmentSectionAssociation.AnonymizedStudentAssessmentDiscriminator
        {
            get { return AnonymizedStudentAssessmentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudentAssessment resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAssessmentSectionAssociation.AnonymizedStudentAssessmentResourceId
        {
            get { return AnonymizedStudentAssessmentReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SectionAggregate.EdFi.SectionReferenceData SectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Section discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentAssessmentSectionAssociation.SectionDiscriminator
        {
            get { return SectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Section resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentAssessmentSectionAssociation.SectionResourceId
        {
            get { return SectionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AdministrationDate", AdministrationDate);
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("AssessmentIdentifier", AssessmentIdentifier);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("TakenSchoolYear", TakenSchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentAssessmentSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentAssessmentSectionAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudentCourseAssociation

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentCourseAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudentCourseAssociation"/> entity.
    /// </summary>
    public class AnonymizedStudentCourseAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual DateTime BeginDate { get; set; }
        public virtual string CourseCode { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentCourseAssociation table of the AnonymizedStudentCourseAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentCourseAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudentCourseAssociation, Entities.Common.Records.TPDM.IAnonymizedStudentCourseAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentCourseAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentCourseAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentReferenceData AnonymizedStudentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentCourseAssociation.AnonymizedStudentDiscriminator
        {
            get { return AnonymizedStudentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentCourseAssociation.AnonymizedStudentResourceId
        {
            get { return AnonymizedStudentReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.CourseAggregate.EdFi.CourseReferenceData CourseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Course discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentCourseAssociation.CourseDiscriminator
        {
            get { return CourseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Course resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentCourseAssociation.CourseResourceId
        {
            get { return CourseReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentCourseAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentCourseAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentCourseAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudentCourseTranscript

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentCourseTranscriptAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudentCourseTranscript"/> entity.
    /// </summary>
    public class AnonymizedStudentCourseTranscriptReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual string CourseCode { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentCourseTranscript table of the AnonymizedStudentCourseTranscript aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentCourseTranscript : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudentCourseTranscript, Entities.Common.Records.TPDM.IAnonymizedStudentCourseTranscriptRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentCourseTranscript()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? CourseRepeatCodeDescriptorId 
        {
            get
            {
                if (_courseRepeatCodeDescriptorId == default(int?))
                    _courseRepeatCodeDescriptorId = string.IsNullOrWhiteSpace(_courseRepeatCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CourseRepeatCodeDescriptor", _courseRepeatCodeDescriptor);

                return _courseRepeatCodeDescriptorId;
            } 
            set
            {
                _courseRepeatCodeDescriptorId = value;
                _courseRepeatCodeDescriptor = null;
            }
        }

        private int? _courseRepeatCodeDescriptorId;
        private string _courseRepeatCodeDescriptor;

        public virtual string CourseRepeatCodeDescriptor
        {
            get
            {
                if (_courseRepeatCodeDescriptor == null)
                    _courseRepeatCodeDescriptor = _courseRepeatCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CourseRepeatCodeDescriptor", _courseRepeatCodeDescriptorId.Value);
                    
                return _courseRepeatCodeDescriptor;
            }
            set
            {
                _courseRepeatCodeDescriptor = value;
                _courseRepeatCodeDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, StringLength(60), NoDangerousText]
        public virtual string CourseTitle  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string FinalLetterGradeEarned  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? FinalNumericGradeEarned  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.AnonymizedStudentAcademicRecordAggregate.TPDM.AnonymizedStudentAcademicRecordReferenceData AnonymizedStudentAcademicRecordReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudentAcademicRecord discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentCourseTranscript.AnonymizedStudentAcademicRecordDiscriminator
        {
            get { return AnonymizedStudentAcademicRecordReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudentAcademicRecord resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentCourseTranscript.AnonymizedStudentAcademicRecordResourceId
        {
            get { return AnonymizedStudentAcademicRecordReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.CourseAggregate.EdFi.CourseReferenceData CourseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Course discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentCourseTranscript.CourseDiscriminator
        {
            get { return CourseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Course resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentCourseTranscript.CourseResourceId
        {
            get { return CourseReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CourseRepeatCodeDescriptor", new LookupColumnDetails { PropertyName = "CourseRepeatCodeDescriptorId", LookupTypeName = "CourseRepeatCodeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentCourseTranscript)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentCourseTranscript) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCourseRepeatCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport.IsCourseRepeatCodeDescriptorSupported
        {
            get { return _isCourseRepeatCodeDescriptorSupported; }
            set { _isCourseRepeatCodeDescriptorSupported = value; }
        }

        private bool _isCourseTitleSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport.IsCourseTitleSupported
        {
            get { return _isCourseTitleSupported; }
            set { _isCourseTitleSupported = value; }
        }

        private bool _isFinalLetterGradeEarnedSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport.IsFinalLetterGradeEarnedSupported
        {
            get { return _isFinalLetterGradeEarnedSupported; }
            set { _isFinalLetterGradeEarnedSupported = value; }
        }

        private bool _isFinalNumericGradeEarnedSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport.IsFinalNumericGradeEarnedSupported
        {
            get { return _isFinalNumericGradeEarnedSupported; }
            set { _isFinalNumericGradeEarnedSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudentEducationOrganizationAssociation

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentEducationOrganizationAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudentEducationOrganizationAssociation"/> entity.
    /// </summary>
    public class AnonymizedStudentEducationOrganizationAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual DateTime BeginDate { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentEducationOrganizationAssociation table of the AnonymizedStudentEducationOrganizationAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentEducationOrganizationAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociation, Entities.Common.Records.TPDM.IAnonymizedStudentEducationOrganizationAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentEducationOrganizationAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentReferenceData AnonymizedStudentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociation.AnonymizedStudentDiscriminator
        {
            get { return AnonymizedStudentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociation.AnonymizedStudentResourceId
        {
            get { return AnonymizedStudentReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociation.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociation.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: AnonymizedStudentSectionAssociation

namespace EdFi.Ods.Entities.NHibernate.AnonymizedStudentSectionAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="AnonymizedStudentSectionAssociation"/> entity.
    /// </summary>
    public class AnonymizedStudentSectionAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string AnonymizedStudentIdentifier { get; set; }
        public virtual DateTime BeginDate { get; set; }
        public virtual DateTime FactsAsOfDate { get; set; }
        public virtual string LocalCourseCode { get; set; }
        public virtual int SchoolId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string SectionIdentifier { get; set; }
        public virtual string SessionName { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AnonymizedStudentSectionAssociation table of the AnonymizedStudentSectionAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AnonymizedStudentSectionAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IAnonymizedStudentSectionAssociation, Entities.Common.Records.TPDM.IAnonymizedStudentSectionAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAnonymizedStudentSectionAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AnonymizedStudentSectionAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AnonymizedStudentIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactsAsOfDate 
        {
            get { return _factsAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factsAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factsAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string LocalCourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SchoolId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SectionIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SessionName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.AnonymizedStudentAggregate.TPDM.AnonymizedStudentReferenceData AnonymizedStudentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentSectionAssociation.AnonymizedStudentDiscriminator
        {
            get { return AnonymizedStudentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the AnonymizedStudent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentSectionAssociation.AnonymizedStudentResourceId
        {
            get { return AnonymizedStudentReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SectionAggregate.EdFi.SectionReferenceData SectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Section discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IAnonymizedStudentSectionAssociation.SectionDiscriminator
        {
            get { return SectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Section resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IAnonymizedStudentSectionAssociation.SectionResourceId
        {
            get { return SectionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AnonymizedStudentIdentifier", AnonymizedStudentIdentifier);
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FactsAsOfDate", FactsAsOfDate);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAnonymizedStudentSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAnonymizedStudentSectionAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IAnonymizedStudentSectionAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Applicant

namespace EdFi.Ods.Entities.NHibernate.ApplicantAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Applicant"/> entity.
    /// </summary>
    public class ApplicantReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string ApplicantIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Applicant table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Applicant : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IApplicant, Entities.Common.Records.TPDM.IApplicantRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Applicant()
        {
            ApplicantAddresses = new HashSet<ApplicantAddress>();
            ApplicantAids = new HashSet<ApplicantAid>();
            ApplicantBackgroundChecks = new HashSet<ApplicantBackgroundCheck>();
            ApplicantCharacteristics = new HashSet<ApplicantCharacteristic>();
            ApplicantDisabilities = new HashSet<ApplicantDisability>();
            ApplicantElectronicMails = new HashSet<ApplicantElectronicMail>();
            ApplicantIdentificationDocuments = new HashSet<ApplicantIdentificationDocument>();
            ApplicantInternationalAddresses = new HashSet<ApplicantInternationalAddress>();
            ApplicantLanguages = new HashSet<ApplicantLanguage>();
            ApplicantPersonalIdentificationDocuments = new HashSet<ApplicantPersonalIdentificationDocument>();
            ApplicantRaces = new HashSet<ApplicantRace>();
            ApplicantStaffIdentificationCodes = new HashSet<ApplicantStaffIdentificationCode>();
            ApplicantTeacherPreparationPrograms = new HashSet<ApplicantTeacherPreparationProgram>();
            ApplicantTelephones = new HashSet<ApplicantTelephone>();
            ApplicantVisas = new HashSet<ApplicantVisa>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ApplicantIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BirthDate 
        {
            get { return _birthDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _birthDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _birthDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _birthDate;
        
        public virtual int? CitizenshipStatusDescriptorId 
        {
            get
            {
                if (_citizenshipStatusDescriptorId == default(int?))
                    _citizenshipStatusDescriptorId = string.IsNullOrWhiteSpace(_citizenshipStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CitizenshipStatusDescriptor", _citizenshipStatusDescriptor);

                return _citizenshipStatusDescriptorId;
            } 
            set
            {
                _citizenshipStatusDescriptorId = value;
                _citizenshipStatusDescriptor = null;
            }
        }

        private int? _citizenshipStatusDescriptorId;
        private string _citizenshipStatusDescriptor;

        public virtual string CitizenshipStatusDescriptor
        {
            get
            {
                if (_citizenshipStatusDescriptor == null)
                    _citizenshipStatusDescriptor = _citizenshipStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CitizenshipStatusDescriptor", _citizenshipStatusDescriptorId.Value);
                    
                return _citizenshipStatusDescriptor;
            }
            set
            {
                _citizenshipStatusDescriptor = value;
                _citizenshipStatusDescriptorId = default(int?);
            }
        }
        public virtual bool? EconomicDisadvantaged  { get; set; }
        public virtual bool? FirstGenerationStudent  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string FirstName  { get; set; }
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        [StringLength(10), NoDangerousText]
        public virtual string GenerationCodeSuffix  { get; set; }
        public virtual bool? HispanicLatinoEthnicity  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string LastSurname  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string LoginId  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MaidenName  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MiddleName  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string PersonalTitlePrefix  { get; set; }
        [StringLength(32), NoDangerousText]
        public virtual string PersonId  { get; set; }
        public virtual int? SexDescriptorId 
        {
            get
            {
                if (_sexDescriptorId == default(int?))
                    _sexDescriptorId = string.IsNullOrWhiteSpace(_sexDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SexDescriptor", _sexDescriptor);

                return _sexDescriptorId;
            } 
            set
            {
                _sexDescriptorId = value;
                _sexDescriptor = null;
            }
        }

        private int? _sexDescriptorId;
        private string _sexDescriptor;

        public virtual string SexDescriptor
        {
            get
            {
                if (_sexDescriptor == null)
                    _sexDescriptor = _sexDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SexDescriptor", _sexDescriptorId.Value);
                    
                return _sexDescriptor;
            }
            set
            {
                _sexDescriptor = value;
                _sexDescriptorId = default(int?);
            }
        }
        public virtual int? SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int?))
                    _sourceSystemDescriptorId = string.IsNullOrWhiteSpace(_sourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int? _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = _sourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId.Value);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int?);
            }
        }
        [StringLength(32), NoDangerousText]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplicant.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicant.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplicant.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicant.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddress> _applicantAddresses;
        private ICollection<Entities.Common.TPDM.IApplicantAddress> _applicantAddressesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddress> ApplicantAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantAddresses)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantAddresses;
            }
            set
            {
                _applicantAddresses = value;
                _applicantAddressesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantAddress, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantAddress> Entities.Common.TPDM.IApplicant.ApplicantAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantAddresses)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantAddressesCovariant;
            }
            set
            {
                ApplicantAddresses = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddress>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddress>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAid> _applicantAids;
        private ICollection<Entities.Common.TPDM.IApplicantAid> _applicantAidsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAid> ApplicantAids
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantAids)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantAids;
            }
            set
            {
                _applicantAids = value;
                _applicantAidsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantAid, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAid>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantAid> Entities.Common.TPDM.IApplicant.ApplicantAids
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantAids)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantAidsCovariant;
            }
            set
            {
                ApplicantAids = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAid>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAid>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantBackgroundCheck> _applicantBackgroundChecks;
        private ICollection<Entities.Common.TPDM.IApplicantBackgroundCheck> _applicantBackgroundChecksCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantBackgroundCheck> ApplicantBackgroundChecks
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantBackgroundChecks)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantBackgroundChecks;
            }
            set
            {
                _applicantBackgroundChecks = value;
                _applicantBackgroundChecksCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantBackgroundCheck, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantBackgroundCheck>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantBackgroundCheck> Entities.Common.TPDM.IApplicant.ApplicantBackgroundChecks
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantBackgroundChecks)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantBackgroundChecksCovariant;
            }
            set
            {
                ApplicantBackgroundChecks = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantBackgroundCheck>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantBackgroundCheck>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantCharacteristic> _applicantCharacteristics;
        private ICollection<Entities.Common.TPDM.IApplicantCharacteristic> _applicantCharacteristicsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantCharacteristic> ApplicantCharacteristics
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantCharacteristics)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantCharacteristics;
            }
            set
            {
                _applicantCharacteristics = value;
                _applicantCharacteristicsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantCharacteristic, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantCharacteristic>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantCharacteristic> Entities.Common.TPDM.IApplicant.ApplicantCharacteristics
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantCharacteristics)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantCharacteristicsCovariant;
            }
            set
            {
                ApplicantCharacteristics = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantCharacteristic>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantCharacteristic>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisability> _applicantDisabilities;
        private ICollection<Entities.Common.TPDM.IApplicantDisability> _applicantDisabilitiesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisability> ApplicantDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantDisabilities)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantDisabilities;
            }
            set
            {
                _applicantDisabilities = value;
                _applicantDisabilitiesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantDisability, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisability>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantDisability> Entities.Common.TPDM.IApplicant.ApplicantDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantDisabilities)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantDisabilitiesCovariant;
            }
            set
            {
                ApplicantDisabilities = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisability>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisability>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantElectronicMail> _applicantElectronicMails;
        private ICollection<Entities.Common.TPDM.IApplicantElectronicMail> _applicantElectronicMailsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantElectronicMail> ApplicantElectronicMails
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantElectronicMails)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantElectronicMails;
            }
            set
            {
                _applicantElectronicMails = value;
                _applicantElectronicMailsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantElectronicMail, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantElectronicMail>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantElectronicMail> Entities.Common.TPDM.IApplicant.ApplicantElectronicMails
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantElectronicMails)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantElectronicMailsCovariant;
            }
            set
            {
                ApplicantElectronicMails = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantElectronicMail>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantElectronicMail>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantIdentificationDocument> _applicantIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IApplicantIdentificationDocument> _applicantIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantIdentificationDocument> ApplicantIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantIdentificationDocuments)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantIdentificationDocuments;
            }
            set
            {
                _applicantIdentificationDocuments = value;
                _applicantIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantIdentificationDocument, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantIdentificationDocument> Entities.Common.TPDM.IApplicant.ApplicantIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantIdentificationDocuments)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantIdentificationDocumentsCovariant;
            }
            set
            {
                ApplicantIdentificationDocuments = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantIdentificationDocument>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantInternationalAddress> _applicantInternationalAddresses;
        private ICollection<Entities.Common.TPDM.IApplicantInternationalAddress> _applicantInternationalAddressesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantInternationalAddress> ApplicantInternationalAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantInternationalAddresses)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantInternationalAddresses;
            }
            set
            {
                _applicantInternationalAddresses = value;
                _applicantInternationalAddressesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantInternationalAddress, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantInternationalAddress> Entities.Common.TPDM.IApplicant.ApplicantInternationalAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantInternationalAddresses)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantInternationalAddressesCovariant;
            }
            set
            {
                ApplicantInternationalAddresses = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantInternationalAddress>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantInternationalAddress>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguage> _applicantLanguages;
        private ICollection<Entities.Common.TPDM.IApplicantLanguage> _applicantLanguagesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguage> ApplicantLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantLanguages)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantLanguages;
            }
            set
            {
                _applicantLanguages = value;
                _applicantLanguagesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantLanguage, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguage>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantLanguage> Entities.Common.TPDM.IApplicant.ApplicantLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantLanguages)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantLanguagesCovariant;
            }
            set
            {
                ApplicantLanguages = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguage>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguage>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantPersonalIdentificationDocument> _applicantPersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IApplicantPersonalIdentificationDocument> _applicantPersonalIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantPersonalIdentificationDocument> ApplicantPersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantPersonalIdentificationDocuments)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantPersonalIdentificationDocuments;
            }
            set
            {
                _applicantPersonalIdentificationDocuments = value;
                _applicantPersonalIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantPersonalIdentificationDocument, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantPersonalIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantPersonalIdentificationDocument> Entities.Common.TPDM.IApplicant.ApplicantPersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantPersonalIdentificationDocuments)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantPersonalIdentificationDocumentsCovariant;
            }
            set
            {
                ApplicantPersonalIdentificationDocuments = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantPersonalIdentificationDocument>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantPersonalIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantRace> _applicantRaces;
        private ICollection<Entities.Common.TPDM.IApplicantRace> _applicantRacesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantRace> ApplicantRaces
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantRaces)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantRaces;
            }
            set
            {
                _applicantRaces = value;
                _applicantRacesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantRace, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantRace>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantRace> Entities.Common.TPDM.IApplicant.ApplicantRaces
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantRaces)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantRacesCovariant;
            }
            set
            {
                ApplicantRaces = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantRace>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantRace>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantStaffIdentificationCode> _applicantStaffIdentificationCodes;
        private ICollection<Entities.Common.TPDM.IApplicantStaffIdentificationCode> _applicantStaffIdentificationCodesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantStaffIdentificationCode> ApplicantStaffIdentificationCodes
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantStaffIdentificationCodes)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantStaffIdentificationCodes;
            }
            set
            {
                _applicantStaffIdentificationCodes = value;
                _applicantStaffIdentificationCodesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantStaffIdentificationCode, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantStaffIdentificationCode>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantStaffIdentificationCode> Entities.Common.TPDM.IApplicant.ApplicantStaffIdentificationCodes
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantStaffIdentificationCodes)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantStaffIdentificationCodesCovariant;
            }
            set
            {
                ApplicantStaffIdentificationCodes = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantStaffIdentificationCode>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantStaffIdentificationCode>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTeacherPreparationProgram> _applicantTeacherPreparationPrograms;
        private ICollection<Entities.Common.TPDM.IApplicantTeacherPreparationProgram> _applicantTeacherPreparationProgramsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTeacherPreparationProgram> ApplicantTeacherPreparationPrograms
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantTeacherPreparationPrograms)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantTeacherPreparationPrograms;
            }
            set
            {
                _applicantTeacherPreparationPrograms = value;
                _applicantTeacherPreparationProgramsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantTeacherPreparationProgram, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTeacherPreparationProgram>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantTeacherPreparationProgram> Entities.Common.TPDM.IApplicant.ApplicantTeacherPreparationPrograms
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantTeacherPreparationPrograms)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantTeacherPreparationProgramsCovariant;
            }
            set
            {
                ApplicantTeacherPreparationPrograms = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTeacherPreparationProgram>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTeacherPreparationProgram>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTelephone> _applicantTelephones;
        private ICollection<Entities.Common.TPDM.IApplicantTelephone> _applicantTelephonesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTelephone> ApplicantTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantTelephones)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantTelephones;
            }
            set
            {
                _applicantTelephones = value;
                _applicantTelephonesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantTelephone, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantTelephone> Entities.Common.TPDM.IApplicant.ApplicantTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantTelephones)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantTelephonesCovariant;
            }
            set
            {
                ApplicantTelephones = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTelephone>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantTelephone>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantVisa> _applicantVisas;
        private ICollection<Entities.Common.TPDM.IApplicantVisa> _applicantVisasCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantVisa> ApplicantVisas
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantVisas)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantVisas;
            }
            set
            {
                _applicantVisas = value;
                _applicantVisasCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantVisa, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantVisa>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantVisa> Entities.Common.TPDM.IApplicant.ApplicantVisas
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantVisas)
                    if (item.Applicant == null)
                        item.Applicant = this;
                // -------------------------------------------------------------

                return _applicantVisasCovariant;
            }
            set
            {
                ApplicantVisas = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantVisa>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantVisa>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CitizenshipStatusDescriptor", new LookupColumnDetails { PropertyName = "CitizenshipStatusDescriptorId", LookupTypeName = "CitizenshipStatusDescriptor"} },
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
                { "SexDescriptor", new LookupColumnDetails { PropertyName = "SexDescriptorId", LookupTypeName = "SexDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicant)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicant) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicantAddressesSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantAddressesSupported
        {
            get { return _isApplicantAddressesSupported; }
            set { _isApplicantAddressesSupported = value; }
        }

        private bool _isApplicantAidsSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantAidsSupported
        {
            get { return _isApplicantAidsSupported; }
            set { _isApplicantAidsSupported = value; }
        }

        private bool _isApplicantBackgroundChecksSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantBackgroundChecksSupported
        {
            get { return _isApplicantBackgroundChecksSupported; }
            set { _isApplicantBackgroundChecksSupported = value; }
        }

        private bool _isApplicantCharacteristicsSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantCharacteristicsSupported
        {
            get { return _isApplicantCharacteristicsSupported; }
            set { _isApplicantCharacteristicsSupported = value; }
        }

        private bool _isApplicantDisabilitiesSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantDisabilitiesSupported
        {
            get { return _isApplicantDisabilitiesSupported; }
            set { _isApplicantDisabilitiesSupported = value; }
        }

        private bool _isApplicantElectronicMailsSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantElectronicMailsSupported
        {
            get { return _isApplicantElectronicMailsSupported; }
            set { _isApplicantElectronicMailsSupported = value; }
        }

        private bool _isApplicantIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantIdentificationDocumentsSupported
        {
            get { return _isApplicantIdentificationDocumentsSupported; }
            set { _isApplicantIdentificationDocumentsSupported = value; }
        }

        private bool _isApplicantInternationalAddressesSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantInternationalAddressesSupported
        {
            get { return _isApplicantInternationalAddressesSupported; }
            set { _isApplicantInternationalAddressesSupported = value; }
        }

        private bool _isApplicantLanguagesSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantLanguagesSupported
        {
            get { return _isApplicantLanguagesSupported; }
            set { _isApplicantLanguagesSupported = value; }
        }

        private bool _isApplicantPersonalIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantPersonalIdentificationDocumentsSupported
        {
            get { return _isApplicantPersonalIdentificationDocumentsSupported; }
            set { _isApplicantPersonalIdentificationDocumentsSupported = value; }
        }

        private bool _isApplicantRacesSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantRacesSupported
        {
            get { return _isApplicantRacesSupported; }
            set { _isApplicantRacesSupported = value; }
        }

        private bool _isApplicantStaffIdentificationCodesSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantStaffIdentificationCodesSupported
        {
            get { return _isApplicantStaffIdentificationCodesSupported; }
            set { _isApplicantStaffIdentificationCodesSupported = value; }
        }

        private bool _isApplicantTeacherPreparationProgramsSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantTeacherPreparationProgramsSupported
        {
            get { return _isApplicantTeacherPreparationProgramsSupported; }
            set { _isApplicantTeacherPreparationProgramsSupported = value; }
        }

        private bool _isApplicantTelephonesSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantTelephonesSupported
        {
            get { return _isApplicantTelephonesSupported; }
            set { _isApplicantTelephonesSupported = value; }
        }

        private bool _isApplicantVisasSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantVisasSupported
        {
            get { return _isApplicantVisasSupported; }
            set { _isApplicantVisasSupported = value; }
        }

        private bool _isBirthDateSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsBirthDateSupported
        {
            get { return _isBirthDateSupported; }
            set { _isBirthDateSupported = value; }
        }

        private bool _isCitizenshipStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported
        {
            get { return _isCitizenshipStatusDescriptorSupported; }
            set { _isCitizenshipStatusDescriptorSupported = value; }
        }

        private bool _isEconomicDisadvantagedSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsEconomicDisadvantagedSupported
        {
            get { return _isEconomicDisadvantagedSupported; }
            set { _isEconomicDisadvantagedSupported = value; }
        }

        private bool _isFirstGenerationStudentSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsFirstGenerationStudentSupported
        {
            get { return _isFirstGenerationStudentSupported; }
            set { _isFirstGenerationStudentSupported = value; }
        }

        private bool _isFirstNameSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsFirstNameSupported
        {
            get { return _isFirstNameSupported; }
            set { _isFirstNameSupported = value; }
        }

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isGenerationCodeSuffixSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsGenerationCodeSuffixSupported
        {
            get { return _isGenerationCodeSuffixSupported; }
            set { _isGenerationCodeSuffixSupported = value; }
        }

        private bool _isHispanicLatinoEthnicitySupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported
        {
            get { return _isHispanicLatinoEthnicitySupported; }
            set { _isHispanicLatinoEthnicitySupported = value; }
        }

        private bool _isLastSurnameSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsLastSurnameSupported
        {
            get { return _isLastSurnameSupported; }
            set { _isLastSurnameSupported = value; }
        }

        private bool _isLoginIdSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsLoginIdSupported
        {
            get { return _isLoginIdSupported; }
            set { _isLoginIdSupported = value; }
        }

        private bool _isMaidenNameSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsMaidenNameSupported
        {
            get { return _isMaidenNameSupported; }
            set { _isMaidenNameSupported = value; }
        }

        private bool _isMiddleNameSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsMiddleNameSupported
        {
            get { return _isMiddleNameSupported; }
            set { _isMiddleNameSupported = value; }
        }

        private bool _isPersonalTitlePrefixSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsPersonalTitlePrefixSupported
        {
            get { return _isPersonalTitlePrefixSupported; }
            set { _isPersonalTitlePrefixSupported = value; }
        }

        private bool _isPersonIdSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsPersonIdSupported
        {
            get { return _isPersonIdSupported; }
            set { _isPersonIdSupported = value; }
        }

        private bool _isSexDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsSexDescriptorSupported
        {
            get { return _isSexDescriptorSupported; }
            set { _isSexDescriptorSupported = value; }
        }

        private bool _isSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsSourceSystemDescriptorSupported
        {
            get { return _isSourceSystemDescriptorSupported; }
            set { _isSourceSystemDescriptorSupported = value; }
        }

        private bool _isTeacherCandidateIdentifierSupported = true;
        bool Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsTeacherCandidateIdentifierSupported
        {
            get { return _isTeacherCandidateIdentifierSupported; }
            set { _isTeacherCandidateIdentifierSupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantAddress, bool> _isApplicantAddressIncluded;
        Func<Entities.Common.TPDM.IApplicantAddress, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantAddressIncluded
        {
            get { return _isApplicantAddressIncluded; }
            set { _isApplicantAddressIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantAid, bool> _isApplicantAidIncluded;
        Func<Entities.Common.TPDM.IApplicantAid, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantAidIncluded
        {
            get { return _isApplicantAidIncluded; }
            set { _isApplicantAidIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantBackgroundCheck, bool> _isApplicantBackgroundCheckIncluded;
        Func<Entities.Common.TPDM.IApplicantBackgroundCheck, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantBackgroundCheckIncluded
        {
            get { return _isApplicantBackgroundCheckIncluded; }
            set { _isApplicantBackgroundCheckIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantCharacteristic, bool> _isApplicantCharacteristicIncluded;
        Func<Entities.Common.TPDM.IApplicantCharacteristic, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantCharacteristicIncluded
        {
            get { return _isApplicantCharacteristicIncluded; }
            set { _isApplicantCharacteristicIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantDisability, bool> _isApplicantDisabilityIncluded;
        Func<Entities.Common.TPDM.IApplicantDisability, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantDisabilityIncluded
        {
            get { return _isApplicantDisabilityIncluded; }
            set { _isApplicantDisabilityIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantElectronicMail, bool> _isApplicantElectronicMailIncluded;
        Func<Entities.Common.TPDM.IApplicantElectronicMail, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantElectronicMailIncluded
        {
            get { return _isApplicantElectronicMailIncluded; }
            set { _isApplicantElectronicMailIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantIdentificationDocument, bool> _isApplicantIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.IApplicantIdentificationDocument, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantIdentificationDocumentIncluded
        {
            get { return _isApplicantIdentificationDocumentIncluded; }
            set { _isApplicantIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantInternationalAddress, bool> _isApplicantInternationalAddressIncluded;
        Func<Entities.Common.TPDM.IApplicantInternationalAddress, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantInternationalAddressIncluded
        {
            get { return _isApplicantInternationalAddressIncluded; }
            set { _isApplicantInternationalAddressIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantLanguage, bool> _isApplicantLanguageIncluded;
        Func<Entities.Common.TPDM.IApplicantLanguage, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantLanguageIncluded
        {
            get { return _isApplicantLanguageIncluded; }
            set { _isApplicantLanguageIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantPersonalIdentificationDocument, bool> _isApplicantPersonalIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.IApplicantPersonalIdentificationDocument, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantPersonalIdentificationDocumentIncluded
        {
            get { return _isApplicantPersonalIdentificationDocumentIncluded; }
            set { _isApplicantPersonalIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantRace, bool> _isApplicantRaceIncluded;
        Func<Entities.Common.TPDM.IApplicantRace, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantRaceIncluded
        {
            get { return _isApplicantRaceIncluded; }
            set { _isApplicantRaceIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantStaffIdentificationCode, bool> _isApplicantStaffIdentificationCodeIncluded;
        Func<Entities.Common.TPDM.IApplicantStaffIdentificationCode, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantStaffIdentificationCodeIncluded
        {
            get { return _isApplicantStaffIdentificationCodeIncluded; }
            set { _isApplicantStaffIdentificationCodeIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantTeacherPreparationProgram, bool> _isApplicantTeacherPreparationProgramIncluded;
        Func<Entities.Common.TPDM.IApplicantTeacherPreparationProgram, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantTeacherPreparationProgramIncluded
        {
            get { return _isApplicantTeacherPreparationProgramIncluded; }
            set { _isApplicantTeacherPreparationProgramIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantTelephone, bool> _isApplicantTelephoneIncluded;
        Func<Entities.Common.TPDM.IApplicantTelephone, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantTelephoneIncluded
        {
            get { return _isApplicantTelephoneIncluded; }
            set { _isApplicantTelephoneIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantVisa, bool> _isApplicantVisaIncluded;
        Func<Entities.Common.TPDM.IApplicantVisa, bool> Entities.Common.TPDM.IApplicantSynchronizationSourceSupport.IsApplicantVisaIncluded
        {
            get { return _isApplicantVisaIncluded; }
            set { _isApplicantVisaIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantAddress table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddress : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantAddress, Entities.Common.Records.TPDM.IApplicantAddressRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantAddress()
        {
            ApplicantAddressPeriods = new HashSet<ApplicantAddressPeriod>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantAddress.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantAddressRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AddressTypeDescriptorId 
        {
            get
            {
                if (_addressTypeDescriptorId == default(int))
                    _addressTypeDescriptorId = DescriptorsCache.GetCache().GetId("AddressTypeDescriptor", _addressTypeDescriptor);

                return _addressTypeDescriptorId;
            } 
            set
            {
                _addressTypeDescriptorId = value;
                _addressTypeDescriptor = null;
            }
        }

        private int _addressTypeDescriptorId;
        private string _addressTypeDescriptor;

        public virtual string AddressTypeDescriptor
        {
            get
            {
                if (_addressTypeDescriptor == null)
                    _addressTypeDescriptor = DescriptorsCache.GetCache().GetValue("AddressTypeDescriptor", _addressTypeDescriptorId);
                    
                return _addressTypeDescriptor;
            }
            set
            {
                _addressTypeDescriptor = value;
                _addressTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(30), NoDangerousText, NoWhitespace]
        public virtual string City  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(17), NoDangerousText, NoWhitespace]
        public virtual string PostalCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int StateAbbreviationDescriptorId 
        {
            get
            {
                if (_stateAbbreviationDescriptorId == default(int))
                    _stateAbbreviationDescriptorId = DescriptorsCache.GetCache().GetId("StateAbbreviationDescriptor", _stateAbbreviationDescriptor);

                return _stateAbbreviationDescriptorId;
            } 
            set
            {
                _stateAbbreviationDescriptorId = value;
                _stateAbbreviationDescriptor = null;
            }
        }

        private int _stateAbbreviationDescriptorId;
        private string _stateAbbreviationDescriptor;

        public virtual string StateAbbreviationDescriptor
        {
            get
            {
                if (_stateAbbreviationDescriptor == null)
                    _stateAbbreviationDescriptor = DescriptorsCache.GetCache().GetValue("StateAbbreviationDescriptor", _stateAbbreviationDescriptorId);
                    
                return _stateAbbreviationDescriptor;
            }
            set
            {
                _stateAbbreviationDescriptor = value;
                _stateAbbreviationDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(150), NoDangerousText, NoWhitespace]
        public virtual string StreetNumberName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(50), NoDangerousText]
        public virtual string ApartmentRoomSuiteNumber  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string BuildingSiteNumber  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string CongressionalDistrict  { get; set; }
        [StringLength(5), NoDangerousText]
        public virtual string CountyFIPSCode  { get; set; }
        public virtual bool? DoNotPublishIndicator  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string Latitude  { get; set; }
        public virtual int? LocaleDescriptorId 
        {
            get
            {
                if (_localeDescriptorId == default(int?))
                    _localeDescriptorId = string.IsNullOrWhiteSpace(_localeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LocaleDescriptor", _localeDescriptor);

                return _localeDescriptorId;
            } 
            set
            {
                _localeDescriptorId = value;
                _localeDescriptor = null;
            }
        }

        private int? _localeDescriptorId;
        private string _localeDescriptor;

        public virtual string LocaleDescriptor
        {
            get
            {
                if (_localeDescriptor == null)
                    _localeDescriptor = _localeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LocaleDescriptor", _localeDescriptorId.Value);
                    
                return _localeDescriptor;
            }
            set
            {
                _localeDescriptor = value;
                _localeDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string Longitude  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string NameOfCounty  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddressPeriod> _applicantAddressPeriods;
        private ICollection<Entities.Common.TPDM.IApplicantAddressPeriod> _applicantAddressPeriodsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddressPeriod> ApplicantAddressPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantAddressPeriods)
                    if (item.ApplicantAddress == null)
                        item.ApplicantAddress = this;
                // -------------------------------------------------------------

                return _applicantAddressPeriods;
            }
            set
            {
                _applicantAddressPeriods = value;
                _applicantAddressPeriodsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantAddressPeriod, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddressPeriod>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantAddressPeriod> Entities.Common.TPDM.IApplicantAddress.ApplicantAddressPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantAddressPeriods)
                    if (item.ApplicantAddress == null)
                        item.ApplicantAddress = this;
                // -------------------------------------------------------------

                return _applicantAddressPeriodsCovariant;
            }
            set
            {
                ApplicantAddressPeriods = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddressPeriod>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantAddressPeriod>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "LocaleDescriptor", new LookupColumnDetails { PropertyName = "LocaleDescriptorId", LookupTypeName = "LocaleDescriptor"} },
                { "StateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AddressTypeDescriptorId", AddressTypeDescriptorId);
            keyValues.Add("City", City);
            keyValues.Add("PostalCode", PostalCode);
            keyValues.Add("StateAbbreviationDescriptorId", StateAbbreviationDescriptorId);
            keyValues.Add("StreetNumberName", StreetNumberName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantAddress) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApartmentRoomSuiteNumberSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported
        {
            get { return _isApartmentRoomSuiteNumberSupported; }
            set { _isApartmentRoomSuiteNumberSupported = value; }
        }

        private bool _isApplicantAddressPeriodsSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsApplicantAddressPeriodsSupported
        {
            get { return _isApplicantAddressPeriodsSupported; }
            set { _isApplicantAddressPeriodsSupported = value; }
        }

        private bool _isBuildingSiteNumberSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported
        {
            get { return _isBuildingSiteNumberSupported; }
            set { _isBuildingSiteNumberSupported = value; }
        }

        private bool _isCongressionalDistrictSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported
        {
            get { return _isCongressionalDistrictSupported; }
            set { _isCongressionalDistrictSupported = value; }
        }

        private bool _isCountyFIPSCodeSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported
        {
            get { return _isCountyFIPSCodeSupported; }
            set { _isCountyFIPSCodeSupported = value; }
        }

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isLatitudeSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsLatitudeSupported
        {
            get { return _isLatitudeSupported; }
            set { _isLatitudeSupported = value; }
        }

        private bool _isLocaleDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported
        {
            get { return _isLocaleDescriptorSupported; }
            set { _isLocaleDescriptorSupported = value; }
        }

        private bool _isLongitudeSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsLongitudeSupported
        {
            get { return _isLongitudeSupported; }
            set { _isLongitudeSupported = value; }
        }

        private bool _isNameOfCountySupported = true;
        bool Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsNameOfCountySupported
        {
            get { return _isNameOfCountySupported; }
            set { _isNameOfCountySupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantAddressPeriod, bool> _isApplicantAddressPeriodIncluded;
        Func<Entities.Common.TPDM.IApplicantAddressPeriod, bool> Entities.Common.TPDM.IApplicantAddressSynchronizationSourceSupport.IsApplicantAddressPeriodIncluded
        {
            get { return _isApplicantAddressPeriodIncluded; }
            set { _isApplicantAddressPeriodIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantAddressPeriod table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantAddressPeriod : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantAddressPeriod, Entities.Common.Records.TPDM.IApplicantAddressPeriodRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantAddressPeriodSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantAddressPeriod()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantAddress ApplicantAddress { get; set; }

        Entities.Common.TPDM.IApplicantAddress IApplicantAddressPeriod.ApplicantAddress
        {
            get { return ApplicantAddress; }
            set { ApplicantAddress = (ApplicantAddress) value; }
        }

        int Entities.Common.Records.TPDM.IApplicantAddressPeriodRecord.AddressTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).AddressTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).AddressTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IApplicantAddressPeriodRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).ApplicantIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IApplicantAddressPeriodRecord.City
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).City; }
            set { ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).City = value; }
        }

        string Entities.Common.Records.TPDM.IApplicantAddressPeriodRecord.PostalCode
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).PostalCode; }
            set { ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).PostalCode = value; }
        }

        int Entities.Common.Records.TPDM.IApplicantAddressPeriodRecord.StateAbbreviationDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).StateAbbreviationDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).StateAbbreviationDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IApplicantAddressPeriodRecord.StreetNumberName
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).StreetNumberName; }
            set { ((Entities.Common.Records.TPDM.IApplicantAddressRecord) ApplicantAddress).StreetNumberName = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "StateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantAddress as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantAddressPeriod) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantAddress = (ApplicantAddress) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicantAddressPeriodSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantAid table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantAid : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantAid, Entities.Common.Records.TPDM.IApplicantAidRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantAidSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantAid()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantAid.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantAidRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AidTypeDescriptorId 
        {
            get
            {
                if (_aidTypeDescriptorId == default(int))
                    _aidTypeDescriptorId = DescriptorsCache.GetCache().GetId("AidTypeDescriptor", _aidTypeDescriptor);

                return _aidTypeDescriptorId;
            } 
            set
            {
                _aidTypeDescriptorId = value;
                _aidTypeDescriptor = null;
            }
        }

        private int _aidTypeDescriptorId;
        private string _aidTypeDescriptor;

        public virtual string AidTypeDescriptor
        {
            get
            {
                if (_aidTypeDescriptor == null)
                    _aidTypeDescriptor = DescriptorsCache.GetCache().GetValue("AidTypeDescriptor", _aidTypeDescriptorId);
                    
                return _aidTypeDescriptor;
            }
            set
            {
                _aidTypeDescriptor = value;
                _aidTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999999999999.9999", "999999999999999.9999")]
        public virtual decimal? AidAmount  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string AidConditionDescription  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual bool? PellGrantRecipient  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AidTypeDescriptor", new LookupColumnDetails { PropertyName = "AidTypeDescriptorId", LookupTypeName = "AidTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AidTypeDescriptorId", AidTypeDescriptorId);
            keyValues.Add("BeginDate", BeginDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantAid)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantAid) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAidAmountSupported = true;
        bool Entities.Common.TPDM.IApplicantAidSynchronizationSourceSupport.IsAidAmountSupported
        {
            get { return _isAidAmountSupported; }
            set { _isAidAmountSupported = value; }
        }

        private bool _isAidConditionDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicantAidSynchronizationSourceSupport.IsAidConditionDescriptionSupported
        {
            get { return _isAidConditionDescriptionSupported; }
            set { _isAidConditionDescriptionSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicantAidSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isPellGrantRecipientSupported = true;
        bool Entities.Common.TPDM.IApplicantAidSynchronizationSourceSupport.IsPellGrantRecipientSupported
        {
            get { return _isPellGrantRecipientSupported; }
            set { _isPellGrantRecipientSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantBackgroundCheck table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantBackgroundCheck : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantBackgroundCheck, Entities.Common.Records.TPDM.IApplicantBackgroundCheckRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantBackgroundCheckSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantBackgroundCheck()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantBackgroundCheck.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantBackgroundCheckRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int BackgroundCheckTypeDescriptorId 
        {
            get
            {
                if (_backgroundCheckTypeDescriptorId == default(int))
                    _backgroundCheckTypeDescriptorId = DescriptorsCache.GetCache().GetId("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptor);

                return _backgroundCheckTypeDescriptorId;
            } 
            set
            {
                _backgroundCheckTypeDescriptorId = value;
                _backgroundCheckTypeDescriptor = null;
            }
        }

        private int _backgroundCheckTypeDescriptorId;
        private string _backgroundCheckTypeDescriptor;

        public virtual string BackgroundCheckTypeDescriptor
        {
            get
            {
                if (_backgroundCheckTypeDescriptor == null)
                    _backgroundCheckTypeDescriptor = DescriptorsCache.GetCache().GetValue("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptorId);
                    
                return _backgroundCheckTypeDescriptor;
            }
            set
            {
                _backgroundCheckTypeDescriptor = value;
                _backgroundCheckTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BackgroundCheckCompletedDate 
        {
            get { return _backgroundCheckCompletedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _backgroundCheckCompletedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _backgroundCheckCompletedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _backgroundCheckCompletedDate;
        
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BackgroundCheckRequestedDate 
        {
            get { return _backgroundCheckRequestedDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _backgroundCheckRequestedDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _backgroundCheckRequestedDate;
        
        public virtual int? BackgroundCheckStatusDescriptorId 
        {
            get
            {
                if (_backgroundCheckStatusDescriptorId == default(int?))
                    _backgroundCheckStatusDescriptorId = string.IsNullOrWhiteSpace(_backgroundCheckStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptor);

                return _backgroundCheckStatusDescriptorId;
            } 
            set
            {
                _backgroundCheckStatusDescriptorId = value;
                _backgroundCheckStatusDescriptor = null;
            }
        }

        private int? _backgroundCheckStatusDescriptorId;
        private string _backgroundCheckStatusDescriptor;

        public virtual string BackgroundCheckStatusDescriptor
        {
            get
            {
                if (_backgroundCheckStatusDescriptor == null)
                    _backgroundCheckStatusDescriptor = _backgroundCheckStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptorId.Value);
                    
                return _backgroundCheckStatusDescriptor;
            }
            set
            {
                _backgroundCheckStatusDescriptor = value;
                _backgroundCheckStatusDescriptorId = default(int?);
            }
        }
        public virtual bool? Fingerprint  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "BackgroundCheckStatusDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckStatusDescriptorId", LookupTypeName = "BackgroundCheckStatusDescriptor"} },
                { "BackgroundCheckTypeDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckTypeDescriptorId", LookupTypeName = "BackgroundCheckTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BackgroundCheckTypeDescriptorId", BackgroundCheckTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantBackgroundCheck) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBackgroundCheckCompletedDateSupported = true;
        bool Entities.Common.TPDM.IApplicantBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported
        {
            get { return _isBackgroundCheckCompletedDateSupported; }
            set { _isBackgroundCheckCompletedDateSupported = value; }
        }

        private bool _isBackgroundCheckRequestedDateSupported = true;
        bool Entities.Common.TPDM.IApplicantBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported
        {
            get { return _isBackgroundCheckRequestedDateSupported; }
            set { _isBackgroundCheckRequestedDateSupported = value; }
        }

        private bool _isBackgroundCheckStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported
        {
            get { return _isBackgroundCheckStatusDescriptorSupported; }
            set { _isBackgroundCheckStatusDescriptorSupported = value; }
        }

        private bool _isFingerprintSupported = true;
        bool Entities.Common.TPDM.IApplicantBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported
        {
            get { return _isFingerprintSupported; }
            set { _isFingerprintSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantCharacteristic table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantCharacteristic : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantCharacteristic, Entities.Common.Records.TPDM.IApplicantCharacteristicRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantCharacteristicSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantCharacteristic()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantCharacteristic.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantCharacteristicRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int StudentCharacteristicDescriptorId 
        {
            get
            {
                if (_studentCharacteristicDescriptorId == default(int))
                    _studentCharacteristicDescriptorId = DescriptorsCache.GetCache().GetId("StudentCharacteristicDescriptor", _studentCharacteristicDescriptor);

                return _studentCharacteristicDescriptorId;
            } 
            set
            {
                _studentCharacteristicDescriptorId = value;
                _studentCharacteristicDescriptor = null;
            }
        }

        private int _studentCharacteristicDescriptorId;
        private string _studentCharacteristicDescriptor;

        public virtual string StudentCharacteristicDescriptor
        {
            get
            {
                if (_studentCharacteristicDescriptor == null)
                    _studentCharacteristicDescriptor = DescriptorsCache.GetCache().GetValue("StudentCharacteristicDescriptor", _studentCharacteristicDescriptorId);
                    
                return _studentCharacteristicDescriptor;
            }
            set
            {
                _studentCharacteristicDescriptor = value;
                _studentCharacteristicDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DesignatedBy  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StudentCharacteristicDescriptor", new LookupColumnDetails { PropertyName = "StudentCharacteristicDescriptorId", LookupTypeName = "StudentCharacteristicDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("StudentCharacteristicDescriptorId", StudentCharacteristicDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantCharacteristic) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicantCharacteristicSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isDesignatedBySupported = true;
        bool Entities.Common.TPDM.IApplicantCharacteristicSynchronizationSourceSupport.IsDesignatedBySupported
        {
            get { return _isDesignatedBySupported; }
            set { _isDesignatedBySupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicantCharacteristicSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantDisability table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantDisability : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantDisability, Entities.Common.Records.TPDM.IApplicantDisabilityRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantDisabilitySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantDisability()
        {
            ApplicantDisabilityDesignations = new HashSet<ApplicantDisabilityDesignation>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantDisability.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantDisabilityRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDescriptorId 
        {
            get
            {
                if (_disabilityDescriptorId == default(int))
                    _disabilityDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDescriptor", _disabilityDescriptor);

                return _disabilityDescriptorId;
            } 
            set
            {
                _disabilityDescriptorId = value;
                _disabilityDescriptor = null;
            }
        }

        private int _disabilityDescriptorId;
        private string _disabilityDescriptor;

        public virtual string DisabilityDescriptor
        {
            get
            {
                if (_disabilityDescriptor == null)
                    _disabilityDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDescriptor", _disabilityDescriptorId);
                    
                return _disabilityDescriptor;
            }
            set
            {
                _disabilityDescriptor = value;
                _disabilityDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? DisabilityDeterminationSourceTypeDescriptorId 
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptorId == default(int?))
                    _disabilityDeterminationSourceTypeDescriptorId = string.IsNullOrWhiteSpace(_disabilityDeterminationSourceTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptor);

                return _disabilityDeterminationSourceTypeDescriptorId;
            } 
            set
            {
                _disabilityDeterminationSourceTypeDescriptorId = value;
                _disabilityDeterminationSourceTypeDescriptor = null;
            }
        }

        private int? _disabilityDeterminationSourceTypeDescriptorId;
        private string _disabilityDeterminationSourceTypeDescriptor;

        public virtual string DisabilityDeterminationSourceTypeDescriptor
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptor == null)
                    _disabilityDeterminationSourceTypeDescriptor = _disabilityDeterminationSourceTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptorId.Value);
                    
                return _disabilityDeterminationSourceTypeDescriptor;
            }
            set
            {
                _disabilityDeterminationSourceTypeDescriptor = value;
                _disabilityDeterminationSourceTypeDescriptorId = default(int?);
            }
        }
        [StringLength(80), NoDangerousText]
        public virtual string DisabilityDiagnosis  { get; set; }
        public virtual int? OrderOfDisability  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisabilityDesignation> _applicantDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.IApplicantDisabilityDesignation> _applicantDisabilityDesignationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisabilityDesignation> ApplicantDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantDisabilityDesignations)
                    if (item.ApplicantDisability == null)
                        item.ApplicantDisability = this;
                // -------------------------------------------------------------

                return _applicantDisabilityDesignations;
            }
            set
            {
                _applicantDisabilityDesignations = value;
                _applicantDisabilityDesignationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantDisabilityDesignation, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisabilityDesignation>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantDisabilityDesignation> Entities.Common.TPDM.IApplicantDisability.ApplicantDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantDisabilityDesignations)
                    if (item.ApplicantDisability == null)
                        item.ApplicantDisability = this;
                // -------------------------------------------------------------

                return _applicantDisabilityDesignationsCovariant;
            }
            set
            {
                ApplicantDisabilityDesignations = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisabilityDesignation>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantDisabilityDesignation>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDeterminationSourceTypeDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDeterminationSourceTypeDescriptorId", LookupTypeName = "DisabilityDeterminationSourceTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDescriptorId", DisabilityDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantDisability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantDisability) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicantDisabilityDesignationsSupported = true;
        bool Entities.Common.TPDM.IApplicantDisabilitySynchronizationSourceSupport.IsApplicantDisabilityDesignationsSupported
        {
            get { return _isApplicantDisabilityDesignationsSupported; }
            set { _isApplicantDisabilityDesignationsSupported = value; }
        }

        private bool _isDisabilityDeterminationSourceTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported
        {
            get { return _isDisabilityDeterminationSourceTypeDescriptorSupported; }
            set { _isDisabilityDeterminationSourceTypeDescriptorSupported = value; }
        }

        private bool _isDisabilityDiagnosisSupported = true;
        bool Entities.Common.TPDM.IApplicantDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported
        {
            get { return _isDisabilityDiagnosisSupported; }
            set { _isDisabilityDiagnosisSupported = value; }
        }

        private bool _isOrderOfDisabilitySupported = true;
        bool Entities.Common.TPDM.IApplicantDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported
        {
            get { return _isOrderOfDisabilitySupported; }
            set { _isOrderOfDisabilitySupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantDisabilityDesignation, bool> _isApplicantDisabilityDesignationIncluded;
        Func<Entities.Common.TPDM.IApplicantDisabilityDesignation, bool> Entities.Common.TPDM.IApplicantDisabilitySynchronizationSourceSupport.IsApplicantDisabilityDesignationIncluded
        {
            get { return _isApplicantDisabilityDesignationIncluded; }
            set { _isApplicantDisabilityDesignationIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantDisabilityDesignation table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantDisabilityDesignation : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantDisabilityDesignation, Entities.Common.Records.TPDM.IApplicantDisabilityDesignationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantDisabilityDesignationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantDisabilityDesignation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantDisability ApplicantDisability { get; set; }

        Entities.Common.TPDM.IApplicantDisability IApplicantDisabilityDesignation.ApplicantDisability
        {
            get { return ApplicantDisability; }
            set { ApplicantDisability = (ApplicantDisability) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantDisabilityDesignationRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantDisabilityRecord) ApplicantDisability).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantDisabilityRecord) ApplicantDisability).ApplicantIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IApplicantDisabilityDesignationRecord.DisabilityDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantDisabilityRecord) ApplicantDisability).DisabilityDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IApplicantDisabilityRecord) ApplicantDisability).DisabilityDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDesignationDescriptorId 
        {
            get
            {
                if (_disabilityDesignationDescriptorId == default(int))
                    _disabilityDesignationDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDesignationDescriptor", _disabilityDesignationDescriptor);

                return _disabilityDesignationDescriptorId;
            } 
            set
            {
                _disabilityDesignationDescriptorId = value;
                _disabilityDesignationDescriptor = null;
            }
        }

        private int _disabilityDesignationDescriptorId;
        private string _disabilityDesignationDescriptor;

        public virtual string DisabilityDesignationDescriptor
        {
            get
            {
                if (_disabilityDesignationDescriptor == null)
                    _disabilityDesignationDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDesignationDescriptor", _disabilityDesignationDescriptorId);
                    
                return _disabilityDesignationDescriptor;
            }
            set
            {
                _disabilityDesignationDescriptor = value;
                _disabilityDesignationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDesignationDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDesignationDescriptorId", LookupTypeName = "DisabilityDesignationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantDisability as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDesignationDescriptorId", DisabilityDesignationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantDisabilityDesignation) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantDisability = (ApplicantDisability) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantElectronicMail table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantElectronicMail : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantElectronicMail, Entities.Common.Records.TPDM.IApplicantElectronicMailRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantElectronicMailSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantElectronicMail()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantElectronicMail.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantElectronicMailRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(128), NoDangerousText, NoWhitespace]
        public virtual string ElectronicMailAddress  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ElectronicMailTypeDescriptorId 
        {
            get
            {
                if (_electronicMailTypeDescriptorId == default(int))
                    _electronicMailTypeDescriptorId = DescriptorsCache.GetCache().GetId("ElectronicMailTypeDescriptor", _electronicMailTypeDescriptor);

                return _electronicMailTypeDescriptorId;
            } 
            set
            {
                _electronicMailTypeDescriptorId = value;
                _electronicMailTypeDescriptor = null;
            }
        }

        private int _electronicMailTypeDescriptorId;
        private string _electronicMailTypeDescriptor;

        public virtual string ElectronicMailTypeDescriptor
        {
            get
            {
                if (_electronicMailTypeDescriptor == null)
                    _electronicMailTypeDescriptor = DescriptorsCache.GetCache().GetValue("ElectronicMailTypeDescriptor", _electronicMailTypeDescriptorId);
                    
                return _electronicMailTypeDescriptor;
            }
            set
            {
                _electronicMailTypeDescriptor = value;
                _electronicMailTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual bool? PrimaryEmailAddressIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ElectronicMailTypeDescriptor", new LookupColumnDetails { PropertyName = "ElectronicMailTypeDescriptorId", LookupTypeName = "ElectronicMailTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("ElectronicMailAddress", ElectronicMailAddress);
            keyValues.Add("ElectronicMailTypeDescriptorId", ElectronicMailTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantElectronicMail) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isPrimaryEmailAddressIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported
        {
            get { return _isPrimaryEmailAddressIndicatorSupported; }
            set { _isPrimaryEmailAddressIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantIdentificationDocument table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantIdentificationDocument, Entities.Common.Records.TPDM.IApplicantIdentificationDocumentRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantIdentificationDocument.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantIdentificationDocumentRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.IApplicantIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.IApplicantIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.IApplicantIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.IApplicantIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantInternationalAddress table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantInternationalAddress : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantInternationalAddress, Entities.Common.Records.TPDM.IApplicantInternationalAddressRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantInternationalAddress()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantInternationalAddress.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantInternationalAddressRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AddressTypeDescriptorId 
        {
            get
            {
                if (_addressTypeDescriptorId == default(int))
                    _addressTypeDescriptorId = DescriptorsCache.GetCache().GetId("AddressTypeDescriptor", _addressTypeDescriptor);

                return _addressTypeDescriptorId;
            } 
            set
            {
                _addressTypeDescriptorId = value;
                _addressTypeDescriptor = null;
            }
        }

        private int _addressTypeDescriptorId;
        private string _addressTypeDescriptor;

        public virtual string AddressTypeDescriptor
        {
            get
            {
                if (_addressTypeDescriptor == null)
                    _addressTypeDescriptor = DescriptorsCache.GetCache().GetValue("AddressTypeDescriptor", _addressTypeDescriptorId);
                    
                return _addressTypeDescriptor;
            }
            set
            {
                _addressTypeDescriptor = value;
                _addressTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(150), NoDangerousText]
        public virtual string AddressLine1  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine2  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine3  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine4  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [RequiredWithNonDefault]
        public virtual int CountryDescriptorId 
        {
            get
            {
                if (_countryDescriptorId == default(int))
                    _countryDescriptorId = DescriptorsCache.GetCache().GetId("CountryDescriptor", _countryDescriptor);

                return _countryDescriptorId;
            } 
            set
            {
                _countryDescriptorId = value;
                _countryDescriptor = null;
            }
        }

        private int _countryDescriptorId;
        private string _countryDescriptor;

        public virtual string CountryDescriptor
        {
            get
            {
                if (_countryDescriptor == null)
                    _countryDescriptor = DescriptorsCache.GetCache().GetValue("CountryDescriptor", _countryDescriptorId);
                    
                return _countryDescriptor;
            }
            set
            {
                _countryDescriptor = value;
                _countryDescriptorId = default(int);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [StringLength(20), NoDangerousText]
        public virtual string Latitude  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string Longitude  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "CountryDescriptor", new LookupColumnDetails { PropertyName = "CountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AddressTypeDescriptorId", AddressTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantInternationalAddress) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAddressLine1Supported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported
        {
            get { return _isAddressLine1Supported; }
            set { _isAddressLine1Supported = value; }
        }

        private bool _isAddressLine2Supported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported
        {
            get { return _isAddressLine2Supported; }
            set { _isAddressLine2Supported = value; }
        }

        private bool _isAddressLine3Supported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported
        {
            get { return _isAddressLine3Supported; }
            set { _isAddressLine3Supported = value; }
        }

        private bool _isAddressLine4Supported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported
        {
            get { return _isAddressLine4Supported; }
            set { _isAddressLine4Supported = value; }
        }

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported
        {
            get { return _isCountryDescriptorSupported; }
            set { _isCountryDescriptorSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isLatitudeSupported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported
        {
            get { return _isLatitudeSupported; }
            set { _isLatitudeSupported = value; }
        }

        private bool _isLongitudeSupported = true;
        bool Entities.Common.TPDM.IApplicantInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported
        {
            get { return _isLongitudeSupported; }
            set { _isLongitudeSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantLanguage table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantLanguage : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantLanguage, Entities.Common.Records.TPDM.IApplicantLanguageRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantLanguageSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantLanguage()
        {
            ApplicantLanguageUses = new HashSet<ApplicantLanguageUse>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantLanguage.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantLanguageRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageDescriptorId 
        {
            get
            {
                if (_languageDescriptorId == default(int))
                    _languageDescriptorId = DescriptorsCache.GetCache().GetId("LanguageDescriptor", _languageDescriptor);

                return _languageDescriptorId;
            } 
            set
            {
                _languageDescriptorId = value;
                _languageDescriptor = null;
            }
        }

        private int _languageDescriptorId;
        private string _languageDescriptor;

        public virtual string LanguageDescriptor
        {
            get
            {
                if (_languageDescriptor == null)
                    _languageDescriptor = DescriptorsCache.GetCache().GetValue("LanguageDescriptor", _languageDescriptorId);
                    
                return _languageDescriptor;
            }
            set
            {
                _languageDescriptor = value;
                _languageDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguageUse> _applicantLanguageUses;
        private ICollection<Entities.Common.TPDM.IApplicantLanguageUse> _applicantLanguageUsesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguageUse> ApplicantLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantLanguageUses)
                    if (item.ApplicantLanguage == null)
                        item.ApplicantLanguage = this;
                // -------------------------------------------------------------

                return _applicantLanguageUses;
            }
            set
            {
                _applicantLanguageUses = value;
                _applicantLanguageUsesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicantLanguageUse, Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguageUse>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicantLanguageUse> Entities.Common.TPDM.IApplicantLanguage.ApplicantLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicantLanguageUses)
                    if (item.ApplicantLanguage == null)
                        item.ApplicantLanguage = this;
                // -------------------------------------------------------------

                return _applicantLanguageUsesCovariant;
            }
            set
            {
                ApplicantLanguageUses = new HashSet<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguageUse>(value.Cast<Entities.NHibernate.ApplicantAggregate.TPDM.ApplicantLanguageUse>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageDescriptorId", LanguageDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantLanguage) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicantLanguageUsesSupported = true;
        bool Entities.Common.TPDM.IApplicantLanguageSynchronizationSourceSupport.IsApplicantLanguageUsesSupported
        {
            get { return _isApplicantLanguageUsesSupported; }
            set { _isApplicantLanguageUsesSupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicantLanguageUse, bool> _isApplicantLanguageUseIncluded;
        Func<Entities.Common.TPDM.IApplicantLanguageUse, bool> Entities.Common.TPDM.IApplicantLanguageSynchronizationSourceSupport.IsApplicantLanguageUseIncluded
        {
            get { return _isApplicantLanguageUseIncluded; }
            set { _isApplicantLanguageUseIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantLanguageUse table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantLanguageUse : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantLanguageUse, Entities.Common.Records.TPDM.IApplicantLanguageUseRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantLanguageUseSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantLanguageUse()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ApplicantLanguage ApplicantLanguage { get; set; }

        Entities.Common.TPDM.IApplicantLanguage IApplicantLanguageUse.ApplicantLanguage
        {
            get { return ApplicantLanguage; }
            set { ApplicantLanguage = (ApplicantLanguage) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantLanguageUseRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantLanguageRecord) ApplicantLanguage).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantLanguageRecord) ApplicantLanguage).ApplicantIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IApplicantLanguageUseRecord.LanguageDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantLanguageRecord) ApplicantLanguage).LanguageDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IApplicantLanguageRecord) ApplicantLanguage).LanguageDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageUseDescriptorId 
        {
            get
            {
                if (_languageUseDescriptorId == default(int))
                    _languageUseDescriptorId = DescriptorsCache.GetCache().GetId("LanguageUseDescriptor", _languageUseDescriptor);

                return _languageUseDescriptorId;
            } 
            set
            {
                _languageUseDescriptorId = value;
                _languageUseDescriptor = null;
            }
        }

        private int _languageUseDescriptorId;
        private string _languageUseDescriptor;

        public virtual string LanguageUseDescriptor
        {
            get
            {
                if (_languageUseDescriptor == null)
                    _languageUseDescriptor = DescriptorsCache.GetCache().GetValue("LanguageUseDescriptor", _languageUseDescriptorId);
                    
                return _languageUseDescriptor;
            }
            set
            {
                _languageUseDescriptor = value;
                _languageUseDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
                { "LanguageUseDescriptor", new LookupColumnDetails { PropertyName = "LanguageUseDescriptorId", LookupTypeName = "LanguageUseDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ApplicantLanguage as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageUseDescriptorId", LanguageUseDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantLanguageUse) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ApplicantLanguage = (ApplicantLanguage) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantPersonalIdentificationDocument table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantPersonalIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantPersonalIdentificationDocument, Entities.Common.Records.TPDM.IApplicantPersonalIdentificationDocumentRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantPersonalIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantPersonalIdentificationDocument.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantPersonalIdentificationDocumentRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantPersonalIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantRace table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantRace : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantRace, Entities.Common.Records.TPDM.IApplicantRaceRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantRaceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantRace()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantRace.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantRaceRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int RaceDescriptorId 
        {
            get
            {
                if (_raceDescriptorId == default(int))
                    _raceDescriptorId = DescriptorsCache.GetCache().GetId("RaceDescriptor", _raceDescriptor);

                return _raceDescriptorId;
            } 
            set
            {
                _raceDescriptorId = value;
                _raceDescriptor = null;
            }
        }

        private int _raceDescriptorId;
        private string _raceDescriptor;

        public virtual string RaceDescriptor
        {
            get
            {
                if (_raceDescriptor == null)
                    _raceDescriptor = DescriptorsCache.GetCache().GetValue("RaceDescriptor", _raceDescriptorId);
                    
                return _raceDescriptor;
            }
            set
            {
                _raceDescriptor = value;
                _raceDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RaceDescriptor", new LookupColumnDetails { PropertyName = "RaceDescriptorId", LookupTypeName = "RaceDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RaceDescriptorId", RaceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantRace) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantStaffIdentificationCode table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantStaffIdentificationCode : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantStaffIdentificationCode, Entities.Common.Records.TPDM.IApplicantStaffIdentificationCodeRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantStaffIdentificationCodeSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantStaffIdentificationCode()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantStaffIdentificationCode.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantStaffIdentificationCodeRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int StaffIdentificationSystemDescriptorId 
        {
            get
            {
                if (_staffIdentificationSystemDescriptorId == default(int))
                    _staffIdentificationSystemDescriptorId = DescriptorsCache.GetCache().GetId("StaffIdentificationSystemDescriptor", _staffIdentificationSystemDescriptor);

                return _staffIdentificationSystemDescriptorId;
            } 
            set
            {
                _staffIdentificationSystemDescriptorId = value;
                _staffIdentificationSystemDescriptor = null;
            }
        }

        private int _staffIdentificationSystemDescriptorId;
        private string _staffIdentificationSystemDescriptor;

        public virtual string StaffIdentificationSystemDescriptor
        {
            get
            {
                if (_staffIdentificationSystemDescriptor == null)
                    _staffIdentificationSystemDescriptor = DescriptorsCache.GetCache().GetValue("StaffIdentificationSystemDescriptor", _staffIdentificationSystemDescriptorId);
                    
                return _staffIdentificationSystemDescriptor;
            }
            set
            {
                _staffIdentificationSystemDescriptor = value;
                _staffIdentificationSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(60), NoDangerousText]
        public virtual string AssigningOrganizationIdentificationCode  { get; set; }
        [RequiredWithNonDefault, StringLength(60), NoDangerousText]
        public virtual string IdentificationCode  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StaffIdentificationSystemDescriptor", new LookupColumnDetails { PropertyName = "StaffIdentificationSystemDescriptorId", LookupTypeName = "StaffIdentificationSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("StaffIdentificationSystemDescriptorId", StaffIdentificationSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantStaffIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantStaffIdentificationCode) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAssigningOrganizationIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.IApplicantStaffIdentificationCodeSynchronizationSourceSupport.IsAssigningOrganizationIdentificationCodeSupported
        {
            get { return _isAssigningOrganizationIdentificationCodeSupported; }
            set { _isAssigningOrganizationIdentificationCodeSupported = value; }
        }

        private bool _isIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.IApplicantStaffIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported
        {
            get { return _isIdentificationCodeSupported; }
            set { _isIdentificationCodeSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantTeacherPreparationProgram table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantTeacherPreparationProgram : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantTeacherPreparationProgram, Entities.Common.Records.TPDM.IApplicantTeacherPreparationProgramRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantTeacherPreparationProgramSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantTeacherPreparationProgram()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantTeacherPreparationProgram.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantTeacherPreparationProgramRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string TeacherPreparationProgramName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? GPA  { get; set; }
        [RequiredWithNonDefault]
        public virtual int LevelOfDegreeAwardedDescriptorId 
        {
            get
            {
                if (_levelOfDegreeAwardedDescriptorId == default(int))
                    _levelOfDegreeAwardedDescriptorId = DescriptorsCache.GetCache().GetId("LevelOfDegreeAwardedDescriptor", _levelOfDegreeAwardedDescriptor);

                return _levelOfDegreeAwardedDescriptorId;
            } 
            set
            {
                _levelOfDegreeAwardedDescriptorId = value;
                _levelOfDegreeAwardedDescriptor = null;
            }
        }

        private int _levelOfDegreeAwardedDescriptorId;
        private string _levelOfDegreeAwardedDescriptor;

        public virtual string LevelOfDegreeAwardedDescriptor
        {
            get
            {
                if (_levelOfDegreeAwardedDescriptor == null)
                    _levelOfDegreeAwardedDescriptor = DescriptorsCache.GetCache().GetValue("LevelOfDegreeAwardedDescriptor", _levelOfDegreeAwardedDescriptorId);
                    
                return _levelOfDegreeAwardedDescriptor;
            }
            set
            {
                _levelOfDegreeAwardedDescriptor = value;
                _levelOfDegreeAwardedDescriptorId = default(int);
            }
        }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string MajorSpecialization  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string NameOfInstitution  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string TeacherPreparationProgramIdentifier  { get; set; }
        [RequiredWithNonDefault]
        public virtual int TeacherPreparationProgramTypeDescriptorId 
        {
            get
            {
                if (_teacherPreparationProgramTypeDescriptorId == default(int))
                    _teacherPreparationProgramTypeDescriptorId = DescriptorsCache.GetCache().GetId("TeacherPreparationProgramTypeDescriptor", _teacherPreparationProgramTypeDescriptor);

                return _teacherPreparationProgramTypeDescriptorId;
            } 
            set
            {
                _teacherPreparationProgramTypeDescriptorId = value;
                _teacherPreparationProgramTypeDescriptor = null;
            }
        }

        private int _teacherPreparationProgramTypeDescriptorId;
        private string _teacherPreparationProgramTypeDescriptor;

        public virtual string TeacherPreparationProgramTypeDescriptor
        {
            get
            {
                if (_teacherPreparationProgramTypeDescriptor == null)
                    _teacherPreparationProgramTypeDescriptor = DescriptorsCache.GetCache().GetValue("TeacherPreparationProgramTypeDescriptor", _teacherPreparationProgramTypeDescriptorId);
                    
                return _teacherPreparationProgramTypeDescriptor;
            }
            set
            {
                _teacherPreparationProgramTypeDescriptor = value;
                _teacherPreparationProgramTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LevelOfDegreeAwardedDescriptor", new LookupColumnDetails { PropertyName = "LevelOfDegreeAwardedDescriptorId", LookupTypeName = "LevelOfDegreeAwardedDescriptor"} },
                { "TeacherPreparationProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "TeacherPreparationProgramTypeDescriptorId", LookupTypeName = "TeacherPreparationProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TeacherPreparationProgramName", TeacherPreparationProgramName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantTeacherPreparationProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantTeacherPreparationProgram) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isGPASupported = true;
        bool Entities.Common.TPDM.IApplicantTeacherPreparationProgramSynchronizationSourceSupport.IsGPASupported
        {
            get { return _isGPASupported; }
            set { _isGPASupported = value; }
        }

        private bool _isLevelOfDegreeAwardedDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantTeacherPreparationProgramSynchronizationSourceSupport.IsLevelOfDegreeAwardedDescriptorSupported
        {
            get { return _isLevelOfDegreeAwardedDescriptorSupported; }
            set { _isLevelOfDegreeAwardedDescriptorSupported = value; }
        }

        private bool _isMajorSpecializationSupported = true;
        bool Entities.Common.TPDM.IApplicantTeacherPreparationProgramSynchronizationSourceSupport.IsMajorSpecializationSupported
        {
            get { return _isMajorSpecializationSupported; }
            set { _isMajorSpecializationSupported = value; }
        }

        private bool _isNameOfInstitutionSupported = true;
        bool Entities.Common.TPDM.IApplicantTeacherPreparationProgramSynchronizationSourceSupport.IsNameOfInstitutionSupported
        {
            get { return _isNameOfInstitutionSupported; }
            set { _isNameOfInstitutionSupported = value; }
        }

        private bool _isTeacherPreparationProgramIdentifierSupported = true;
        bool Entities.Common.TPDM.IApplicantTeacherPreparationProgramSynchronizationSourceSupport.IsTeacherPreparationProgramIdentifierSupported
        {
            get { return _isTeacherPreparationProgramIdentifierSupported; }
            set { _isTeacherPreparationProgramIdentifierSupported = value; }
        }

        private bool _isTeacherPreparationProgramTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicantTeacherPreparationProgramSynchronizationSourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported
        {
            get { return _isTeacherPreparationProgramTypeDescriptorSupported; }
            set { _isTeacherPreparationProgramTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantTelephone table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantTelephone : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantTelephone, Entities.Common.Records.TPDM.IApplicantTelephoneRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantTelephoneSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantTelephone()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantTelephone.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantTelephoneRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(24), NoDangerousText, NoWhitespace]
        public virtual string TelephoneNumber  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TelephoneNumberTypeDescriptorId 
        {
            get
            {
                if (_telephoneNumberTypeDescriptorId == default(int))
                    _telephoneNumberTypeDescriptorId = DescriptorsCache.GetCache().GetId("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptor);

                return _telephoneNumberTypeDescriptorId;
            } 
            set
            {
                _telephoneNumberTypeDescriptorId = value;
                _telephoneNumberTypeDescriptor = null;
            }
        }

        private int _telephoneNumberTypeDescriptorId;
        private string _telephoneNumberTypeDescriptor;

        public virtual string TelephoneNumberTypeDescriptor
        {
            get
            {
                if (_telephoneNumberTypeDescriptor == null)
                    _telephoneNumberTypeDescriptor = DescriptorsCache.GetCache().GetValue("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptorId);
                    
                return _telephoneNumberTypeDescriptor;
            }
            set
            {
                _telephoneNumberTypeDescriptor = value;
                _telephoneNumberTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual int? OrderOfPriority  { get; set; }
        public virtual bool? TextMessageCapabilityIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TelephoneNumberTypeDescriptor", new LookupColumnDetails { PropertyName = "TelephoneNumberTypeDescriptorId", LookupTypeName = "TelephoneNumberTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TelephoneNumber", TelephoneNumber);
            keyValues.Add("TelephoneNumberTypeDescriptorId", TelephoneNumberTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantTelephone) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isOrderOfPrioritySupported = true;
        bool Entities.Common.TPDM.IApplicantTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported
        {
            get { return _isOrderOfPrioritySupported; }
            set { _isOrderOfPrioritySupported = value; }
        }

        private bool _isTextMessageCapabilityIndicatorSupported = true;
        bool Entities.Common.TPDM.IApplicantTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported
        {
            get { return _isTextMessageCapabilityIndicatorSupported; }
            set { _isTextMessageCapabilityIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantVisa table of the Applicant aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantVisa : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicantVisa, Entities.Common.Records.TPDM.IApplicantVisaRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantVisaSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantVisa()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Applicant Applicant { get; set; }

        Entities.Common.TPDM.IApplicant IApplicantVisa.Applicant
        {
            get { return Applicant; }
            set { Applicant = (Applicant) value; }
        }

        string Entities.Common.Records.TPDM.IApplicantVisaRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicantRecord) Applicant).ApplicantIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int VisaDescriptorId 
        {
            get
            {
                if (_visaDescriptorId == default(int))
                    _visaDescriptorId = DescriptorsCache.GetCache().GetId("VisaDescriptor", _visaDescriptor);

                return _visaDescriptorId;
            } 
            set
            {
                _visaDescriptorId = value;
                _visaDescriptor = null;
            }
        }

        private int _visaDescriptorId;
        private string _visaDescriptor;

        public virtual string VisaDescriptor
        {
            get
            {
                if (_visaDescriptor == null)
                    _visaDescriptor = DescriptorsCache.GetCache().GetValue("VisaDescriptor", _visaDescriptorId);
                    
                return _visaDescriptor;
            }
            set
            {
                _visaDescriptor = value;
                _visaDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "VisaDescriptor", new LookupColumnDetails { PropertyName = "VisaDescriptorId", LookupTypeName = "VisaDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Applicant as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("VisaDescriptorId", VisaDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantVisa)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantVisa) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Applicant = (Applicant) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: ApplicantProspectAssociation

namespace EdFi.Ods.Entities.NHibernate.ApplicantProspectAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="ApplicantProspectAssociation"/> entity.
    /// </summary>
    public class ApplicantProspectAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string ApplicantIdentifier { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProspectIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProspectIdentifier", ProspectIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicantProspectAssociation table of the ApplicantProspectAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicantProspectAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IApplicantProspectAssociation, Entities.Common.Records.TPDM.IApplicantProspectAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicantProspectAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicantProspectAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ApplicantIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ProspectIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ApplicantAggregate.TPDM.ApplicantReferenceData ApplicantReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Applicant discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplicantProspectAssociation.ApplicantDiscriminator
        {
            get { return ApplicantReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Applicant resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicantProspectAssociation.ApplicantResourceId
        {
            get { return ApplicantReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.ProspectAggregate.TPDM.ProspectReferenceData ProspectReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Prospect discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplicantProspectAssociation.ProspectDiscriminator
        {
            get { return ProspectReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Prospect resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicantProspectAssociation.ProspectResourceId
        {
            get { return ProspectReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProspectIdentifier", ProspectIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicantProspectAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicantProspectAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: Application

namespace EdFi.Ods.Entities.NHibernate.ApplicationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Application"/> entity.
    /// </summary>
    public class ApplicationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string ApplicantIdentifier { get; set; }
        public virtual string ApplicationIdentifier { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);
            keyValues.Add("ApplicationIdentifier", ApplicationIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Application table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Application : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IApplication, Entities.Common.Records.TPDM.IApplicationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Application()
        {
            ApplicationGradePointAverages = new HashSet<ApplicationGradePointAverage>();
            ApplicationOpenStaffPositions = new HashSet<ApplicationOpenStaffPosition>();
            ApplicationScoreResults = new HashSet<ApplicationScoreResult>();
            ApplicationTerms = new HashSet<ApplicationTerm>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ApplicantIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string ApplicationIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int?))
                    _academicSubjectDescriptorId = string.IsNullOrWhiteSpace(_academicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int? _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = _academicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId.Value);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? AcceptedDate 
        {
            get { return _acceptedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _acceptedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _acceptedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _acceptedDate;
        
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime ApplicationDate 
        {
            get { return _applicationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _applicationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _applicationDate;
        
        public virtual int? ApplicationSourceDescriptorId 
        {
            get
            {
                if (_applicationSourceDescriptorId == default(int?))
                    _applicationSourceDescriptorId = string.IsNullOrWhiteSpace(_applicationSourceDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ApplicationSourceDescriptor", _applicationSourceDescriptor);

                return _applicationSourceDescriptorId;
            } 
            set
            {
                _applicationSourceDescriptorId = value;
                _applicationSourceDescriptor = null;
            }
        }

        private int? _applicationSourceDescriptorId;
        private string _applicationSourceDescriptor;

        public virtual string ApplicationSourceDescriptor
        {
            get
            {
                if (_applicationSourceDescriptor == null)
                    _applicationSourceDescriptor = _applicationSourceDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ApplicationSourceDescriptor", _applicationSourceDescriptorId.Value);
                    
                return _applicationSourceDescriptor;
            }
            set
            {
                _applicationSourceDescriptor = value;
                _applicationSourceDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault]
        public virtual int ApplicationStatusDescriptorId 
        {
            get
            {
                if (_applicationStatusDescriptorId == default(int))
                    _applicationStatusDescriptorId = DescriptorsCache.GetCache().GetId("ApplicationStatusDescriptor", _applicationStatusDescriptor);

                return _applicationStatusDescriptorId;
            } 
            set
            {
                _applicationStatusDescriptorId = value;
                _applicationStatusDescriptor = null;
            }
        }

        private int _applicationStatusDescriptorId;
        private string _applicationStatusDescriptor;

        public virtual string ApplicationStatusDescriptor
        {
            get
            {
                if (_applicationStatusDescriptor == null)
                    _applicationStatusDescriptor = DescriptorsCache.GetCache().GetValue("ApplicationStatusDescriptor", _applicationStatusDescriptorId);
                    
                return _applicationStatusDescriptor;
            }
            set
            {
                _applicationStatusDescriptor = value;
                _applicationStatusDescriptorId = default(int);
            }
        }
        public virtual bool? CurrentEmployee  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? FirstContactDate 
        {
            get { return _firstContactDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _firstContactDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _firstContactDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _firstContactDate;
        
        public virtual int? HighestCompletedLevelOfEducationDescriptorId 
        {
            get
            {
                if (_highestCompletedLevelOfEducationDescriptorId == default(int?))
                    _highestCompletedLevelOfEducationDescriptorId = string.IsNullOrWhiteSpace(_highestCompletedLevelOfEducationDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LevelOfEducationDescriptor", _highestCompletedLevelOfEducationDescriptor);

                return _highestCompletedLevelOfEducationDescriptorId;
            } 
            set
            {
                _highestCompletedLevelOfEducationDescriptorId = value;
                _highestCompletedLevelOfEducationDescriptor = null;
            }
        }

        private int? _highestCompletedLevelOfEducationDescriptorId;
        private string _highestCompletedLevelOfEducationDescriptor;

        public virtual string HighestCompletedLevelOfEducationDescriptor
        {
            get
            {
                if (_highestCompletedLevelOfEducationDescriptor == null)
                    _highestCompletedLevelOfEducationDescriptor = _highestCompletedLevelOfEducationDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LevelOfEducationDescriptor", _highestCompletedLevelOfEducationDescriptorId.Value);
                    
                return _highestCompletedLevelOfEducationDescriptor;
            }
            set
            {
                _highestCompletedLevelOfEducationDescriptor = value;
                _highestCompletedLevelOfEducationDescriptorId = default(int?);
            }
        }
        public virtual int? HighlyQualifiedAcademicSubjectDescriptorId 
        {
            get
            {
                if (_highlyQualifiedAcademicSubjectDescriptorId == default(int?))
                    _highlyQualifiedAcademicSubjectDescriptorId = string.IsNullOrWhiteSpace(_highlyQualifiedAcademicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _highlyQualifiedAcademicSubjectDescriptor);

                return _highlyQualifiedAcademicSubjectDescriptorId;
            } 
            set
            {
                _highlyQualifiedAcademicSubjectDescriptorId = value;
                _highlyQualifiedAcademicSubjectDescriptor = null;
            }
        }

        private int? _highlyQualifiedAcademicSubjectDescriptorId;
        private string _highlyQualifiedAcademicSubjectDescriptor;

        public virtual string HighlyQualifiedAcademicSubjectDescriptor
        {
            get
            {
                if (_highlyQualifiedAcademicSubjectDescriptor == null)
                    _highlyQualifiedAcademicSubjectDescriptor = _highlyQualifiedAcademicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _highlyQualifiedAcademicSubjectDescriptorId.Value);
                    
                return _highlyQualifiedAcademicSubjectDescriptor;
            }
            set
            {
                _highlyQualifiedAcademicSubjectDescriptor = value;
                _highlyQualifiedAcademicSubjectDescriptorId = default(int?);
            }
        }
        public virtual bool? HighlyQualifiedTeacher  { get; set; }
        public virtual int? HighNeedsAcademicSubjectDescriptorId 
        {
            get
            {
                if (_highNeedsAcademicSubjectDescriptorId == default(int?))
                    _highNeedsAcademicSubjectDescriptorId = string.IsNullOrWhiteSpace(_highNeedsAcademicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _highNeedsAcademicSubjectDescriptor);

                return _highNeedsAcademicSubjectDescriptorId;
            } 
            set
            {
                _highNeedsAcademicSubjectDescriptorId = value;
                _highNeedsAcademicSubjectDescriptor = null;
            }
        }

        private int? _highNeedsAcademicSubjectDescriptorId;
        private string _highNeedsAcademicSubjectDescriptor;

        public virtual string HighNeedsAcademicSubjectDescriptor
        {
            get
            {
                if (_highNeedsAcademicSubjectDescriptor == null)
                    _highNeedsAcademicSubjectDescriptor = _highNeedsAcademicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _highNeedsAcademicSubjectDescriptorId.Value);
                    
                return _highNeedsAcademicSubjectDescriptor;
            }
            set
            {
                _highNeedsAcademicSubjectDescriptor = value;
                _highNeedsAcademicSubjectDescriptorId = default(int?);
            }
        }
        public virtual int? HireStatusDescriptorId 
        {
            get
            {
                if (_hireStatusDescriptorId == default(int?))
                    _hireStatusDescriptorId = string.IsNullOrWhiteSpace(_hireStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("HireStatusDescriptor", _hireStatusDescriptor);

                return _hireStatusDescriptorId;
            } 
            set
            {
                _hireStatusDescriptorId = value;
                _hireStatusDescriptor = null;
            }
        }

        private int? _hireStatusDescriptorId;
        private string _hireStatusDescriptor;

        public virtual string HireStatusDescriptor
        {
            get
            {
                if (_hireStatusDescriptor == null)
                    _hireStatusDescriptor = _hireStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("HireStatusDescriptor", _hireStatusDescriptorId.Value);
                    
                return _hireStatusDescriptor;
            }
            set
            {
                _hireStatusDescriptor = value;
                _hireStatusDescriptorId = default(int?);
            }
        }
        public virtual int? HiringSourceDescriptorId 
        {
            get
            {
                if (_hiringSourceDescriptorId == default(int?))
                    _hiringSourceDescriptorId = string.IsNullOrWhiteSpace(_hiringSourceDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("HiringSourceDescriptor", _hiringSourceDescriptor);

                return _hiringSourceDescriptorId;
            } 
            set
            {
                _hiringSourceDescriptorId = value;
                _hiringSourceDescriptor = null;
            }
        }

        private int? _hiringSourceDescriptorId;
        private string _hiringSourceDescriptor;

        public virtual string HiringSourceDescriptor
        {
            get
            {
                if (_hiringSourceDescriptor == null)
                    _hiringSourceDescriptor = _hiringSourceDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("HiringSourceDescriptor", _hiringSourceDescriptorId.Value);
                    
                return _hiringSourceDescriptor;
            }
            set
            {
                _hiringSourceDescriptor = value;
                _hiringSourceDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? WithdrawDate 
        {
            get { return _withdrawDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _withdrawDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _withdrawDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _withdrawDate;
        
        public virtual int? WithdrawReasonDescriptorId 
        {
            get
            {
                if (_withdrawReasonDescriptorId == default(int?))
                    _withdrawReasonDescriptorId = string.IsNullOrWhiteSpace(_withdrawReasonDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("WithdrawReasonDescriptor", _withdrawReasonDescriptor);

                return _withdrawReasonDescriptorId;
            } 
            set
            {
                _withdrawReasonDescriptorId = value;
                _withdrawReasonDescriptor = null;
            }
        }

        private int? _withdrawReasonDescriptorId;
        private string _withdrawReasonDescriptor;

        public virtual string WithdrawReasonDescriptor
        {
            get
            {
                if (_withdrawReasonDescriptor == null)
                    _withdrawReasonDescriptor = _withdrawReasonDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("WithdrawReasonDescriptor", _withdrawReasonDescriptorId.Value);
                    
                return _withdrawReasonDescriptor;
            }
            set
            {
                _withdrawReasonDescriptor = value;
                _withdrawReasonDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? YearsOfPriorProfessionalExperience  { get; set; }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? YearsOfPriorTeachingExperience  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ApplicantAggregate.TPDM.ApplicantReferenceData ApplicantReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Applicant discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplication.ApplicantDiscriminator
        {
            get { return ApplicantReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Applicant resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplication.ApplicantResourceId
        {
            get { return ApplicantReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplication.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplication.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationGradePointAverage> _applicationGradePointAverages;
        private ICollection<Entities.Common.TPDM.IApplicationGradePointAverage> _applicationGradePointAveragesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationGradePointAverage> ApplicationGradePointAverages
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationGradePointAverages)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationGradePointAverages;
            }
            set
            {
                _applicationGradePointAverages = value;
                _applicationGradePointAveragesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicationGradePointAverage, Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationGradePointAverage>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationGradePointAverage> Entities.Common.TPDM.IApplication.ApplicationGradePointAverages
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationGradePointAverages)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationGradePointAveragesCovariant;
            }
            set
            {
                ApplicationGradePointAverages = new HashSet<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationGradePointAverage>(value.Cast<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationGradePointAverage>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationOpenStaffPosition> _applicationOpenStaffPositions;
        private ICollection<Entities.Common.TPDM.IApplicationOpenStaffPosition> _applicationOpenStaffPositionsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationOpenStaffPosition> ApplicationOpenStaffPositions
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationOpenStaffPositions)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationOpenStaffPositions;
            }
            set
            {
                _applicationOpenStaffPositions = value;
                _applicationOpenStaffPositionsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicationOpenStaffPosition, Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationOpenStaffPosition>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationOpenStaffPosition> Entities.Common.TPDM.IApplication.ApplicationOpenStaffPositions
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationOpenStaffPositions)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationOpenStaffPositionsCovariant;
            }
            set
            {
                ApplicationOpenStaffPositions = new HashSet<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationOpenStaffPosition>(value.Cast<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationOpenStaffPosition>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult> _applicationScoreResults;
        private ICollection<Entities.Common.TPDM.IApplicationScoreResult> _applicationScoreResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult> ApplicationScoreResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationScoreResults)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationScoreResults;
            }
            set
            {
                _applicationScoreResults = value;
                _applicationScoreResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicationScoreResult, Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationScoreResult> Entities.Common.TPDM.IApplication.ApplicationScoreResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationScoreResults)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationScoreResultsCovariant;
            }
            set
            {
                ApplicationScoreResults = new HashSet<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult>(value.Cast<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationScoreResult>());
            }
        }


        private ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm> _applicationTerms;
        private ICollection<Entities.Common.TPDM.IApplicationTerm> _applicationTermsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm> ApplicationTerms
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationTerms)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationTerms;
            }
            set
            {
                _applicationTerms = value;
                _applicationTermsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IApplicationTerm, Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IApplicationTerm> Entities.Common.TPDM.IApplication.ApplicationTerms
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _applicationTerms)
                    if (item.Application == null)
                        item.Application = this;
                // -------------------------------------------------------------

                return _applicationTermsCovariant;
            }
            set
            {
                ApplicationTerms = new HashSet<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm>(value.Cast<Entities.NHibernate.ApplicationAggregate.TPDM.ApplicationTerm>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "ApplicationSourceDescriptor", new LookupColumnDetails { PropertyName = "ApplicationSourceDescriptorId", LookupTypeName = "ApplicationSourceDescriptor"} },
                { "ApplicationStatusDescriptor", new LookupColumnDetails { PropertyName = "ApplicationStatusDescriptorId", LookupTypeName = "ApplicationStatusDescriptor"} },
                { "HighestCompletedLevelOfEducationDescriptor", new LookupColumnDetails { PropertyName = "HighestCompletedLevelOfEducationDescriptorId", LookupTypeName = "LevelOfEducationDescriptor"} },
                { "HighlyQualifiedAcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "HighlyQualifiedAcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "HighNeedsAcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "HighNeedsAcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "HireStatusDescriptor", new LookupColumnDetails { PropertyName = "HireStatusDescriptorId", LookupTypeName = "HireStatusDescriptor"} },
                { "HiringSourceDescriptor", new LookupColumnDetails { PropertyName = "HiringSourceDescriptorId", LookupTypeName = "HiringSourceDescriptor"} },
                { "WithdrawReasonDescriptor", new LookupColumnDetails { PropertyName = "WithdrawReasonDescriptorId", LookupTypeName = "WithdrawReasonDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);
            keyValues.Add("ApplicationIdentifier", ApplicationIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplication)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplication) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported
        {
            get { return _isAcademicSubjectDescriptorSupported; }
            set { _isAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isAcceptedDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsAcceptedDateSupported
        {
            get { return _isAcceptedDateSupported; }
            set { _isAcceptedDateSupported = value; }
        }

        private bool _isApplicationDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationDateSupported
        {
            get { return _isApplicationDateSupported; }
            set { _isApplicationDateSupported = value; }
        }

        private bool _isApplicationGradePointAveragesSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationGradePointAveragesSupported
        {
            get { return _isApplicationGradePointAveragesSupported; }
            set { _isApplicationGradePointAveragesSupported = value; }
        }

        private bool _isApplicationOpenStaffPositionsSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationOpenStaffPositionsSupported
        {
            get { return _isApplicationOpenStaffPositionsSupported; }
            set { _isApplicationOpenStaffPositionsSupported = value; }
        }

        private bool _isApplicationScoreResultsSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationScoreResultsSupported
        {
            get { return _isApplicationScoreResultsSupported; }
            set { _isApplicationScoreResultsSupported = value; }
        }

        private bool _isApplicationSourceDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationSourceDescriptorSupported
        {
            get { return _isApplicationSourceDescriptorSupported; }
            set { _isApplicationSourceDescriptorSupported = value; }
        }

        private bool _isApplicationStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationStatusDescriptorSupported
        {
            get { return _isApplicationStatusDescriptorSupported; }
            set { _isApplicationStatusDescriptorSupported = value; }
        }

        private bool _isApplicationTermsSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationTermsSupported
        {
            get { return _isApplicationTermsSupported; }
            set { _isApplicationTermsSupported = value; }
        }

        private bool _isCurrentEmployeeSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsCurrentEmployeeSupported
        {
            get { return _isCurrentEmployeeSupported; }
            set { _isCurrentEmployeeSupported = value; }
        }

        private bool _isFirstContactDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsFirstContactDateSupported
        {
            get { return _isFirstContactDateSupported; }
            set { _isFirstContactDateSupported = value; }
        }

        private bool _isHighestCompletedLevelOfEducationDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported
        {
            get { return _isHighestCompletedLevelOfEducationDescriptorSupported; }
            set { _isHighestCompletedLevelOfEducationDescriptorSupported = value; }
        }

        private bool _isHighlyQualifiedAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported
        {
            get { return _isHighlyQualifiedAcademicSubjectDescriptorSupported; }
            set { _isHighlyQualifiedAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isHighlyQualifiedTeacherSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHighlyQualifiedTeacherSupported
        {
            get { return _isHighlyQualifiedTeacherSupported; }
            set { _isHighlyQualifiedTeacherSupported = value; }
        }

        private bool _isHighNeedsAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHighNeedsAcademicSubjectDescriptorSupported
        {
            get { return _isHighNeedsAcademicSubjectDescriptorSupported; }
            set { _isHighNeedsAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isHireStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHireStatusDescriptorSupported
        {
            get { return _isHireStatusDescriptorSupported; }
            set { _isHireStatusDescriptorSupported = value; }
        }

        private bool _isHiringSourceDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsHiringSourceDescriptorSupported
        {
            get { return _isHiringSourceDescriptorSupported; }
            set { _isHiringSourceDescriptorSupported = value; }
        }

        private bool _isWithdrawDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsWithdrawDateSupported
        {
            get { return _isWithdrawDateSupported; }
            set { _isWithdrawDateSupported = value; }
        }

        private bool _isWithdrawReasonDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsWithdrawReasonDescriptorSupported
        {
            get { return _isWithdrawReasonDescriptorSupported; }
            set { _isWithdrawReasonDescriptorSupported = value; }
        }

        private bool _isYearsOfPriorProfessionalExperienceSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsYearsOfPriorProfessionalExperienceSupported
        {
            get { return _isYearsOfPriorProfessionalExperienceSupported; }
            set { _isYearsOfPriorProfessionalExperienceSupported = value; }
        }

        private bool _isYearsOfPriorTeachingExperienceSupported = true;
        bool Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsYearsOfPriorTeachingExperienceSupported
        {
            get { return _isYearsOfPriorTeachingExperienceSupported; }
            set { _isYearsOfPriorTeachingExperienceSupported = value; }
        }

        private Func<Entities.Common.TPDM.IApplicationGradePointAverage, bool> _isApplicationGradePointAverageIncluded;
        Func<Entities.Common.TPDM.IApplicationGradePointAverage, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationGradePointAverageIncluded
        {
            get { return _isApplicationGradePointAverageIncluded; }
            set { _isApplicationGradePointAverageIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicationOpenStaffPosition, bool> _isApplicationOpenStaffPositionIncluded;
        Func<Entities.Common.TPDM.IApplicationOpenStaffPosition, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationOpenStaffPositionIncluded
        {
            get { return _isApplicationOpenStaffPositionIncluded; }
            set { _isApplicationOpenStaffPositionIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicationScoreResult, bool> _isApplicationScoreResultIncluded;
        Func<Entities.Common.TPDM.IApplicationScoreResult, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationScoreResultIncluded
        {
            get { return _isApplicationScoreResultIncluded; }
            set { _isApplicationScoreResultIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IApplicationTerm, bool> _isApplicationTermIncluded;
        Func<Entities.Common.TPDM.IApplicationTerm, bool> Entities.Common.TPDM.IApplicationSynchronizationSourceSupport.IsApplicationTermIncluded
        {
            get { return _isApplicationTermIncluded; }
            set { _isApplicationTermIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationGradePointAverage table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationGradePointAverage : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicationGradePointAverage, Entities.Common.Records.TPDM.IApplicationGradePointAverageRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationGradePointAverageSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationGradePointAverage()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Application Application { get; set; }

        Entities.Common.TPDM.IApplication IApplicationGradePointAverage.Application
        {
            get { return Application; }
            set { Application = (Application) value; }
        }

        string Entities.Common.Records.TPDM.IApplicationGradePointAverageRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicantIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IApplicationGradePointAverageRecord.ApplicationIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicationIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicationIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IApplicationGradePointAverageRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).EducationOrganizationId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradePointAverageTypeDescriptorId 
        {
            get
            {
                if (_gradePointAverageTypeDescriptorId == default(int))
                    _gradePointAverageTypeDescriptorId = DescriptorsCache.GetCache().GetId("GradePointAverageTypeDescriptor", _gradePointAverageTypeDescriptor);

                return _gradePointAverageTypeDescriptorId;
            } 
            set
            {
                _gradePointAverageTypeDescriptorId = value;
                _gradePointAverageTypeDescriptor = null;
            }
        }

        private int _gradePointAverageTypeDescriptorId;
        private string _gradePointAverageTypeDescriptor;

        public virtual string GradePointAverageTypeDescriptor
        {
            get
            {
                if (_gradePointAverageTypeDescriptor == null)
                    _gradePointAverageTypeDescriptor = DescriptorsCache.GetCache().GetValue("GradePointAverageTypeDescriptor", _gradePointAverageTypeDescriptorId);
                    
                return _gradePointAverageTypeDescriptor;
            }
            set
            {
                _gradePointAverageTypeDescriptor = value;
                _gradePointAverageTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal GradePointAverageValue  { get; set; }
        public virtual bool? IsCumulative  { get; set; }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? MaxGradePointAverageValue  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradePointAverageTypeDescriptor", new LookupColumnDetails { PropertyName = "GradePointAverageTypeDescriptorId", LookupTypeName = "GradePointAverageTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Application as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradePointAverageTypeDescriptorId", GradePointAverageTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationGradePointAverage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationGradePointAverage) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Application = (Application) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isGradePointAverageValueSupported = true;
        bool Entities.Common.TPDM.IApplicationGradePointAverageSynchronizationSourceSupport.IsGradePointAverageValueSupported
        {
            get { return _isGradePointAverageValueSupported; }
            set { _isGradePointAverageValueSupported = value; }
        }

        private bool _isIsCumulativeSupported = true;
        bool Entities.Common.TPDM.IApplicationGradePointAverageSynchronizationSourceSupport.IsIsCumulativeSupported
        {
            get { return _isIsCumulativeSupported; }
            set { _isIsCumulativeSupported = value; }
        }

        private bool _isMaxGradePointAverageValueSupported = true;
        bool Entities.Common.TPDM.IApplicationGradePointAverageSynchronizationSourceSupport.IsMaxGradePointAverageValueSupported
        {
            get { return _isMaxGradePointAverageValueSupported; }
            set { _isMaxGradePointAverageValueSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationOpenStaffPosition table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationOpenStaffPosition : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicationOpenStaffPosition, Entities.Common.Records.TPDM.IApplicationOpenStaffPositionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationOpenStaffPositionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationOpenStaffPosition()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Application Application { get; set; }

        Entities.Common.TPDM.IApplication IApplicationOpenStaffPosition.Application
        {
            get { return Application; }
            set { Application = (Application) value; }
        }

        string Entities.Common.Records.TPDM.IApplicationOpenStaffPositionRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicantIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IApplicationOpenStaffPositionRecord.ApplicationIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicationIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicationIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IApplicationOpenStaffPositionRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).EducationOrganizationId = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string RequisitionNumber  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.OpenStaffPositionAggregate.EdFi.OpenStaffPositionReferenceData OpenStaffPositionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplicationOpenStaffPosition.OpenStaffPositionDiscriminator
        {
            get { return OpenStaffPositionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicationOpenStaffPosition.OpenStaffPositionResourceId
        {
            get { return OpenStaffPositionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Application as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationOpenStaffPosition)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationOpenStaffPosition) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Application = (Application) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationScoreResult table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationScoreResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicationScoreResult, Entities.Common.Records.TPDM.IApplicationScoreResultRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationScoreResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Application Application { get; set; }

        Entities.Common.TPDM.IApplication IApplicationScoreResult.Application
        {
            get { return Application; }
            set { Application = (Application) value; }
        }

        string Entities.Common.Records.TPDM.IApplicationScoreResultRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicantIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IApplicationScoreResultRecord.ApplicationIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicationIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicationIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IApplicationScoreResultRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).EducationOrganizationId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AssessmentReportingMethodDescriptorId 
        {
            get
            {
                if (_assessmentReportingMethodDescriptorId == default(int))
                    _assessmentReportingMethodDescriptorId = DescriptorsCache.GetCache().GetId("AssessmentReportingMethodDescriptor", _assessmentReportingMethodDescriptor);

                return _assessmentReportingMethodDescriptorId;
            } 
            set
            {
                _assessmentReportingMethodDescriptorId = value;
                _assessmentReportingMethodDescriptor = null;
            }
        }

        private int _assessmentReportingMethodDescriptorId;
        private string _assessmentReportingMethodDescriptor;

        public virtual string AssessmentReportingMethodDescriptor
        {
            get
            {
                if (_assessmentReportingMethodDescriptor == null)
                    _assessmentReportingMethodDescriptor = DescriptorsCache.GetCache().GetValue("AssessmentReportingMethodDescriptor", _assessmentReportingMethodDescriptorId);
                    
                return _assessmentReportingMethodDescriptor;
            }
            set
            {
                _assessmentReportingMethodDescriptor = value;
                _assessmentReportingMethodDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(35), NoDangerousText]
        public virtual string Result  { get; set; }
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AssessmentReportingMethodDescriptor", new LookupColumnDetails { PropertyName = "AssessmentReportingMethodDescriptorId", LookupTypeName = "AssessmentReportingMethodDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Application as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AssessmentReportingMethodDescriptorId", AssessmentReportingMethodDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationScoreResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationScoreResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Application = (Application) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultSupported = true;
        bool Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport.IsResultSupported
        {
            get { return _isResultSupported; }
            set { _isResultSupported = value; }
        }

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationScoreResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationTerm table of the Application aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationTerm : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IApplicationTerm, Entities.Common.Records.TPDM.IApplicationTermRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationTermSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationTerm()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Application Application { get; set; }

        Entities.Common.TPDM.IApplication IApplicationTerm.Application
        {
            get { return Application; }
            set { Application = (Application) value; }
        }

        string Entities.Common.Records.TPDM.IApplicationTermRecord.ApplicantIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicantIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicantIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IApplicationTermRecord.ApplicationIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicationIdentifier; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).ApplicationIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IApplicationTermRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IApplicationRecord) Application).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IApplicationRecord) Application).EducationOrganizationId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Application as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationTerm)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationTerm) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Application = (Application) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: ApplicationEvent

namespace EdFi.Ods.Entities.NHibernate.ApplicationEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="ApplicationEvent"/> entity.
    /// </summary>
    public class ApplicationEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string ApplicantIdentifier { get; set; }
        public virtual int ApplicationEventTypeDescriptorId { get; set; }
        public virtual string ApplicationIdentifier { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EventDate { get; set; }
        public virtual int SequenceNumber { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);
            keyValues.Add("ApplicationEventTypeDescriptorId", ApplicationEventTypeDescriptorId);
            keyValues.Add("ApplicationIdentifier", ApplicationIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("SequenceNumber", SequenceNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationEvent table of the ApplicationEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IApplicationEvent, Entities.Common.Records.TPDM.IApplicationEventRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ApplicationEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ApplicantIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ApplicationEventTypeDescriptorId 
        {
            get
            {
                if (_applicationEventTypeDescriptorId == default(int))
                    _applicationEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("ApplicationEventTypeDescriptor", _applicationEventTypeDescriptor);

                return _applicationEventTypeDescriptorId;
            } 
            set
            {
                _applicationEventTypeDescriptorId = value;
                _applicationEventTypeDescriptor = null;
            }
        }

        private int _applicationEventTypeDescriptorId;
        private string _applicationEventTypeDescriptor;

        public virtual string ApplicationEventTypeDescriptor
        {
            get
            {
                if (_applicationEventTypeDescriptor == null)
                    _applicationEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("ApplicationEventTypeDescriptor", _applicationEventTypeDescriptorId);
                    
                return _applicationEventTypeDescriptor;
            }
            set
            {
                _applicationEventTypeDescriptor = value;
                _applicationEventTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string ApplicationIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SequenceNumber  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999999999999999.999999999999999999", "999999999999999999.999999999999999999")]
        public virtual decimal? ApplicationEvaluationScore  { get; set; }
        public virtual int? ApplicationEventResultDescriptorId 
        {
            get
            {
                if (_applicationEventResultDescriptorId == default(int?))
                    _applicationEventResultDescriptorId = string.IsNullOrWhiteSpace(_applicationEventResultDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ApplicationEventResultDescriptor", _applicationEventResultDescriptor);

                return _applicationEventResultDescriptorId;
            } 
            set
            {
                _applicationEventResultDescriptorId = value;
                _applicationEventResultDescriptor = null;
            }
        }

        private int? _applicationEventResultDescriptorId;
        private string _applicationEventResultDescriptor;

        public virtual string ApplicationEventResultDescriptor
        {
            get
            {
                if (_applicationEventResultDescriptor == null)
                    _applicationEventResultDescriptor = _applicationEventResultDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ApplicationEventResultDescriptor", _applicationEventResultDescriptorId.Value);
                    
                return _applicationEventResultDescriptor;
            }
            set
            {
                _applicationEventResultDescriptor = value;
                _applicationEventResultDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? EventEndDate 
        {
            get { return _eventEndDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _eventEndDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _eventEndDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _eventEndDate;
        
        [RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ApplicationAggregate.TPDM.ApplicationReferenceData ApplicationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Application discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IApplicationEvent.ApplicationDiscriminator
        {
            get { return ApplicationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Application resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicationEvent.ApplicationResourceId
        {
            get { return ApplicationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IApplicationEvent.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ApplicationEventResultDescriptor", new LookupColumnDetails { PropertyName = "ApplicationEventResultDescriptorId", LookupTypeName = "ApplicationEventResultDescriptor"} },
                { "ApplicationEventTypeDescriptor", new LookupColumnDetails { PropertyName = "ApplicationEventTypeDescriptorId", LookupTypeName = "ApplicationEventTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);
            keyValues.Add("ApplicationEventTypeDescriptorId", ApplicationEventTypeDescriptorId);
            keyValues.Add("ApplicationIdentifier", ApplicationIdentifier);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("SequenceNumber", SequenceNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicationEvaluationScoreSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsApplicationEvaluationScoreSupported
        {
            get { return _isApplicationEvaluationScoreSupported; }
            set { _isApplicationEvaluationScoreSupported = value; }
        }

        private bool _isApplicationEventResultDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsApplicationEventResultDescriptorSupported
        {
            get { return _isApplicationEventResultDescriptorSupported; }
            set { _isApplicationEventResultDescriptorSupported = value; }
        }

        private bool _isEventEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsEventEndDateSupported
        {
            get { return _isEventEndDateSupported; }
            set { _isEventEndDateSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.IApplicationEventSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicationEventResultDescriptor

namespace EdFi.Ods.Entities.NHibernate.ApplicationEventResultDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationEventResultDescriptor table of the ApplicationEventResultDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationEventResultDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IApplicationEventResultDescriptor, Entities.Common.Records.TPDM.IApplicationEventResultDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ApplicationEventResultDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicationEventResultDescriptorId", ApplicationEventResultDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationEventResultDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationEventResultDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationEventResultDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicationEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.ApplicationEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationEventTypeDescriptor table of the ApplicationEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IApplicationEventTypeDescriptor, Entities.Common.Records.TPDM.IApplicationEventTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ApplicationEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicationEventTypeDescriptorId", ApplicationEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicationSourceDescriptor

namespace EdFi.Ods.Entities.NHibernate.ApplicationSourceDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationSourceDescriptor table of the ApplicationSourceDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationSourceDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IApplicationSourceDescriptor, Entities.Common.Records.TPDM.IApplicationSourceDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ApplicationSourceDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicationSourceDescriptorId", ApplicationSourceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationSourceDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ApplicationStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.ApplicationStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ApplicationStatusDescriptor table of the ApplicationStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ApplicationStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IApplicationStatusDescriptor, Entities.Common.Records.TPDM.IApplicationStatusDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ApplicationStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicationStatusDescriptorId", ApplicationStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IApplicationStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IApplicationStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IApplicationStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Assessment

namespace EdFi.Ods.Entities.NHibernate.AssessmentAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.AssessmentExtension table of the Assessment aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class AssessmentExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IAssessmentExtension, Entities.Common.Records.TPDM.IAssessmentExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IAssessmentExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public AssessmentExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Assessment Assessment { get; set; }

        Entities.Common.EdFi.IAssessment IAssessmentExtension.Assessment
        {
            get { return Assessment; }
            set { Assessment = (EdFi.Assessment) value; }
        }

        string Entities.Common.Records.TPDM.IAssessmentExtensionRecord.AssessmentIdentifier
        {
            get { return ((Entities.Common.Records.EdFi.IAssessmentRecord) Assessment).AssessmentIdentifier; }
            set { ((Entities.Common.Records.EdFi.IAssessmentRecord) Assessment).AssessmentIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IAssessmentExtensionRecord.Namespace
        {
            get { return ((Entities.Common.Records.EdFi.IAssessmentRecord) Assessment).Namespace; }
            set { ((Entities.Common.Records.EdFi.IAssessmentRecord) Assessment).Namespace = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? ProgramGatewayDescriptorId 
        {
            get
            {
                if (_programGatewayDescriptorId == default(int?))
                    _programGatewayDescriptorId = string.IsNullOrWhiteSpace(_programGatewayDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ProgramGatewayDescriptor", _programGatewayDescriptor);

                return _programGatewayDescriptorId;
            } 
            set
            {
                _programGatewayDescriptorId = value;
                _programGatewayDescriptor = null;
            }
        }

        private int? _programGatewayDescriptorId;
        private string _programGatewayDescriptor;

        public virtual string ProgramGatewayDescriptor
        {
            get
            {
                if (_programGatewayDescriptor == null)
                    _programGatewayDescriptor = _programGatewayDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ProgramGatewayDescriptor", _programGatewayDescriptorId.Value);
                    
                return _programGatewayDescriptor;
            }
            set
            {
                _programGatewayDescriptor = value;
                _programGatewayDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramGatewayDescriptor", new LookupColumnDetails { PropertyName = "ProgramGatewayDescriptorId", LookupTypeName = "ProgramGatewayDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Assessment as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IAssessmentExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IAssessmentExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Assessment = (EdFi.Assessment) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isProgramGatewayDescriptorSupported = true;
        bool Entities.Common.TPDM.IAssessmentExtensionSynchronizationSourceSupport.IsProgramGatewayDescriptorSupported
        {
            get { return _isProgramGatewayDescriptorSupported; }
            set { _isProgramGatewayDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: BackgroundCheckStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.BackgroundCheckStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.BackgroundCheckStatusDescriptor table of the BackgroundCheckStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class BackgroundCheckStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IBackgroundCheckStatusDescriptor, Entities.Common.Records.TPDM.IBackgroundCheckStatusDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int BackgroundCheckStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BackgroundCheckStatusDescriptorId", BackgroundCheckStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IBackgroundCheckStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IBackgroundCheckStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: BackgroundCheckTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.BackgroundCheckTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.BackgroundCheckTypeDescriptor table of the BackgroundCheckTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class BackgroundCheckTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IBackgroundCheckTypeDescriptor, Entities.Common.Records.TPDM.IBackgroundCheckTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int BackgroundCheckTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BackgroundCheckTypeDescriptorId", BackgroundCheckTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IBackgroundCheckTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IBackgroundCheckTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IBackgroundCheckTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Certification

namespace EdFi.Ods.Entities.NHibernate.CertificationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Certification"/> entity.
    /// </summary>
    public class CertificationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string CertificationIdentifier { get; set; }
        public virtual string Namespace { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationIdentifier", CertificationIdentifier);
            keyValues.Add("Namespace", Namespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Certification table of the Certification aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Certification : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICertification, Entities.Common.Records.TPDM.ICertificationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Certification()
        {
            CertificationCertificationExams = new HashSet<CertificationCertificationExam>();
            CertificationGradeLevels = new HashSet<CertificationGradeLevel>();
            CertificationRoutes = new HashSet<CertificationRoute>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CertificationIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? CertificationFieldDescriptorId 
        {
            get
            {
                if (_certificationFieldDescriptorId == default(int?))
                    _certificationFieldDescriptorId = string.IsNullOrWhiteSpace(_certificationFieldDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationFieldDescriptor", _certificationFieldDescriptor);

                return _certificationFieldDescriptorId;
            } 
            set
            {
                _certificationFieldDescriptorId = value;
                _certificationFieldDescriptor = null;
            }
        }

        private int? _certificationFieldDescriptorId;
        private string _certificationFieldDescriptor;

        public virtual string CertificationFieldDescriptor
        {
            get
            {
                if (_certificationFieldDescriptor == null)
                    _certificationFieldDescriptor = _certificationFieldDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationFieldDescriptor", _certificationFieldDescriptorId.Value);
                    
                return _certificationFieldDescriptor;
            }
            set
            {
                _certificationFieldDescriptor = value;
                _certificationFieldDescriptorId = default(int?);
            }
        }
        public virtual int? CertificationLevelDescriptorId 
        {
            get
            {
                if (_certificationLevelDescriptorId == default(int?))
                    _certificationLevelDescriptorId = string.IsNullOrWhiteSpace(_certificationLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationLevelDescriptor", _certificationLevelDescriptor);

                return _certificationLevelDescriptorId;
            } 
            set
            {
                _certificationLevelDescriptorId = value;
                _certificationLevelDescriptor = null;
            }
        }

        private int? _certificationLevelDescriptorId;
        private string _certificationLevelDescriptor;

        public virtual string CertificationLevelDescriptor
        {
            get
            {
                if (_certificationLevelDescriptor == null)
                    _certificationLevelDescriptor = _certificationLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationLevelDescriptor", _certificationLevelDescriptorId.Value);
                    
                return _certificationLevelDescriptor;
            }
            set
            {
                _certificationLevelDescriptor = value;
                _certificationLevelDescriptorId = default(int?);
            }
        }
        public virtual int? CertificationStandardDescriptorId 
        {
            get
            {
                if (_certificationStandardDescriptorId == default(int?))
                    _certificationStandardDescriptorId = string.IsNullOrWhiteSpace(_certificationStandardDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationStandardDescriptor", _certificationStandardDescriptor);

                return _certificationStandardDescriptorId;
            } 
            set
            {
                _certificationStandardDescriptorId = value;
                _certificationStandardDescriptor = null;
            }
        }

        private int? _certificationStandardDescriptorId;
        private string _certificationStandardDescriptor;

        public virtual string CertificationStandardDescriptor
        {
            get
            {
                if (_certificationStandardDescriptor == null)
                    _certificationStandardDescriptor = _certificationStandardDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationStandardDescriptor", _certificationStandardDescriptorId.Value);
                    
                return _certificationStandardDescriptor;
            }
            set
            {
                _certificationStandardDescriptor = value;
                _certificationStandardDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, StringLength(64), NoDangerousText]
        public virtual string CertificationTitle  { get; set; }
        public virtual int? EducationOrganizationId  { get; set; }
        public virtual int? EducatorRoleDescriptorId 
        {
            get
            {
                if (_educatorRoleDescriptorId == default(int?))
                    _educatorRoleDescriptorId = string.IsNullOrWhiteSpace(_educatorRoleDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EducatorRoleDescriptor", _educatorRoleDescriptor);

                return _educatorRoleDescriptorId;
            } 
            set
            {
                _educatorRoleDescriptorId = value;
                _educatorRoleDescriptor = null;
            }
        }

        private int? _educatorRoleDescriptorId;
        private string _educatorRoleDescriptor;

        public virtual string EducatorRoleDescriptor
        {
            get
            {
                if (_educatorRoleDescriptor == null)
                    _educatorRoleDescriptor = _educatorRoleDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EducatorRoleDescriptor", _educatorRoleDescriptorId.Value);
                    
                return _educatorRoleDescriptor;
            }
            set
            {
                _educatorRoleDescriptor = value;
                _educatorRoleDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? EffectiveDate 
        {
            get { return _effectiveDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _effectiveDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _effectiveDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _effectiveDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual int? InstructionalSettingDescriptorId 
        {
            get
            {
                if (_instructionalSettingDescriptorId == default(int?))
                    _instructionalSettingDescriptorId = string.IsNullOrWhiteSpace(_instructionalSettingDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("InstructionalSettingDescriptor", _instructionalSettingDescriptor);

                return _instructionalSettingDescriptorId;
            } 
            set
            {
                _instructionalSettingDescriptorId = value;
                _instructionalSettingDescriptor = null;
            }
        }

        private int? _instructionalSettingDescriptorId;
        private string _instructionalSettingDescriptor;

        public virtual string InstructionalSettingDescriptor
        {
            get
            {
                if (_instructionalSettingDescriptor == null)
                    _instructionalSettingDescriptor = _instructionalSettingDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("InstructionalSettingDescriptor", _instructionalSettingDescriptorId.Value);
                    
                return _instructionalSettingDescriptor;
            }
            set
            {
                _instructionalSettingDescriptor = value;
                _instructionalSettingDescriptorId = default(int?);
            }
        }
        public virtual int? MinimumDegreeDescriptorId 
        {
            get
            {
                if (_minimumDegreeDescriptorId == default(int?))
                    _minimumDegreeDescriptorId = string.IsNullOrWhiteSpace(_minimumDegreeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DegreeDescriptor", _minimumDegreeDescriptor);

                return _minimumDegreeDescriptorId;
            } 
            set
            {
                _minimumDegreeDescriptorId = value;
                _minimumDegreeDescriptor = null;
            }
        }

        private int? _minimumDegreeDescriptorId;
        private string _minimumDegreeDescriptor;

        public virtual string MinimumDegreeDescriptor
        {
            get
            {
                if (_minimumDegreeDescriptor == null)
                    _minimumDegreeDescriptor = _minimumDegreeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DegreeDescriptor", _minimumDegreeDescriptorId.Value);
                    
                return _minimumDegreeDescriptor;
            }
            set
            {
                _minimumDegreeDescriptor = value;
                _minimumDegreeDescriptorId = default(int?);
            }
        }
        public virtual int? PopulationServedDescriptorId 
        {
            get
            {
                if (_populationServedDescriptorId == default(int?))
                    _populationServedDescriptorId = string.IsNullOrWhiteSpace(_populationServedDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PopulationServedDescriptor", _populationServedDescriptor);

                return _populationServedDescriptorId;
            } 
            set
            {
                _populationServedDescriptorId = value;
                _populationServedDescriptor = null;
            }
        }

        private int? _populationServedDescriptorId;
        private string _populationServedDescriptor;

        public virtual string PopulationServedDescriptor
        {
            get
            {
                if (_populationServedDescriptor == null)
                    _populationServedDescriptor = _populationServedDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PopulationServedDescriptor", _populationServedDescriptorId.Value);
                    
                return _populationServedDescriptor;
            }
            set
            {
                _populationServedDescriptor = value;
                _populationServedDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertification.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertification.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam> _certificationCertificationExams;
        private ICollection<Entities.Common.TPDM.ICertificationCertificationExam> _certificationCertificationExamsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam> CertificationCertificationExams
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationCertificationExams)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationCertificationExams;
            }
            set
            {
                _certificationCertificationExams = value;
                _certificationCertificationExamsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICertificationCertificationExam, Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationCertificationExam> Entities.Common.TPDM.ICertification.CertificationCertificationExams
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationCertificationExams)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationCertificationExamsCovariant;
            }
            set
            {
                CertificationCertificationExams = new HashSet<Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam>(value.Cast<Entities.NHibernate.CertificationAggregate.TPDM.CertificationCertificationExam>());
            }
        }


        private ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel> _certificationGradeLevels;
        private ICollection<Entities.Common.TPDM.ICertificationGradeLevel> _certificationGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel> CertificationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationGradeLevels)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationGradeLevels;
            }
            set
            {
                _certificationGradeLevels = value;
                _certificationGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICertificationGradeLevel, Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationGradeLevel> Entities.Common.TPDM.ICertification.CertificationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationGradeLevels)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationGradeLevelsCovariant;
            }
            set
            {
                CertificationGradeLevels = new HashSet<Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel>(value.Cast<Entities.NHibernate.CertificationAggregate.TPDM.CertificationGradeLevel>());
            }
        }


        private ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute> _certificationRoutes;
        private ICollection<Entities.Common.TPDM.ICertificationRoute> _certificationRoutesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute> CertificationRoutes
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationRoutes)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationRoutes;
            }
            set
            {
                _certificationRoutes = value;
                _certificationRoutesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ICertificationRoute, Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ICertificationRoute> Entities.Common.TPDM.ICertification.CertificationRoutes
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _certificationRoutes)
                    if (item.Certification == null)
                        item.Certification = this;
                // -------------------------------------------------------------

                return _certificationRoutesCovariant;
            }
            set
            {
                CertificationRoutes = new HashSet<Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute>(value.Cast<Entities.NHibernate.CertificationAggregate.TPDM.CertificationRoute>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationFieldDescriptor", new LookupColumnDetails { PropertyName = "CertificationFieldDescriptorId", LookupTypeName = "CertificationFieldDescriptor"} },
                { "CertificationLevelDescriptor", new LookupColumnDetails { PropertyName = "CertificationLevelDescriptorId", LookupTypeName = "CertificationLevelDescriptor"} },
                { "CertificationStandardDescriptor", new LookupColumnDetails { PropertyName = "CertificationStandardDescriptorId", LookupTypeName = "CertificationStandardDescriptor"} },
                { "EducatorRoleDescriptor", new LookupColumnDetails { PropertyName = "EducatorRoleDescriptorId", LookupTypeName = "EducatorRoleDescriptor"} },
                { "InstructionalSettingDescriptor", new LookupColumnDetails { PropertyName = "InstructionalSettingDescriptorId", LookupTypeName = "InstructionalSettingDescriptor"} },
                { "MinimumDegreeDescriptor", new LookupColumnDetails { PropertyName = "MinimumDegreeDescriptorId", LookupTypeName = "DegreeDescriptor"} },
                { "PopulationServedDescriptor", new LookupColumnDetails { PropertyName = "PopulationServedDescriptorId", LookupTypeName = "PopulationServedDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationIdentifier", CertificationIdentifier);
            keyValues.Add("Namespace", Namespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertification)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertification) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCertificationCertificationExamsSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationCertificationExamsSupported
        {
            get { return _isCertificationCertificationExamsSupported; }
            set { _isCertificationCertificationExamsSupported = value; }
        }

        private bool _isCertificationFieldDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationFieldDescriptorSupported
        {
            get { return _isCertificationFieldDescriptorSupported; }
            set { _isCertificationFieldDescriptorSupported = value; }
        }

        private bool _isCertificationGradeLevelsSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationGradeLevelsSupported
        {
            get { return _isCertificationGradeLevelsSupported; }
            set { _isCertificationGradeLevelsSupported = value; }
        }

        private bool _isCertificationLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationLevelDescriptorSupported
        {
            get { return _isCertificationLevelDescriptorSupported; }
            set { _isCertificationLevelDescriptorSupported = value; }
        }

        private bool _isCertificationRoutesSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationRoutesSupported
        {
            get { return _isCertificationRoutesSupported; }
            set { _isCertificationRoutesSupported = value; }
        }

        private bool _isCertificationStandardDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationStandardDescriptorSupported
        {
            get { return _isCertificationStandardDescriptorSupported; }
            set { _isCertificationStandardDescriptorSupported = value; }
        }

        private bool _isCertificationTitleSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationTitleSupported
        {
            get { return _isCertificationTitleSupported; }
            set { _isCertificationTitleSupported = value; }
        }

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEducatorRoleDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEducatorRoleDescriptorSupported
        {
            get { return _isEducatorRoleDescriptorSupported; }
            set { _isEducatorRoleDescriptorSupported = value; }
        }

        private bool _isEffectiveDateSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEffectiveDateSupported
        {
            get { return _isEffectiveDateSupported; }
            set { _isEffectiveDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isInstructionalSettingDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsInstructionalSettingDescriptorSupported
        {
            get { return _isInstructionalSettingDescriptorSupported; }
            set { _isInstructionalSettingDescriptorSupported = value; }
        }

        private bool _isMinimumDegreeDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsMinimumDegreeDescriptorSupported
        {
            get { return _isMinimumDegreeDescriptorSupported; }
            set { _isMinimumDegreeDescriptorSupported = value; }
        }

        private bool _isPopulationServedDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsPopulationServedDescriptorSupported
        {
            get { return _isPopulationServedDescriptorSupported; }
            set { _isPopulationServedDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.ICertificationCertificationExam, bool> _isCertificationCertificationExamIncluded;
        Func<Entities.Common.TPDM.ICertificationCertificationExam, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationCertificationExamIncluded
        {
            get { return _isCertificationCertificationExamIncluded; }
            set { _isCertificationCertificationExamIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICertificationGradeLevel, bool> _isCertificationGradeLevelIncluded;
        Func<Entities.Common.TPDM.ICertificationGradeLevel, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationGradeLevelIncluded
        {
            get { return _isCertificationGradeLevelIncluded; }
            set { _isCertificationGradeLevelIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ICertificationRoute, bool> _isCertificationRouteIncluded;
        Func<Entities.Common.TPDM.ICertificationRoute, bool> Entities.Common.TPDM.ICertificationSynchronizationSourceSupport.IsCertificationRouteIncluded
        {
            get { return _isCertificationRouteIncluded; }
            set { _isCertificationRouteIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationCertificationExam table of the Certification aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationCertificationExam : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICertificationCertificationExam, Entities.Common.Records.TPDM.ICertificationCertificationExamRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationCertificationExamSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationCertificationExam()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Certification Certification { get; set; }

        Entities.Common.TPDM.ICertification ICertificationCertificationExam.Certification
        {
            get { return Certification; }
            set { Certification = (Certification) value; }
        }

        string Entities.Common.Records.TPDM.ICertificationCertificationExamRecord.CertificationIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).CertificationIdentifier; }
            set { ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).CertificationIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.ICertificationCertificationExamRecord.Namespace
        {
            get { return ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).Namespace; }
            set { ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).Namespace = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CertificationExamIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string CertificationExamNamespace  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CertificationExamAggregate.TPDM.CertificationExamReferenceData CertificationExamReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the CertificationExam discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertificationCertificationExam.CertificationExamDiscriminator
        {
            get { return CertificationExamReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the CertificationExam resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertificationCertificationExam.CertificationExamResourceId
        {
            get { return CertificationExamReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Certification as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("CertificationExamNamespace", CertificationExamNamespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationCertificationExam)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationCertificationExam) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Certification = (Certification) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationGradeLevel table of the Certification aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICertificationGradeLevel, Entities.Common.Records.TPDM.ICertificationGradeLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Certification Certification { get; set; }

        Entities.Common.TPDM.ICertification ICertificationGradeLevel.Certification
        {
            get { return Certification; }
            set { Certification = (Certification) value; }
        }

        string Entities.Common.Records.TPDM.ICertificationGradeLevelRecord.CertificationIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).CertificationIdentifier; }
            set { ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).CertificationIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.ICertificationGradeLevelRecord.Namespace
        {
            get { return ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).Namespace; }
            set { ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).Namespace = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Certification as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Certification = (Certification) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationRoute table of the Certification aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationRoute : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICertificationRoute, Entities.Common.Records.TPDM.ICertificationRouteRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationRouteSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationRoute()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Certification Certification { get; set; }

        Entities.Common.TPDM.ICertification ICertificationRoute.Certification
        {
            get { return Certification; }
            set { Certification = (Certification) value; }
        }

        string Entities.Common.Records.TPDM.ICertificationRouteRecord.CertificationIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).CertificationIdentifier; }
            set { ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).CertificationIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.ICertificationRouteRecord.Namespace
        {
            get { return ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).Namespace; }
            set { ((Entities.Common.Records.TPDM.ICertificationRecord) Certification).Namespace = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int CertificationRouteDescriptorId 
        {
            get
            {
                if (_certificationRouteDescriptorId == default(int))
                    _certificationRouteDescriptorId = DescriptorsCache.GetCache().GetId("CertificationRouteDescriptor", _certificationRouteDescriptor);

                return _certificationRouteDescriptorId;
            } 
            set
            {
                _certificationRouteDescriptorId = value;
                _certificationRouteDescriptor = null;
            }
        }

        private int _certificationRouteDescriptorId;
        private string _certificationRouteDescriptor;

        public virtual string CertificationRouteDescriptor
        {
            get
            {
                if (_certificationRouteDescriptor == null)
                    _certificationRouteDescriptor = DescriptorsCache.GetCache().GetValue("CertificationRouteDescriptor", _certificationRouteDescriptorId);
                    
                return _certificationRouteDescriptor;
            }
            set
            {
                _certificationRouteDescriptor = value;
                _certificationRouteDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationRouteDescriptor", new LookupColumnDetails { PropertyName = "CertificationRouteDescriptorId", LookupTypeName = "CertificationRouteDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Certification as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CertificationRouteDescriptorId", CertificationRouteDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationRoute)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationRoute) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Certification = (Certification) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: CertificationExam

namespace EdFi.Ods.Entities.NHibernate.CertificationExamAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CertificationExam"/> entity.
    /// </summary>
    public class CertificationExamReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string CertificationExamIdentifier { get; set; }
        public virtual string Namespace { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("Namespace", Namespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationExam table of the CertificationExam aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationExam : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICertificationExam, Entities.Common.Records.TPDM.ICertificationExamRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationExam()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CertificationExamIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(60), NoDangerousText]
        public virtual string CertificationExamTitle  { get; set; }
        public virtual int? CertificationExamTypeDescriptorId 
        {
            get
            {
                if (_certificationExamTypeDescriptorId == default(int?))
                    _certificationExamTypeDescriptorId = string.IsNullOrWhiteSpace(_certificationExamTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationExamTypeDescriptor", _certificationExamTypeDescriptor);

                return _certificationExamTypeDescriptorId;
            } 
            set
            {
                _certificationExamTypeDescriptorId = value;
                _certificationExamTypeDescriptor = null;
            }
        }

        private int? _certificationExamTypeDescriptorId;
        private string _certificationExamTypeDescriptor;

        public virtual string CertificationExamTypeDescriptor
        {
            get
            {
                if (_certificationExamTypeDescriptor == null)
                    _certificationExamTypeDescriptor = _certificationExamTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationExamTypeDescriptor", _certificationExamTypeDescriptorId.Value);
                    
                return _certificationExamTypeDescriptor;
            }
            set
            {
                _certificationExamTypeDescriptor = value;
                _certificationExamTypeDescriptorId = default(int?);
            }
        }
        public virtual int? EducationOrganizationId  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EffectiveDate 
        {
            get { return _effectiveDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _effectiveDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _effectiveDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _effectiveDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertificationExam.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertificationExam.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationExamTypeDescriptor", new LookupColumnDetails { PropertyName = "CertificationExamTypeDescriptorId", LookupTypeName = "CertificationExamTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("Namespace", Namespace);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationExam)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationExam) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCertificationExamTitleSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsCertificationExamTitleSupported
        {
            get { return _isCertificationExamTitleSupported; }
            set { _isCertificationExamTitleSupported = value; }
        }

        private bool _isCertificationExamTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsCertificationExamTypeDescriptorSupported
        {
            get { return _isCertificationExamTypeDescriptorSupported; }
            set { _isCertificationExamTypeDescriptorSupported = value; }
        }

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEffectiveDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEffectiveDateSupported
        {
            get { return _isEffectiveDateSupported; }
            set { _isEffectiveDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationExamResult

namespace EdFi.Ods.Entities.NHibernate.CertificationExamResultAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CertificationExamResult"/> entity.
    /// </summary>
    public class CertificationExamResultReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime CertificationExamDate { get; set; }
        public virtual string CertificationExamIdentifier { get; set; }
        public virtual string Namespace { get; set; }
        public virtual string PersonId { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamDate", CertificationExamDate);
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationExamResult table of the CertificationExamResult aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationExamResult : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICertificationExamResult, Entities.Common.Records.TPDM.ICertificationExamResultRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CertificationExamResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime CertificationExamDate 
        {
            get { return _certificationExamDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _certificationExamDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _certificationExamDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CertificationExamIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AttemptNumber  { get; set; }
        public virtual bool? CertificationExamPassIndicator  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? CertificationExamScore  { get; set; }
        public virtual int? CertificationExamStatusDescriptorId 
        {
            get
            {
                if (_certificationExamStatusDescriptorId == default(int?))
                    _certificationExamStatusDescriptorId = string.IsNullOrWhiteSpace(_certificationExamStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationExamStatusDescriptor", _certificationExamStatusDescriptor);

                return _certificationExamStatusDescriptorId;
            } 
            set
            {
                _certificationExamStatusDescriptorId = value;
                _certificationExamStatusDescriptor = null;
            }
        }

        private int? _certificationExamStatusDescriptorId;
        private string _certificationExamStatusDescriptor;

        public virtual string CertificationExamStatusDescriptor
        {
            get
            {
                if (_certificationExamStatusDescriptor == null)
                    _certificationExamStatusDescriptor = _certificationExamStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationExamStatusDescriptor", _certificationExamStatusDescriptorId.Value);
                    
                return _certificationExamStatusDescriptor;
            }
            set
            {
                _certificationExamStatusDescriptor = value;
                _certificationExamStatusDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CertificationExamAggregate.TPDM.CertificationExamReferenceData CertificationExamReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the CertificationExam discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertificationExamResult.CertificationExamDiscriminator
        {
            get { return CertificationExamReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the CertificationExam resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertificationExamResult.CertificationExamResourceId
        {
            get { return CertificationExamReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICertificationExamResult.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICertificationExamResult.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationExamStatusDescriptor", new LookupColumnDetails { PropertyName = "CertificationExamStatusDescriptorId", LookupTypeName = "CertificationExamStatusDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamDate", CertificationExamDate);
            keyValues.Add("CertificationExamIdentifier", CertificationExamIdentifier);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationExamResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationExamResult) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAttemptNumberSupported = true;
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsAttemptNumberSupported
        {
            get { return _isAttemptNumberSupported; }
            set { _isAttemptNumberSupported = value; }
        }

        private bool _isCertificationExamPassIndicatorSupported = true;
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamPassIndicatorSupported
        {
            get { return _isCertificationExamPassIndicatorSupported; }
            set { _isCertificationExamPassIndicatorSupported = value; }
        }

        private bool _isCertificationExamScoreSupported = true;
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamScoreSupported
        {
            get { return _isCertificationExamScoreSupported; }
            set { _isCertificationExamScoreSupported = value; }
        }

        private bool _isCertificationExamStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ICertificationExamResultSynchronizationSourceSupport.IsCertificationExamStatusDescriptorSupported
        {
            get { return _isCertificationExamStatusDescriptorSupported; }
            set { _isCertificationExamStatusDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationExamStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationExamStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationExamStatusDescriptor table of the CertificationExamStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationExamStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationExamStatusDescriptor, Entities.Common.Records.TPDM.ICertificationExamStatusDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationExamStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamStatusDescriptorId", CertificationExamStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationExamStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationExamStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationExamStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationExamTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationExamTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationExamTypeDescriptor table of the CertificationExamTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationExamTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationExamTypeDescriptor, Entities.Common.Records.TPDM.ICertificationExamTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationExamTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationExamTypeDescriptorId", CertificationExamTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationExamTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationExamTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationExamTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationFieldDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationFieldDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationFieldDescriptor table of the CertificationFieldDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationFieldDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationFieldDescriptor, Entities.Common.Records.TPDM.ICertificationFieldDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationFieldDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationFieldDescriptorId", CertificationFieldDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationFieldDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationFieldDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationFieldDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationLevelDescriptor table of the CertificationLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationLevelDescriptor, Entities.Common.Records.TPDM.ICertificationLevelDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationLevelDescriptorId", CertificationLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationRouteDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationRouteDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationRouteDescriptor table of the CertificationRouteDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationRouteDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationRouteDescriptor, Entities.Common.Records.TPDM.ICertificationRouteDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationRouteDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationRouteDescriptorId", CertificationRouteDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationRouteDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationRouteDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationRouteDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CertificationStandardDescriptor

namespace EdFi.Ods.Entities.NHibernate.CertificationStandardDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CertificationStandardDescriptor table of the CertificationStandardDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CertificationStandardDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICertificationStandardDescriptor, Entities.Common.Records.TPDM.ICertificationStandardDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CertificationStandardDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CertificationStandardDescriptorId", CertificationStandardDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICertificationStandardDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICertificationStandardDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICertificationStandardDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CompleterAsStaffAssociation

namespace EdFi.Ods.Entities.NHibernate.CompleterAsStaffAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CompleterAsStaffAssociation"/> entity.
    /// </summary>
    public class CompleterAsStaffAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int StaffUSI { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("StaffUSI", StaffUSI);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CompleterAsStaffAssociation table of the CompleterAsStaffAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CompleterAsStaffAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICompleterAsStaffAssociation, Entities.Common.Records.TPDM.ICompleterAsStaffAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICompleterAsStaffAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CompleterAsStaffAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICompleterAsStaffAssociation.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICompleterAsStaffAssociation.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICompleterAsStaffAssociation.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICompleterAsStaffAssociation.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("StaffUSI", StaffUSI);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICompleterAsStaffAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICompleterAsStaffAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: CoteachingStyleObservedDescriptor

namespace EdFi.Ods.Entities.NHibernate.CoteachingStyleObservedDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CoteachingStyleObservedDescriptor table of the CoteachingStyleObservedDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CoteachingStyleObservedDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICoteachingStyleObservedDescriptor, Entities.Common.Records.TPDM.ICoteachingStyleObservedDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CoteachingStyleObservedDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CoteachingStyleObservedDescriptorId", CoteachingStyleObservedDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICoteachingStyleObservedDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICoteachingStyleObservedDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICoteachingStyleObservedDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Credential

namespace EdFi.Ods.Entities.NHibernate.CredentialAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialStudentAcademicRecord table of the Credential aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialStudentAcademicRecord : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICredentialStudentAcademicRecord, Entities.Common.Records.TPDM.ICredentialStudentAcademicRecordRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialStudentAcademicRecordSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CredentialStudentAcademicRecord()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Credential Credential { get; set; }

        Entities.Common.TPDM.ICredentialExtension ICredentialStudentAcademicRecord.CredentialExtension
        {
            get { return (ICredentialExtension) Credential.Extensions["TPDM"]; }
            set { Credential.Extensions["TPDM"] = value; }
        }

        string Entities.Common.Records.TPDM.ICredentialStudentAcademicRecordRecord.CredentialIdentifier
        {
            get { return ((Entities.Common.Records.EdFi.ICredentialRecord) Credential).CredentialIdentifier; }
            set { ((Entities.Common.Records.EdFi.ICredentialRecord) Credential).CredentialIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.ICredentialStudentAcademicRecordRecord.StateOfIssueStateAbbreviationDescriptorId
        {
            get { return ((Entities.Common.Records.EdFi.ICredentialRecord) Credential).StateOfIssueStateAbbreviationDescriptorId; }
            set { ((Entities.Common.Records.EdFi.ICredentialRecord) Credential).StateOfIssueStateAbbreviationDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [Display(Name="StudentUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Student")]
        public virtual int StudentUSI 
        {
            get
            {
                if (_studentUSI == default(int))
                    _studentUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Student", _studentUniqueId);

                return _studentUSI;
            } 
            set
            {
                _studentUSI = value;
            }
        }

        private int _studentUSI;
        private string _studentUniqueId;

        [RequiredWithNonDefault]
        public virtual string StudentUniqueId
        {
            get
            {
                if (_studentUniqueId == null)
                    _studentUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Student", _studentUSI);
                    
                return _studentUniqueId;
            }
            set
            {
                if (_studentUniqueId != value)
                        _studentUSI = default(int);

                _studentUniqueId = value;
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.StudentAcademicRecordAggregate.EdFi.StudentAcademicRecordReferenceData StudentAcademicRecordReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the StudentAcademicRecord discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentAcademicRecordDiscriminator
        {
            get { return StudentAcademicRecordReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the StudentAcademicRecord resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICredentialStudentAcademicRecord.StudentAcademicRecordResourceId
        {
            get { return StudentAcademicRecordReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StateOfIssueStateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateOfIssueStateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Credential as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("StudentUSI", StudentUSI);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialStudentAcademicRecord)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialStudentAcademicRecord) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Credential = (EdFi.Credential) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialExtension table of the Credential aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ICredentialExtension, Entities.Common.Records.TPDM.ICredentialExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CredentialExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Credential Credential { get; set; }

        Entities.Common.EdFi.ICredential ICredentialExtension.Credential
        {
            get { return Credential; }
            set { Credential = (EdFi.Credential) value; }
        }

        string Entities.Common.Records.TPDM.ICredentialExtensionRecord.CredentialIdentifier
        {
            get { return ((Entities.Common.Records.EdFi.ICredentialRecord) Credential).CredentialIdentifier; }
            set { ((Entities.Common.Records.EdFi.ICredentialRecord) Credential).CredentialIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.ICredentialExtensionRecord.StateOfIssueStateAbbreviationDescriptorId
        {
            get { return ((Entities.Common.Records.EdFi.ICredentialRecord) Credential).StateOfIssueStateAbbreviationDescriptorId; }
            set { ((Entities.Common.Records.EdFi.ICredentialRecord) Credential).StateOfIssueStateAbbreviationDescriptorId = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? BoardCertificationIndicator  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string CertificationIdentifier  { get; set; }
        public virtual int? CertificationRouteDescriptorId 
        {
            get
            {
                if (_certificationRouteDescriptorId == default(int?))
                    _certificationRouteDescriptorId = string.IsNullOrWhiteSpace(_certificationRouteDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationRouteDescriptor", _certificationRouteDescriptor);

                return _certificationRouteDescriptorId;
            } 
            set
            {
                _certificationRouteDescriptorId = value;
                _certificationRouteDescriptor = null;
            }
        }

        private int? _certificationRouteDescriptorId;
        private string _certificationRouteDescriptor;

        public virtual string CertificationRouteDescriptor
        {
            get
            {
                if (_certificationRouteDescriptor == null)
                    _certificationRouteDescriptor = _certificationRouteDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationRouteDescriptor", _certificationRouteDescriptorId.Value);
                    
                return _certificationRouteDescriptor;
            }
            set
            {
                _certificationRouteDescriptor = value;
                _certificationRouteDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, StringLength(64), NoDangerousText]
        public virtual string CertificationTitle  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? CredentialStatusDate 
        {
            get { return _credentialStatusDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _credentialStatusDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _credentialStatusDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _credentialStatusDate;
        
        public virtual int? CredentialStatusDescriptorId 
        {
            get
            {
                if (_credentialStatusDescriptorId == default(int?))
                    _credentialStatusDescriptorId = string.IsNullOrWhiteSpace(_credentialStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CredentialStatusDescriptor", _credentialStatusDescriptor);

                return _credentialStatusDescriptorId;
            } 
            set
            {
                _credentialStatusDescriptorId = value;
                _credentialStatusDescriptor = null;
            }
        }

        private int? _credentialStatusDescriptorId;
        private string _credentialStatusDescriptor;

        public virtual string CredentialStatusDescriptor
        {
            get
            {
                if (_credentialStatusDescriptor == null)
                    _credentialStatusDescriptor = _credentialStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CredentialStatusDescriptor", _credentialStatusDescriptorId.Value);
                    
                return _credentialStatusDescriptor;
            }
            set
            {
                _credentialStatusDescriptor = value;
                _credentialStatusDescriptorId = default(int?);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string Namespace  { get; set; }
        [RequiredWithNonDefault, StringLength(32), NoDangerousText]
        public virtual string PersonId  { get; set; }
        [RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CertificationAggregate.TPDM.CertificationReferenceData CertificationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Certification discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICredentialExtension.CertificationDiscriminator
        {
            get { return CertificationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Certification resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICredentialExtension.CertificationResourceId
        {
            get { return CertificationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICredentialExtension.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICredentialExtension.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<Entities.Common.TPDM.ICredentialStudentAcademicRecord> _credentialStudentAcademicRecords;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.ICredentialStudentAcademicRecord> ICredentialExtension.CredentialStudentAcademicRecords
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, CredentialStudentAcademicRecord>((IList<object>) Credential.AggregateExtensions["TPDM_CredentialStudentAcademicRecords"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (CredentialStudentAcademicRecord item in sourceList)
                    if (item.Credential == null)
                        item.Credential = this.Credential;
                // -------------------------------------------------------------

                if (_credentialStudentAcademicRecords == null)
                    _credentialStudentAcademicRecords = new CovariantCollectionAdapter<Entities.Common.TPDM.ICredentialStudentAcademicRecord, CredentialStudentAcademicRecord>(sourceList);
                
                return _credentialStudentAcademicRecords;
            }
            set
            {
                Credential.AggregateExtensions["TPDM_CredentialStudentAcademicRecords"] = value;
            }
        }
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationRouteDescriptor", new LookupColumnDetails { PropertyName = "CertificationRouteDescriptorId", LookupTypeName = "CertificationRouteDescriptor"} },
                { "CredentialStatusDescriptor", new LookupColumnDetails { PropertyName = "CredentialStatusDescriptorId", LookupTypeName = "CredentialStatusDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Credential as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Credential = (EdFi.Credential) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBoardCertificationIndicatorSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsBoardCertificationIndicatorSupported
        {
            get { return _isBoardCertificationIndicatorSupported; }
            set { _isBoardCertificationIndicatorSupported = value; }
        }

        private bool _isCertificationIdentifierSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationIdentifierSupported
        {
            get { return _isCertificationIdentifierSupported; }
            set { _isCertificationIdentifierSupported = value; }
        }

        private bool _isCertificationRouteDescriptorSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationRouteDescriptorSupported
        {
            get { return _isCertificationRouteDescriptorSupported; }
            set { _isCertificationRouteDescriptorSupported = value; }
        }

        private bool _isCertificationTitleSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCertificationTitleSupported
        {
            get { return _isCertificationTitleSupported; }
            set { _isCertificationTitleSupported = value; }
        }

        private bool _isCredentialStatusDateSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStatusDateSupported
        {
            get { return _isCredentialStatusDateSupported; }
            set { _isCredentialStatusDateSupported = value; }
        }

        private bool _isCredentialStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStatusDescriptorSupported
        {
            get { return _isCredentialStatusDescriptorSupported; }
            set { _isCredentialStatusDescriptorSupported = value; }
        }

        private bool _isCredentialStudentAcademicRecordsSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStudentAcademicRecordsSupported
        {
            get { return _isCredentialStudentAcademicRecordsSupported; }
            set { _isCredentialStudentAcademicRecordsSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPersonIdSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsPersonIdSupported
        {
            get { return _isPersonIdSupported; }
            set { _isPersonIdSupported = value; }
        }

        private bool _isSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsSourceSystemDescriptorSupported
        {
            get { return _isSourceSystemDescriptorSupported; }
            set { _isSourceSystemDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.ICredentialStudentAcademicRecord, bool> _isCredentialStudentAcademicRecordIncluded;
        Func<Entities.Common.TPDM.ICredentialStudentAcademicRecord, bool> Entities.Common.TPDM.ICredentialExtensionSynchronizationSourceSupport.IsCredentialStudentAcademicRecordIncluded
        {
            get { return _isCredentialStudentAcademicRecordIncluded; }
            set { _isCredentialStudentAcademicRecordIncluded = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CredentialEvent

namespace EdFi.Ods.Entities.NHibernate.CredentialEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="CredentialEvent"/> entity.
    /// </summary>
    public class CredentialEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime CredentialEventDate { get; set; }
        public virtual int CredentialEventTypeDescriptorId { get; set; }
        public virtual string CredentialIdentifier { get; set; }
        public virtual int StateOfIssueStateAbbreviationDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CredentialEventDate", CredentialEventDate);
            keyValues.Add("CredentialEventTypeDescriptorId", CredentialEventTypeDescriptorId);
            keyValues.Add("CredentialIdentifier", CredentialIdentifier);
            keyValues.Add("StateOfIssueStateAbbreviationDescriptorId", StateOfIssueStateAbbreviationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialEvent table of the CredentialEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ICredentialEvent, Entities.Common.Records.TPDM.ICredentialEventRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public CredentialEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime CredentialEventDate 
        {
            get { return _credentialEventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _credentialEventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _credentialEventDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int CredentialEventTypeDescriptorId 
        {
            get
            {
                if (_credentialEventTypeDescriptorId == default(int))
                    _credentialEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("CredentialEventTypeDescriptor", _credentialEventTypeDescriptor);

                return _credentialEventTypeDescriptorId;
            } 
            set
            {
                _credentialEventTypeDescriptorId = value;
                _credentialEventTypeDescriptor = null;
            }
        }

        private int _credentialEventTypeDescriptorId;
        private string _credentialEventTypeDescriptor;

        public virtual string CredentialEventTypeDescriptor
        {
            get
            {
                if (_credentialEventTypeDescriptor == null)
                    _credentialEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("CredentialEventTypeDescriptor", _credentialEventTypeDescriptorId);
                    
                return _credentialEventTypeDescriptor;
            }
            set
            {
                _credentialEventTypeDescriptor = value;
                _credentialEventTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CredentialIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int StateOfIssueStateAbbreviationDescriptorId 
        {
            get
            {
                if (_stateOfIssueStateAbbreviationDescriptorId == default(int))
                    _stateOfIssueStateAbbreviationDescriptorId = DescriptorsCache.GetCache().GetId("StateAbbreviationDescriptor", _stateOfIssueStateAbbreviationDescriptor);

                return _stateOfIssueStateAbbreviationDescriptorId;
            } 
            set
            {
                _stateOfIssueStateAbbreviationDescriptorId = value;
                _stateOfIssueStateAbbreviationDescriptor = null;
            }
        }

        private int _stateOfIssueStateAbbreviationDescriptorId;
        private string _stateOfIssueStateAbbreviationDescriptor;

        public virtual string StateOfIssueStateAbbreviationDescriptor
        {
            get
            {
                if (_stateOfIssueStateAbbreviationDescriptor == null)
                    _stateOfIssueStateAbbreviationDescriptor = DescriptorsCache.GetCache().GetValue("StateAbbreviationDescriptor", _stateOfIssueStateAbbreviationDescriptorId);
                    
                return _stateOfIssueStateAbbreviationDescriptor;
            }
            set
            {
                _stateOfIssueStateAbbreviationDescriptor = value;
                _stateOfIssueStateAbbreviationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(1024), NoDangerousText]
        public virtual string CredentialEventReason  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CredentialAggregate.EdFi.CredentialReferenceData CredentialReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Credential discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ICredentialEvent.CredentialDiscriminator
        {
            get { return CredentialReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Credential resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ICredentialEvent.CredentialResourceId
        {
            get { return CredentialReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CredentialEventTypeDescriptor", new LookupColumnDetails { PropertyName = "CredentialEventTypeDescriptorId", LookupTypeName = "CredentialEventTypeDescriptor"} },
                { "StateOfIssueStateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateOfIssueStateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CredentialEventDate", CredentialEventDate);
            keyValues.Add("CredentialEventTypeDescriptorId", CredentialEventTypeDescriptorId);
            keyValues.Add("CredentialIdentifier", CredentialIdentifier);
            keyValues.Add("StateOfIssueStateAbbreviationDescriptorId", StateOfIssueStateAbbreviationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCredentialEventReasonSupported = true;
        bool Entities.Common.TPDM.ICredentialEventSynchronizationSourceSupport.IsCredentialEventReasonSupported
        {
            get { return _isCredentialEventReasonSupported; }
            set { _isCredentialEventReasonSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CredentialEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.CredentialEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialEventTypeDescriptor table of the CredentialEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICredentialEventTypeDescriptor, Entities.Common.Records.TPDM.ICredentialEventTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CredentialEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CredentialEventTypeDescriptorId", CredentialEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICredentialEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: CredentialStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.CredentialStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.CredentialStatusDescriptor table of the CredentialStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class CredentialStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ICredentialStatusDescriptor, Entities.Common.Records.TPDM.ICredentialStatusDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int CredentialStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CredentialStatusDescriptorId", CredentialStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ICredentialStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ICredentialStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ICredentialStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: DegreeDescriptor

namespace EdFi.Ods.Entities.NHibernate.DegreeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.DegreeDescriptor table of the DegreeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class DegreeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IDegreeDescriptor, Entities.Common.Records.TPDM.IDegreeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int DegreeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("DegreeDescriptorId", DegreeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IDegreeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IDegreeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IDegreeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EducatorRoleDescriptor

namespace EdFi.Ods.Entities.NHibernate.EducatorRoleDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EducatorRoleDescriptor table of the EducatorRoleDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EducatorRoleDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEducatorRoleDescriptor, Entities.Common.Records.TPDM.IEducatorRoleDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EducatorRoleDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducatorRoleDescriptorId", EducatorRoleDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEducatorRoleDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEducatorRoleDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEducatorRoleDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EmploymentEvent

namespace EdFi.Ods.Entities.NHibernate.EmploymentEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EmploymentEvent"/> entity.
    /// </summary>
    public class EmploymentEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual int EmploymentEventTypeDescriptorId { get; set; }
        public virtual string RequisitionNumber { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EmploymentEventTypeDescriptorId", EmploymentEventTypeDescriptorId);
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EmploymentEvent table of the EmploymentEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EmploymentEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEmploymentEvent, Entities.Common.Records.TPDM.IEmploymentEventRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEmploymentEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EmploymentEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EmploymentEventTypeDescriptorId 
        {
            get
            {
                if (_employmentEventTypeDescriptorId == default(int))
                    _employmentEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("EmploymentEventTypeDescriptor", _employmentEventTypeDescriptor);

                return _employmentEventTypeDescriptorId;
            } 
            set
            {
                _employmentEventTypeDescriptorId = value;
                _employmentEventTypeDescriptor = null;
            }
        }

        private int _employmentEventTypeDescriptorId;
        private string _employmentEventTypeDescriptor;

        public virtual string EmploymentEventTypeDescriptor
        {
            get
            {
                if (_employmentEventTypeDescriptor == null)
                    _employmentEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("EmploymentEventTypeDescriptor", _employmentEventTypeDescriptorId);
                    
                return _employmentEventTypeDescriptor;
            }
            set
            {
                _employmentEventTypeDescriptor = value;
                _employmentEventTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string RequisitionNumber  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? EarlyHire  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? HireDate 
        {
            get { return _hireDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _hireDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _hireDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _hireDate;
        
        public virtual int? InternalExternalHireDescriptorId 
        {
            get
            {
                if (_internalExternalHireDescriptorId == default(int?))
                    _internalExternalHireDescriptorId = string.IsNullOrWhiteSpace(_internalExternalHireDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("InternalExternalHireDescriptor", _internalExternalHireDescriptor);

                return _internalExternalHireDescriptorId;
            } 
            set
            {
                _internalExternalHireDescriptorId = value;
                _internalExternalHireDescriptor = null;
            }
        }

        private int? _internalExternalHireDescriptorId;
        private string _internalExternalHireDescriptor;

        public virtual string InternalExternalHireDescriptor
        {
            get
            {
                if (_internalExternalHireDescriptor == null)
                    _internalExternalHireDescriptor = _internalExternalHireDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("InternalExternalHireDescriptor", _internalExternalHireDescriptorId.Value);
                    
                return _internalExternalHireDescriptor;
            }
            set
            {
                _internalExternalHireDescriptor = value;
                _internalExternalHireDescriptorId = default(int?);
            }
        }
        public virtual bool? MutualConsent  { get; set; }
        public virtual bool? RestrictedChoice  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.OpenStaffPositionAggregate.EdFi.OpenStaffPositionReferenceData OpenStaffPositionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEmploymentEvent.OpenStaffPositionDiscriminator
        {
            get { return OpenStaffPositionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEmploymentEvent.OpenStaffPositionResourceId
        {
            get { return OpenStaffPositionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EmploymentEventTypeDescriptor", new LookupColumnDetails { PropertyName = "EmploymentEventTypeDescriptorId", LookupTypeName = "EmploymentEventTypeDescriptor"} },
                { "InternalExternalHireDescriptor", new LookupColumnDetails { PropertyName = "InternalExternalHireDescriptorId", LookupTypeName = "InternalExternalHireDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EmploymentEventTypeDescriptorId", EmploymentEventTypeDescriptorId);
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEmploymentEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEmploymentEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEarlyHireSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventSynchronizationSourceSupport.IsEarlyHireSupported
        {
            get { return _isEarlyHireSupported; }
            set { _isEarlyHireSupported = value; }
        }

        private bool _isHireDateSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventSynchronizationSourceSupport.IsHireDateSupported
        {
            get { return _isHireDateSupported; }
            set { _isHireDateSupported = value; }
        }

        private bool _isInternalExternalHireDescriptorSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventSynchronizationSourceSupport.IsInternalExternalHireDescriptorSupported
        {
            get { return _isInternalExternalHireDescriptorSupported; }
            set { _isInternalExternalHireDescriptorSupported = value; }
        }

        private bool _isMutualConsentSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventSynchronizationSourceSupport.IsMutualConsentSupported
        {
            get { return _isMutualConsentSupported; }
            set { _isMutualConsentSupported = value; }
        }

        private bool _isRestrictedChoiceSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventSynchronizationSourceSupport.IsRestrictedChoiceSupported
        {
            get { return _isRestrictedChoiceSupported; }
            set { _isRestrictedChoiceSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EmploymentEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.EmploymentEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EmploymentEventTypeDescriptor table of the EmploymentEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EmploymentEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEmploymentEventTypeDescriptor, Entities.Common.Records.TPDM.IEmploymentEventTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEmploymentEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EmploymentEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EmploymentEventTypeDescriptorId", EmploymentEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEmploymentEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEmploymentEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEmploymentEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EmploymentSeparationEvent

namespace EdFi.Ods.Entities.NHibernate.EmploymentSeparationEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EmploymentSeparationEvent"/> entity.
    /// </summary>
    public class EmploymentSeparationEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EmploymentSeparationDate { get; set; }
        public virtual string RequisitionNumber { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EmploymentSeparationDate", EmploymentSeparationDate);
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EmploymentSeparationEvent table of the EmploymentSeparationEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EmploymentSeparationEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEmploymentSeparationEvent, Entities.Common.Records.TPDM.IEmploymentSeparationEventRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEmploymentSeparationEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EmploymentSeparationEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EmploymentSeparationDate 
        {
            get { return _employmentSeparationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _employmentSeparationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _employmentSeparationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string RequisitionNumber  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EmploymentSeparationEnteredDate 
        {
            get { return _employmentSeparationEnteredDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _employmentSeparationEnteredDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _employmentSeparationEnteredDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _employmentSeparationEnteredDate;
        
        public virtual int? EmploymentSeparationReasonDescriptorId 
        {
            get
            {
                if (_employmentSeparationReasonDescriptorId == default(int?))
                    _employmentSeparationReasonDescriptorId = string.IsNullOrWhiteSpace(_employmentSeparationReasonDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EmploymentSeparationReasonDescriptor", _employmentSeparationReasonDescriptor);

                return _employmentSeparationReasonDescriptorId;
            } 
            set
            {
                _employmentSeparationReasonDescriptorId = value;
                _employmentSeparationReasonDescriptor = null;
            }
        }

        private int? _employmentSeparationReasonDescriptorId;
        private string _employmentSeparationReasonDescriptor;

        public virtual string EmploymentSeparationReasonDescriptor
        {
            get
            {
                if (_employmentSeparationReasonDescriptor == null)
                    _employmentSeparationReasonDescriptor = _employmentSeparationReasonDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EmploymentSeparationReasonDescriptor", _employmentSeparationReasonDescriptorId.Value);
                    
                return _employmentSeparationReasonDescriptor;
            }
            set
            {
                _employmentSeparationReasonDescriptor = value;
                _employmentSeparationReasonDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault]
        public virtual int EmploymentSeparationTypeDescriptorId 
        {
            get
            {
                if (_employmentSeparationTypeDescriptorId == default(int))
                    _employmentSeparationTypeDescriptorId = DescriptorsCache.GetCache().GetId("EmploymentSeparationTypeDescriptor", _employmentSeparationTypeDescriptor);

                return _employmentSeparationTypeDescriptorId;
            } 
            set
            {
                _employmentSeparationTypeDescriptorId = value;
                _employmentSeparationTypeDescriptor = null;
            }
        }

        private int _employmentSeparationTypeDescriptorId;
        private string _employmentSeparationTypeDescriptor;

        public virtual string EmploymentSeparationTypeDescriptor
        {
            get
            {
                if (_employmentSeparationTypeDescriptor == null)
                    _employmentSeparationTypeDescriptor = DescriptorsCache.GetCache().GetValue("EmploymentSeparationTypeDescriptor", _employmentSeparationTypeDescriptorId);
                    
                return _employmentSeparationTypeDescriptor;
            }
            set
            {
                _employmentSeparationTypeDescriptor = value;
                _employmentSeparationTypeDescriptorId = default(int);
            }
        }
        public virtual bool? RemainingInDistrict  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.OpenStaffPositionAggregate.EdFi.OpenStaffPositionReferenceData OpenStaffPositionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEmploymentSeparationEvent.OpenStaffPositionDiscriminator
        {
            get { return OpenStaffPositionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEmploymentSeparationEvent.OpenStaffPositionResourceId
        {
            get { return OpenStaffPositionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EmploymentSeparationReasonDescriptor", new LookupColumnDetails { PropertyName = "EmploymentSeparationReasonDescriptorId", LookupTypeName = "EmploymentSeparationReasonDescriptor"} },
                { "EmploymentSeparationTypeDescriptor", new LookupColumnDetails { PropertyName = "EmploymentSeparationTypeDescriptorId", LookupTypeName = "EmploymentSeparationTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EmploymentSeparationDate", EmploymentSeparationDate);
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEmploymentSeparationEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEmploymentSeparationEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEmploymentSeparationEnteredDateSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationEventSynchronizationSourceSupport.IsEmploymentSeparationEnteredDateSupported
        {
            get { return _isEmploymentSeparationEnteredDateSupported; }
            set { _isEmploymentSeparationEnteredDateSupported = value; }
        }

        private bool _isEmploymentSeparationReasonDescriptorSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationEventSynchronizationSourceSupport.IsEmploymentSeparationReasonDescriptorSupported
        {
            get { return _isEmploymentSeparationReasonDescriptorSupported; }
            set { _isEmploymentSeparationReasonDescriptorSupported = value; }
        }

        private bool _isEmploymentSeparationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationEventSynchronizationSourceSupport.IsEmploymentSeparationTypeDescriptorSupported
        {
            get { return _isEmploymentSeparationTypeDescriptorSupported; }
            set { _isEmploymentSeparationTypeDescriptorSupported = value; }
        }

        private bool _isRemainingInDistrictSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationEventSynchronizationSourceSupport.IsRemainingInDistrictSupported
        {
            get { return _isRemainingInDistrictSupported; }
            set { _isRemainingInDistrictSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EmploymentSeparationReasonDescriptor

namespace EdFi.Ods.Entities.NHibernate.EmploymentSeparationReasonDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EmploymentSeparationReasonDescriptor table of the EmploymentSeparationReasonDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EmploymentSeparationReasonDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEmploymentSeparationReasonDescriptor, Entities.Common.Records.TPDM.IEmploymentSeparationReasonDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EmploymentSeparationReasonDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EmploymentSeparationReasonDescriptorId", EmploymentSeparationReasonDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEmploymentSeparationReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEmploymentSeparationReasonDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EmploymentSeparationTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.EmploymentSeparationTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EmploymentSeparationTypeDescriptor table of the EmploymentSeparationTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EmploymentSeparationTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEmploymentSeparationTypeDescriptor, Entities.Common.Records.TPDM.IEmploymentSeparationTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EmploymentSeparationTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EmploymentSeparationTypeDescriptorId", EmploymentSeparationTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEmploymentSeparationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEmploymentSeparationTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EnglishLanguageExamDescriptor

namespace EdFi.Ods.Entities.NHibernate.EnglishLanguageExamDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EnglishLanguageExamDescriptor table of the EnglishLanguageExamDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EnglishLanguageExamDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEnglishLanguageExamDescriptor, Entities.Common.Records.TPDM.IEnglishLanguageExamDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EnglishLanguageExamDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EnglishLanguageExamDescriptorId", EnglishLanguageExamDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEnglishLanguageExamDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEnglishLanguageExamDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEnglishLanguageExamDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Evaluation

namespace EdFi.Ods.Entities.NHibernate.EvaluationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Evaluation"/> entity.
    /// </summary>
    public class EvaluationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Evaluation table of the Evaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Evaluation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluation, Entities.Common.Records.TPDM.IEvaluationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Evaluation()
        {
            EvaluationRatingLevels = new HashSet<EvaluationRatingLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EvaluationTypeDescriptorId 
        {
            get
            {
                if (_evaluationTypeDescriptorId == default(int?))
                    _evaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_evaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationTypeDescriptor", _evaluationTypeDescriptor);

                return _evaluationTypeDescriptorId;
            } 
            set
            {
                _evaluationTypeDescriptorId = value;
                _evaluationTypeDescriptor = null;
            }
        }

        private int? _evaluationTypeDescriptorId;
        private string _evaluationTypeDescriptor;

        public virtual string EvaluationTypeDescriptor
        {
            get
            {
                if (_evaluationTypeDescriptor == null)
                    _evaluationTypeDescriptor = _evaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationTypeDescriptor", _evaluationTypeDescriptorId.Value);
                    
                return _evaluationTypeDescriptor;
            }
            set
            {
                _evaluationTypeDescriptor = value;
                _evaluationTypeDescriptorId = default(int?);
            }
        }
        public virtual int? InterRaterReliabilityScore  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationReferenceData PerformanceEvaluationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluation discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluation.PerformanceEvaluationDiscriminator
        {
            get { return PerformanceEvaluationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluation resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluation.PerformanceEvaluationResourceId
        {
            get { return PerformanceEvaluationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel> _evaluationRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingLevel> _evaluationRatingLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel> EvaluationRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingLevels)
                    if (item.Evaluation == null)
                        item.Evaluation = this;
                // -------------------------------------------------------------

                return _evaluationRatingLevels;
            }
            set
            {
                _evaluationRatingLevels = value;
                _evaluationRatingLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationRatingLevel, Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingLevel> Entities.Common.TPDM.IEvaluation.EvaluationRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingLevels)
                    if (item.Evaluation == null)
                        item.Evaluation = this;
                // -------------------------------------------------------------

                return _evaluationRatingLevelsCovariant;
            }
            set
            {
                EvaluationRatingLevels = new HashSet<Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel>(value.Cast<Entities.NHibernate.EvaluationAggregate.TPDM.EvaluationRatingLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "EvaluationTypeDescriptorId", LookupTypeName = "EvaluationTypeDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationRatingLevelsSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationRatingLevelsSupported
        {
            get { return _isEvaluationRatingLevelsSupported; }
            set { _isEvaluationRatingLevelsSupported = value; }
        }

        private bool _isEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported
        {
            get { return _isEvaluationTypeDescriptorSupported; }
            set { _isEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isInterRaterReliabilityScoreSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported
        {
            get { return _isInterRaterReliabilityScoreSupported; }
            set { _isInterRaterReliabilityScoreSupported = value; }
        }

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationRatingLevel, bool> _isEvaluationRatingLevelIncluded;
        Func<Entities.Common.TPDM.IEvaluationRatingLevel, bool> Entities.Common.TPDM.IEvaluationSynchronizationSourceSupport.IsEvaluationRatingLevelIncluded
        {
            get { return _isEvaluationRatingLevelIncluded; }
            set { _isEvaluationRatingLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingLevel table of the Evaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationRatingLevel, Entities.Common.Records.TPDM.IEvaluationRatingLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRatingLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Evaluation Evaluation { get; set; }

        Entities.Common.TPDM.IEvaluation IEvaluationRatingLevel.Evaluation
        {
            get { return Evaluation; }
            set { Evaluation = (Evaluation) value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingLevelRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingLevelRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingLevelRecord.EvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).EvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).EvaluationTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingLevelRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingLevelRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).PerformanceEvaluationTypeDescriptorId = value; }
        }

        short Entities.Common.Records.TPDM.IEvaluationRatingLevelRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingLevelRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRecord) Evaluation).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int))
                    _evaluationRatingLevelDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Evaluation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Evaluation = (Evaluation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationElement

namespace EdFi.Ods.Entities.NHibernate.EvaluationElementAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationElement"/> entity.
    /// </summary>
    public class EvaluationElementReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElement table of the EvaluationElement aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElement : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationElement, Entities.Common.Records.TPDM.IEvaluationElementRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationElement()
        {
            EvaluationElementRatingLevels = new HashSet<EvaluationElementRatingLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EvaluationTypeDescriptorId 
        {
            get
            {
                if (_evaluationTypeDescriptorId == default(int?))
                    _evaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_evaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationTypeDescriptor", _evaluationTypeDescriptor);

                return _evaluationTypeDescriptorId;
            } 
            set
            {
                _evaluationTypeDescriptorId = value;
                _evaluationTypeDescriptor = null;
            }
        }

        private int? _evaluationTypeDescriptorId;
        private string _evaluationTypeDescriptor;

        public virtual string EvaluationTypeDescriptor
        {
            get
            {
                if (_evaluationTypeDescriptor == null)
                    _evaluationTypeDescriptor = _evaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationTypeDescriptor", _evaluationTypeDescriptorId.Value);
                    
                return _evaluationTypeDescriptor;
            }
            set
            {
                _evaluationTypeDescriptor = value;
                _evaluationTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        public virtual int? SortOrder  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveReferenceData EvaluationObjectiveReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationObjective discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveDiscriminator
        {
            get { return EvaluationObjectiveReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationObjective resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationElement.EvaluationObjectiveResourceId
        {
            get { return EvaluationObjectiveReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel> _evaluationElementRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationElementRatingLevel> _evaluationElementRatingLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel> EvaluationElementRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationElementRatingLevels)
                    if (item.EvaluationElement == null)
                        item.EvaluationElement = this;
                // -------------------------------------------------------------

                return _evaluationElementRatingLevels;
            }
            set
            {
                _evaluationElementRatingLevels = value;
                _evaluationElementRatingLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationElementRatingLevel, Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationElementRatingLevel> Entities.Common.TPDM.IEvaluationElement.EvaluationElementRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationElementRatingLevels)
                    if (item.EvaluationElement == null)
                        item.EvaluationElement = this;
                // -------------------------------------------------------------

                return _evaluationElementRatingLevelsCovariant;
            }
            set
            {
                EvaluationElementRatingLevels = new HashSet<Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel>(value.Cast<Entities.NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementRatingLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "EvaluationTypeDescriptorId", LookupTypeName = "EvaluationTypeDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElement)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElement) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationElementRatingLevelsSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationElementRatingLevelsSupported
        {
            get { return _isEvaluationElementRatingLevelsSupported; }
            set { _isEvaluationElementRatingLevelsSupported = value; }
        }

        private bool _isEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported
        {
            get { return _isEvaluationTypeDescriptorSupported; }
            set { _isEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        private bool _isSortOrderSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsSortOrderSupported
        {
            get { return _isSortOrderSupported; }
            set { _isSortOrderSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationElementRatingLevel, bool> _isEvaluationElementRatingLevelIncluded;
        Func<Entities.Common.TPDM.IEvaluationElementRatingLevel, bool> Entities.Common.TPDM.IEvaluationElementSynchronizationSourceSupport.IsEvaluationElementRatingLevelIncluded
        {
            get { return _isEvaluationElementRatingLevelIncluded; }
            set { _isEvaluationElementRatingLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingLevel table of the EvaluationElement aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationElementRatingLevel, Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationElementRatingLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationElement EvaluationElement { get; set; }

        Entities.Common.TPDM.IEvaluationElement IEvaluationElementRatingLevel.EvaluationElement
        {
            get { return EvaluationElement; }
            set { EvaluationElement = (EvaluationElement) value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.EvaluationElementTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EvaluationElementTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EvaluationElementTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.EvaluationObjectiveTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EvaluationObjectiveTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EvaluationObjectiveTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.EvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).EvaluationTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).PerformanceEvaluationTypeDescriptorId = value; }
        }

        short Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingLevelRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRecord) EvaluationElement).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int))
                    _evaluationRatingLevelDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationElement as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElementRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElementRatingLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationElement = (EvaluationElement) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationElementRating

namespace EdFi.Ods.Entities.NHibernate.EvaluationElementRatingAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationElementRating"/> entity.
    /// </summary>
    public class EvaluationElementRatingReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRating table of the EvaluationElementRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRating : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationElementRating, Entities.Common.Records.TPDM.IEvaluationElementRatingRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationElementRating()
        {
            EvaluationElementRatingResults = new HashSet<EvaluationElementRatingResult>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(1024), NoDangerousText]
        public virtual string AreaOfRefinement  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string AreaOfReinforcement  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string Comments  { get; set; }
        public virtual int? EvaluationElementRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationElementRatingLevelDescriptorId == default(int?))
                    _evaluationElementRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_evaluationElementRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationElementRatingLevelDescriptor", _evaluationElementRatingLevelDescriptor);

                return _evaluationElementRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationElementRatingLevelDescriptorId = value;
                _evaluationElementRatingLevelDescriptor = null;
            }
        }

        private int? _evaluationElementRatingLevelDescriptorId;
        private string _evaluationElementRatingLevelDescriptor;

        public virtual string EvaluationElementRatingLevelDescriptor
        {
            get
            {
                if (_evaluationElementRatingLevelDescriptor == null)
                    _evaluationElementRatingLevelDescriptor = _evaluationElementRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationElementRatingLevelDescriptor", _evaluationElementRatingLevelDescriptorId.Value);
                    
                return _evaluationElementRatingLevelDescriptor;
            }
            set
            {
                _evaluationElementRatingLevelDescriptor = value;
                _evaluationElementRatingLevelDescriptorId = default(int?);
            }
        }
        [StringLength(1024), NoDangerousText]
        public virtual string Feedback  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingReferenceData EvaluationObjectiveRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationObjectiveRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveRatingDiscriminator
        {
            get { return EvaluationObjectiveRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationObjectiveRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationElementRating.EvaluationObjectiveRatingResourceId
        {
            get { return EvaluationObjectiveRatingReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult> _evaluationElementRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationElementRatingResult> _evaluationElementRatingResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult> EvaluationElementRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationElementRatingResults)
                    if (item.EvaluationElementRating == null)
                        item.EvaluationElementRating = this;
                // -------------------------------------------------------------

                return _evaluationElementRatingResults;
            }
            set
            {
                _evaluationElementRatingResults = value;
                _evaluationElementRatingResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationElementRatingResult, Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationElementRatingResult> Entities.Common.TPDM.IEvaluationElementRating.EvaluationElementRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationElementRatingResults)
                    if (item.EvaluationElementRating == null)
                        item.EvaluationElementRating = this;
                // -------------------------------------------------------------

                return _evaluationElementRatingResultsCovariant;
            }
            set
            {
                EvaluationElementRatingResults = new HashSet<Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult>(value.Cast<Entities.NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingResult>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationElementRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationElementRatingLevelDescriptorId", LookupTypeName = "EvaluationElementRatingLevelDescriptor"} },
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElementRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElementRating) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAreaOfRefinementSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsAreaOfRefinementSupported
        {
            get { return _isAreaOfRefinementSupported; }
            set { _isAreaOfRefinementSupported = value; }
        }

        private bool _isAreaOfReinforcementSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsAreaOfReinforcementSupported
        {
            get { return _isAreaOfReinforcementSupported; }
            set { _isAreaOfReinforcementSupported = value; }
        }

        private bool _isCommentsSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsCommentsSupported
        {
            get { return _isCommentsSupported; }
            set { _isCommentsSupported = value; }
        }

        private bool _isEvaluationElementRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingLevelDescriptorSupported
        {
            get { return _isEvaluationElementRatingLevelDescriptorSupported; }
            set { _isEvaluationElementRatingLevelDescriptorSupported = value; }
        }

        private bool _isEvaluationElementRatingResultsSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingResultsSupported
        {
            get { return _isEvaluationElementRatingResultsSupported; }
            set { _isEvaluationElementRatingResultsSupported = value; }
        }

        private bool _isFeedbackSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsFeedbackSupported
        {
            get { return _isFeedbackSupported; }
            set { _isFeedbackSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationElementRatingResult, bool> _isEvaluationElementRatingResultIncluded;
        Func<Entities.Common.TPDM.IEvaluationElementRatingResult, bool> Entities.Common.TPDM.IEvaluationElementRatingSynchronizationSourceSupport.IsEvaluationElementRatingResultIncluded
        {
            get { return _isEvaluationElementRatingResultIncluded; }
            set { _isEvaluationElementRatingResultIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingResult table of the EvaluationElementRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationElementRatingResult, Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementRatingResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationElementRatingResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationElementRating EvaluationElementRating { get; set; }

        Entities.Common.TPDM.IEvaluationElementRating IEvaluationElementRatingResult.EvaluationElementRating
        {
            get { return EvaluationElementRating; }
            set { EvaluationElementRating = (EvaluationElementRating) value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EducationOrganizationId = value; }
        }

        DateTime Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.EvaluationDate
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationDate; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationDate = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.EvaluationElementTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationElementTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationElementTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.EvaluationObjectiveTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationObjectiveTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationObjectiveTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.EvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).EvaluationTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).PerformanceEvaluationTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.PersonId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).PersonId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).PersonId = value; }
        }

        short Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.SourceSystemDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).SourceSystemDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).SourceSystemDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationElementRatingResultRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationElementRatingRecord) EvaluationElementRating).TermDescriptorId = value; }
        }

        [DomainSignature]
        public virtual decimal Rating  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string RatingResultTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationElementRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("Rating", Rating);
            keyValues.Add("RatingResultTitle", RatingResultTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElementRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElementRatingResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationElementRating = (EvaluationElementRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationElementRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.EvaluationElementRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationElementRatingLevelDescriptor table of the EvaluationElementRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationElementRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor, Entities.Common.Records.TPDM.IEvaluationElementRatingLevelDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EvaluationElementRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EvaluationElementRatingLevelDescriptorId", EvaluationElementRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationObjective

namespace EdFi.Ods.Entities.NHibernate.EvaluationObjectiveAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationObjective"/> entity.
    /// </summary>
    public class EvaluationObjectiveReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjective table of the EvaluationObjective aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjective : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationObjective, Entities.Common.Records.TPDM.IEvaluationObjectiveRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationObjective()
        {
            EvaluationObjectiveRatingLevels = new HashSet<EvaluationObjectiveRatingLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EvaluationTypeDescriptorId 
        {
            get
            {
                if (_evaluationTypeDescriptorId == default(int?))
                    _evaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_evaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationTypeDescriptor", _evaluationTypeDescriptor);

                return _evaluationTypeDescriptorId;
            } 
            set
            {
                _evaluationTypeDescriptorId = value;
                _evaluationTypeDescriptor = null;
            }
        }

        private int? _evaluationTypeDescriptorId;
        private string _evaluationTypeDescriptor;

        public virtual string EvaluationTypeDescriptor
        {
            get
            {
                if (_evaluationTypeDescriptor == null)
                    _evaluationTypeDescriptor = _evaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationTypeDescriptor", _evaluationTypeDescriptorId.Value);
                    
                return _evaluationTypeDescriptor;
            }
            set
            {
                _evaluationTypeDescriptor = value;
                _evaluationTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        public virtual int? SortOrder  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationAggregate.TPDM.EvaluationReferenceData EvaluationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Evaluation discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationObjective.EvaluationDiscriminator
        {
            get { return EvaluationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Evaluation resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationObjective.EvaluationResourceId
        {
            get { return EvaluationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel> _evaluationObjectiveRatingLevels;
        private ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel> _evaluationObjectiveRatingLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel> EvaluationObjectiveRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationObjectiveRatingLevels)
                    if (item.EvaluationObjective == null)
                        item.EvaluationObjective = this;
                // -------------------------------------------------------------

                return _evaluationObjectiveRatingLevels;
            }
            set
            {
                _evaluationObjectiveRatingLevels = value;
                _evaluationObjectiveRatingLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel> Entities.Common.TPDM.IEvaluationObjective.EvaluationObjectiveRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationObjectiveRatingLevels)
                    if (item.EvaluationObjective == null)
                        item.EvaluationObjective = this;
                // -------------------------------------------------------------

                return _evaluationObjectiveRatingLevelsCovariant;
            }
            set
            {
                EvaluationObjectiveRatingLevels = new HashSet<Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel>(value.Cast<Entities.NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveRatingLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "EvaluationTypeDescriptorId", LookupTypeName = "EvaluationTypeDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationObjective)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationObjective) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationObjectiveRatingLevelsSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationObjectiveRatingLevelsSupported
        {
            get { return _isEvaluationObjectiveRatingLevelsSupported; }
            set { _isEvaluationObjectiveRatingLevelsSupported = value; }
        }

        private bool _isEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationTypeDescriptorSupported
        {
            get { return _isEvaluationTypeDescriptorSupported; }
            set { _isEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        private bool _isSortOrderSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsSortOrderSupported
        {
            get { return _isSortOrderSupported; }
            set { _isSortOrderSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, bool> _isEvaluationObjectiveRatingLevelIncluded;
        Func<Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, bool> Entities.Common.TPDM.IEvaluationObjectiveSynchronizationSourceSupport.IsEvaluationObjectiveRatingLevelIncluded
        {
            get { return _isEvaluationObjectiveRatingLevelIncluded; }
            set { _isEvaluationObjectiveRatingLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRatingLevel table of the EvaluationObjective aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationObjectiveRatingLevel, Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationObjectiveRatingLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationObjective EvaluationObjective { get; set; }

        Entities.Common.TPDM.IEvaluationObjective IEvaluationObjectiveRatingLevel.EvaluationObjective
        {
            get { return EvaluationObjective; }
            set { EvaluationObjective = (EvaluationObjective) value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord.EvaluationObjectiveTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).EvaluationObjectiveTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).EvaluationObjectiveTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord.EvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).EvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).EvaluationTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).PerformanceEvaluationTypeDescriptorId = value; }
        }

        short Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingLevelRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRecord) EvaluationObjective).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int))
                    _evaluationRatingLevelDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationObjective as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationObjectiveRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationObjectiveRatingLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationObjective = (EvaluationObjective) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingLevelSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationObjectiveRating

namespace EdFi.Ods.Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationObjectiveRating"/> entity.
    /// </summary>
    public class EvaluationObjectiveRatingReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRating table of the EvaluationObjectiveRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRating : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationObjectiveRating, Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationObjectiveRating()
        {
            EvaluationObjectiveRatingResults = new HashSet<EvaluationObjectiveRatingResult>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(1024), NoDangerousText]
        public virtual string Comments  { get; set; }
        public virtual int? ObjectiveRatingLevelDescriptorId 
        {
            get
            {
                if (_objectiveRatingLevelDescriptorId == default(int?))
                    _objectiveRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_objectiveRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ObjectiveRatingLevelDescriptor", _objectiveRatingLevelDescriptor);

                return _objectiveRatingLevelDescriptorId;
            } 
            set
            {
                _objectiveRatingLevelDescriptorId = value;
                _objectiveRatingLevelDescriptor = null;
            }
        }

        private int? _objectiveRatingLevelDescriptorId;
        private string _objectiveRatingLevelDescriptor;

        public virtual string ObjectiveRatingLevelDescriptor
        {
            get
            {
                if (_objectiveRatingLevelDescriptor == null)
                    _objectiveRatingLevelDescriptor = _objectiveRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ObjectiveRatingLevelDescriptor", _objectiveRatingLevelDescriptorId.Value);
                    
                return _objectiveRatingLevelDescriptor;
            }
            set
            {
                _objectiveRatingLevelDescriptor = value;
                _objectiveRatingLevelDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationObjectiveAggregate.TPDM.EvaluationObjectiveReferenceData EvaluationObjectiveReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationObjective discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveDiscriminator
        {
            get { return EvaluationObjectiveReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationObjective resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveResourceId
        {
            get { return EvaluationObjectiveReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReferenceData EvaluationRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationRatingDiscriminator
        {
            get { return EvaluationRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationRatingResourceId
        {
            get { return EvaluationRatingReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult> _evaluationObjectiveRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingResult> _evaluationObjectiveRatingResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult> EvaluationObjectiveRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationObjectiveRatingResults)
                    if (item.EvaluationObjectiveRating == null)
                        item.EvaluationObjectiveRating = this;
                // -------------------------------------------------------------

                return _evaluationObjectiveRatingResults;
            }
            set
            {
                _evaluationObjectiveRatingResults = value;
                _evaluationObjectiveRatingResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationObjectiveRatingResult> Entities.Common.TPDM.IEvaluationObjectiveRating.EvaluationObjectiveRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationObjectiveRatingResults)
                    if (item.EvaluationObjectiveRating == null)
                        item.EvaluationObjectiveRating = this;
                // -------------------------------------------------------------

                return _evaluationObjectiveRatingResultsCovariant;
            }
            set
            {
                EvaluationObjectiveRatingResults = new HashSet<Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult>(value.Cast<Entities.NHibernate.EvaluationObjectiveRatingAggregate.TPDM.EvaluationObjectiveRatingResult>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "ObjectiveRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "ObjectiveRatingLevelDescriptorId", LookupTypeName = "ObjectiveRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationObjectiveRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationObjectiveRating) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCommentsSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsCommentsSupported
        {
            get { return _isCommentsSupported; }
            set { _isCommentsSupported = value; }
        }

        private bool _isEvaluationObjectiveRatingResultsSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsEvaluationObjectiveRatingResultsSupported
        {
            get { return _isEvaluationObjectiveRatingResultsSupported; }
            set { _isEvaluationObjectiveRatingResultsSupported = value; }
        }

        private bool _isObjectiveRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsObjectiveRatingLevelDescriptorSupported
        {
            get { return _isObjectiveRatingLevelDescriptorSupported; }
            set { _isObjectiveRatingLevelDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, bool> _isEvaluationObjectiveRatingResultIncluded;
        Func<Entities.Common.TPDM.IEvaluationObjectiveRatingResult, bool> Entities.Common.TPDM.IEvaluationObjectiveRatingSynchronizationSourceSupport.IsEvaluationObjectiveRatingResultIncluded
        {
            get { return _isEvaluationObjectiveRatingResultIncluded; }
            set { _isEvaluationObjectiveRatingResultIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationObjectiveRatingResult table of the EvaluationObjectiveRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationObjectiveRatingResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationObjectiveRatingResult, Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationObjectiveRatingResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationObjectiveRatingResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationObjectiveRating EvaluationObjectiveRating { get; set; }

        Entities.Common.TPDM.IEvaluationObjectiveRating IEvaluationObjectiveRatingResult.EvaluationObjectiveRating
        {
            get { return EvaluationObjectiveRating; }
            set { EvaluationObjectiveRating = (EvaluationObjectiveRating) value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EducationOrganizationId = value; }
        }

        DateTime Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.EvaluationDate
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EvaluationDate; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EvaluationDate = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.EvaluationObjectiveTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EvaluationObjectiveTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EvaluationObjectiveTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.EvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).EvaluationTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).PerformanceEvaluationTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.PersonId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).PersonId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).PersonId = value; }
        }

        short Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.SourceSystemDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).SourceSystemDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).SourceSystemDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationObjectiveRatingResultRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationObjectiveRatingRecord) EvaluationObjectiveRating).TermDescriptorId = value; }
        }

        [DomainSignature]
        public virtual decimal Rating  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string RatingResultTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationObjectiveRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("Rating", Rating);
            keyValues.Add("RatingResultTitle", RatingResultTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationObjectiveRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationObjectiveRatingResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationObjectiveRating = (EvaluationObjectiveRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationObjectiveRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationPeriodDescriptor

namespace EdFi.Ods.Entities.NHibernate.EvaluationPeriodDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationPeriodDescriptor table of the EvaluationPeriodDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationPeriodDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEvaluationPeriodDescriptor, Entities.Common.Records.TPDM.IEvaluationPeriodDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationPeriodDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationPeriodDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationPeriodDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationRating

namespace EdFi.Ods.Entities.NHibernate.EvaluationRatingAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="EvaluationRating"/> entity.
    /// </summary>
    public class EvaluationRatingReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRating table of the EvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRating : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IEvaluationRating, Entities.Common.Records.TPDM.IEvaluationRatingRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRating()
        {
            EvaluationRatingResults = new HashSet<EvaluationRatingResult>();
            EvaluationRatingReviewers = new HashSet<EvaluationRatingReviewer>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int?))
                    _evaluationRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_evaluationRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int? _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = _evaluationRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId.Value);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string LocalCourseCode  { get; set; }
        public virtual int? SchoolId  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string SectionIdentifier  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string SessionName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationAggregate.TPDM.EvaluationReferenceData EvaluationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Evaluation discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationRating.EvaluationDiscriminator
        {
            get { return EvaluationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Evaluation resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationRating.EvaluationResourceId
        {
            get { return EvaluationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReferenceData PerformanceEvaluationRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluationRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationRatingDiscriminator
        {
            get { return PerformanceEvaluationRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluationRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationRating.PerformanceEvaluationRatingResourceId
        {
            get { return PerformanceEvaluationRatingReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SectionAggregate.EdFi.SectionReferenceData SectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Section discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationRating.SectionDiscriminator
        {
            get { return SectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Section resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationRating.SectionResourceId
        {
            get { return SectionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult> _evaluationRatingResults;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingResult> _evaluationRatingResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult> EvaluationRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingResults)
                    if (item.EvaluationRating == null)
                        item.EvaluationRating = this;
                // -------------------------------------------------------------

                return _evaluationRatingResults;
            }
            set
            {
                _evaluationRatingResults = value;
                _evaluationRatingResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationRatingResult, Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingResult> Entities.Common.TPDM.IEvaluationRating.EvaluationRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingResults)
                    if (item.EvaluationRating == null)
                        item.EvaluationRating = this;
                // -------------------------------------------------------------

                return _evaluationRatingResultsCovariant;
            }
            set
            {
                EvaluationRatingResults = new HashSet<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult>(value.Cast<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingResult>());
            }
        }


        private ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer> _evaluationRatingReviewers;
        private ICollection<Entities.Common.TPDM.IEvaluationRatingReviewer> _evaluationRatingReviewersCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer> EvaluationRatingReviewers
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingReviewers)
                    if (item.EvaluationRating == null)
                        item.EvaluationRating = this;
                // -------------------------------------------------------------

                return _evaluationRatingReviewers;
            }
            set
            {
                _evaluationRatingReviewers = value;
                _evaluationRatingReviewersCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IEvaluationRatingReviewer, Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IEvaluationRatingReviewer> Entities.Common.TPDM.IEvaluationRating.EvaluationRatingReviewers
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingReviewers)
                    if (item.EvaluationRating == null)
                        item.EvaluationRating = this;
                // -------------------------------------------------------------

                return _evaluationRatingReviewersCovariant;
            }
            set
            {
                EvaluationRatingReviewers = new HashSet<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer>(value.Cast<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewer>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRating) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingLevelDescriptorSupported
        {
            get { return _isEvaluationRatingLevelDescriptorSupported; }
            set { _isEvaluationRatingLevelDescriptorSupported = value; }
        }

        private bool _isEvaluationRatingResultsSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingResultsSupported
        {
            get { return _isEvaluationRatingResultsSupported; }
            set { _isEvaluationRatingResultsSupported = value; }
        }

        private bool _isEvaluationRatingReviewersSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingReviewersSupported
        {
            get { return _isEvaluationRatingReviewersSupported; }
            set { _isEvaluationRatingReviewersSupported = value; }
        }

        private bool _isLocalCourseCodeSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsLocalCourseCodeSupported
        {
            get { return _isLocalCourseCodeSupported; }
            set { _isLocalCourseCodeSupported = value; }
        }

        private bool _isSchoolIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSchoolIdSupported
        {
            get { return _isSchoolIdSupported; }
            set { _isSchoolIdSupported = value; }
        }

        private bool _isSectionIdentifierSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSectionIdentifierSupported
        {
            get { return _isSectionIdentifierSupported; }
            set { _isSectionIdentifierSupported = value; }
        }

        private bool _isSessionNameSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsSessionNameSupported
        {
            get { return _isSessionNameSupported; }
            set { _isSessionNameSupported = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationRatingResult, bool> _isEvaluationRatingResultIncluded;
        Func<Entities.Common.TPDM.IEvaluationRatingResult, bool> Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingResultIncluded
        {
            get { return _isEvaluationRatingResultIncluded; }
            set { _isEvaluationRatingResultIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IEvaluationRatingReviewer, bool> _isEvaluationRatingReviewerIncluded;
        Func<Entities.Common.TPDM.IEvaluationRatingReviewer, bool> Entities.Common.TPDM.IEvaluationRatingSynchronizationSourceSupport.IsEvaluationRatingReviewerIncluded
        {
            get { return _isEvaluationRatingReviewerIncluded; }
            set { _isEvaluationRatingReviewerIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingResult table of the EvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationRatingResult, Entities.Common.Records.TPDM.IEvaluationRatingResultRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRatingResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationRating EvaluationRating { get; set; }

        Entities.Common.TPDM.IEvaluationRating IEvaluationRatingResult.EvaluationRating
        {
            get { return EvaluationRating; }
            set { EvaluationRating = (EvaluationRating) value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EducationOrganizationId = value; }
        }

        DateTime Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.EvaluationDate
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationDate; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationDate = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.EvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PerformanceEvaluationTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.PersonId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PersonId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PersonId = value; }
        }

        short Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.SourceSystemDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).SourceSystemDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).SourceSystemDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingResultRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).TermDescriptorId = value; }
        }

        [DomainSignature]
        public virtual decimal Rating  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string RatingResultTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("Rating", Rating);
            keyValues.Add("RatingResultTitle", RatingResultTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationRating = (EvaluationRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingReviewer table of the EvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewer : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationRatingReviewer, Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRatingReviewer()
        {
           EvaluationRatingReviewerReceivedTrainingPersistentList = new HashSet<EvaluationRatingReviewerReceivedTraining>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationRating EvaluationRating { get; set; }

        Entities.Common.TPDM.IEvaluationRating IEvaluationRatingReviewer.EvaluationRating
        {
            get { return EvaluationRating; }
            set { EvaluationRating = (EvaluationRating) value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EducationOrganizationId = value; }
        }

        DateTime Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.EvaluationDate
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationDate; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationDate = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.EvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).EvaluationTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PerformanceEvaluationTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.PersonId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PersonId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).PersonId = value; }
        }

        short Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.SourceSystemDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).SourceSystemDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).SourceSystemDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingRecord) EvaluationRating).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string FirstName  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string LastSurname  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(32), NoDangerousText]
        public virtual string ReviewerPersonId  { get; set; }
        public virtual int? ReviewerSourceSystemDescriptorId 
        {
            get
            {
                if (_reviewerSourceSystemDescriptorId == default(int?))
                    _reviewerSourceSystemDescriptorId = string.IsNullOrWhiteSpace(_reviewerSourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _reviewerSourceSystemDescriptor);

                return _reviewerSourceSystemDescriptorId;
            } 
            set
            {
                _reviewerSourceSystemDescriptorId = value;
                _reviewerSourceSystemDescriptor = null;
            }
        }

        private int? _reviewerSourceSystemDescriptorId;
        private string _reviewerSourceSystemDescriptor;

        public virtual string ReviewerSourceSystemDescriptor
        {
            get
            {
                if (_reviewerSourceSystemDescriptor == null)
                    _reviewerSourceSystemDescriptor = _reviewerSourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _reviewerSourceSystemDescriptorId.Value);
                    
                return _reviewerSourceSystemDescriptor;
            }
            set
            {
                _reviewerSourceSystemDescriptor = value;
                _reviewerSourceSystemDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewerReceivedTraining EvaluationRatingReviewerReceivedTraining
        {
            get
            {
                // Return the item in the list, if one exists
                if (EvaluationRatingReviewerReceivedTrainingPersistentList.Any())
                    return EvaluationRatingReviewerReceivedTrainingPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (EvaluationRatingReviewerReceivedTrainingPersistentList.Any())
                    EvaluationRatingReviewerReceivedTrainingPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.EvaluationRatingReviewer = this;

                    EvaluationRatingReviewerReceivedTrainingPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining Entities.Common.TPDM.IEvaluationRatingReviewer.EvaluationRatingReviewerReceivedTraining
        {
            get { return EvaluationRatingReviewerReceivedTraining; }
            set { EvaluationRatingReviewerReceivedTraining = (Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewerReceivedTraining) value; }
        }

        private ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewerReceivedTraining> _evaluationRatingReviewerReceivedTrainingPersistentList;

        public virtual ICollection<Entities.NHibernate.EvaluationRatingAggregate.TPDM.EvaluationRatingReviewerReceivedTraining> EvaluationRatingReviewerReceivedTrainingPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _evaluationRatingReviewerReceivedTrainingPersistentList)
                    if (item.EvaluationRatingReviewer == null)
                        item.EvaluationRatingReviewer = this;
                // -------------------------------------------------------------

                return _evaluationRatingReviewerReceivedTrainingPersistentList;
            }
            set
            {
                _evaluationRatingReviewerReceivedTrainingPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData ReviewerPersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the ReviewerPerson discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonDiscriminator
        {
            get { return ReviewerPersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the ReviewerPerson resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IEvaluationRatingReviewer.ReviewerPersonResourceId
        {
            get { return ReviewerPersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ReviewerSourceSystemDescriptor", new LookupColumnDetails { PropertyName = "ReviewerSourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("FirstName", FirstName);
            keyValues.Add("LastSurname", LastSurname);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingReviewer)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingReviewer) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationRating = (EvaluationRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEvaluationRatingReviewerReceivedTrainingSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsEvaluationRatingReviewerReceivedTrainingSupported
        {
            get { return _isEvaluationRatingReviewerReceivedTrainingSupported; }
            set { _isEvaluationRatingReviewerReceivedTrainingSupported = value; }
        }

        private bool _isReviewerPersonIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerPersonIdSupported
        {
            get { return _isReviewerPersonIdSupported; }
            set { _isReviewerPersonIdSupported = value; }
        }

        private bool _isReviewerSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerSourceSystemDescriptorSupported
        {
            get { return _isReviewerSourceSystemDescriptorSupported; }
            set { _isReviewerSourceSystemDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingReviewerReceivedTraining table of the EvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingReviewerReceivedTraining : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining, Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public EvaluationRatingReviewerReceivedTraining()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EvaluationRatingReviewer EvaluationRatingReviewer { get; set; }

        Entities.Common.TPDM.IEvaluationRatingReviewer IEvaluationRatingReviewerReceivedTraining.EvaluationRatingReviewer
        {
            get { return EvaluationRatingReviewer; }
            set { EvaluationRatingReviewer = (EvaluationRatingReviewer) value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).EducationOrganizationId = value; }
        }

        DateTime Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.EvaluationDate
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).EvaluationDate; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).EvaluationDate = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.EvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).EvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).EvaluationTitle = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.FirstName
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).FirstName; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).FirstName = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.LastSurname
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).LastSurname; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).LastSurname = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).PerformanceEvaluationTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.PersonId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).PersonId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).PersonId = value; }
        }

        short Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.SourceSystemDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).SourceSystemDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).SourceSystemDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IEvaluationRatingReviewerReceivedTrainingRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IEvaluationRatingReviewerRecord) EvaluationRatingReviewer).TermDescriptorId = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? InterRaterReliabilityScore  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? ReceivedTrainingDate 
        {
            get { return _receivedTrainingDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _receivedTrainingDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _receivedTrainingDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _receivedTrainingDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (EvaluationRatingReviewer as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTraining) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            EvaluationRatingReviewer = (EvaluationRatingReviewer) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isInterRaterReliabilityScoreSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported
        {
            get { return _isInterRaterReliabilityScoreSupported; }
            set { _isInterRaterReliabilityScoreSupported = value; }
        }

        private bool _isReceivedTrainingDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsReceivedTrainingDateSupported
        {
            get { return _isReceivedTrainingDateSupported; }
            set { _isReceivedTrainingDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.EvaluationRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationRatingLevelDescriptor table of the EvaluationRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEvaluationRatingLevelDescriptor, Entities.Common.Records.TPDM.IEvaluationRatingLevelDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: EvaluationTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.EvaluationTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.EvaluationTypeDescriptor table of the EvaluationTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class EvaluationTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IEvaluationTypeDescriptor, Entities.Common.Records.TPDM.IEvaluationTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int EvaluationTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EvaluationTypeDescriptorId", EvaluationTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IEvaluationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IEvaluationTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IEvaluationTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: FederalLocaleCodeDescriptor

namespace EdFi.Ods.Entities.NHibernate.FederalLocaleCodeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FederalLocaleCodeDescriptor table of the FederalLocaleCodeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FederalLocaleCodeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IFederalLocaleCodeDescriptor, Entities.Common.Records.TPDM.IFederalLocaleCodeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int FederalLocaleCodeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FederalLocaleCodeDescriptorId", FederalLocaleCodeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFederalLocaleCodeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFederalLocaleCodeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IFederalLocaleCodeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: FieldworkExperience

namespace EdFi.Ods.Entities.NHibernate.FieldworkExperienceAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="FieldworkExperience"/> entity.
    /// </summary>
    public class FieldworkExperienceReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime BeginDate { get; set; }
        public virtual string FieldworkIdentifier { get; set; }
        public virtual int StudentUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FieldworkIdentifier", FieldworkIdentifier);
            keyValues.Add("StudentUSI", StudentUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperience table of the FieldworkExperience aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperience : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IFieldworkExperience, Entities.Common.Records.TPDM.IFieldworkExperienceRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public FieldworkExperience()
        {
           FieldworkExperienceCoteachingPersistentList = new HashSet<FieldworkExperienceCoteaching>();
            FieldworkExperienceSchools = new HashSet<FieldworkExperienceSchool>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string FieldworkIdentifier  { get; set; }
        [Display(Name="StudentUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Student")]
        public virtual int StudentUSI 
        {
            get
            {
                if (_studentUSI == default(int))
                    _studentUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Student", _studentUniqueId);

                return _studentUSI;
            } 
            set
            {
                _studentUSI = value;
            }
        }

        private int _studentUSI;
        private string _studentUniqueId;

        [RequiredWithNonDefault]
        public virtual string StudentUniqueId
        {
            get
            {
                if (_studentUniqueId == null)
                    _studentUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Student", _studentUSI);
                    
                return _studentUniqueId;
            }
            set
            {
                if (_studentUniqueId != value)
                        _studentUSI = default(int);

                _studentUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [RequiredWithNonDefault]
        public virtual int FieldworkTypeDescriptorId 
        {
            get
            {
                if (_fieldworkTypeDescriptorId == default(int))
                    _fieldworkTypeDescriptorId = DescriptorsCache.GetCache().GetId("FieldworkTypeDescriptor", _fieldworkTypeDescriptor);

                return _fieldworkTypeDescriptorId;
            } 
            set
            {
                _fieldworkTypeDescriptorId = value;
                _fieldworkTypeDescriptor = null;
            }
        }

        private int _fieldworkTypeDescriptorId;
        private string _fieldworkTypeDescriptor;

        public virtual string FieldworkTypeDescriptor
        {
            get
            {
                if (_fieldworkTypeDescriptor == null)
                    _fieldworkTypeDescriptor = DescriptorsCache.GetCache().GetValue("FieldworkTypeDescriptor", _fieldworkTypeDescriptorId);
                    
                return _fieldworkTypeDescriptor;
            }
            set
            {
                _fieldworkTypeDescriptor = value;
                _fieldworkTypeDescriptorId = default(int);
            }
        }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? HoursCompleted  { get; set; }
        public virtual int? ProgramGatewayDescriptorId 
        {
            get
            {
                if (_programGatewayDescriptorId == default(int?))
                    _programGatewayDescriptorId = string.IsNullOrWhiteSpace(_programGatewayDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ProgramGatewayDescriptor", _programGatewayDescriptor);

                return _programGatewayDescriptorId;
            } 
            set
            {
                _programGatewayDescriptorId = value;
                _programGatewayDescriptor = null;
            }
        }

        private int? _programGatewayDescriptorId;
        private string _programGatewayDescriptor;

        public virtual string ProgramGatewayDescriptor
        {
            get
            {
                if (_programGatewayDescriptor == null)
                    _programGatewayDescriptor = _programGatewayDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ProgramGatewayDescriptor", _programGatewayDescriptorId.Value);
                    
                return _programGatewayDescriptor;
            }
            set
            {
                _programGatewayDescriptor = value;
                _programGatewayDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceCoteaching FieldworkExperienceCoteaching
        {
            get
            {
                // Return the item in the list, if one exists
                if (FieldworkExperienceCoteachingPersistentList.Any())
                    return FieldworkExperienceCoteachingPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (FieldworkExperienceCoteachingPersistentList.Any())
                    FieldworkExperienceCoteachingPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.FieldworkExperience = this;

                    FieldworkExperienceCoteachingPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IFieldworkExperienceCoteaching Entities.Common.TPDM.IFieldworkExperience.FieldworkExperienceCoteaching
        {
            get { return FieldworkExperienceCoteaching; }
            set { FieldworkExperienceCoteaching = (Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceCoteaching) value; }
        }

        private ICollection<Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceCoteaching> _fieldworkExperienceCoteachingPersistentList;

        public virtual ICollection<Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceCoteaching> FieldworkExperienceCoteachingPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _fieldworkExperienceCoteachingPersistentList)
                    if (item.FieldworkExperience == null)
                        item.FieldworkExperience = this;
                // -------------------------------------------------------------

                return _fieldworkExperienceCoteachingPersistentList;
            }
            set
            {
                _fieldworkExperienceCoteachingPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.StudentAggregate.EdFi.StudentReferenceData StudentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Student discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IFieldworkExperience.StudentDiscriminator
        {
            get { return StudentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Student resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperience.StudentResourceId
        {
            get { return StudentReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceSchool> _fieldworkExperienceSchools;
        private ICollection<Entities.Common.TPDM.IFieldworkExperienceSchool> _fieldworkExperienceSchoolsCovariant;
        [RequiredCollection]
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceSchool> FieldworkExperienceSchools
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _fieldworkExperienceSchools)
                    if (item.FieldworkExperience == null)
                        item.FieldworkExperience = this;
                // -------------------------------------------------------------

                return _fieldworkExperienceSchools;
            }
            set
            {
                _fieldworkExperienceSchools = value;
                _fieldworkExperienceSchoolsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IFieldworkExperienceSchool, Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceSchool>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IFieldworkExperienceSchool> Entities.Common.TPDM.IFieldworkExperience.FieldworkExperienceSchools
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _fieldworkExperienceSchools)
                    if (item.FieldworkExperience == null)
                        item.FieldworkExperience = this;
                // -------------------------------------------------------------

                return _fieldworkExperienceSchoolsCovariant;
            }
            set
            {
                FieldworkExperienceSchools = new HashSet<Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceSchool>(value.Cast<Entities.NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceSchool>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FieldworkTypeDescriptor", new LookupColumnDetails { PropertyName = "FieldworkTypeDescriptorId", LookupTypeName = "FieldworkTypeDescriptor"} },
                { "ProgramGatewayDescriptor", new LookupColumnDetails { PropertyName = "ProgramGatewayDescriptorId", LookupTypeName = "ProgramGatewayDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FieldworkIdentifier", FieldworkIdentifier);
            keyValues.Add("StudentUSI", StudentUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkExperience)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkExperience) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isFieldworkExperienceCoteachingSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsFieldworkExperienceCoteachingSupported
        {
            get { return _isFieldworkExperienceCoteachingSupported; }
            set { _isFieldworkExperienceCoteachingSupported = value; }
        }

        private bool _isFieldworkExperienceSchoolsSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsFieldworkExperienceSchoolsSupported
        {
            get { return _isFieldworkExperienceSchoolsSupported; }
            set { _isFieldworkExperienceSchoolsSupported = value; }
        }

        private bool _isFieldworkTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsFieldworkTypeDescriptorSupported
        {
            get { return _isFieldworkTypeDescriptorSupported; }
            set { _isFieldworkTypeDescriptorSupported = value; }
        }

        private bool _isHoursCompletedSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsHoursCompletedSupported
        {
            get { return _isHoursCompletedSupported; }
            set { _isHoursCompletedSupported = value; }
        }

        private bool _isProgramGatewayDescriptorSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsProgramGatewayDescriptorSupported
        {
            get { return _isProgramGatewayDescriptorSupported; }
            set { _isProgramGatewayDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.IFieldworkExperienceSchool, bool> _isFieldworkExperienceSchoolIncluded;
        Func<Entities.Common.TPDM.IFieldworkExperienceSchool, bool> Entities.Common.TPDM.IFieldworkExperienceSynchronizationSourceSupport.IsFieldworkExperienceSchoolIncluded
        {
            get { return _isFieldworkExperienceSchoolIncluded; }
            set { _isFieldworkExperienceSchoolIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperienceCoteaching table of the FieldworkExperience aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceCoteaching : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IFieldworkExperienceCoteaching, Entities.Common.Records.TPDM.IFieldworkExperienceCoteachingRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public FieldworkExperienceCoteaching()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual FieldworkExperience FieldworkExperience { get; set; }

        Entities.Common.TPDM.IFieldworkExperience IFieldworkExperienceCoteaching.FieldworkExperience
        {
            get { return FieldworkExperience; }
            set { FieldworkExperience = (FieldworkExperience) value; }
        }

        DateTime Entities.Common.Records.TPDM.IFieldworkExperienceCoteachingRecord.BeginDate
        {
            get { return ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).BeginDate; }
            set { ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).BeginDate = value; }
        }

        string Entities.Common.Records.TPDM.IFieldworkExperienceCoteachingRecord.FieldworkIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).FieldworkIdentifier; }
            set { ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).FieldworkIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IFieldworkExperienceCoteachingRecord.StudentUSI
        {
            get { return ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).StudentUSI; }
            set { ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).StudentUSI = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime CoteachingBeginDate 
        {
            get { return _coteachingBeginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _coteachingBeginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _coteachingBeginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? CoteachingEndDate 
        {
            get { return _coteachingEndDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _coteachingEndDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _coteachingEndDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _coteachingEndDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (FieldworkExperience as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkExperienceCoteaching)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkExperienceCoteaching) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            FieldworkExperience = (FieldworkExperience) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCoteachingBeginDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport.IsCoteachingBeginDateSupported
        {
            get { return _isCoteachingBeginDateSupported; }
            set { _isCoteachingBeginDateSupported = value; }
        }

        private bool _isCoteachingEndDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkExperienceCoteachingSynchronizationSourceSupport.IsCoteachingEndDateSupported
        {
            get { return _isCoteachingEndDateSupported; }
            set { _isCoteachingEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperienceSchool table of the FieldworkExperience aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceSchool : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IFieldworkExperienceSchool, Entities.Common.Records.TPDM.IFieldworkExperienceSchoolRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkExperienceSchoolSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public FieldworkExperienceSchool()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual FieldworkExperience FieldworkExperience { get; set; }

        Entities.Common.TPDM.IFieldworkExperience IFieldworkExperienceSchool.FieldworkExperience
        {
            get { return FieldworkExperience; }
            set { FieldworkExperience = (FieldworkExperience) value; }
        }

        DateTime Entities.Common.Records.TPDM.IFieldworkExperienceSchoolRecord.BeginDate
        {
            get { return ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).BeginDate; }
            set { ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).BeginDate = value; }
        }

        string Entities.Common.Records.TPDM.IFieldworkExperienceSchoolRecord.FieldworkIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).FieldworkIdentifier; }
            set { ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).FieldworkIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IFieldworkExperienceSchoolRecord.StudentUSI
        {
            get { return ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).StudentUSI; }
            set { ((Entities.Common.Records.TPDM.IFieldworkExperienceRecord) FieldworkExperience).StudentUSI = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int SchoolId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData SchoolReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the School resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperienceSchool.SchoolResourceId
        {
            get { return SchoolReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (FieldworkExperience as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("SchoolId", SchoolId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkExperienceSchool)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkExperienceSchool) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            FieldworkExperience = (FieldworkExperience) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: FieldworkExperienceSectionAssociation

namespace EdFi.Ods.Entities.NHibernate.FieldworkExperienceSectionAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="FieldworkExperienceSectionAssociation"/> entity.
    /// </summary>
    public class FieldworkExperienceSectionAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime BeginDate { get; set; }
        public virtual string FieldworkIdentifier { get; set; }
        public virtual string LocalCourseCode { get; set; }
        public virtual int SchoolId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string SectionIdentifier { get; set; }
        public virtual string SessionName { get; set; }
        public virtual int StudentUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FieldworkIdentifier", FieldworkIdentifier);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("StudentUSI", StudentUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkExperienceSectionAssociation table of the FieldworkExperienceSectionAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkExperienceSectionAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IFieldworkExperienceSectionAssociation, Entities.Common.Records.TPDM.IFieldworkExperienceSectionAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkExperienceSectionAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public FieldworkExperienceSectionAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string FieldworkIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string LocalCourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SchoolId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SectionIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SessionName  { get; set; }
        [Display(Name="StudentUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Student")]
        public virtual int StudentUSI 
        {
            get
            {
                if (_studentUSI == default(int))
                    _studentUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Student", _studentUniqueId);

                return _studentUSI;
            } 
            set
            {
                _studentUSI = value;
            }
        }

        private int _studentUSI;
        private string _studentUniqueId;

        [RequiredWithNonDefault]
        public virtual string StudentUniqueId
        {
            get
            {
                if (_studentUniqueId == null)
                    _studentUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Student", _studentUSI);
                    
                return _studentUniqueId;
            }
            set
            {
                if (_studentUniqueId != value)
                        _studentUSI = default(int);

                _studentUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.FieldworkExperienceAggregate.TPDM.FieldworkExperienceReferenceData FieldworkExperienceReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the FieldworkExperience discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.FieldworkExperienceDiscriminator
        {
            get { return FieldworkExperienceReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the FieldworkExperience resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.FieldworkExperienceResourceId
        {
            get { return FieldworkExperienceReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SectionAggregate.EdFi.SectionReferenceData SectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Section discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SectionDiscriminator
        {
            get { return SectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Section resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IFieldworkExperienceSectionAssociation.SectionResourceId
        {
            get { return SectionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("FieldworkIdentifier", FieldworkIdentifier);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("StudentUSI", StudentUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkExperienceSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkExperienceSectionAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: FieldworkTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.FieldworkTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FieldworkTypeDescriptor table of the FieldworkTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FieldworkTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IFieldworkTypeDescriptor, Entities.Common.Records.TPDM.IFieldworkTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int FieldworkTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FieldworkTypeDescriptorId", FieldworkTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFieldworkTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFieldworkTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IFieldworkTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: FundingSourceDescriptor

namespace EdFi.Ods.Entities.NHibernate.FundingSourceDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.FundingSourceDescriptor table of the FundingSourceDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class FundingSourceDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IFundingSourceDescriptor, Entities.Common.Records.TPDM.IFundingSourceDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int FundingSourceDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FundingSourceDescriptorId", FundingSourceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IFundingSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IFundingSourceDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IFundingSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: GenderDescriptor

namespace EdFi.Ods.Entities.NHibernate.GenderDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.GenderDescriptor table of the GenderDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class GenderDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IGenderDescriptor, Entities.Common.Records.TPDM.IGenderDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int GenderDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("GenderDescriptorId", GenderDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IGenderDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IGenderDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IGenderDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Goal

namespace EdFi.Ods.Entities.NHibernate.GoalAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Goal"/> entity.
    /// </summary>
    public class GoalReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime AssignmentDate { get; set; }
        public virtual string GoalTitle { get; set; }
        public virtual string PersonId { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AssignmentDate", AssignmentDate);
            keyValues.Add("GoalTitle", GoalTitle);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Goal table of the Goal aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Goal : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IGoal, Entities.Common.Records.TPDM.IGoalRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IGoalSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Goal()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime AssignmentDate 
        {
            get { return _assignmentDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _assignmentDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _assignmentDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string GoalTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(1024), NoDangerousText]
        public virtual string Comments  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? CompletedDate 
        {
            get { return _completedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _completedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _completedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _completedDate;
        
        public virtual bool? CompletedIndicator  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? DueDate 
        {
            get { return _dueDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _dueDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _dueDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _dueDate;
        
        public virtual int? EducationOrganizationId  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string EvaluationElementTitle  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        public virtual int? EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int?))
                    _evaluationPeriodDescriptorId = string.IsNullOrWhiteSpace(_evaluationPeriodDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int? _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = _evaluationPeriodDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId.Value);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int?);
            }
        }
        [StringLength(50), NoDangerousText]
        public virtual string EvaluationTitle  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string GoalDescription  { get; set; }
        public virtual int? GoalTypeDescriptorId 
        {
            get
            {
                if (_goalTypeDescriptorId == default(int?))
                    _goalTypeDescriptorId = string.IsNullOrWhiteSpace(_goalTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GoalTypeDescriptor", _goalTypeDescriptor);

                return _goalTypeDescriptorId;
            } 
            set
            {
                _goalTypeDescriptorId = value;
                _goalTypeDescriptor = null;
            }
        }

        private int? _goalTypeDescriptorId;
        private string _goalTypeDescriptor;

        public virtual string GoalTypeDescriptor
        {
            get
            {
                if (_goalTypeDescriptor == null)
                    _goalTypeDescriptor = _goalTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GoalTypeDescriptor", _goalTypeDescriptorId.Value);
                    
                return _goalTypeDescriptor;
            }
            set
            {
                _goalTypeDescriptor = value;
                _goalTypeDescriptorId = default(int?);
            }
        }
        [StringLength(50), NoDangerousText]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        public virtual int? PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int?))
                    _performanceEvaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_performanceEvaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int? _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = _performanceEvaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId.Value);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int?);
            }
        }
        public virtual short? SchoolYear  { get; set; }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IGoal.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IGoal.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IGoal.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IGoal.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "GoalTypeDescriptor", new LookupColumnDetails { PropertyName = "GoalTypeDescriptorId", LookupTypeName = "GoalTypeDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AssignmentDate", AssignmentDate);
            keyValues.Add("GoalTitle", GoalTitle);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IGoal)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IGoal) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCommentsSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCommentsSupported
        {
            get { return _isCommentsSupported; }
            set { _isCommentsSupported = value; }
        }

        private bool _isCompletedDateSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCompletedDateSupported
        {
            get { return _isCompletedDateSupported; }
            set { _isCompletedDateSupported = value; }
        }

        private bool _isCompletedIndicatorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsCompletedIndicatorSupported
        {
            get { return _isCompletedIndicatorSupported; }
            set { _isCompletedIndicatorSupported = value; }
        }

        private bool _isDueDateSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsDueDateSupported
        {
            get { return _isDueDateSupported; }
            set { _isDueDateSupported = value; }
        }

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEvaluationElementTitleSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationElementTitleSupported
        {
            get { return _isEvaluationElementTitleSupported; }
            set { _isEvaluationElementTitleSupported = value; }
        }

        private bool _isEvaluationObjectiveTitleSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationObjectiveTitleSupported
        {
            get { return _isEvaluationObjectiveTitleSupported; }
            set { _isEvaluationObjectiveTitleSupported = value; }
        }

        private bool _isEvaluationPeriodDescriptorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationPeriodDescriptorSupported
        {
            get { return _isEvaluationPeriodDescriptorSupported; }
            set { _isEvaluationPeriodDescriptorSupported = value; }
        }

        private bool _isEvaluationTitleSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsEvaluationTitleSupported
        {
            get { return _isEvaluationTitleSupported; }
            set { _isEvaluationTitleSupported = value; }
        }

        private bool _isGoalDescriptionSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsGoalDescriptionSupported
        {
            get { return _isGoalDescriptionSupported; }
            set { _isGoalDescriptionSupported = value; }
        }

        private bool _isGoalTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsGoalTypeDescriptorSupported
        {
            get { return _isGoalTypeDescriptorSupported; }
            set { _isGoalTypeDescriptorSupported = value; }
        }

        private bool _isPerformanceEvaluationTitleSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsPerformanceEvaluationTitleSupported
        {
            get { return _isPerformanceEvaluationTitleSupported; }
            set { _isPerformanceEvaluationTitleSupported = value; }
        }

        private bool _isPerformanceEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsPerformanceEvaluationTypeDescriptorSupported
        {
            get { return _isPerformanceEvaluationTypeDescriptorSupported; }
            set { _isPerformanceEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.IGoalSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: GoalTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.GoalTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.GoalTypeDescriptor table of the GoalTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class GoalTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IGoalTypeDescriptor, Entities.Common.Records.TPDM.IGoalTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int GoalTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("GoalTypeDescriptorId", GoalTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IGoalTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IGoalTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IGoalTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: GraduationPlan

namespace EdFi.Ods.Entities.NHibernate.GraduationPlanAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.GraduationPlanRequiredCertification table of the GraduationPlan aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class GraduationPlanRequiredCertification : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IGraduationPlanRequiredCertification, Entities.Common.Records.TPDM.IGraduationPlanRequiredCertificationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public GraduationPlanRequiredCertification()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.GraduationPlan GraduationPlan { get; set; }

        Entities.Common.TPDM.IGraduationPlanExtension IGraduationPlanRequiredCertification.GraduationPlanExtension
        {
            get { return (IGraduationPlanExtension) GraduationPlan.Extensions["TPDM"]; }
            set { GraduationPlan.Extensions["TPDM"] = value; }
        }

        int Entities.Common.Records.TPDM.IGraduationPlanRequiredCertificationRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.EdFi.IGraduationPlanRecord) GraduationPlan).EducationOrganizationId; }
            set { ((Entities.Common.Records.EdFi.IGraduationPlanRecord) GraduationPlan).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IGraduationPlanRequiredCertificationRecord.GraduationPlanTypeDescriptorId
        {
            get { return ((Entities.Common.Records.EdFi.IGraduationPlanRecord) GraduationPlan).GraduationPlanTypeDescriptorId; }
            set { ((Entities.Common.Records.EdFi.IGraduationPlanRecord) GraduationPlan).GraduationPlanTypeDescriptorId = value; }
        }

        short Entities.Common.Records.TPDM.IGraduationPlanRequiredCertificationRecord.GraduationSchoolYear
        {
            get { return ((Entities.Common.Records.EdFi.IGraduationPlanRecord) GraduationPlan).GraduationSchoolYear; }
            set { ((Entities.Common.Records.EdFi.IGraduationPlanRecord) GraduationPlan).GraduationSchoolYear = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string CertificationTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(60), NoDangerousText]
        public virtual string CertificationIdentifier  { get; set; }
        public virtual int? CertificationRouteDescriptorId 
        {
            get
            {
                if (_certificationRouteDescriptorId == default(int?))
                    _certificationRouteDescriptorId = string.IsNullOrWhiteSpace(_certificationRouteDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CertificationRouteDescriptor", _certificationRouteDescriptor);

                return _certificationRouteDescriptorId;
            } 
            set
            {
                _certificationRouteDescriptorId = value;
                _certificationRouteDescriptor = null;
            }
        }

        private int? _certificationRouteDescriptorId;
        private string _certificationRouteDescriptor;

        public virtual string CertificationRouteDescriptor
        {
            get
            {
                if (_certificationRouteDescriptor == null)
                    _certificationRouteDescriptor = _certificationRouteDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CertificationRouteDescriptor", _certificationRouteDescriptorId.Value);
                    
                return _certificationRouteDescriptor;
            }
            set
            {
                _certificationRouteDescriptor = value;
                _certificationRouteDescriptorId = default(int?);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string Namespace  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CertificationAggregate.TPDM.CertificationReferenceData CertificationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Certification discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IGraduationPlanRequiredCertification.CertificationDiscriminator
        {
            get { return CertificationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Certification resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IGraduationPlanRequiredCertification.CertificationResourceId
        {
            get { return CertificationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CertificationRouteDescriptor", new LookupColumnDetails { PropertyName = "CertificationRouteDescriptorId", LookupTypeName = "CertificationRouteDescriptor"} },
                { "GraduationPlanTypeDescriptor", new LookupColumnDetails { PropertyName = "GraduationPlanTypeDescriptorId", LookupTypeName = "GraduationPlanTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (GraduationPlan as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CertificationTitle", CertificationTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IGraduationPlanRequiredCertification)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IGraduationPlanRequiredCertification) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            GraduationPlan = (EdFi.GraduationPlan) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCertificationIdentifierSupported = true;
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsCertificationIdentifierSupported
        {
            get { return _isCertificationIdentifierSupported; }
            set { _isCertificationIdentifierSupported = value; }
        }

        private bool _isCertificationRouteDescriptorSupported = true;
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsCertificationRouteDescriptorSupported
        {
            get { return _isCertificationRouteDescriptorSupported; }
            set { _isCertificationRouteDescriptorSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IGraduationPlanRequiredCertificationSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        // -----------------------------------------
    }

    /// <summary>
    /// An implicitly created entity extension class to enable entity mapping and sychronization behavior for the GraduationPlan entity's aggregate extensions.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class GraduationPlanExtension : IGraduationPlanExtension, IGraduationPlanExtensionSynchronizationSourceSupport, IChildEntity, IImplicitEntityExtension, IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        private EdFi.GraduationPlan _graduationPlan;

        Common.EdFi.IGraduationPlan IGraduationPlanExtension.GraduationPlan
        {
            get { return _graduationPlan; }
            set { _graduationPlan = (EdFi.GraduationPlan) value; }
        }

        private EdFi.GraduationPlan GraduationPlan
        {
            get { return (this as IGraduationPlanExtension).GraduationPlan as EdFi.GraduationPlan; }
        }

        bool IImplicitEntityExtension.IsEmpty()
        {
            return (true
                && ((IList<object>) _graduationPlan.AggregateExtensions["TPDM_GraduationPlanRequiredCertifications"]).Count == 0
            );
        }

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Collections
        // -------------------------------------------------------------
        ICollection<IGraduationPlanRequiredCertification> IGraduationPlanExtension.GraduationPlanRequiredCertifications
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, GraduationPlanRequiredCertification>((IList<object>) _graduationPlan.AggregateExtensions["TPDM_GraduationPlanRequiredCertifications"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (GraduationPlanRequiredCertification item in sourceList)
                    if (item.GraduationPlan == null)
                        item.GraduationPlan = this.GraduationPlan;
                // -------------------------------------------------------------

                var adaptedList = new CovariantCollectionAdapter<IGraduationPlanRequiredCertification, GraduationPlanRequiredCertification>(sourceList);

                return adaptedList;
            }
            set
            {
                _graduationPlan.AggregateExtensions["TPDM_GraduationPlanRequiredCertifications"] = value;
            }
        }
        // -------------------------------------------------------------

        void IMappable.Map(object target)
        {
            this.MapTo((IGraduationPlanExtension) target, null);
        }

        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((IGraduationPlanExtension) target);
        }

        void IChildEntity.SetParent(object value)
        {
            _graduationPlan = (EdFi.GraduationPlan)value;
        }

        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            return (_graduationPlan as IHasPrimaryKeyValues).GetPrimaryKeyValues();
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------
        bool IGraduationPlanExtensionSynchronizationSourceSupport.IsGraduationPlanRequiredCertificationsSupported { get; set; } = true;
        Func<IGraduationPlanRequiredCertification, bool> IGraduationPlanExtensionSynchronizationSourceSupport.IsGraduationPlanRequiredCertificationIncluded { get; set; }

        void IGetByExample.SuspendReferenceAssignmentCheck() { }
    }
}
// Aggregate: HireStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.HireStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.HireStatusDescriptor table of the HireStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class HireStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IHireStatusDescriptor, Entities.Common.Records.TPDM.IHireStatusDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int HireStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("HireStatusDescriptorId", HireStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IHireStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IHireStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IHireStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: HiringSourceDescriptor

namespace EdFi.Ods.Entities.NHibernate.HiringSourceDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.HiringSourceDescriptor table of the HiringSourceDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class HiringSourceDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IHiringSourceDescriptor, Entities.Common.Records.TPDM.IHiringSourceDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int HiringSourceDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("HiringSourceDescriptorId", HiringSourceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IHiringSourceDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IHiringSourceDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IHiringSourceDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: InstructionalSettingDescriptor

namespace EdFi.Ods.Entities.NHibernate.InstructionalSettingDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.InstructionalSettingDescriptor table of the InstructionalSettingDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class InstructionalSettingDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IInstructionalSettingDescriptor, Entities.Common.Records.TPDM.IInstructionalSettingDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int InstructionalSettingDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("InstructionalSettingDescriptorId", InstructionalSettingDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IInstructionalSettingDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IInstructionalSettingDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IInstructionalSettingDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: InternalExternalHireDescriptor

namespace EdFi.Ods.Entities.NHibernate.InternalExternalHireDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.InternalExternalHireDescriptor table of the InternalExternalHireDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class InternalExternalHireDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IInternalExternalHireDescriptor, Entities.Common.Records.TPDM.IInternalExternalHireDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IInternalExternalHireDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int InternalExternalHireDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("InternalExternalHireDescriptorId", InternalExternalHireDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IInternalExternalHireDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IInternalExternalHireDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IInternalExternalHireDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IInternalExternalHireDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IInternalExternalHireDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IInternalExternalHireDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IInternalExternalHireDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IInternalExternalHireDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IInternalExternalHireDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: LevelOfDegreeAwardedDescriptor

namespace EdFi.Ods.Entities.NHibernate.LevelOfDegreeAwardedDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.LevelOfDegreeAwardedDescriptor table of the LevelOfDegreeAwardedDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class LevelOfDegreeAwardedDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptor, Entities.Common.Records.TPDM.ILevelOfDegreeAwardedDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int LevelOfDegreeAwardedDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("LevelOfDegreeAwardedDescriptorId", LevelOfDegreeAwardedDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Entities.NHibernate.LocalEducationAgencyAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.LocalEducationAgencyExtension table of the LocalEducationAgency aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class LocalEducationAgencyExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ILocalEducationAgencyExtension, Entities.Common.Records.TPDM.ILocalEducationAgencyExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ILocalEducationAgencyExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public LocalEducationAgencyExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.LocalEducationAgency LocalEducationAgency { get; set; }

        Entities.Common.EdFi.ILocalEducationAgency ILocalEducationAgencyExtension.LocalEducationAgency
        {
            get { return LocalEducationAgency; }
            set { LocalEducationAgency = (EdFi.LocalEducationAgency) value; }
        }

        int Entities.Common.Records.TPDM.ILocalEducationAgencyExtensionRecord.LocalEducationAgencyId
        {
            get { return ((Entities.Common.Records.EdFi.ILocalEducationAgencyRecord) LocalEducationAgency).LocalEducationAgencyId; }
            set { ((Entities.Common.Records.EdFi.ILocalEducationAgencyRecord) LocalEducationAgency).LocalEducationAgencyId = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (LocalEducationAgency as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ILocalEducationAgencyExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ILocalEducationAgencyExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            LocalEducationAgency = (EdFi.LocalEducationAgency) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.ILocalEducationAgencyExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ObjectiveRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.ObjectiveRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ObjectiveRatingLevelDescriptor table of the ObjectiveRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ObjectiveRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IObjectiveRatingLevelDescriptor, Entities.Common.Records.TPDM.IObjectiveRatingLevelDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ObjectiveRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ObjectiveRatingLevelDescriptorId", ObjectiveRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IObjectiveRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IObjectiveRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IObjectiveRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionExtension table of the OpenStaffPosition aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IOpenStaffPositionExtension, Entities.Common.Records.TPDM.IOpenStaffPositionExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public OpenStaffPositionExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.OpenStaffPosition OpenStaffPosition { get; set; }

        Entities.Common.EdFi.IOpenStaffPosition IOpenStaffPositionExtension.OpenStaffPosition
        {
            get { return OpenStaffPosition; }
            set { OpenStaffPosition = (EdFi.OpenStaffPosition) value; }
        }

        int Entities.Common.Records.TPDM.IOpenStaffPositionExtensionRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.EdFi.IOpenStaffPositionRecord) OpenStaffPosition).EducationOrganizationId; }
            set { ((Entities.Common.Records.EdFi.IOpenStaffPositionRecord) OpenStaffPosition).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IOpenStaffPositionExtensionRecord.RequisitionNumber
        {
            get { return ((Entities.Common.Records.EdFi.IOpenStaffPositionRecord) OpenStaffPosition).RequisitionNumber; }
            set { ((Entities.Common.Records.EdFi.IOpenStaffPositionRecord) OpenStaffPosition).RequisitionNumber = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-9.99", "9.99")]
        public virtual decimal? FullTimeEquivalency  { get; set; }
        public virtual int? FundingSourceDescriptorId 
        {
            get
            {
                if (_fundingSourceDescriptorId == default(int?))
                    _fundingSourceDescriptorId = string.IsNullOrWhiteSpace(_fundingSourceDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FundingSourceDescriptor", _fundingSourceDescriptor);

                return _fundingSourceDescriptorId;
            } 
            set
            {
                _fundingSourceDescriptorId = value;
                _fundingSourceDescriptor = null;
            }
        }

        private int? _fundingSourceDescriptorId;
        private string _fundingSourceDescriptor;

        public virtual string FundingSourceDescriptor
        {
            get
            {
                if (_fundingSourceDescriptor == null)
                    _fundingSourceDescriptor = _fundingSourceDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FundingSourceDescriptor", _fundingSourceDescriptorId.Value);
                    
                return _fundingSourceDescriptor;
            }
            set
            {
                _fundingSourceDescriptor = value;
                _fundingSourceDescriptorId = default(int?);
            }
        }
        public virtual bool? HighNeedAcademicSubject  { get; set; }
        public virtual bool? IsActive  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? MaxSalary  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? MinSalary  { get; set; }
        public virtual int? OpenStaffPositionReasonDescriptorId 
        {
            get
            {
                if (_openStaffPositionReasonDescriptorId == default(int?))
                    _openStaffPositionReasonDescriptorId = string.IsNullOrWhiteSpace(_openStaffPositionReasonDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("OpenStaffPositionReasonDescriptor", _openStaffPositionReasonDescriptor);

                return _openStaffPositionReasonDescriptorId;
            } 
            set
            {
                _openStaffPositionReasonDescriptorId = value;
                _openStaffPositionReasonDescriptor = null;
            }
        }

        private int? _openStaffPositionReasonDescriptorId;
        private string _openStaffPositionReasonDescriptor;

        public virtual string OpenStaffPositionReasonDescriptor
        {
            get
            {
                if (_openStaffPositionReasonDescriptor == null)
                    _openStaffPositionReasonDescriptor = _openStaffPositionReasonDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("OpenStaffPositionReasonDescriptor", _openStaffPositionReasonDescriptorId.Value);
                    
                return _openStaffPositionReasonDescriptor;
            }
            set
            {
                _openStaffPositionReasonDescriptor = value;
                _openStaffPositionReasonDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string PositionControlNumber  { get; set; }
        public virtual short? SchoolYear  { get; set; }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? TotalBudgeted  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IOpenStaffPositionExtension.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FundingSourceDescriptor", new LookupColumnDetails { PropertyName = "FundingSourceDescriptorId", LookupTypeName = "FundingSourceDescriptor"} },
                { "OpenStaffPositionReasonDescriptor", new LookupColumnDetails { PropertyName = "OpenStaffPositionReasonDescriptorId", LookupTypeName = "OpenStaffPositionReasonDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (OpenStaffPosition as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            OpenStaffPosition = (EdFi.OpenStaffPosition) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFullTimeEquivalencySupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsFullTimeEquivalencySupported
        {
            get { return _isFullTimeEquivalencySupported; }
            set { _isFullTimeEquivalencySupported = value; }
        }

        private bool _isFundingSourceDescriptorSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsFundingSourceDescriptorSupported
        {
            get { return _isFundingSourceDescriptorSupported; }
            set { _isFundingSourceDescriptorSupported = value; }
        }

        private bool _isHighNeedAcademicSubjectSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsHighNeedAcademicSubjectSupported
        {
            get { return _isHighNeedAcademicSubjectSupported; }
            set { _isHighNeedAcademicSubjectSupported = value; }
        }

        private bool _isIsActiveSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsIsActiveSupported
        {
            get { return _isIsActiveSupported; }
            set { _isIsActiveSupported = value; }
        }

        private bool _isMaxSalarySupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsMaxSalarySupported
        {
            get { return _isMaxSalarySupported; }
            set { _isMaxSalarySupported = value; }
        }

        private bool _isMinSalarySupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsMinSalarySupported
        {
            get { return _isMinSalarySupported; }
            set { _isMinSalarySupported = value; }
        }

        private bool _isOpenStaffPositionReasonDescriptorSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsOpenStaffPositionReasonDescriptorSupported
        {
            get { return _isOpenStaffPositionReasonDescriptorSupported; }
            set { _isOpenStaffPositionReasonDescriptorSupported = value; }
        }

        private bool _isPositionControlNumberSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsPositionControlNumberSupported
        {
            get { return _isPositionControlNumberSupported; }
            set { _isPositionControlNumberSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        private bool _isTotalBudgetedSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionExtensionSynchronizationSourceSupport.IsTotalBudgetedSupported
        {
            get { return _isTotalBudgetedSupported; }
            set { _isTotalBudgetedSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPositionEvent

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="OpenStaffPositionEvent"/> entity.
    /// </summary>
    public class OpenStaffPositionEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EventDate { get; set; }
        public virtual int OpenStaffPositionEventTypeDescriptorId { get; set; }
        public virtual string RequisitionNumber { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("OpenStaffPositionEventTypeDescriptorId", OpenStaffPositionEventTypeDescriptorId);
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEvent table of the OpenStaffPositionEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IOpenStaffPositionEvent, Entities.Common.Records.TPDM.IOpenStaffPositionEventRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public OpenStaffPositionEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int OpenStaffPositionEventTypeDescriptorId 
        {
            get
            {
                if (_openStaffPositionEventTypeDescriptorId == default(int))
                    _openStaffPositionEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("OpenStaffPositionEventTypeDescriptor", _openStaffPositionEventTypeDescriptor);

                return _openStaffPositionEventTypeDescriptorId;
            } 
            set
            {
                _openStaffPositionEventTypeDescriptorId = value;
                _openStaffPositionEventTypeDescriptor = null;
            }
        }

        private int _openStaffPositionEventTypeDescriptorId;
        private string _openStaffPositionEventTypeDescriptor;

        public virtual string OpenStaffPositionEventTypeDescriptor
        {
            get
            {
                if (_openStaffPositionEventTypeDescriptor == null)
                    _openStaffPositionEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("OpenStaffPositionEventTypeDescriptor", _openStaffPositionEventTypeDescriptorId);
                    
                return _openStaffPositionEventTypeDescriptor;
            }
            set
            {
                _openStaffPositionEventTypeDescriptor = value;
                _openStaffPositionEventTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(20), NoDangerousText, NoWhitespace]
        public virtual string RequisitionNumber  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? OpenStaffPositionEventStatusDescriptorId 
        {
            get
            {
                if (_openStaffPositionEventStatusDescriptorId == default(int?))
                    _openStaffPositionEventStatusDescriptorId = string.IsNullOrWhiteSpace(_openStaffPositionEventStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("OpenStaffPositionEventStatusDescriptor", _openStaffPositionEventStatusDescriptor);

                return _openStaffPositionEventStatusDescriptorId;
            } 
            set
            {
                _openStaffPositionEventStatusDescriptorId = value;
                _openStaffPositionEventStatusDescriptor = null;
            }
        }

        private int? _openStaffPositionEventStatusDescriptorId;
        private string _openStaffPositionEventStatusDescriptor;

        public virtual string OpenStaffPositionEventStatusDescriptor
        {
            get
            {
                if (_openStaffPositionEventStatusDescriptor == null)
                    _openStaffPositionEventStatusDescriptor = _openStaffPositionEventStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("OpenStaffPositionEventStatusDescriptor", _openStaffPositionEventStatusDescriptorId.Value);
                    
                return _openStaffPositionEventStatusDescriptor;
            }
            set
            {
                _openStaffPositionEventStatusDescriptor = value;
                _openStaffPositionEventStatusDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.OpenStaffPositionAggregate.EdFi.OpenStaffPositionReferenceData OpenStaffPositionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IOpenStaffPositionEvent.OpenStaffPositionDiscriminator
        {
            get { return OpenStaffPositionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the OpenStaffPosition resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IOpenStaffPositionEvent.OpenStaffPositionResourceId
        {
            get { return OpenStaffPositionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "OpenStaffPositionEventStatusDescriptor", new LookupColumnDetails { PropertyName = "OpenStaffPositionEventStatusDescriptorId", LookupTypeName = "OpenStaffPositionEventStatusDescriptor"} },
                { "OpenStaffPositionEventTypeDescriptor", new LookupColumnDetails { PropertyName = "OpenStaffPositionEventTypeDescriptorId", LookupTypeName = "OpenStaffPositionEventTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("OpenStaffPositionEventTypeDescriptorId", OpenStaffPositionEventTypeDescriptorId);
            keyValues.Add("RequisitionNumber", RequisitionNumber);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isOpenStaffPositionEventStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventSynchronizationSourceSupport.IsOpenStaffPositionEventStatusDescriptorSupported
        {
            get { return _isOpenStaffPositionEventStatusDescriptorSupported; }
            set { _isOpenStaffPositionEventStatusDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPositionEventStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionEventStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEventStatusDescriptor table of the OpenStaffPositionEventStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor, Entities.Common.Records.TPDM.IOpenStaffPositionEventStatusDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int OpenStaffPositionEventStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("OpenStaffPositionEventStatusDescriptorId", OpenStaffPositionEventStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPositionEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionEventTypeDescriptor table of the OpenStaffPositionEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor, Entities.Common.Records.TPDM.IOpenStaffPositionEventTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int OpenStaffPositionEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("OpenStaffPositionEventTypeDescriptorId", OpenStaffPositionEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: OpenStaffPositionReasonDescriptor

namespace EdFi.Ods.Entities.NHibernate.OpenStaffPositionReasonDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.OpenStaffPositionReasonDescriptor table of the OpenStaffPositionReasonDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class OpenStaffPositionReasonDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor, Entities.Common.Records.TPDM.IOpenStaffPositionReasonDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int OpenStaffPositionReasonDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("OpenStaffPositionReasonDescriptorId", OpenStaffPositionReasonDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IOpenStaffPositionReasonDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PerformanceEvaluation

namespace EdFi.Ods.Entities.NHibernate.PerformanceEvaluationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="PerformanceEvaluation"/> entity.
    /// </summary>
    public class PerformanceEvaluationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluation table of the PerformanceEvaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IPerformanceEvaluation, Entities.Common.Records.TPDM.IPerformanceEvaluationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluation()
        {
            PerformanceEvaluationGradeLevels = new HashSet<PerformanceEvaluationGradeLevel>();
            PerformanceEvaluationProgramGateways = new HashSet<PerformanceEvaluationProgramGateway>();
            PerformanceEvaluationRatingLevels = new HashSet<PerformanceEvaluationRatingLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int?))
                    _academicSubjectDescriptorId = string.IsNullOrWhiteSpace(_academicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int? _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = _academicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId.Value);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluation.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluation.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel> _performanceEvaluationGradeLevels;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel> _performanceEvaluationGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel> PerformanceEvaluationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationGradeLevels)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationGradeLevels;
            }
            set
            {
                _performanceEvaluationGradeLevels = value;
                _performanceEvaluationGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationGradeLevels)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationGradeLevelsCovariant;
            }
            set
            {
                PerformanceEvaluationGradeLevels = new HashSet<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel>(value.Cast<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationGradeLevel>());
            }
        }


        private ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway> _performanceEvaluationProgramGateways;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway> _performanceEvaluationProgramGatewaysCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway> PerformanceEvaluationProgramGateways
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationProgramGateways)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationProgramGateways;
            }
            set
            {
                _performanceEvaluationProgramGateways = value;
                _performanceEvaluationProgramGatewaysCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationProgramGateways
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationProgramGateways)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationProgramGatewaysCovariant;
            }
            set
            {
                PerformanceEvaluationProgramGateways = new HashSet<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway>(value.Cast<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationProgramGateway>());
            }
        }


        private ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel> _performanceEvaluationRatingLevels;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel> _performanceEvaluationRatingLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel> PerformanceEvaluationRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingLevels)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingLevels;
            }
            set
            {
                _performanceEvaluationRatingLevels = value;
                _performanceEvaluationRatingLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel> Entities.Common.TPDM.IPerformanceEvaluation.PerformanceEvaluationRatingLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingLevels)
                    if (item.PerformanceEvaluation == null)
                        item.PerformanceEvaluation = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingLevelsCovariant;
            }
            set
            {
                PerformanceEvaluationRatingLevels = new HashSet<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel>(value.Cast<Entities.NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationRatingLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported
        {
            get { return _isAcademicSubjectDescriptorSupported; }
            set { _isAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isPerformanceEvaluationGradeLevelsSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationGradeLevelsSupported
        {
            get { return _isPerformanceEvaluationGradeLevelsSupported; }
            set { _isPerformanceEvaluationGradeLevelsSupported = value; }
        }

        private bool _isPerformanceEvaluationProgramGatewaysSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationProgramGatewaysSupported
        {
            get { return _isPerformanceEvaluationProgramGatewaysSupported; }
            set { _isPerformanceEvaluationProgramGatewaysSupported = value; }
        }

        private bool _isPerformanceEvaluationRatingLevelsSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelsSupported
        {
            get { return _isPerformanceEvaluationRatingLevelsSupported; }
            set { _isPerformanceEvaluationRatingLevelsSupported = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, bool> _isPerformanceEvaluationGradeLevelIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationGradeLevelIncluded
        {
            get { return _isPerformanceEvaluationGradeLevelIncluded; }
            set { _isPerformanceEvaluationGradeLevelIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, bool> _isPerformanceEvaluationProgramGatewayIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationProgramGatewayIncluded
        {
            get { return _isPerformanceEvaluationProgramGatewayIncluded; }
            set { _isPerformanceEvaluationProgramGatewayIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, bool> _isPerformanceEvaluationRatingLevelIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, bool> Entities.Common.TPDM.IPerformanceEvaluationSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelIncluded
        {
            get { return _isPerformanceEvaluationRatingLevelIncluded; }
            set { _isPerformanceEvaluationRatingLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationGradeLevel table of the PerformanceEvaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationGradeLevel, Entities.Common.Records.TPDM.IPerformanceEvaluationGradeLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluation PerformanceEvaluation { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluation IPerformanceEvaluationGradeLevel.PerformanceEvaluation
        {
            get { return PerformanceEvaluation; }
            set { PerformanceEvaluation = (PerformanceEvaluation) value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationGradeLevelRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationGradeLevelRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationGradeLevelRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationGradeLevelRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTypeDescriptorId = value; }
        }

        short Entities.Common.Records.TPDM.IPerformanceEvaluationGradeLevelRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationGradeLevelRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluation = (PerformanceEvaluation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationProgramGateway table of the PerformanceEvaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationProgramGateway : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationProgramGateway, Entities.Common.Records.TPDM.IPerformanceEvaluationProgramGatewayRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationProgramGateway()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluation PerformanceEvaluation { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluation IPerformanceEvaluationProgramGateway.PerformanceEvaluation
        {
            get { return PerformanceEvaluation; }
            set { PerformanceEvaluation = (PerformanceEvaluation) value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationProgramGatewayRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationProgramGatewayRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationProgramGatewayRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationProgramGatewayRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTypeDescriptorId = value; }
        }

        short Entities.Common.Records.TPDM.IPerformanceEvaluationProgramGatewayRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationProgramGatewayRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramGatewayDescriptorId 
        {
            get
            {
                if (_programGatewayDescriptorId == default(int))
                    _programGatewayDescriptorId = DescriptorsCache.GetCache().GetId("ProgramGatewayDescriptor", _programGatewayDescriptor);

                return _programGatewayDescriptorId;
            } 
            set
            {
                _programGatewayDescriptorId = value;
                _programGatewayDescriptor = null;
            }
        }

        private int _programGatewayDescriptorId;
        private string _programGatewayDescriptor;

        public virtual string ProgramGatewayDescriptor
        {
            get
            {
                if (_programGatewayDescriptor == null)
                    _programGatewayDescriptor = DescriptorsCache.GetCache().GetValue("ProgramGatewayDescriptor", _programGatewayDescriptorId);
                    
                return _programGatewayDescriptor;
            }
            set
            {
                _programGatewayDescriptor = value;
                _programGatewayDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ProgramGatewayDescriptor", new LookupColumnDetails { PropertyName = "ProgramGatewayDescriptorId", LookupTypeName = "ProgramGatewayDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("ProgramGatewayDescriptorId", ProgramGatewayDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationProgramGateway)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationProgramGateway) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluation = (PerformanceEvaluation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingLevel table of the PerformanceEvaluation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationRatingLevel, Entities.Common.Records.TPDM.IPerformanceEvaluationRatingLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRatingLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluation PerformanceEvaluation { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluation IPerformanceEvaluationRatingLevel.PerformanceEvaluation
        {
            get { return PerformanceEvaluation; }
            set { PerformanceEvaluation = (PerformanceEvaluation) value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingLevelRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingLevelRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingLevelRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingLevelRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).PerformanceEvaluationTypeDescriptorId = value; }
        }

        short Entities.Common.Records.TPDM.IPerformanceEvaluationRatingLevelRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingLevelRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRecord) PerformanceEvaluation).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_evaluationRatingLevelDescriptorId == default(int))
                    _evaluationRatingLevelDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptor);

                return _evaluationRatingLevelDescriptorId;
            } 
            set
            {
                _evaluationRatingLevelDescriptorId = value;
                _evaluationRatingLevelDescriptor = null;
            }
        }

        private int _evaluationRatingLevelDescriptorId;
        private string _evaluationRatingLevelDescriptor;

        public virtual string EvaluationRatingLevelDescriptor
        {
            get
            {
                if (_evaluationRatingLevelDescriptor == null)
                    _evaluationRatingLevelDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationRatingLevelDescriptor", _evaluationRatingLevelDescriptorId);
                    
                return _evaluationRatingLevelDescriptor;
            }
            set
            {
                _evaluationRatingLevelDescriptor = value;
                _evaluationRatingLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MaxRating  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? MinRating  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "EvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "EvaluationRatingLevelDescriptorId", LookupTypeName = "EvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EvaluationRatingLevelDescriptorId", EvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluation = (PerformanceEvaluation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMaxRatingSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport.IsMaxRatingSupported
        {
            get { return _isMaxRatingSupported; }
            set { _isMaxRatingSupported = value; }
        }

        private bool _isMinRatingSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelSynchronizationSourceSupport.IsMinRatingSupported
        {
            get { return _isMinRatingSupported; }
            set { _isMinRatingSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PerformanceEvaluationRating

namespace EdFi.Ods.Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="PerformanceEvaluationRating"/> entity.
    /// </summary>
    public class PerformanceEvaluationRatingReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRating table of the PerformanceEvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRating : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IPerformanceEvaluationRating, Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRating()
        {
            PerformanceEvaluationRatingResults = new HashSet<PerformanceEvaluationRatingResult>();
            PerformanceEvaluationRatingReviewers = new HashSet<PerformanceEvaluationRatingReviewer>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime ActualDate 
        {
            get { return _actualDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _actualDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _actualDate;
        
        public virtual int? ActualDuration  { get; set; }
        public virtual TimeSpan? ActualTime  { get; set; }
        public virtual bool? Announced  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string Comments  { get; set; }
        public virtual int? CoteachingStyleObservedDescriptorId 
        {
            get
            {
                if (_coteachingStyleObservedDescriptorId == default(int?))
                    _coteachingStyleObservedDescriptorId = string.IsNullOrWhiteSpace(_coteachingStyleObservedDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CoteachingStyleObservedDescriptor", _coteachingStyleObservedDescriptor);

                return _coteachingStyleObservedDescriptorId;
            } 
            set
            {
                _coteachingStyleObservedDescriptorId = value;
                _coteachingStyleObservedDescriptor = null;
            }
        }

        private int? _coteachingStyleObservedDescriptorId;
        private string _coteachingStyleObservedDescriptor;

        public virtual string CoteachingStyleObservedDescriptor
        {
            get
            {
                if (_coteachingStyleObservedDescriptor == null)
                    _coteachingStyleObservedDescriptor = _coteachingStyleObservedDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CoteachingStyleObservedDescriptor", _coteachingStyleObservedDescriptorId.Value);
                    
                return _coteachingStyleObservedDescriptor;
            }
            set
            {
                _coteachingStyleObservedDescriptor = value;
                _coteachingStyleObservedDescriptorId = default(int?);
            }
        }
        public virtual int? PerformanceEvaluationRatingLevelDescriptorId 
        {
            get
            {
                if (_performanceEvaluationRatingLevelDescriptorId == default(int?))
                    _performanceEvaluationRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_performanceEvaluationRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PerformanceEvaluationRatingLevelDescriptor", _performanceEvaluationRatingLevelDescriptor);

                return _performanceEvaluationRatingLevelDescriptorId;
            } 
            set
            {
                _performanceEvaluationRatingLevelDescriptorId = value;
                _performanceEvaluationRatingLevelDescriptor = null;
            }
        }

        private int? _performanceEvaluationRatingLevelDescriptorId;
        private string _performanceEvaluationRatingLevelDescriptor;

        public virtual string PerformanceEvaluationRatingLevelDescriptor
        {
            get
            {
                if (_performanceEvaluationRatingLevelDescriptor == null)
                    _performanceEvaluationRatingLevelDescriptor = _performanceEvaluationRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PerformanceEvaluationRatingLevelDescriptor", _performanceEvaluationRatingLevelDescriptorId.Value);
                    
                return _performanceEvaluationRatingLevelDescriptor;
            }
            set
            {
                _performanceEvaluationRatingLevelDescriptor = value;
                _performanceEvaluationRatingLevelDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? ScheduleDate 
        {
            get { return _scheduleDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _scheduleDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _scheduleDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _scheduleDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PerformanceEvaluationAggregate.TPDM.PerformanceEvaluationReferenceData PerformanceEvaluationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluation discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationDiscriminator
        {
            get { return PerformanceEvaluationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the PerformanceEvaluation resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationResourceId
        {
            get { return PerformanceEvaluationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IPerformanceEvaluationRating.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRating.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult> _performanceEvaluationRatingResults;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingResult> _performanceEvaluationRatingResultsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult> PerformanceEvaluationRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingResults)
                    if (item.PerformanceEvaluationRating == null)
                        item.PerformanceEvaluationRating = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingResults;
            }
            set
            {
                _performanceEvaluationRatingResults = value;
                _performanceEvaluationRatingResultsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingResult> Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationRatingResults
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingResults)
                    if (item.PerformanceEvaluationRating == null)
                        item.PerformanceEvaluationRating = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingResultsCovariant;
            }
            set
            {
                PerformanceEvaluationRatingResults = new HashSet<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult>(value.Cast<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingResult>());
            }
        }


        private ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer> _performanceEvaluationRatingReviewers;
        private ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer> _performanceEvaluationRatingReviewersCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer> PerformanceEvaluationRatingReviewers
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingReviewers)
                    if (item.PerformanceEvaluationRating == null)
                        item.PerformanceEvaluationRating = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingReviewers;
            }
            set
            {
                _performanceEvaluationRatingReviewers = value;
                _performanceEvaluationRatingReviewersCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer> Entities.Common.TPDM.IPerformanceEvaluationRating.PerformanceEvaluationRatingReviewers
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingReviewers)
                    if (item.PerformanceEvaluationRating == null)
                        item.PerformanceEvaluationRating = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingReviewersCovariant;
            }
            set
            {
                PerformanceEvaluationRatingReviewers = new HashSet<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer>(value.Cast<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewer>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CoteachingStyleObservedDescriptor", new LookupColumnDetails { PropertyName = "CoteachingStyleObservedDescriptorId", LookupTypeName = "CoteachingStyleObservedDescriptor"} },
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationRatingLevelDescriptorId", LookupTypeName = "PerformanceEvaluationRatingLevelDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRating)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRating) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isActualDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualDateSupported
        {
            get { return _isActualDateSupported; }
            set { _isActualDateSupported = value; }
        }

        private bool _isActualDurationSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualDurationSupported
        {
            get { return _isActualDurationSupported; }
            set { _isActualDurationSupported = value; }
        }

        private bool _isActualTimeSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsActualTimeSupported
        {
            get { return _isActualTimeSupported; }
            set { _isActualTimeSupported = value; }
        }

        private bool _isAnnouncedSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsAnnouncedSupported
        {
            get { return _isAnnouncedSupported; }
            set { _isAnnouncedSupported = value; }
        }

        private bool _isCommentsSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsCommentsSupported
        {
            get { return _isCommentsSupported; }
            set { _isCommentsSupported = value; }
        }

        private bool _isCoteachingStyleObservedDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsCoteachingStyleObservedDescriptorSupported
        {
            get { return _isCoteachingStyleObservedDescriptorSupported; }
            set { _isCoteachingStyleObservedDescriptorSupported = value; }
        }

        private bool _isPerformanceEvaluationRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported
        {
            get { return _isPerformanceEvaluationRatingLevelDescriptorSupported; }
            set { _isPerformanceEvaluationRatingLevelDescriptorSupported = value; }
        }

        private bool _isPerformanceEvaluationRatingResultsSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingResultsSupported
        {
            get { return _isPerformanceEvaluationRatingResultsSupported; }
            set { _isPerformanceEvaluationRatingResultsSupported = value; }
        }

        private bool _isPerformanceEvaluationRatingReviewersSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewersSupported
        {
            get { return _isPerformanceEvaluationRatingReviewersSupported; }
            set { _isPerformanceEvaluationRatingReviewersSupported = value; }
        }

        private bool _isScheduleDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsScheduleDateSupported
        {
            get { return _isScheduleDateSupported; }
            set { _isScheduleDateSupported = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, bool> _isPerformanceEvaluationRatingResultIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingResult, bool> Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingResultIncluded
        {
            get { return _isPerformanceEvaluationRatingResultIncluded; }
            set { _isPerformanceEvaluationRatingResultIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, bool> _isPerformanceEvaluationRatingReviewerIncluded;
        Func<Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, bool> Entities.Common.TPDM.IPerformanceEvaluationRatingSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewerIncluded
        {
            get { return _isPerformanceEvaluationRatingReviewerIncluded; }
            set { _isPerformanceEvaluationRatingReviewerIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingResult table of the PerformanceEvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingResult : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationRatingResult, Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingResultSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRatingResult()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluationRating PerformanceEvaluationRating { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluationRating IPerformanceEvaluationRatingResult.PerformanceEvaluationRating
        {
            get { return PerformanceEvaluationRating; }
            set { PerformanceEvaluationRating = (PerformanceEvaluationRating) value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PerformanceEvaluationTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord.PersonId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PersonId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PersonId = value; }
        }

        short Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord.SourceSystemDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).SourceSystemDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).SourceSystemDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingResultRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).TermDescriptorId = value; }
        }

        [DomainSignature]
        public virtual decimal Rating  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string RatingResultTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int))
                    _resultDatatypeTypeDescriptorId = DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluationRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("Rating", Rating);
            keyValues.Add("RatingResultTitle", RatingResultTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingResult)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingResult) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluationRating = (PerformanceEvaluationRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingResultSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingReviewer table of the PerformanceEvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewer : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer, Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRatingReviewer()
        {
           PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList = new HashSet<PerformanceEvaluationRatingReviewerReceivedTraining>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluationRating PerformanceEvaluationRating { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluationRating IPerformanceEvaluationRatingReviewer.PerformanceEvaluationRating
        {
            get { return PerformanceEvaluationRating; }
            set { PerformanceEvaluationRating = (PerformanceEvaluationRating) value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PerformanceEvaluationTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord.PersonId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PersonId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).PersonId = value; }
        }

        short Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord.SourceSystemDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).SourceSystemDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).SourceSystemDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingRecord) PerformanceEvaluationRating).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string FirstName  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string LastSurname  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(32), NoDangerousText]
        public virtual string ReviewerPersonId  { get; set; }
        public virtual int? ReviewerSourceSystemDescriptorId 
        {
            get
            {
                if (_reviewerSourceSystemDescriptorId == default(int?))
                    _reviewerSourceSystemDescriptorId = string.IsNullOrWhiteSpace(_reviewerSourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _reviewerSourceSystemDescriptor);

                return _reviewerSourceSystemDescriptorId;
            } 
            set
            {
                _reviewerSourceSystemDescriptorId = value;
                _reviewerSourceSystemDescriptor = null;
            }
        }

        private int? _reviewerSourceSystemDescriptorId;
        private string _reviewerSourceSystemDescriptor;

        public virtual string ReviewerSourceSystemDescriptor
        {
            get
            {
                if (_reviewerSourceSystemDescriptor == null)
                    _reviewerSourceSystemDescriptor = _reviewerSourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _reviewerSourceSystemDescriptorId.Value);
                    
                return _reviewerSourceSystemDescriptor;
            }
            set
            {
                _reviewerSourceSystemDescriptor = value;
                _reviewerSourceSystemDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewerReceivedTraining PerformanceEvaluationRatingReviewerReceivedTraining
        {
            get
            {
                // Return the item in the list, if one exists
                if (PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.Any())
                    return PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.Any())
                    PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.PerformanceEvaluationRatingReviewer = this;

                    PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.PerformanceEvaluationRatingReviewerReceivedTraining
        {
            get { return PerformanceEvaluationRatingReviewerReceivedTraining; }
            set { PerformanceEvaluationRatingReviewerReceivedTraining = (Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewerReceivedTraining) value; }
        }

        private ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewerReceivedTraining> _performanceEvaluationRatingReviewerReceivedTrainingPersistentList;

        public virtual ICollection<Entities.NHibernate.PerformanceEvaluationRatingAggregate.TPDM.PerformanceEvaluationRatingReviewerReceivedTraining> PerformanceEvaluationRatingReviewerReceivedTrainingPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _performanceEvaluationRatingReviewerReceivedTrainingPersistentList)
                    if (item.PerformanceEvaluationRatingReviewer == null)
                        item.PerformanceEvaluationRatingReviewer = this;
                // -------------------------------------------------------------

                return _performanceEvaluationRatingReviewerReceivedTrainingPersistentList;
            }
            set
            {
                _performanceEvaluationRatingReviewerReceivedTrainingPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData ReviewerPersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the ReviewerPerson discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonDiscriminator
        {
            get { return ReviewerPersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the ReviewerPerson resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer.ReviewerPersonResourceId
        {
            get { return ReviewerPersonReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "ReviewerSourceSystemDescriptor", new LookupColumnDetails { PropertyName = "ReviewerSourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluationRating as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("FirstName", FirstName);
            keyValues.Add("LastSurname", LastSurname);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluationRating = (PerformanceEvaluationRating) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isPerformanceEvaluationRatingReviewerReceivedTrainingSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported
        {
            get { return _isPerformanceEvaluationRatingReviewerReceivedTrainingSupported; }
            set { _isPerformanceEvaluationRatingReviewerReceivedTrainingSupported = value; }
        }

        private bool _isReviewerPersonIdSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerPersonIdSupported
        {
            get { return _isReviewerPersonIdSupported; }
            set { _isReviewerPersonIdSupported = value; }
        }

        private bool _isReviewerSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport.IsReviewerSourceSystemDescriptorSupported
        {
            get { return _isReviewerSourceSystemDescriptorSupported; }
            set { _isReviewerSourceSystemDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingReviewerReceivedTraining table of the PerformanceEvaluationRating aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingReviewerReceivedTraining : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining, Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PerformanceEvaluationRatingReviewerReceivedTraining()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual PerformanceEvaluationRatingReviewer PerformanceEvaluationRatingReviewer { get; set; }

        Entities.Common.TPDM.IPerformanceEvaluationRatingReviewer IPerformanceEvaluationRatingReviewerReceivedTraining.PerformanceEvaluationRatingReviewer
        {
            get { return PerformanceEvaluationRatingReviewer; }
            set { PerformanceEvaluationRatingReviewer = (PerformanceEvaluationRatingReviewer) value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.EvaluationPeriodDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).EvaluationPeriodDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).EvaluationPeriodDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.FirstName
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).FirstName; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).FirstName = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.LastSurname
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).LastSurname; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).LastSurname = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.PerformanceEvaluationTitle
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).PerformanceEvaluationTitle; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).PerformanceEvaluationTitle = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.PerformanceEvaluationTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).PerformanceEvaluationTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).PerformanceEvaluationTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.PersonId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).PersonId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).PersonId = value; }
        }

        short Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).SchoolYear = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.SourceSystemDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).SourceSystemDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).SourceSystemDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IPerformanceEvaluationRatingReviewerRecord) PerformanceEvaluationRatingReviewer).TermDescriptorId = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? InterRaterReliabilityScore  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? ReceivedTrainingDate 
        {
            get { return _receivedTrainingDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _receivedTrainingDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _receivedTrainingDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _receivedTrainingDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PerformanceEvaluationRatingReviewer as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTraining) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PerformanceEvaluationRatingReviewer = (PerformanceEvaluationRatingReviewer) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isInterRaterReliabilityScoreSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsInterRaterReliabilityScoreSupported
        {
            get { return _isInterRaterReliabilityScoreSupported; }
            set { _isInterRaterReliabilityScoreSupported = value; }
        }

        private bool _isReceivedTrainingDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport.IsReceivedTrainingDateSupported
        {
            get { return _isReceivedTrainingDateSupported; }
            set { _isReceivedTrainingDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PerformanceEvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.PerformanceEvaluationRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationRatingLevelDescriptor table of the PerformanceEvaluationRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor, Entities.Common.Records.TPDM.IPerformanceEvaluationRatingLevelDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int PerformanceEvaluationRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("PerformanceEvaluationRatingLevelDescriptorId", PerformanceEvaluationRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PerformanceEvaluationTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.PerformanceEvaluationTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PerformanceEvaluationTypeDescriptor table of the PerformanceEvaluationTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PerformanceEvaluationTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor, Entities.Common.Records.TPDM.IPerformanceEvaluationTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PostSecondaryInstitution

namespace EdFi.Ods.Entities.NHibernate.PostSecondaryInstitutionAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PostSecondaryInstitutionExtension table of the PostSecondaryInstitution aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PostSecondaryInstitutionExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IPostSecondaryInstitutionExtension, Entities.Common.Records.TPDM.IPostSecondaryInstitutionExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPostSecondaryInstitutionExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public PostSecondaryInstitutionExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.PostSecondaryInstitution PostSecondaryInstitution { get; set; }

        Entities.Common.EdFi.IPostSecondaryInstitution IPostSecondaryInstitutionExtension.PostSecondaryInstitution
        {
            get { return PostSecondaryInstitution; }
            set { PostSecondaryInstitution = (EdFi.PostSecondaryInstitution) value; }
        }

        int Entities.Common.Records.TPDM.IPostSecondaryInstitutionExtensionRecord.PostSecondaryInstitutionId
        {
            get { return ((Entities.Common.Records.EdFi.IPostSecondaryInstitutionRecord) PostSecondaryInstitution).PostSecondaryInstitutionId; }
            set { ((Entities.Common.Records.EdFi.IPostSecondaryInstitutionRecord) PostSecondaryInstitution).PostSecondaryInstitutionId = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (PostSecondaryInstitution as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPostSecondaryInstitutionExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPostSecondaryInstitutionExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            PostSecondaryInstitution = (EdFi.PostSecondaryInstitution) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.IPostSecondaryInstitutionExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: PreviousCareerDescriptor

namespace EdFi.Ods.Entities.NHibernate.PreviousCareerDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.PreviousCareerDescriptor table of the PreviousCareerDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class PreviousCareerDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IPreviousCareerDescriptor, Entities.Common.Records.TPDM.IPreviousCareerDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int PreviousCareerDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("PreviousCareerDescriptorId", PreviousCareerDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IPreviousCareerDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IPreviousCareerDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IPreviousCareerDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ProfessionalDevelopmentEvent

namespace EdFi.Ods.Entities.NHibernate.ProfessionalDevelopmentEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="ProfessionalDevelopmentEvent"/> entity.
    /// </summary>
    public class ProfessionalDevelopmentEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string Namespace { get; set; }
        public virtual string ProfessionalDevelopmentTitle { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("ProfessionalDevelopmentTitle", ProfessionalDevelopmentTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentEvent table of the ProfessionalDevelopmentEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IProfessionalDevelopmentEvent, Entities.Common.Records.TPDM.IProfessionalDevelopmentEventRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProfessionalDevelopmentEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string ProfessionalDevelopmentTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? MultipleSession  { get; set; }
        [RequiredWithNonDefault]
        public virtual int ProfessionalDevelopmentOfferedByDescriptorId 
        {
            get
            {
                if (_professionalDevelopmentOfferedByDescriptorId == default(int))
                    _professionalDevelopmentOfferedByDescriptorId = DescriptorsCache.GetCache().GetId("ProfessionalDevelopmentOfferedByDescriptor", _professionalDevelopmentOfferedByDescriptor);

                return _professionalDevelopmentOfferedByDescriptorId;
            } 
            set
            {
                _professionalDevelopmentOfferedByDescriptorId = value;
                _professionalDevelopmentOfferedByDescriptor = null;
            }
        }

        private int _professionalDevelopmentOfferedByDescriptorId;
        private string _professionalDevelopmentOfferedByDescriptor;

        public virtual string ProfessionalDevelopmentOfferedByDescriptor
        {
            get
            {
                if (_professionalDevelopmentOfferedByDescriptor == null)
                    _professionalDevelopmentOfferedByDescriptor = DescriptorsCache.GetCache().GetValue("ProfessionalDevelopmentOfferedByDescriptor", _professionalDevelopmentOfferedByDescriptorId);
                    
                return _professionalDevelopmentOfferedByDescriptor;
            }
            set
            {
                _professionalDevelopmentOfferedByDescriptor = value;
                _professionalDevelopmentOfferedByDescriptorId = default(int);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string ProfessionalDevelopmentReason  { get; set; }
        public virtual bool? Required  { get; set; }
        public virtual int? TotalHours  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProfessionalDevelopmentOfferedByDescriptor", new LookupColumnDetails { PropertyName = "ProfessionalDevelopmentOfferedByDescriptorId", LookupTypeName = "ProfessionalDevelopmentOfferedByDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("ProfessionalDevelopmentTitle", ProfessionalDevelopmentTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProfessionalDevelopmentEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProfessionalDevelopmentEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMultipleSessionSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsMultipleSessionSupported
        {
            get { return _isMultipleSessionSupported; }
            set { _isMultipleSessionSupported = value; }
        }

        private bool _isProfessionalDevelopmentOfferedByDescriptorSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported
        {
            get { return _isProfessionalDevelopmentOfferedByDescriptorSupported; }
            set { _isProfessionalDevelopmentOfferedByDescriptorSupported = value; }
        }

        private bool _isProfessionalDevelopmentReasonSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsProfessionalDevelopmentReasonSupported
        {
            get { return _isProfessionalDevelopmentReasonSupported; }
            set { _isProfessionalDevelopmentReasonSupported = value; }
        }

        private bool _isRequiredSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsRequiredSupported
        {
            get { return _isRequiredSupported; }
            set { _isRequiredSupported = value; }
        }

        private bool _isTotalHoursSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventSynchronizationSourceSupport.IsTotalHoursSupported
        {
            get { return _isTotalHoursSupported; }
            set { _isTotalHoursSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ProfessionalDevelopmentEventAttendance

namespace EdFi.Ods.Entities.NHibernate.ProfessionalDevelopmentEventAttendanceAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="ProfessionalDevelopmentEventAttendance"/> entity.
    /// </summary>
    public class ProfessionalDevelopmentEventAttendanceReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime AttendanceDate { get; set; }
        public virtual string Namespace { get; set; }
        public virtual string PersonId { get; set; }
        public virtual string ProfessionalDevelopmentTitle { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AttendanceDate", AttendanceDate);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("ProfessionalDevelopmentTitle", ProfessionalDevelopmentTitle);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentEventAttendance table of the ProfessionalDevelopmentEventAttendance aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentEventAttendance : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance, Entities.Common.Records.TPDM.IProfessionalDevelopmentEventAttendanceRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProfessionalDevelopmentEventAttendance()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime AttendanceDate 
        {
            get { return _attendanceDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _attendanceDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _attendanceDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string ProfessionalDevelopmentTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int AttendanceEventCategoryDescriptorId 
        {
            get
            {
                if (_attendanceEventCategoryDescriptorId == default(int))
                    _attendanceEventCategoryDescriptorId = DescriptorsCache.GetCache().GetId("AttendanceEventCategoryDescriptor", _attendanceEventCategoryDescriptor);

                return _attendanceEventCategoryDescriptorId;
            } 
            set
            {
                _attendanceEventCategoryDescriptorId = value;
                _attendanceEventCategoryDescriptor = null;
            }
        }

        private int _attendanceEventCategoryDescriptorId;
        private string _attendanceEventCategoryDescriptor;

        public virtual string AttendanceEventCategoryDescriptor
        {
            get
            {
                if (_attendanceEventCategoryDescriptor == null)
                    _attendanceEventCategoryDescriptor = DescriptorsCache.GetCache().GetValue("AttendanceEventCategoryDescriptor", _attendanceEventCategoryDescriptorId);
                    
                return _attendanceEventCategoryDescriptor;
            }
            set
            {
                _attendanceEventCategoryDescriptor = value;
                _attendanceEventCategoryDescriptorId = default(int);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string AttendanceEventReason  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.ProfessionalDevelopmentEventAggregate.TPDM.ProfessionalDevelopmentEventReferenceData ProfessionalDevelopmentEventReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the ProfessionalDevelopmentEvent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.ProfessionalDevelopmentEventDiscriminator
        {
            get { return ProfessionalDevelopmentEventReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the ProfessionalDevelopmentEvent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance.ProfessionalDevelopmentEventResourceId
        {
            get { return ProfessionalDevelopmentEventReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AttendanceEventCategoryDescriptor", new LookupColumnDetails { PropertyName = "AttendanceEventCategoryDescriptorId", LookupTypeName = "AttendanceEventCategoryDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("AttendanceDate", AttendanceDate);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("ProfessionalDevelopmentTitle", ProfessionalDevelopmentTitle);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProfessionalDevelopmentEventAttendance) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAttendanceEventCategoryDescriptorSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport.IsAttendanceEventCategoryDescriptorSupported
        {
            get { return _isAttendanceEventCategoryDescriptorSupported; }
            set { _isAttendanceEventCategoryDescriptorSupported = value; }
        }

        private bool _isAttendanceEventReasonSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport.IsAttendanceEventReasonSupported
        {
            get { return _isAttendanceEventReasonSupported; }
            set { _isAttendanceEventReasonSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ProfessionalDevelopmentOfferedByDescriptor

namespace EdFi.Ods.Entities.NHibernate.ProfessionalDevelopmentOfferedByDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProfessionalDevelopmentOfferedByDescriptor table of the ProfessionalDevelopmentOfferedByDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProfessionalDevelopmentOfferedByDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor, Entities.Common.Records.TPDM.IProfessionalDevelopmentOfferedByDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ProfessionalDevelopmentOfferedByDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ProfessionalDevelopmentOfferedByDescriptorId", ProfessionalDevelopmentOfferedByDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ProgramGatewayDescriptor

namespace EdFi.Ods.Entities.NHibernate.ProgramGatewayDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProgramGatewayDescriptor table of the ProgramGatewayDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProgramGatewayDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IProgramGatewayDescriptor, Entities.Common.Records.TPDM.IProgramGatewayDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ProgramGatewayDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ProgramGatewayDescriptorId", ProgramGatewayDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProgramGatewayDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProgramGatewayDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IProgramGatewayDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Prospect

namespace EdFi.Ods.Entities.NHibernate.ProspectAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="Prospect"/> entity.
    /// </summary>
    public class ProspectReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProspectIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProspectIdentifier", ProspectIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.Prospect table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class Prospect : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IProspect, Entities.Common.Records.TPDM.IProspectRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public Prospect()
        {
           ProspectAidPersistentList = new HashSet<ProspectAid>();
           ProspectCurrentPositionPersistentList = new HashSet<ProspectCurrentPosition>();
           ProspectQualificationsPersistentList = new HashSet<ProspectQualifications>();
            ProspectDisabilities = new HashSet<ProspectDisability>();
            ProspectPersonalIdentificationDocuments = new HashSet<ProspectPersonalIdentificationDocument>();
            ProspectRaces = new HashSet<ProspectRace>();
            ProspectRecruitmentEvents = new HashSet<ProspectRecruitmentEvent>();
            ProspectTelephones = new HashSet<ProspectTelephone>();
            ProspectTouchpoints = new HashSet<ProspectTouchpoint>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ProspectIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? Applied  { get; set; }
        public virtual bool? EconomicDisadvantaged  { get; set; }
        [RequiredWithNonDefault, StringLength(128), NoDangerousText]
        public virtual string ElectronicMailAddress  { get; set; }
        public virtual bool? FirstGenerationStudent  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string FirstName  { get; set; }
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        [StringLength(10), NoDangerousText]
        public virtual string GenerationCodeSuffix  { get; set; }
        public virtual bool? HispanicLatinoEthnicity  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string LastSurname  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MaidenName  { get; set; }
        public virtual bool? Met  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MiddleName  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string Notes  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string PersonalTitlePrefix  { get; set; }
        [StringLength(32), NoDangerousText]
        public virtual string PersonId  { get; set; }
        public virtual int? PreScreeningRating  { get; set; }
        public virtual int? ProspectTypeDescriptorId 
        {
            get
            {
                if (_prospectTypeDescriptorId == default(int?))
                    _prospectTypeDescriptorId = string.IsNullOrWhiteSpace(_prospectTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ProspectTypeDescriptor", _prospectTypeDescriptor);

                return _prospectTypeDescriptorId;
            } 
            set
            {
                _prospectTypeDescriptorId = value;
                _prospectTypeDescriptor = null;
            }
        }

        private int? _prospectTypeDescriptorId;
        private string _prospectTypeDescriptor;

        public virtual string ProspectTypeDescriptor
        {
            get
            {
                if (_prospectTypeDescriptor == null)
                    _prospectTypeDescriptor = _prospectTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ProspectTypeDescriptor", _prospectTypeDescriptorId.Value);
                    
                return _prospectTypeDescriptor;
            }
            set
            {
                _prospectTypeDescriptor = value;
                _prospectTypeDescriptorId = default(int?);
            }
        }
        public virtual bool? Referral  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string ReferredBy  { get; set; }
        public virtual int? SexDescriptorId 
        {
            get
            {
                if (_sexDescriptorId == default(int?))
                    _sexDescriptorId = string.IsNullOrWhiteSpace(_sexDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SexDescriptor", _sexDescriptor);

                return _sexDescriptorId;
            } 
            set
            {
                _sexDescriptorId = value;
                _sexDescriptor = null;
            }
        }

        private int? _sexDescriptorId;
        private string _sexDescriptor;

        public virtual string SexDescriptor
        {
            get
            {
                if (_sexDescriptor == null)
                    _sexDescriptor = _sexDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SexDescriptor", _sexDescriptorId.Value);
                    
                return _sexDescriptor;
            }
            set
            {
                _sexDescriptor = value;
                _sexDescriptorId = default(int?);
            }
        }
        [StringLength(50), NoDangerousText]
        public virtual string SocialMediaNetworkName  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string SocialMediaUserName  { get; set; }
        public virtual int? SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int?))
                    _sourceSystemDescriptorId = string.IsNullOrWhiteSpace(_sourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int? _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = _sourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId.Value);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int?);
            }
        }
        [StringLength(32), NoDangerousText]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.ProspectAggregate.TPDM.ProspectAid ProspectAid
        {
            get
            {
                // Return the item in the list, if one exists
                if (ProspectAidPersistentList.Any())
                    return ProspectAidPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (ProspectAidPersistentList.Any())
                    ProspectAidPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.Prospect = this;

                    ProspectAidPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IProspectAid Entities.Common.TPDM.IProspect.ProspectAid
        {
            get { return ProspectAid; }
            set { ProspectAid = (Entities.NHibernate.ProspectAggregate.TPDM.ProspectAid) value; }
        }

        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectAid> _prospectAidPersistentList;

        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectAid> ProspectAidPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectAidPersistentList)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectAidPersistentList;
            }
            set
            {
                _prospectAidPersistentList = value;
            }
        }

        [ValidateObject]
        public virtual Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPosition ProspectCurrentPosition
        {
            get
            {
                // Return the item in the list, if one exists
                if (ProspectCurrentPositionPersistentList.Any())
                    return ProspectCurrentPositionPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (ProspectCurrentPositionPersistentList.Any())
                    ProspectCurrentPositionPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.Prospect = this;

                    ProspectCurrentPositionPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IProspectCurrentPosition Entities.Common.TPDM.IProspect.ProspectCurrentPosition
        {
            get { return ProspectCurrentPosition; }
            set { ProspectCurrentPosition = (Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPosition) value; }
        }

        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPosition> _prospectCurrentPositionPersistentList;

        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPosition> ProspectCurrentPositionPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectCurrentPositionPersistentList)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectCurrentPositionPersistentList;
            }
            set
            {
                _prospectCurrentPositionPersistentList = value;
            }
        }

        [ValidateObject]
        public virtual Entities.NHibernate.ProspectAggregate.TPDM.ProspectQualifications ProspectQualifications
        {
            get
            {
                // Return the item in the list, if one exists
                if (ProspectQualificationsPersistentList.Any())
                    return ProspectQualificationsPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (ProspectQualificationsPersistentList.Any())
                    ProspectQualificationsPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.Prospect = this;

                    ProspectQualificationsPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.IProspectQualifications Entities.Common.TPDM.IProspect.ProspectQualifications
        {
            get { return ProspectQualifications; }
            set { ProspectQualifications = (Entities.NHibernate.ProspectAggregate.TPDM.ProspectQualifications) value; }
        }

        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectQualifications> _prospectQualificationsPersistentList;

        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectQualifications> ProspectQualificationsPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectQualificationsPersistentList)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectQualificationsPersistentList;
            }
            set
            {
                _prospectQualificationsPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IProspect.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IProspect.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IProspect.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IProspect.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IProspect.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IProspect.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisability> _prospectDisabilities;
        private ICollection<Entities.Common.TPDM.IProspectDisability> _prospectDisabilitiesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisability> ProspectDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectDisabilities)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectDisabilities;
            }
            set
            {
                _prospectDisabilities = value;
                _prospectDisabilitiesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IProspectDisability, Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisability>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IProspectDisability> Entities.Common.TPDM.IProspect.ProspectDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectDisabilities)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectDisabilitiesCovariant;
            }
            set
            {
                ProspectDisabilities = new HashSet<Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisability>(value.Cast<Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisability>());
            }
        }


        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectPersonalIdentificationDocument> _prospectPersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.IProspectPersonalIdentificationDocument> _prospectPersonalIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectPersonalIdentificationDocument> ProspectPersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectPersonalIdentificationDocuments)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectPersonalIdentificationDocuments;
            }
            set
            {
                _prospectPersonalIdentificationDocuments = value;
                _prospectPersonalIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IProspectPersonalIdentificationDocument, Entities.NHibernate.ProspectAggregate.TPDM.ProspectPersonalIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IProspectPersonalIdentificationDocument> Entities.Common.TPDM.IProspect.ProspectPersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectPersonalIdentificationDocuments)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectPersonalIdentificationDocumentsCovariant;
            }
            set
            {
                ProspectPersonalIdentificationDocuments = new HashSet<Entities.NHibernate.ProspectAggregate.TPDM.ProspectPersonalIdentificationDocument>(value.Cast<Entities.NHibernate.ProspectAggregate.TPDM.ProspectPersonalIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectRace> _prospectRaces;
        private ICollection<Entities.Common.TPDM.IProspectRace> _prospectRacesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectRace> ProspectRaces
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectRaces)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectRaces;
            }
            set
            {
                _prospectRaces = value;
                _prospectRacesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IProspectRace, Entities.NHibernate.ProspectAggregate.TPDM.ProspectRace>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IProspectRace> Entities.Common.TPDM.IProspect.ProspectRaces
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectRaces)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectRacesCovariant;
            }
            set
            {
                ProspectRaces = new HashSet<Entities.NHibernate.ProspectAggregate.TPDM.ProspectRace>(value.Cast<Entities.NHibernate.ProspectAggregate.TPDM.ProspectRace>());
            }
        }


        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectRecruitmentEvent> _prospectRecruitmentEvents;
        private ICollection<Entities.Common.TPDM.IProspectRecruitmentEvent> _prospectRecruitmentEventsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectRecruitmentEvent> ProspectRecruitmentEvents
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectRecruitmentEvents)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectRecruitmentEvents;
            }
            set
            {
                _prospectRecruitmentEvents = value;
                _prospectRecruitmentEventsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IProspectRecruitmentEvent, Entities.NHibernate.ProspectAggregate.TPDM.ProspectRecruitmentEvent>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IProspectRecruitmentEvent> Entities.Common.TPDM.IProspect.ProspectRecruitmentEvents
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectRecruitmentEvents)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectRecruitmentEventsCovariant;
            }
            set
            {
                ProspectRecruitmentEvents = new HashSet<Entities.NHibernate.ProspectAggregate.TPDM.ProspectRecruitmentEvent>(value.Cast<Entities.NHibernate.ProspectAggregate.TPDM.ProspectRecruitmentEvent>());
            }
        }


        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectTelephone> _prospectTelephones;
        private ICollection<Entities.Common.TPDM.IProspectTelephone> _prospectTelephonesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectTelephone> ProspectTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectTelephones)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectTelephones;
            }
            set
            {
                _prospectTelephones = value;
                _prospectTelephonesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IProspectTelephone, Entities.NHibernate.ProspectAggregate.TPDM.ProspectTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IProspectTelephone> Entities.Common.TPDM.IProspect.ProspectTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectTelephones)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectTelephonesCovariant;
            }
            set
            {
                ProspectTelephones = new HashSet<Entities.NHibernate.ProspectAggregate.TPDM.ProspectTelephone>(value.Cast<Entities.NHibernate.ProspectAggregate.TPDM.ProspectTelephone>());
            }
        }


        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectTouchpoint> _prospectTouchpoints;
        private ICollection<Entities.Common.TPDM.IProspectTouchpoint> _prospectTouchpointsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectTouchpoint> ProspectTouchpoints
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectTouchpoints)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectTouchpoints;
            }
            set
            {
                _prospectTouchpoints = value;
                _prospectTouchpointsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IProspectTouchpoint, Entities.NHibernate.ProspectAggregate.TPDM.ProspectTouchpoint>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IProspectTouchpoint> Entities.Common.TPDM.IProspect.ProspectTouchpoints
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectTouchpoints)
                    if (item.Prospect == null)
                        item.Prospect = this;
                // -------------------------------------------------------------

                return _prospectTouchpointsCovariant;
            }
            set
            {
                ProspectTouchpoints = new HashSet<Entities.NHibernate.ProspectAggregate.TPDM.ProspectTouchpoint>(value.Cast<Entities.NHibernate.ProspectAggregate.TPDM.ProspectTouchpoint>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
                { "ProspectTypeDescriptor", new LookupColumnDetails { PropertyName = "ProspectTypeDescriptorId", LookupTypeName = "ProspectTypeDescriptor"} },
                { "SexDescriptor", new LookupColumnDetails { PropertyName = "SexDescriptorId", LookupTypeName = "SexDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProspectIdentifier", ProspectIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspect)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspect) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAppliedSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsAppliedSupported
        {
            get { return _isAppliedSupported; }
            set { _isAppliedSupported = value; }
        }

        private bool _isEconomicDisadvantagedSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsEconomicDisadvantagedSupported
        {
            get { return _isEconomicDisadvantagedSupported; }
            set { _isEconomicDisadvantagedSupported = value; }
        }

        private bool _isElectronicMailAddressSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsElectronicMailAddressSupported
        {
            get { return _isElectronicMailAddressSupported; }
            set { _isElectronicMailAddressSupported = value; }
        }

        private bool _isFirstGenerationStudentSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsFirstGenerationStudentSupported
        {
            get { return _isFirstGenerationStudentSupported; }
            set { _isFirstGenerationStudentSupported = value; }
        }

        private bool _isFirstNameSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsFirstNameSupported
        {
            get { return _isFirstNameSupported; }
            set { _isFirstNameSupported = value; }
        }

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isGenerationCodeSuffixSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsGenerationCodeSuffixSupported
        {
            get { return _isGenerationCodeSuffixSupported; }
            set { _isGenerationCodeSuffixSupported = value; }
        }

        private bool _isHispanicLatinoEthnicitySupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported
        {
            get { return _isHispanicLatinoEthnicitySupported; }
            set { _isHispanicLatinoEthnicitySupported = value; }
        }

        private bool _isLastSurnameSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsLastSurnameSupported
        {
            get { return _isLastSurnameSupported; }
            set { _isLastSurnameSupported = value; }
        }

        private bool _isMaidenNameSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsMaidenNameSupported
        {
            get { return _isMaidenNameSupported; }
            set { _isMaidenNameSupported = value; }
        }

        private bool _isMetSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsMetSupported
        {
            get { return _isMetSupported; }
            set { _isMetSupported = value; }
        }

        private bool _isMiddleNameSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsMiddleNameSupported
        {
            get { return _isMiddleNameSupported; }
            set { _isMiddleNameSupported = value; }
        }

        private bool _isNotesSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsNotesSupported
        {
            get { return _isNotesSupported; }
            set { _isNotesSupported = value; }
        }

        private bool _isPersonalTitlePrefixSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsPersonalTitlePrefixSupported
        {
            get { return _isPersonalTitlePrefixSupported; }
            set { _isPersonalTitlePrefixSupported = value; }
        }

        private bool _isPersonIdSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsPersonIdSupported
        {
            get { return _isPersonIdSupported; }
            set { _isPersonIdSupported = value; }
        }

        private bool _isPreScreeningRatingSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsPreScreeningRatingSupported
        {
            get { return _isPreScreeningRatingSupported; }
            set { _isPreScreeningRatingSupported = value; }
        }

        private bool _isProspectAidSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectAidSupported
        {
            get { return _isProspectAidSupported; }
            set { _isProspectAidSupported = value; }
        }

        private bool _isProspectCurrentPositionSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectCurrentPositionSupported
        {
            get { return _isProspectCurrentPositionSupported; }
            set { _isProspectCurrentPositionSupported = value; }
        }

        private bool _isProspectDisabilitiesSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectDisabilitiesSupported
        {
            get { return _isProspectDisabilitiesSupported; }
            set { _isProspectDisabilitiesSupported = value; }
        }

        private bool _isProspectPersonalIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectPersonalIdentificationDocumentsSupported
        {
            get { return _isProspectPersonalIdentificationDocumentsSupported; }
            set { _isProspectPersonalIdentificationDocumentsSupported = value; }
        }

        private bool _isProspectQualificationsSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectQualificationsSupported
        {
            get { return _isProspectQualificationsSupported; }
            set { _isProspectQualificationsSupported = value; }
        }

        private bool _isProspectRacesSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectRacesSupported
        {
            get { return _isProspectRacesSupported; }
            set { _isProspectRacesSupported = value; }
        }

        private bool _isProspectRecruitmentEventsSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectRecruitmentEventsSupported
        {
            get { return _isProspectRecruitmentEventsSupported; }
            set { _isProspectRecruitmentEventsSupported = value; }
        }

        private bool _isProspectTelephonesSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectTelephonesSupported
        {
            get { return _isProspectTelephonesSupported; }
            set { _isProspectTelephonesSupported = value; }
        }

        private bool _isProspectTouchpointsSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectTouchpointsSupported
        {
            get { return _isProspectTouchpointsSupported; }
            set { _isProspectTouchpointsSupported = value; }
        }

        private bool _isProspectTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectTypeDescriptorSupported
        {
            get { return _isProspectTypeDescriptorSupported; }
            set { _isProspectTypeDescriptorSupported = value; }
        }

        private bool _isReferralSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsReferralSupported
        {
            get { return _isReferralSupported; }
            set { _isReferralSupported = value; }
        }

        private bool _isReferredBySupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsReferredBySupported
        {
            get { return _isReferredBySupported; }
            set { _isReferredBySupported = value; }
        }

        private bool _isSexDescriptorSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsSexDescriptorSupported
        {
            get { return _isSexDescriptorSupported; }
            set { _isSexDescriptorSupported = value; }
        }

        private bool _isSocialMediaNetworkNameSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsSocialMediaNetworkNameSupported
        {
            get { return _isSocialMediaNetworkNameSupported; }
            set { _isSocialMediaNetworkNameSupported = value; }
        }

        private bool _isSocialMediaUserNameSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsSocialMediaUserNameSupported
        {
            get { return _isSocialMediaUserNameSupported; }
            set { _isSocialMediaUserNameSupported = value; }
        }

        private bool _isSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsSourceSystemDescriptorSupported
        {
            get { return _isSourceSystemDescriptorSupported; }
            set { _isSourceSystemDescriptorSupported = value; }
        }

        private bool _isTeacherCandidateIdentifierSupported = true;
        bool Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsTeacherCandidateIdentifierSupported
        {
            get { return _isTeacherCandidateIdentifierSupported; }
            set { _isTeacherCandidateIdentifierSupported = value; }
        }

        private Func<Entities.Common.TPDM.IProspectDisability, bool> _isProspectDisabilityIncluded;
        Func<Entities.Common.TPDM.IProspectDisability, bool> Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectDisabilityIncluded
        {
            get { return _isProspectDisabilityIncluded; }
            set { _isProspectDisabilityIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IProspectPersonalIdentificationDocument, bool> _isProspectPersonalIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.IProspectPersonalIdentificationDocument, bool> Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectPersonalIdentificationDocumentIncluded
        {
            get { return _isProspectPersonalIdentificationDocumentIncluded; }
            set { _isProspectPersonalIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IProspectRace, bool> _isProspectRaceIncluded;
        Func<Entities.Common.TPDM.IProspectRace, bool> Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectRaceIncluded
        {
            get { return _isProspectRaceIncluded; }
            set { _isProspectRaceIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IProspectRecruitmentEvent, bool> _isProspectRecruitmentEventIncluded;
        Func<Entities.Common.TPDM.IProspectRecruitmentEvent, bool> Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectRecruitmentEventIncluded
        {
            get { return _isProspectRecruitmentEventIncluded; }
            set { _isProspectRecruitmentEventIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IProspectTelephone, bool> _isProspectTelephoneIncluded;
        Func<Entities.Common.TPDM.IProspectTelephone, bool> Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectTelephoneIncluded
        {
            get { return _isProspectTelephoneIncluded; }
            set { _isProspectTelephoneIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IProspectTouchpoint, bool> _isProspectTouchpointIncluded;
        Func<Entities.Common.TPDM.IProspectTouchpoint, bool> Entities.Common.TPDM.IProspectSynchronizationSourceSupport.IsProspectTouchpointIncluded
        {
            get { return _isProspectTouchpointIncluded; }
            set { _isProspectTouchpointIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectAid table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectAid : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectAid, Entities.Common.Records.TPDM.IProspectAidRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectAidSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectAid()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectAid.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectAidRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectAidRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999999999999.9999", "999999999999999.9999")]
        public virtual decimal? AidAmount  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string AidConditionDescription  { get; set; }
        [RequiredWithNonDefault]
        public virtual int AidTypeDescriptorId 
        {
            get
            {
                if (_aidTypeDescriptorId == default(int))
                    _aidTypeDescriptorId = DescriptorsCache.GetCache().GetId("AidTypeDescriptor", _aidTypeDescriptor);

                return _aidTypeDescriptorId;
            } 
            set
            {
                _aidTypeDescriptorId = value;
                _aidTypeDescriptor = null;
            }
        }

        private int _aidTypeDescriptorId;
        private string _aidTypeDescriptor;

        public virtual string AidTypeDescriptor
        {
            get
            {
                if (_aidTypeDescriptor == null)
                    _aidTypeDescriptor = DescriptorsCache.GetCache().GetValue("AidTypeDescriptor", _aidTypeDescriptorId);
                    
                return _aidTypeDescriptor;
            }
            set
            {
                _aidTypeDescriptor = value;
                _aidTypeDescriptorId = default(int);
            }
        }
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual bool? PellGrantRecipient  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AidTypeDescriptor", new LookupColumnDetails { PropertyName = "AidTypeDescriptorId", LookupTypeName = "AidTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectAid)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectAid) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAidAmountSupported = true;
        bool Entities.Common.TPDM.IProspectAidSynchronizationSourceSupport.IsAidAmountSupported
        {
            get { return _isAidAmountSupported; }
            set { _isAidAmountSupported = value; }
        }

        private bool _isAidConditionDescriptionSupported = true;
        bool Entities.Common.TPDM.IProspectAidSynchronizationSourceSupport.IsAidConditionDescriptionSupported
        {
            get { return _isAidConditionDescriptionSupported; }
            set { _isAidConditionDescriptionSupported = value; }
        }

        private bool _isAidTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IProspectAidSynchronizationSourceSupport.IsAidTypeDescriptorSupported
        {
            get { return _isAidTypeDescriptorSupported; }
            set { _isAidTypeDescriptorSupported = value; }
        }

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IProspectAidSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IProspectAidSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isPellGrantRecipientSupported = true;
        bool Entities.Common.TPDM.IProspectAidSynchronizationSourceSupport.IsPellGrantRecipientSupported
        {
            get { return _isPellGrantRecipientSupported; }
            set { _isPellGrantRecipientSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectCurrentPosition table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectCurrentPosition : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectCurrentPosition, Entities.Common.Records.TPDM.IProspectCurrentPositionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectCurrentPositionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectCurrentPosition()
        {
            ProspectCurrentPositionGradeLevels = new HashSet<ProspectCurrentPositionGradeLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectCurrentPosition.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectCurrentPositionRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectCurrentPositionRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int?))
                    _academicSubjectDescriptorId = string.IsNullOrWhiteSpace(_academicSubjectDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int? _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = _academicSubjectDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId.Value);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string Location  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string NameOfInstitution  { get; set; }
        [RequiredWithNonDefault, StringLength(100), NoDangerousText]
        public virtual string PositionTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPositionGradeLevel> _prospectCurrentPositionGradeLevels;
        private ICollection<Entities.Common.TPDM.IProspectCurrentPositionGradeLevel> _prospectCurrentPositionGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPositionGradeLevel> ProspectCurrentPositionGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectCurrentPositionGradeLevels)
                    if (item.ProspectCurrentPosition == null)
                        item.ProspectCurrentPosition = this;
                // -------------------------------------------------------------

                return _prospectCurrentPositionGradeLevels;
            }
            set
            {
                _prospectCurrentPositionGradeLevels = value;
                _prospectCurrentPositionGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IProspectCurrentPositionGradeLevel, Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPositionGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IProspectCurrentPositionGradeLevel> Entities.Common.TPDM.IProspectCurrentPosition.ProspectCurrentPositionGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectCurrentPositionGradeLevels)
                    if (item.ProspectCurrentPosition == null)
                        item.ProspectCurrentPosition = this;
                // -------------------------------------------------------------

                return _prospectCurrentPositionGradeLevelsCovariant;
            }
            set
            {
                ProspectCurrentPositionGradeLevels = new HashSet<Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPositionGradeLevel>(value.Cast<Entities.NHibernate.ProspectAggregate.TPDM.ProspectCurrentPositionGradeLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectCurrentPosition)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectCurrentPosition) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAcademicSubjectDescriptorSupported = true;
        bool Entities.Common.TPDM.IProspectCurrentPositionSynchronizationSourceSupport.IsAcademicSubjectDescriptorSupported
        {
            get { return _isAcademicSubjectDescriptorSupported; }
            set { _isAcademicSubjectDescriptorSupported = value; }
        }

        private bool _isLocationSupported = true;
        bool Entities.Common.TPDM.IProspectCurrentPositionSynchronizationSourceSupport.IsLocationSupported
        {
            get { return _isLocationSupported; }
            set { _isLocationSupported = value; }
        }

        private bool _isNameOfInstitutionSupported = true;
        bool Entities.Common.TPDM.IProspectCurrentPositionSynchronizationSourceSupport.IsNameOfInstitutionSupported
        {
            get { return _isNameOfInstitutionSupported; }
            set { _isNameOfInstitutionSupported = value; }
        }

        private bool _isPositionTitleSupported = true;
        bool Entities.Common.TPDM.IProspectCurrentPositionSynchronizationSourceSupport.IsPositionTitleSupported
        {
            get { return _isPositionTitleSupported; }
            set { _isPositionTitleSupported = value; }
        }

        private bool _isProspectCurrentPositionGradeLevelsSupported = true;
        bool Entities.Common.TPDM.IProspectCurrentPositionSynchronizationSourceSupport.IsProspectCurrentPositionGradeLevelsSupported
        {
            get { return _isProspectCurrentPositionGradeLevelsSupported; }
            set { _isProspectCurrentPositionGradeLevelsSupported = value; }
        }

        private Func<Entities.Common.TPDM.IProspectCurrentPositionGradeLevel, bool> _isProspectCurrentPositionGradeLevelIncluded;
        Func<Entities.Common.TPDM.IProspectCurrentPositionGradeLevel, bool> Entities.Common.TPDM.IProspectCurrentPositionSynchronizationSourceSupport.IsProspectCurrentPositionGradeLevelIncluded
        {
            get { return _isProspectCurrentPositionGradeLevelIncluded; }
            set { _isProspectCurrentPositionGradeLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectCurrentPositionGradeLevel table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectCurrentPositionGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectCurrentPositionGradeLevel, Entities.Common.Records.TPDM.IProspectCurrentPositionGradeLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectCurrentPositionGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectCurrentPositionGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ProspectCurrentPosition ProspectCurrentPosition { get; set; }

        Entities.Common.TPDM.IProspectCurrentPosition IProspectCurrentPositionGradeLevel.ProspectCurrentPosition
        {
            get { return ProspectCurrentPosition; }
            set { ProspectCurrentPosition = (ProspectCurrentPosition) value; }
        }

        int Entities.Common.Records.TPDM.IProspectCurrentPositionGradeLevelRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectCurrentPositionRecord) ProspectCurrentPosition).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectCurrentPositionRecord) ProspectCurrentPosition).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectCurrentPositionGradeLevelRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectCurrentPositionRecord) ProspectCurrentPosition).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectCurrentPositionRecord) ProspectCurrentPosition).ProspectIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ProspectCurrentPosition as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectCurrentPositionGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectCurrentPositionGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ProspectCurrentPosition = (ProspectCurrentPosition) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectDisability table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectDisability : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectDisability, Entities.Common.Records.TPDM.IProspectDisabilityRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectDisabilitySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectDisability()
        {
            ProspectDisabilityDesignations = new HashSet<ProspectDisabilityDesignation>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectDisability.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectDisabilityRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectDisabilityRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDescriptorId 
        {
            get
            {
                if (_disabilityDescriptorId == default(int))
                    _disabilityDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDescriptor", _disabilityDescriptor);

                return _disabilityDescriptorId;
            } 
            set
            {
                _disabilityDescriptorId = value;
                _disabilityDescriptor = null;
            }
        }

        private int _disabilityDescriptorId;
        private string _disabilityDescriptor;

        public virtual string DisabilityDescriptor
        {
            get
            {
                if (_disabilityDescriptor == null)
                    _disabilityDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDescriptor", _disabilityDescriptorId);
                    
                return _disabilityDescriptor;
            }
            set
            {
                _disabilityDescriptor = value;
                _disabilityDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? DisabilityDeterminationSourceTypeDescriptorId 
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptorId == default(int?))
                    _disabilityDeterminationSourceTypeDescriptorId = string.IsNullOrWhiteSpace(_disabilityDeterminationSourceTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptor);

                return _disabilityDeterminationSourceTypeDescriptorId;
            } 
            set
            {
                _disabilityDeterminationSourceTypeDescriptorId = value;
                _disabilityDeterminationSourceTypeDescriptor = null;
            }
        }

        private int? _disabilityDeterminationSourceTypeDescriptorId;
        private string _disabilityDeterminationSourceTypeDescriptor;

        public virtual string DisabilityDeterminationSourceTypeDescriptor
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptor == null)
                    _disabilityDeterminationSourceTypeDescriptor = _disabilityDeterminationSourceTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptorId.Value);
                    
                return _disabilityDeterminationSourceTypeDescriptor;
            }
            set
            {
                _disabilityDeterminationSourceTypeDescriptor = value;
                _disabilityDeterminationSourceTypeDescriptorId = default(int?);
            }
        }
        [StringLength(80), NoDangerousText]
        public virtual string DisabilityDiagnosis  { get; set; }
        public virtual int? OrderOfDisability  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisabilityDesignation> _prospectDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.IProspectDisabilityDesignation> _prospectDisabilityDesignationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisabilityDesignation> ProspectDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectDisabilityDesignations)
                    if (item.ProspectDisability == null)
                        item.ProspectDisability = this;
                // -------------------------------------------------------------

                return _prospectDisabilityDesignations;
            }
            set
            {
                _prospectDisabilityDesignations = value;
                _prospectDisabilityDesignationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IProspectDisabilityDesignation, Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisabilityDesignation>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IProspectDisabilityDesignation> Entities.Common.TPDM.IProspectDisability.ProspectDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _prospectDisabilityDesignations)
                    if (item.ProspectDisability == null)
                        item.ProspectDisability = this;
                // -------------------------------------------------------------

                return _prospectDisabilityDesignationsCovariant;
            }
            set
            {
                ProspectDisabilityDesignations = new HashSet<Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisabilityDesignation>(value.Cast<Entities.NHibernate.ProspectAggregate.TPDM.ProspectDisabilityDesignation>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDeterminationSourceTypeDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDeterminationSourceTypeDescriptorId", LookupTypeName = "DisabilityDeterminationSourceTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDescriptorId", DisabilityDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectDisability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectDisability) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDisabilityDeterminationSourceTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IProspectDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported
        {
            get { return _isDisabilityDeterminationSourceTypeDescriptorSupported; }
            set { _isDisabilityDeterminationSourceTypeDescriptorSupported = value; }
        }

        private bool _isDisabilityDiagnosisSupported = true;
        bool Entities.Common.TPDM.IProspectDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported
        {
            get { return _isDisabilityDiagnosisSupported; }
            set { _isDisabilityDiagnosisSupported = value; }
        }

        private bool _isOrderOfDisabilitySupported = true;
        bool Entities.Common.TPDM.IProspectDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported
        {
            get { return _isOrderOfDisabilitySupported; }
            set { _isOrderOfDisabilitySupported = value; }
        }

        private bool _isProspectDisabilityDesignationsSupported = true;
        bool Entities.Common.TPDM.IProspectDisabilitySynchronizationSourceSupport.IsProspectDisabilityDesignationsSupported
        {
            get { return _isProspectDisabilityDesignationsSupported; }
            set { _isProspectDisabilityDesignationsSupported = value; }
        }

        private Func<Entities.Common.TPDM.IProspectDisabilityDesignation, bool> _isProspectDisabilityDesignationIncluded;
        Func<Entities.Common.TPDM.IProspectDisabilityDesignation, bool> Entities.Common.TPDM.IProspectDisabilitySynchronizationSourceSupport.IsProspectDisabilityDesignationIncluded
        {
            get { return _isProspectDisabilityDesignationIncluded; }
            set { _isProspectDisabilityDesignationIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectDisabilityDesignation table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectDisabilityDesignation : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectDisabilityDesignation, Entities.Common.Records.TPDM.IProspectDisabilityDesignationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectDisabilityDesignationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectDisabilityDesignation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual ProspectDisability ProspectDisability { get; set; }

        Entities.Common.TPDM.IProspectDisability IProspectDisabilityDesignation.ProspectDisability
        {
            get { return ProspectDisability; }
            set { ProspectDisability = (ProspectDisability) value; }
        }

        int Entities.Common.Records.TPDM.IProspectDisabilityDesignationRecord.DisabilityDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectDisabilityRecord) ProspectDisability).DisabilityDescriptorId; }
            set { ((Entities.Common.Records.TPDM.IProspectDisabilityRecord) ProspectDisability).DisabilityDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IProspectDisabilityDesignationRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectDisabilityRecord) ProspectDisability).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectDisabilityRecord) ProspectDisability).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectDisabilityDesignationRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectDisabilityRecord) ProspectDisability).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectDisabilityRecord) ProspectDisability).ProspectIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDesignationDescriptorId 
        {
            get
            {
                if (_disabilityDesignationDescriptorId == default(int))
                    _disabilityDesignationDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDesignationDescriptor", _disabilityDesignationDescriptor);

                return _disabilityDesignationDescriptorId;
            } 
            set
            {
                _disabilityDesignationDescriptorId = value;
                _disabilityDesignationDescriptor = null;
            }
        }

        private int _disabilityDesignationDescriptorId;
        private string _disabilityDesignationDescriptor;

        public virtual string DisabilityDesignationDescriptor
        {
            get
            {
                if (_disabilityDesignationDescriptor == null)
                    _disabilityDesignationDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDesignationDescriptor", _disabilityDesignationDescriptorId);
                    
                return _disabilityDesignationDescriptor;
            }
            set
            {
                _disabilityDesignationDescriptor = value;
                _disabilityDesignationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDesignationDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDesignationDescriptorId", LookupTypeName = "DisabilityDesignationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (ProspectDisability as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDesignationDescriptorId", DisabilityDesignationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectDisabilityDesignation) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            ProspectDisability = (ProspectDisability) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectPersonalIdentificationDocument table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectPersonalIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectPersonalIdentificationDocument, Entities.Common.Records.TPDM.IProspectPersonalIdentificationDocumentRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectPersonalIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectPersonalIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectPersonalIdentificationDocument.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectPersonalIdentificationDocumentRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectPersonalIdentificationDocumentRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectPersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectPersonalIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.IProspectPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.IProspectPersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.IProspectPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.IProspectPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.IProspectPersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectQualifications table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectQualifications : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectQualifications, Entities.Common.Records.TPDM.IProspectQualificationsRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectQualificationsSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectQualifications()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectQualifications.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectQualificationsRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectQualificationsRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? CapacityToServe  { get; set; }
        public virtual bool Eligible  { get; set; }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? YearsOfServiceCurrentPlacement  { get; set; }
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal YearsOfServiceTotal  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectQualifications)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectQualifications) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCapacityToServeSupported = true;
        bool Entities.Common.TPDM.IProspectQualificationsSynchronizationSourceSupport.IsCapacityToServeSupported
        {
            get { return _isCapacityToServeSupported; }
            set { _isCapacityToServeSupported = value; }
        }

        private bool _isEligibleSupported = true;
        bool Entities.Common.TPDM.IProspectQualificationsSynchronizationSourceSupport.IsEligibleSupported
        {
            get { return _isEligibleSupported; }
            set { _isEligibleSupported = value; }
        }

        private bool _isYearsOfServiceCurrentPlacementSupported = true;
        bool Entities.Common.TPDM.IProspectQualificationsSynchronizationSourceSupport.IsYearsOfServiceCurrentPlacementSupported
        {
            get { return _isYearsOfServiceCurrentPlacementSupported; }
            set { _isYearsOfServiceCurrentPlacementSupported = value; }
        }

        private bool _isYearsOfServiceTotalSupported = true;
        bool Entities.Common.TPDM.IProspectQualificationsSynchronizationSourceSupport.IsYearsOfServiceTotalSupported
        {
            get { return _isYearsOfServiceTotalSupported; }
            set { _isYearsOfServiceTotalSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectRace table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectRace : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectRace, Entities.Common.Records.TPDM.IProspectRaceRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectRaceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectRace()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectRace.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectRaceRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectRaceRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int RaceDescriptorId 
        {
            get
            {
                if (_raceDescriptorId == default(int))
                    _raceDescriptorId = DescriptorsCache.GetCache().GetId("RaceDescriptor", _raceDescriptor);

                return _raceDescriptorId;
            } 
            set
            {
                _raceDescriptorId = value;
                _raceDescriptor = null;
            }
        }

        private int _raceDescriptorId;
        private string _raceDescriptor;

        public virtual string RaceDescriptor
        {
            get
            {
                if (_raceDescriptor == null)
                    _raceDescriptor = DescriptorsCache.GetCache().GetValue("RaceDescriptor", _raceDescriptorId);
                    
                return _raceDescriptor;
            }
            set
            {
                _raceDescriptor = value;
                _raceDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RaceDescriptor", new LookupColumnDetails { PropertyName = "RaceDescriptorId", LookupTypeName = "RaceDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RaceDescriptorId", RaceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectRace) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectRecruitmentEvent table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectRecruitmentEvent : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectRecruitmentEvent, Entities.Common.Records.TPDM.IProspectRecruitmentEventRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectRecruitmentEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectRecruitmentEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectRecruitmentEvent.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectRecruitmentEventRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectRecruitmentEventRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EventTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.RecruitmentEventAggregate.TPDM.RecruitmentEventReferenceData RecruitmentEventReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the RecruitmentEvent discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IProspectRecruitmentEvent.RecruitmentEventDiscriminator
        {
            get { return RecruitmentEventReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the RecruitmentEvent resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IProspectRecruitmentEvent.RecruitmentEventResourceId
        {
            get { return RecruitmentEventReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("EventTitle", EventTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectRecruitmentEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectRecruitmentEvent) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectTelephone table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectTelephone : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectTelephone, Entities.Common.Records.TPDM.IProspectTelephoneRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectTelephoneSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectTelephone()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectTelephone.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectTelephoneRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectTelephoneRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(24), NoDangerousText, NoWhitespace]
        public virtual string TelephoneNumber  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TelephoneNumberTypeDescriptorId 
        {
            get
            {
                if (_telephoneNumberTypeDescriptorId == default(int))
                    _telephoneNumberTypeDescriptorId = DescriptorsCache.GetCache().GetId("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptor);

                return _telephoneNumberTypeDescriptorId;
            } 
            set
            {
                _telephoneNumberTypeDescriptorId = value;
                _telephoneNumberTypeDescriptor = null;
            }
        }

        private int _telephoneNumberTypeDescriptorId;
        private string _telephoneNumberTypeDescriptor;

        public virtual string TelephoneNumberTypeDescriptor
        {
            get
            {
                if (_telephoneNumberTypeDescriptor == null)
                    _telephoneNumberTypeDescriptor = DescriptorsCache.GetCache().GetValue("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptorId);
                    
                return _telephoneNumberTypeDescriptor;
            }
            set
            {
                _telephoneNumberTypeDescriptor = value;
                _telephoneNumberTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual int? OrderOfPriority  { get; set; }
        public virtual bool? TextMessageCapabilityIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TelephoneNumberTypeDescriptor", new LookupColumnDetails { PropertyName = "TelephoneNumberTypeDescriptorId", LookupTypeName = "TelephoneNumberTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TelephoneNumber", TelephoneNumber);
            keyValues.Add("TelephoneNumberTypeDescriptorId", TelephoneNumberTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectTelephone) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.IProspectTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isOrderOfPrioritySupported = true;
        bool Entities.Common.TPDM.IProspectTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported
        {
            get { return _isOrderOfPrioritySupported; }
            set { _isOrderOfPrioritySupported = value; }
        }

        private bool _isTextMessageCapabilityIndicatorSupported = true;
        bool Entities.Common.TPDM.IProspectTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported
        {
            get { return _isTextMessageCapabilityIndicatorSupported; }
            set { _isTextMessageCapabilityIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectTouchpoint table of the Prospect aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectTouchpoint : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IProspectTouchpoint, Entities.Common.Records.TPDM.IProspectTouchpointRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectTouchpointSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public ProspectTouchpoint()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual Prospect Prospect { get; set; }

        Entities.Common.TPDM.IProspect IProspectTouchpoint.Prospect
        {
            get { return Prospect; }
            set { Prospect = (Prospect) value; }
        }

        int Entities.Common.Records.TPDM.IProspectTouchpointRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.IProspectTouchpointRecord.ProspectIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier; }
            set { ((Entities.Common.Records.TPDM.IProspectRecord) Prospect).ProspectIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string TouchpointContent  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime TouchpointDate 
        {
            get { return _touchpointDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _touchpointDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _touchpointDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Prospect as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TouchpointContent", TouchpointContent);
            keyValues.Add("TouchpointDate", TouchpointDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectTouchpoint)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectTouchpoint) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Prospect = (Prospect) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: ProspectTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.ProspectTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ProspectTypeDescriptor table of the ProspectTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ProspectTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IProspectTypeDescriptor, Entities.Common.Records.TPDM.IProspectTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IProspectTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ProspectTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ProspectTypeDescriptorId", ProspectTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IProspectTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IProspectTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IProspectTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IProspectTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IProspectTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IProspectTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IProspectTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IProspectTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IProspectTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: QuantitativeMeasure

namespace EdFi.Ods.Entities.NHibernate.QuantitativeMeasureAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="QuantitativeMeasure"/> entity.
    /// </summary>
    public class QuantitativeMeasureReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string QuantitativeMeasureIdentifier { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("QuantitativeMeasureIdentifier", QuantitativeMeasureIdentifier);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasure table of the QuantitativeMeasure aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasure : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IQuantitativeMeasure, Entities.Common.Records.TPDM.IQuantitativeMeasureRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public QuantitativeMeasure()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string QuantitativeMeasureIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? QuantitativeMeasureDatatypeDescriptorId 
        {
            get
            {
                if (_quantitativeMeasureDatatypeDescriptorId == default(int?))
                    _quantitativeMeasureDatatypeDescriptorId = string.IsNullOrWhiteSpace(_quantitativeMeasureDatatypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("QuantitativeMeasureDatatypeDescriptor", _quantitativeMeasureDatatypeDescriptor);

                return _quantitativeMeasureDatatypeDescriptorId;
            } 
            set
            {
                _quantitativeMeasureDatatypeDescriptorId = value;
                _quantitativeMeasureDatatypeDescriptor = null;
            }
        }

        private int? _quantitativeMeasureDatatypeDescriptorId;
        private string _quantitativeMeasureDatatypeDescriptor;

        public virtual string QuantitativeMeasureDatatypeDescriptor
        {
            get
            {
                if (_quantitativeMeasureDatatypeDescriptor == null)
                    _quantitativeMeasureDatatypeDescriptor = _quantitativeMeasureDatatypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("QuantitativeMeasureDatatypeDescriptor", _quantitativeMeasureDatatypeDescriptorId.Value);
                    
                return _quantitativeMeasureDatatypeDescriptor;
            }
            set
            {
                _quantitativeMeasureDatatypeDescriptor = value;
                _quantitativeMeasureDatatypeDescriptorId = default(int?);
            }
        }
        public virtual int? QuantitativeMeasureTypeDescriptorId 
        {
            get
            {
                if (_quantitativeMeasureTypeDescriptorId == default(int?))
                    _quantitativeMeasureTypeDescriptorId = string.IsNullOrWhiteSpace(_quantitativeMeasureTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("QuantitativeMeasureTypeDescriptor", _quantitativeMeasureTypeDescriptor);

                return _quantitativeMeasureTypeDescriptorId;
            } 
            set
            {
                _quantitativeMeasureTypeDescriptorId = value;
                _quantitativeMeasureTypeDescriptor = null;
            }
        }

        private int? _quantitativeMeasureTypeDescriptorId;
        private string _quantitativeMeasureTypeDescriptor;

        public virtual string QuantitativeMeasureTypeDescriptor
        {
            get
            {
                if (_quantitativeMeasureTypeDescriptor == null)
                    _quantitativeMeasureTypeDescriptor = _quantitativeMeasureTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("QuantitativeMeasureTypeDescriptor", _quantitativeMeasureTypeDescriptorId.Value);
                    
                return _quantitativeMeasureTypeDescriptor;
            }
            set
            {
                _quantitativeMeasureTypeDescriptor = value;
                _quantitativeMeasureTypeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IQuantitativeMeasure.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IQuantitativeMeasure.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "QuantitativeMeasureDatatypeDescriptor", new LookupColumnDetails { PropertyName = "QuantitativeMeasureDatatypeDescriptorId", LookupTypeName = "QuantitativeMeasureDatatypeDescriptor"} },
                { "QuantitativeMeasureTypeDescriptor", new LookupColumnDetails { PropertyName = "QuantitativeMeasureTypeDescriptorId", LookupTypeName = "QuantitativeMeasureTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("QuantitativeMeasureIdentifier", QuantitativeMeasureIdentifier);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IQuantitativeMeasure)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IQuantitativeMeasure) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isQuantitativeMeasureDatatypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport.IsQuantitativeMeasureDatatypeDescriptorSupported
        {
            get { return _isQuantitativeMeasureDatatypeDescriptorSupported; }
            set { _isQuantitativeMeasureDatatypeDescriptorSupported = value; }
        }

        private bool _isQuantitativeMeasureTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureSynchronizationSourceSupport.IsQuantitativeMeasureTypeDescriptorSupported
        {
            get { return _isQuantitativeMeasureTypeDescriptorSupported; }
            set { _isQuantitativeMeasureTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: QuantitativeMeasureDatatypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.QuantitativeMeasureDatatypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureDatatypeDescriptor table of the QuantitativeMeasureDatatypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureDatatypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor, Entities.Common.Records.TPDM.IQuantitativeMeasureDatatypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int QuantitativeMeasureDatatypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("QuantitativeMeasureDatatypeDescriptorId", QuantitativeMeasureDatatypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: QuantitativeMeasureScore

namespace EdFi.Ods.Entities.NHibernate.QuantitativeMeasureScoreAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="QuantitativeMeasureScore"/> entity.
    /// </summary>
    public class QuantitativeMeasureScoreReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual string QuantitativeMeasureIdentifier { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("QuantitativeMeasureIdentifier", QuantitativeMeasureIdentifier);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureScore table of the QuantitativeMeasureScore aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureScore : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IQuantitativeMeasureScore, Entities.Common.Records.TPDM.IQuantitativeMeasureScoreRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public QuantitativeMeasureScore()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string QuantitativeMeasureIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal ScoreValue  { get; set; }
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal? StandardError  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingReferenceData EvaluationElementRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElementRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationElementRatingDiscriminator
        {
            get { return EvaluationElementRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElementRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IQuantitativeMeasureScore.EvaluationElementRatingResourceId
        {
            get { return EvaluationElementRatingReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.QuantitativeMeasureAggregate.TPDM.QuantitativeMeasureReferenceData QuantitativeMeasureReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the QuantitativeMeasure discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IQuantitativeMeasureScore.QuantitativeMeasureDiscriminator
        {
            get { return QuantitativeMeasureReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the QuantitativeMeasure resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IQuantitativeMeasureScore.QuantitativeMeasureResourceId
        {
            get { return QuantitativeMeasureReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("QuantitativeMeasureIdentifier", QuantitativeMeasureIdentifier);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IQuantitativeMeasureScore)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IQuantitativeMeasureScore) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isScoreValueSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport.IsScoreValueSupported
        {
            get { return _isScoreValueSupported; }
            set { _isScoreValueSupported = value; }
        }

        private bool _isStandardErrorSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureScoreSynchronizationSourceSupport.IsStandardErrorSupported
        {
            get { return _isStandardErrorSupported; }
            set { _isStandardErrorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: QuantitativeMeasureTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.QuantitativeMeasureTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.QuantitativeMeasureTypeDescriptor table of the QuantitativeMeasureTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class QuantitativeMeasureTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor, Entities.Common.Records.TPDM.IQuantitativeMeasureTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int QuantitativeMeasureTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("QuantitativeMeasureTypeDescriptorId", QuantitativeMeasureTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RecruitmentEvent

namespace EdFi.Ods.Entities.NHibernate.RecruitmentEventAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="RecruitmentEvent"/> entity.
    /// </summary>
    public class RecruitmentEventReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime EventDate { get; set; }
        public virtual string EventTitle { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("EventTitle", EventTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEvent table of the RecruitmentEvent aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEvent : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IRecruitmentEvent, Entities.Common.Records.TPDM.IRecruitmentEventRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RecruitmentEvent()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EventDate 
        {
            get { return _eventDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _eventDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _eventDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EventTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(255), NoDangerousText]
        public virtual string EventDescription  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string EventLocation  { get; set; }
        [RequiredWithNonDefault]
        public virtual int RecruitmentEventTypeDescriptorId 
        {
            get
            {
                if (_recruitmentEventTypeDescriptorId == default(int))
                    _recruitmentEventTypeDescriptorId = DescriptorsCache.GetCache().GetId("RecruitmentEventTypeDescriptor", _recruitmentEventTypeDescriptor);

                return _recruitmentEventTypeDescriptorId;
            } 
            set
            {
                _recruitmentEventTypeDescriptorId = value;
                _recruitmentEventTypeDescriptor = null;
            }
        }

        private int _recruitmentEventTypeDescriptorId;
        private string _recruitmentEventTypeDescriptor;

        public virtual string RecruitmentEventTypeDescriptor
        {
            get
            {
                if (_recruitmentEventTypeDescriptor == null)
                    _recruitmentEventTypeDescriptor = DescriptorsCache.GetCache().GetValue("RecruitmentEventTypeDescriptor", _recruitmentEventTypeDescriptorId);
                    
                return _recruitmentEventTypeDescriptor;
            }
            set
            {
                _recruitmentEventTypeDescriptor = value;
                _recruitmentEventTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RecruitmentEventTypeDescriptor", new LookupColumnDetails { PropertyName = "RecruitmentEventTypeDescriptorId", LookupTypeName = "RecruitmentEventTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EventDate", EventDate);
            keyValues.Add("EventTitle", EventTitle);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEvent)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEvent) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEventDescriptionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsEventDescriptionSupported
        {
            get { return _isEventDescriptionSupported; }
            set { _isEventDescriptionSupported = value; }
        }

        private bool _isEventLocationSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsEventLocationSupported
        {
            get { return _isEventLocationSupported; }
            set { _isEventLocationSupported = value; }
        }

        private bool _isRecruitmentEventTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventSynchronizationSourceSupport.IsRecruitmentEventTypeDescriptorSupported
        {
            get { return _isRecruitmentEventTypeDescriptorSupported; }
            set { _isRecruitmentEventTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RecruitmentEventTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.RecruitmentEventTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RecruitmentEventTypeDescriptor table of the RecruitmentEventTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RecruitmentEventTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IRecruitmentEventTypeDescriptor, Entities.Common.Records.TPDM.IRecruitmentEventTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int RecruitmentEventTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("RecruitmentEventTypeDescriptorId", RecruitmentEventTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRecruitmentEventTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRecruitmentEventTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IRecruitmentEventTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RubricDimension

namespace EdFi.Ods.Entities.NHibernate.RubricDimensionAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="RubricDimension"/> entity.
    /// </summary>
    public class RubricDimensionReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual int RubricRating { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("RubricRating", RubricRating);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RubricDimension table of the RubricDimension aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RubricDimension : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IRubricDimension, Entities.Common.Records.TPDM.IRubricDimensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public RubricDimension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature]
        public virtual int RubricRating  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(1024), NoDangerousText]
        public virtual string CriterionDescription  { get; set; }
        public virtual int? DimensionOrder  { get; set; }
        public virtual int? RubricRatingLevelDescriptorId 
        {
            get
            {
                if (_rubricRatingLevelDescriptorId == default(int?))
                    _rubricRatingLevelDescriptorId = string.IsNullOrWhiteSpace(_rubricRatingLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("RubricRatingLevelDescriptor", _rubricRatingLevelDescriptor);

                return _rubricRatingLevelDescriptorId;
            } 
            set
            {
                _rubricRatingLevelDescriptorId = value;
                _rubricRatingLevelDescriptor = null;
            }
        }

        private int? _rubricRatingLevelDescriptorId;
        private string _rubricRatingLevelDescriptor;

        public virtual string RubricRatingLevelDescriptor
        {
            get
            {
                if (_rubricRatingLevelDescriptor == null)
                    _rubricRatingLevelDescriptor = _rubricRatingLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("RubricRatingLevelDescriptor", _rubricRatingLevelDescriptorId.Value);
                    
                return _rubricRatingLevelDescriptor;
            }
            set
            {
                _rubricRatingLevelDescriptor = value;
                _rubricRatingLevelDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IRubricDimension.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IRubricDimension.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "RubricRatingLevelDescriptor", new LookupColumnDetails { PropertyName = "RubricRatingLevelDescriptorId", LookupTypeName = "RubricRatingLevelDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("RubricRating", RubricRating);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRubricDimension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRubricDimension) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCriterionDescriptionSupported = true;
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsCriterionDescriptionSupported
        {
            get { return _isCriterionDescriptionSupported; }
            set { _isCriterionDescriptionSupported = value; }
        }

        private bool _isDimensionOrderSupported = true;
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsDimensionOrderSupported
        {
            get { return _isDimensionOrderSupported; }
            set { _isDimensionOrderSupported = value; }
        }

        private bool _isRubricRatingLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.IRubricDimensionSynchronizationSourceSupport.IsRubricRatingLevelDescriptorSupported
        {
            get { return _isRubricRatingLevelDescriptorSupported; }
            set { _isRubricRatingLevelDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: RubricRatingLevelDescriptor

namespace EdFi.Ods.Entities.NHibernate.RubricRatingLevelDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.RubricRatingLevelDescriptor table of the RubricRatingLevelDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class RubricRatingLevelDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IRubricRatingLevelDescriptor, Entities.Common.Records.TPDM.IRubricRatingLevelDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int RubricRatingLevelDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("RubricRatingLevelDescriptorId", RubricRatingLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IRubricRatingLevelDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IRubricRatingLevelDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IRubricRatingLevelDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SalaryTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.SalaryTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SalaryTypeDescriptor table of the SalaryTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SalaryTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ISalaryTypeDescriptor, Entities.Common.Records.TPDM.ISalaryTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int SalaryTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("SalaryTypeDescriptorId", SalaryTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISalaryTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISalaryTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ISalaryTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: School

namespace EdFi.Ods.Entities.NHibernate.SchoolAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SchoolExtension table of the School aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SchoolExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ISchoolExtension, Entities.Common.Records.TPDM.ISchoolExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SchoolExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.School School { get; set; }

        Entities.Common.EdFi.ISchool ISchoolExtension.School
        {
            get { return School; }
            set { School = (EdFi.School) value; }
        }

        int Entities.Common.Records.TPDM.ISchoolExtensionRecord.SchoolId
        {
            get { return ((Entities.Common.Records.EdFi.ISchoolRecord) School).SchoolId; }
            set { ((Entities.Common.Records.EdFi.ISchoolRecord) School).SchoolId = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        public virtual bool? ImprovingSchool  { get; set; }
        public virtual int? SchoolStatusDescriptorId 
        {
            get
            {
                if (_schoolStatusDescriptorId == default(int?))
                    _schoolStatusDescriptorId = string.IsNullOrWhiteSpace(_schoolStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SchoolStatusDescriptor", _schoolStatusDescriptor);

                return _schoolStatusDescriptorId;
            } 
            set
            {
                _schoolStatusDescriptorId = value;
                _schoolStatusDescriptor = null;
            }
        }

        private int? _schoolStatusDescriptorId;
        private string _schoolStatusDescriptor;

        public virtual string SchoolStatusDescriptor
        {
            get
            {
                if (_schoolStatusDescriptor == null)
                    _schoolStatusDescriptor = _schoolStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SchoolStatusDescriptor", _schoolStatusDescriptorId.Value);
                    
                return _schoolStatusDescriptor;
            }
            set
            {
                _schoolStatusDescriptor = value;
                _schoolStatusDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
                { "SchoolStatusDescriptor", new LookupColumnDetails { PropertyName = "SchoolStatusDescriptorId", LookupTypeName = "SchoolStatusDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (School as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISchoolExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISchoolExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            School = (EdFi.School) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        private bool _isImprovingSchoolSupported = true;
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsImprovingSchoolSupported
        {
            get { return _isImprovingSchoolSupported; }
            set { _isImprovingSchoolSupported = value; }
        }

        private bool _isSchoolStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ISchoolExtensionSynchronizationSourceSupport.IsSchoolStatusDescriptorSupported
        {
            get { return _isSchoolStatusDescriptorSupported; }
            set { _isSchoolStatusDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SchoolStatusDescriptor

namespace EdFi.Ods.Entities.NHibernate.SchoolStatusDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SchoolStatusDescriptor table of the SchoolStatusDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SchoolStatusDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ISchoolStatusDescriptor, Entities.Common.Records.TPDM.ISchoolStatusDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISchoolStatusDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int SchoolStatusDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("SchoolStatusDescriptorId", SchoolStatusDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISchoolStatusDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISchoolStatusDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ISchoolStatusDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ISchoolStatusDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ISchoolStatusDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ISchoolStatusDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ISchoolStatusDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ISchoolStatusDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ISchoolStatusDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: Staff

namespace EdFi.Ods.Entities.NHibernate.StaffAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffBackgroundCheck table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffBackgroundCheck : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffBackgroundCheck, Entities.Common.Records.TPDM.IStaffBackgroundCheckRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffBackgroundCheckSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffBackgroundCheck()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffBackgroundCheck.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        int Entities.Common.Records.TPDM.IStaffBackgroundCheckRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI; }
            set { ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int BackgroundCheckTypeDescriptorId 
        {
            get
            {
                if (_backgroundCheckTypeDescriptorId == default(int))
                    _backgroundCheckTypeDescriptorId = DescriptorsCache.GetCache().GetId("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptor);

                return _backgroundCheckTypeDescriptorId;
            } 
            set
            {
                _backgroundCheckTypeDescriptorId = value;
                _backgroundCheckTypeDescriptor = null;
            }
        }

        private int _backgroundCheckTypeDescriptorId;
        private string _backgroundCheckTypeDescriptor;

        public virtual string BackgroundCheckTypeDescriptor
        {
            get
            {
                if (_backgroundCheckTypeDescriptor == null)
                    _backgroundCheckTypeDescriptor = DescriptorsCache.GetCache().GetValue("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptorId);
                    
                return _backgroundCheckTypeDescriptor;
            }
            set
            {
                _backgroundCheckTypeDescriptor = value;
                _backgroundCheckTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BackgroundCheckCompletedDate 
        {
            get { return _backgroundCheckCompletedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _backgroundCheckCompletedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _backgroundCheckCompletedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _backgroundCheckCompletedDate;
        
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BackgroundCheckRequestedDate 
        {
            get { return _backgroundCheckRequestedDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _backgroundCheckRequestedDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _backgroundCheckRequestedDate;
        
        public virtual int? BackgroundCheckStatusDescriptorId 
        {
            get
            {
                if (_backgroundCheckStatusDescriptorId == default(int?))
                    _backgroundCheckStatusDescriptorId = string.IsNullOrWhiteSpace(_backgroundCheckStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptor);

                return _backgroundCheckStatusDescriptorId;
            } 
            set
            {
                _backgroundCheckStatusDescriptorId = value;
                _backgroundCheckStatusDescriptor = null;
            }
        }

        private int? _backgroundCheckStatusDescriptorId;
        private string _backgroundCheckStatusDescriptor;

        public virtual string BackgroundCheckStatusDescriptor
        {
            get
            {
                if (_backgroundCheckStatusDescriptor == null)
                    _backgroundCheckStatusDescriptor = _backgroundCheckStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptorId.Value);
                    
                return _backgroundCheckStatusDescriptor;
            }
            set
            {
                _backgroundCheckStatusDescriptor = value;
                _backgroundCheckStatusDescriptorId = default(int?);
            }
        }
        public virtual bool? Fingerprint  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "BackgroundCheckStatusDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckStatusDescriptorId", LookupTypeName = "BackgroundCheckStatusDescriptor"} },
                { "BackgroundCheckTypeDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckTypeDescriptorId", LookupTypeName = "BackgroundCheckTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BackgroundCheckTypeDescriptorId", BackgroundCheckTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffBackgroundCheck) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBackgroundCheckCompletedDateSupported = true;
        bool Entities.Common.TPDM.IStaffBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported
        {
            get { return _isBackgroundCheckCompletedDateSupported; }
            set { _isBackgroundCheckCompletedDateSupported = value; }
        }

        private bool _isBackgroundCheckRequestedDateSupported = true;
        bool Entities.Common.TPDM.IStaffBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported
        {
            get { return _isBackgroundCheckRequestedDateSupported; }
            set { _isBackgroundCheckRequestedDateSupported = value; }
        }

        private bool _isBackgroundCheckStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported
        {
            get { return _isBackgroundCheckStatusDescriptorSupported; }
            set { _isBackgroundCheckStatusDescriptorSupported = value; }
        }

        private bool _isFingerprintSupported = true;
        bool Entities.Common.TPDM.IStaffBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported
        {
            get { return _isFingerprintSupported; }
            set { _isFingerprintSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffHighlyQualifiedAcademicSubject table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffHighlyQualifiedAcademicSubject : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, Entities.Common.Records.TPDM.IStaffHighlyQualifiedAcademicSubjectRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffHighlyQualifiedAcademicSubject()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffHighlyQualifiedAcademicSubject.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        int Entities.Common.Records.TPDM.IStaffHighlyQualifiedAcademicSubjectRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI; }
            set { ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int))
                    _academicSubjectDescriptorId = DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicSubjectDescriptorId", AcademicSubjectDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffSalary table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffSalary : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffSalary, Entities.Common.Records.TPDM.IStaffSalaryRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffSalarySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffSalary()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffSalary.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        int Entities.Common.Records.TPDM.IStaffSalaryRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI; }
            set { ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999999999999.9999", "999999999999999.9999")]
        public virtual decimal? SalaryAmount  { get; set; }
        public virtual int? SalaryMaxRange  { get; set; }
        public virtual int? SalaryMinRange  { get; set; }
        public virtual int? SalaryTypeDescriptorId 
        {
            get
            {
                if (_salaryTypeDescriptorId == default(int?))
                    _salaryTypeDescriptorId = string.IsNullOrWhiteSpace(_salaryTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SalaryTypeDescriptor", _salaryTypeDescriptor);

                return _salaryTypeDescriptorId;
            } 
            set
            {
                _salaryTypeDescriptorId = value;
                _salaryTypeDescriptor = null;
            }
        }

        private int? _salaryTypeDescriptorId;
        private string _salaryTypeDescriptor;

        public virtual string SalaryTypeDescriptor
        {
            get
            {
                if (_salaryTypeDescriptor == null)
                    _salaryTypeDescriptor = _salaryTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SalaryTypeDescriptor", _salaryTypeDescriptorId.Value);
                    
                return _salaryTypeDescriptor;
            }
            set
            {
                _salaryTypeDescriptor = value;
                _salaryTypeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "SalaryTypeDescriptor", new LookupColumnDetails { PropertyName = "SalaryTypeDescriptorId", LookupTypeName = "SalaryTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffSalary)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffSalary) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isSalaryAmountSupported = true;
        bool Entities.Common.TPDM.IStaffSalarySynchronizationSourceSupport.IsSalaryAmountSupported
        {
            get { return _isSalaryAmountSupported; }
            set { _isSalaryAmountSupported = value; }
        }

        private bool _isSalaryMaxRangeSupported = true;
        bool Entities.Common.TPDM.IStaffSalarySynchronizationSourceSupport.IsSalaryMaxRangeSupported
        {
            get { return _isSalaryMaxRangeSupported; }
            set { _isSalaryMaxRangeSupported = value; }
        }

        private bool _isSalaryMinRangeSupported = true;
        bool Entities.Common.TPDM.IStaffSalarySynchronizationSourceSupport.IsSalaryMinRangeSupported
        {
            get { return _isSalaryMinRangeSupported; }
            set { _isSalaryMinRangeSupported = value; }
        }

        private bool _isSalaryTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffSalarySynchronizationSourceSupport.IsSalaryTypeDescriptorSupported
        {
            get { return _isSalaryTypeDescriptorSupported; }
            set { _isSalaryTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffSeniority table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffSeniority : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffSeniority, Entities.Common.Records.TPDM.IStaffSeniorityRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffSenioritySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffSeniority()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffSeniority.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        int Entities.Common.Records.TPDM.IStaffSeniorityRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI; }
            set { ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int CredentialFieldDescriptorId 
        {
            get
            {
                if (_credentialFieldDescriptorId == default(int))
                    _credentialFieldDescriptorId = DescriptorsCache.GetCache().GetId("CredentialFieldDescriptor", _credentialFieldDescriptor);

                return _credentialFieldDescriptorId;
            } 
            set
            {
                _credentialFieldDescriptorId = value;
                _credentialFieldDescriptor = null;
            }
        }

        private int _credentialFieldDescriptorId;
        private string _credentialFieldDescriptor;

        public virtual string CredentialFieldDescriptor
        {
            get
            {
                if (_credentialFieldDescriptor == null)
                    _credentialFieldDescriptor = DescriptorsCache.GetCache().GetValue("CredentialFieldDescriptor", _credentialFieldDescriptorId);
                    
                return _credentialFieldDescriptor;
            }
            set
            {
                _credentialFieldDescriptor = value;
                _credentialFieldDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string NameOfInstitution  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal YearsExperience  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CredentialFieldDescriptor", new LookupColumnDetails { PropertyName = "CredentialFieldDescriptorId", LookupTypeName = "CredentialFieldDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CredentialFieldDescriptorId", CredentialFieldDescriptorId);
            keyValues.Add("NameOfInstitution", NameOfInstitution);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffSeniority)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffSeniority) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isYearsExperienceSupported = true;
        bool Entities.Common.TPDM.IStaffSenioritySynchronizationSourceSupport.IsYearsExperienceSupported
        {
            get { return _isYearsExperienceSupported; }
            set { _isYearsExperienceSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffTeacherEducatorResearch table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffTeacherEducatorResearch : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffTeacherEducatorResearch, Entities.Common.Records.TPDM.IStaffTeacherEducatorResearchRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffTeacherEducatorResearchSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffTeacherEducatorResearch()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffTeacherEducatorResearch.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        int Entities.Common.Records.TPDM.IStaffTeacherEducatorResearchRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI; }
            set { ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime ResearchExperienceDate 
        {
            get { return _researchExperienceDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _researchExperienceDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _researchExperienceDate;
        
        [StringLength(1024), NoDangerousText]
        public virtual string ResearchExperienceDescription  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string ResearchExperienceTitle  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffTeacherEducatorResearch)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffTeacherEducatorResearch) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResearchExperienceDateSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherEducatorResearchSynchronizationSourceSupport.IsResearchExperienceDateSupported
        {
            get { return _isResearchExperienceDateSupported; }
            set { _isResearchExperienceDateSupported = value; }
        }

        private bool _isResearchExperienceDescriptionSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherEducatorResearchSynchronizationSourceSupport.IsResearchExperienceDescriptionSupported
        {
            get { return _isResearchExperienceDescriptionSupported; }
            set { _isResearchExperienceDescriptionSupported = value; }
        }

        private bool _isResearchExperienceTitleSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherEducatorResearchSynchronizationSourceSupport.IsResearchExperienceTitleSupported
        {
            get { return _isResearchExperienceTitleSupported; }
            set { _isResearchExperienceTitleSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffTeacherPreparationProgram table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffTeacherPreparationProgram : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffTeacherPreparationProgram, Entities.Common.Records.TPDM.IStaffTeacherPreparationProgramRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffTeacherPreparationProgramSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffTeacherPreparationProgram()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.TPDM.IStaffExtension IStaffTeacherPreparationProgram.StaffExtension
        {
            get { return (IStaffExtension) Staff.Extensions["TPDM"]; }
            set { Staff.Extensions["TPDM"] = value; }
        }

        int Entities.Common.Records.TPDM.IStaffTeacherPreparationProgramRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI; }
            set { ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string TeacherPreparationProgramName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? GPA  { get; set; }
        [RequiredWithNonDefault]
        public virtual int LevelOfDegreeAwardedDescriptorId 
        {
            get
            {
                if (_levelOfDegreeAwardedDescriptorId == default(int))
                    _levelOfDegreeAwardedDescriptorId = DescriptorsCache.GetCache().GetId("LevelOfDegreeAwardedDescriptor", _levelOfDegreeAwardedDescriptor);

                return _levelOfDegreeAwardedDescriptorId;
            } 
            set
            {
                _levelOfDegreeAwardedDescriptorId = value;
                _levelOfDegreeAwardedDescriptor = null;
            }
        }

        private int _levelOfDegreeAwardedDescriptorId;
        private string _levelOfDegreeAwardedDescriptor;

        public virtual string LevelOfDegreeAwardedDescriptor
        {
            get
            {
                if (_levelOfDegreeAwardedDescriptor == null)
                    _levelOfDegreeAwardedDescriptor = DescriptorsCache.GetCache().GetValue("LevelOfDegreeAwardedDescriptor", _levelOfDegreeAwardedDescriptorId);
                    
                return _levelOfDegreeAwardedDescriptor;
            }
            set
            {
                _levelOfDegreeAwardedDescriptor = value;
                _levelOfDegreeAwardedDescriptorId = default(int);
            }
        }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string MajorSpecialization  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string NameOfInstitution  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string TeacherPreparationProgramIdentifier  { get; set; }
        [RequiredWithNonDefault]
        public virtual int TeacherPreparationProgramTypeDescriptorId 
        {
            get
            {
                if (_teacherPreparationProgramTypeDescriptorId == default(int))
                    _teacherPreparationProgramTypeDescriptorId = DescriptorsCache.GetCache().GetId("TeacherPreparationProgramTypeDescriptor", _teacherPreparationProgramTypeDescriptor);

                return _teacherPreparationProgramTypeDescriptorId;
            } 
            set
            {
                _teacherPreparationProgramTypeDescriptorId = value;
                _teacherPreparationProgramTypeDescriptor = null;
            }
        }

        private int _teacherPreparationProgramTypeDescriptorId;
        private string _teacherPreparationProgramTypeDescriptor;

        public virtual string TeacherPreparationProgramTypeDescriptor
        {
            get
            {
                if (_teacherPreparationProgramTypeDescriptor == null)
                    _teacherPreparationProgramTypeDescriptor = DescriptorsCache.GetCache().GetValue("TeacherPreparationProgramTypeDescriptor", _teacherPreparationProgramTypeDescriptorId);
                    
                return _teacherPreparationProgramTypeDescriptor;
            }
            set
            {
                _teacherPreparationProgramTypeDescriptor = value;
                _teacherPreparationProgramTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LevelOfDegreeAwardedDescriptor", new LookupColumnDetails { PropertyName = "LevelOfDegreeAwardedDescriptorId", LookupTypeName = "LevelOfDegreeAwardedDescriptor"} },
                { "TeacherPreparationProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "TeacherPreparationProgramTypeDescriptorId", LookupTypeName = "TeacherPreparationProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TeacherPreparationProgramName", TeacherPreparationProgramName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffTeacherPreparationProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffTeacherPreparationProgram) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isGPASupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProgramSynchronizationSourceSupport.IsGPASupported
        {
            get { return _isGPASupported; }
            set { _isGPASupported = value; }
        }

        private bool _isLevelOfDegreeAwardedDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProgramSynchronizationSourceSupport.IsLevelOfDegreeAwardedDescriptorSupported
        {
            get { return _isLevelOfDegreeAwardedDescriptorSupported; }
            set { _isLevelOfDegreeAwardedDescriptorSupported = value; }
        }

        private bool _isMajorSpecializationSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProgramSynchronizationSourceSupport.IsMajorSpecializationSupported
        {
            get { return _isMajorSpecializationSupported; }
            set { _isMajorSpecializationSupported = value; }
        }

        private bool _isNameOfInstitutionSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProgramSynchronizationSourceSupport.IsNameOfInstitutionSupported
        {
            get { return _isNameOfInstitutionSupported; }
            set { _isNameOfInstitutionSupported = value; }
        }

        private bool _isTeacherPreparationProgramIdentifierSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProgramSynchronizationSourceSupport.IsTeacherPreparationProgramIdentifierSupported
        {
            get { return _isTeacherPreparationProgramIdentifierSupported; }
            set { _isTeacherPreparationProgramIdentifierSupported = value; }
        }

        private bool _isTeacherPreparationProgramTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProgramSynchronizationSourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported
        {
            get { return _isTeacherPreparationProgramTypeDescriptorSupported; }
            set { _isTeacherPreparationProgramTypeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffExtension table of the Staff aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffExtension, Entities.Common.Records.TPDM.IStaffExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.Staff Staff { get; set; }

        Entities.Common.EdFi.IStaff IStaffExtension.Staff
        {
            get { return Staff; }
            set { Staff = (EdFi.Staff) value; }
        }

        int Entities.Common.Records.TPDM.IStaffExtensionRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI; }
            set { ((Entities.Common.Records.EdFi.IStaffRecord) Staff).StaffUSI = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? ProbationCompleteDate 
        {
            get { return _probationCompleteDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _probationCompleteDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _probationCompleteDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _probationCompleteDate;
        
        public virtual bool? Tenured  { get; set; }
        public virtual bool? TenureTrack  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // This property implementation exists to provide the mapper with reflection-based access to the target instance's .NET type (for creating new instances)
        public Entities.NHibernate.StaffAggregate.TPDM.StaffSalary StaffSalary
        {
            get { return (Entities.NHibernate.StaffAggregate.TPDM.StaffSalary) (this as Entities.Common.TPDM.IStaffExtension).StaffSalary;  }
            set { (this as Entities.Common.TPDM.IStaffExtension).StaffSalary = value;  }
        }

        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        Entities.Common.TPDM.IStaffSalary Entities.Common.TPDM.IStaffExtension.StaffSalary
        {
            get
            {
                var list = (IList) Staff.AggregateExtensions["TPDM_StaffSalaries"];

                if (list != null && list.Count > 0)
                    return (Entities.Common.TPDM.IStaffSalary) list[0];

                return null;
            }
            set
            {
                // Delete the existing object
                var list = (IList) Staff.AggregateExtensions["TPDM_StaffSalaries"] ?? new List<object>();
                list.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    list.Add(value);

                    // Set the parent reference
                    (value as IChildEntity).SetParent(Staff);
                }
            }
        }
        // This property implementation exists to provide the mapper with reflection-based access to the target instance's .NET type (for creating new instances)
        public Entities.NHibernate.StaffAggregate.TPDM.StaffTeacherEducatorResearch StaffTeacherEducatorResearch
        {
            get { return (Entities.NHibernate.StaffAggregate.TPDM.StaffTeacherEducatorResearch) (this as Entities.Common.TPDM.IStaffExtension).StaffTeacherEducatorResearch;  }
            set { (this as Entities.Common.TPDM.IStaffExtension).StaffTeacherEducatorResearch = value;  }
        }

        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        Entities.Common.TPDM.IStaffTeacherEducatorResearch Entities.Common.TPDM.IStaffExtension.StaffTeacherEducatorResearch
        {
            get
            {
                var list = (IList) Staff.AggregateExtensions["TPDM_StaffTeacherEducatorResearches"];

                if (list != null && list.Count > 0)
                    return (Entities.Common.TPDM.IStaffTeacherEducatorResearch) list[0];

                return null;
            }
            set
            {
                // Delete the existing object
                var list = (IList) Staff.AggregateExtensions["TPDM_StaffTeacherEducatorResearches"] ?? new List<object>();
                list.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    list.Add(value);

                    // Set the parent reference
                    (value as IChildEntity).SetParent(Staff);
                }
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        private ICollection<Entities.Common.TPDM.IStaffBackgroundCheck> _staffBackgroundChecks;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.IStaffBackgroundCheck> IStaffExtension.StaffBackgroundChecks
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, StaffBackgroundCheck>((IList<object>) Staff.AggregateExtensions["TPDM_StaffBackgroundChecks"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (StaffBackgroundCheck item in sourceList)
                    if (item.Staff == null)
                        item.Staff = this.Staff;
                // -------------------------------------------------------------

                if (_staffBackgroundChecks == null)
                    _staffBackgroundChecks = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffBackgroundCheck, StaffBackgroundCheck>(sourceList);
                
                return _staffBackgroundChecks;
            }
            set
            {
                Staff.AggregateExtensions["TPDM_StaffBackgroundChecks"] = value;
            }
        }
        private ICollection<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject> _staffHighlyQualifiedAcademicSubjects;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject> IStaffExtension.StaffHighlyQualifiedAcademicSubjects
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, StaffHighlyQualifiedAcademicSubject>((IList<object>) Staff.AggregateExtensions["TPDM_StaffHighlyQualifiedAcademicSubjects"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (StaffHighlyQualifiedAcademicSubject item in sourceList)
                    if (item.Staff == null)
                        item.Staff = this.Staff;
                // -------------------------------------------------------------

                if (_staffHighlyQualifiedAcademicSubjects == null)
                    _staffHighlyQualifiedAcademicSubjects = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, StaffHighlyQualifiedAcademicSubject>(sourceList);
                
                return _staffHighlyQualifiedAcademicSubjects;
            }
            set
            {
                Staff.AggregateExtensions["TPDM_StaffHighlyQualifiedAcademicSubjects"] = value;
            }
        }
        private ICollection<Entities.Common.TPDM.IStaffSeniority> _staffSeniorities;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.IStaffSeniority> IStaffExtension.StaffSeniorities
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, StaffSeniority>((IList<object>) Staff.AggregateExtensions["TPDM_StaffSeniorities"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (StaffSeniority item in sourceList)
                    if (item.Staff == null)
                        item.Staff = this.Staff;
                // -------------------------------------------------------------

                if (_staffSeniorities == null)
                    _staffSeniorities = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffSeniority, StaffSeniority>(sourceList);
                
                return _staffSeniorities;
            }
            set
            {
                Staff.AggregateExtensions["TPDM_StaffSeniorities"] = value;
            }
        }
        private ICollection<Entities.Common.TPDM.IStaffTeacherPreparationProgram> _staffTeacherPreparationPrograms;
        // Aggregate extension explicit implementation to redirect model abstraction to the persistent entity location
        ICollection<Entities.Common.TPDM.IStaffTeacherPreparationProgram> IStaffExtension.StaffTeacherPreparationPrograms
        {
            get
            {
                var sourceList =  new ContravariantCollectionAdapter<object, StaffTeacherPreparationProgram>((IList<object>) Staff.AggregateExtensions["TPDM_StaffTeacherPreparationPrograms"]);

                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (StaffTeacherPreparationProgram item in sourceList)
                    if (item.Staff == null)
                        item.Staff = this.Staff;
                // -------------------------------------------------------------

                if (_staffTeacherPreparationPrograms == null)
                    _staffTeacherPreparationPrograms = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffTeacherPreparationProgram, StaffTeacherPreparationProgram>(sourceList);
                
                return _staffTeacherPreparationPrograms;
            }
            set
            {
                Staff.AggregateExtensions["TPDM_StaffTeacherPreparationPrograms"] = value;
            }
        }
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (Staff as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            Staff = (EdFi.Staff) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isProbationCompleteDateSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsProbationCompleteDateSupported
        {
            get { return _isProbationCompleteDateSupported; }
            set { _isProbationCompleteDateSupported = value; }
        }

        private bool _isStaffBackgroundChecksSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffBackgroundChecksSupported
        {
            get { return _isStaffBackgroundChecksSupported; }
            set { _isStaffBackgroundChecksSupported = value; }
        }

        private bool _isStaffHighlyQualifiedAcademicSubjectsSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported
        {
            get { return _isStaffHighlyQualifiedAcademicSubjectsSupported; }
            set { _isStaffHighlyQualifiedAcademicSubjectsSupported = value; }
        }

        private bool _isStaffSalarySupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffSalarySupported
        {
            get { return _isStaffSalarySupported; }
            set { _isStaffSalarySupported = value; }
        }

        private bool _isStaffSenioritiesSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffSenioritiesSupported
        {
            get { return _isStaffSenioritiesSupported; }
            set { _isStaffSenioritiesSupported = value; }
        }

        private bool _isStaffTeacherEducatorResearchSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffTeacherEducatorResearchSupported
        {
            get { return _isStaffTeacherEducatorResearchSupported; }
            set { _isStaffTeacherEducatorResearchSupported = value; }
        }

        private bool _isStaffTeacherPreparationProgramsSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffTeacherPreparationProgramsSupported
        {
            get { return _isStaffTeacherPreparationProgramsSupported; }
            set { _isStaffTeacherPreparationProgramsSupported = value; }
        }

        private bool _isTenuredSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsTenuredSupported
        {
            get { return _isTenuredSupported; }
            set { _isTenuredSupported = value; }
        }

        private bool _isTenureTrackSupported = true;
        bool Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsTenureTrackSupported
        {
            get { return _isTenureTrackSupported; }
            set { _isTenureTrackSupported = value; }
        }

        private Func<Entities.Common.TPDM.IStaffBackgroundCheck, bool> _isStaffBackgroundCheckIncluded;
        Func<Entities.Common.TPDM.IStaffBackgroundCheck, bool> Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffBackgroundCheckIncluded
        {
            get { return _isStaffBackgroundCheckIncluded; }
            set { _isStaffBackgroundCheckIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, bool> _isStaffHighlyQualifiedAcademicSubjectIncluded;
        Func<Entities.Common.TPDM.IStaffHighlyQualifiedAcademicSubject, bool> Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded
        {
            get { return _isStaffHighlyQualifiedAcademicSubjectIncluded; }
            set { _isStaffHighlyQualifiedAcademicSubjectIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IStaffSeniority, bool> _isStaffSeniorityIncluded;
        Func<Entities.Common.TPDM.IStaffSeniority, bool> Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffSeniorityIncluded
        {
            get { return _isStaffSeniorityIncluded; }
            set { _isStaffSeniorityIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IStaffTeacherPreparationProgram, bool> _isStaffTeacherPreparationProgramIncluded;
        Func<Entities.Common.TPDM.IStaffTeacherPreparationProgram, bool> Entities.Common.TPDM.IStaffExtensionSynchronizationSourceSupport.IsStaffTeacherPreparationProgramIncluded
        {
            get { return _isStaffTeacherPreparationProgramIncluded; }
            set { _isStaffTeacherPreparationProgramIncluded = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffApplicantAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffApplicantAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffApplicantAssociation"/> entity.
    /// </summary>
    public class StaffApplicantAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string ApplicantIdentifier { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffApplicantAssociation table of the StaffApplicantAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffApplicantAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffApplicantAssociation, Entities.Common.Records.TPDM.IStaffApplicantAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffApplicantAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffApplicantAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ApplicantIdentifier  { get; set; }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ApplicantAggregate.TPDM.ApplicantReferenceData ApplicantReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Applicant discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffApplicantAssociation.ApplicantDiscriminator
        {
            get { return ApplicantReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Applicant resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffApplicantAssociation.ApplicantResourceId
        {
            get { return ApplicantReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffApplicantAssociation.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffApplicantAssociation.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ApplicantIdentifier", ApplicantIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffApplicantAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffApplicantAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffEducationOrganizationAssignmentAssociationAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffEducationOrganizationAssignmentAssociationExtension table of the StaffEducationOrganizationAssignmentAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffEducationOrganizationAssignmentAssociationExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension, Entities.Common.Records.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffEducationOrganizationAssignmentAssociationExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StaffEducationOrganizationAssignmentAssociation StaffEducationOrganizationAssignmentAssociation { get; set; }

        Entities.Common.EdFi.IStaffEducationOrganizationAssignmentAssociation IStaffEducationOrganizationAssignmentAssociationExtension.StaffEducationOrganizationAssignmentAssociation
        {
            get { return StaffEducationOrganizationAssignmentAssociation; }
            set { StaffEducationOrganizationAssignmentAssociation = (EdFi.StaffEducationOrganizationAssignmentAssociation) value; }
        }

        DateTime Entities.Common.Records.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionRecord.BeginDate
        {
            get { return ((Entities.Common.Records.EdFi.IStaffEducationOrganizationAssignmentAssociationRecord) StaffEducationOrganizationAssignmentAssociation).BeginDate; }
            set { ((Entities.Common.Records.EdFi.IStaffEducationOrganizationAssignmentAssociationRecord) StaffEducationOrganizationAssignmentAssociation).BeginDate = value; }
        }

        int Entities.Common.Records.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.EdFi.IStaffEducationOrganizationAssignmentAssociationRecord) StaffEducationOrganizationAssignmentAssociation).EducationOrganizationId; }
            set { ((Entities.Common.Records.EdFi.IStaffEducationOrganizationAssignmentAssociationRecord) StaffEducationOrganizationAssignmentAssociation).EducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionRecord.StaffClassificationDescriptorId
        {
            get { return ((Entities.Common.Records.EdFi.IStaffEducationOrganizationAssignmentAssociationRecord) StaffEducationOrganizationAssignmentAssociation).StaffClassificationDescriptorId; }
            set { ((Entities.Common.Records.EdFi.IStaffEducationOrganizationAssignmentAssociationRecord) StaffEducationOrganizationAssignmentAssociation).StaffClassificationDescriptorId = value; }
        }

        int Entities.Common.Records.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStaffEducationOrganizationAssignmentAssociationRecord) StaffEducationOrganizationAssignmentAssociation).StaffUSI; }
            set { ((Entities.Common.Records.EdFi.IStaffEducationOrganizationAssignmentAssociationRecord) StaffEducationOrganizationAssignmentAssociation).StaffUSI = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.99", "999.99")]
        public virtual decimal? YearsOfExperienceAtCurrentEducationOrganization  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffEducationOrganizationAssignmentAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffEducationOrganizationAssignmentAssociation = (EdFi.StaffEducationOrganizationAssignmentAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isYearsOfExperienceAtCurrentEducationOrganizationSupported = true;
        bool Entities.Common.TPDM.IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported
        {
            get { return _isYearsOfExperienceAtCurrentEducationOrganizationSupported; }
            set { _isYearsOfExperienceAtCurrentEducationOrganizationSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffProspectAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffProspectAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffProspectAssociation"/> entity.
    /// </summary>
    public class StaffProspectAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProspectIdentifier { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProspectIdentifier", ProspectIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffProspectAssociation table of the StaffProspectAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffProspectAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffProspectAssociation, Entities.Common.Records.TPDM.IStaffProspectAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffProspectAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffProspectAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string ProspectIdentifier  { get; set; }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ProspectAggregate.TPDM.ProspectReferenceData ProspectReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Prospect discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffProspectAssociation.ProspectDiscriminator
        {
            get { return ProspectReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Prospect resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffProspectAssociation.ProspectResourceId
        {
            get { return ProspectReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffProspectAssociation.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffProspectAssociation.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProspectIdentifier", ProspectIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffProspectAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffProspectAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: StaffStudentGrowthMeasure

namespace EdFi.Ods.Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffStudentGrowthMeasure"/> entity.
    /// </summary>
    public class StaffStudentGrowthMeasureReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string StaffStudentGrowthMeasureIdentifier { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("StaffStudentGrowthMeasureIdentifier", StaffStudentGrowthMeasureIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffStudentGrowthMeasure table of the StaffStudentGrowthMeasure aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffStudentGrowthMeasure : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffStudentGrowthMeasure, Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffStudentGrowthMeasure()
        {
            StaffStudentGrowthMeasureAcademicSubjects = new HashSet<StaffStudentGrowthMeasureAcademicSubject>();
            StaffStudentGrowthMeasureGradeLevels = new HashSet<StaffStudentGrowthMeasureGradeLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string StaffStudentGrowthMeasureIdentifier  { get; set; }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int?))
                    _resultDatatypeTypeDescriptorId = string.IsNullOrWhiteSpace(_resultDatatypeTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int? _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = _resultDatatypeTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId.Value);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-9.9999", "9.9999")]
        public virtual decimal? StandardError  { get; set; }
        public virtual int StudentGrowthActualScore  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? StudentGrowthMeasureDate 
        {
            get { return _studentGrowthMeasureDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _studentGrowthMeasureDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _studentGrowthMeasureDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _studentGrowthMeasureDate;
        
        public virtual bool StudentGrowthMet  { get; set; }
        public virtual int? StudentGrowthNCount  { get; set; }
        public virtual int? StudentGrowthTargetScore  { get; set; }
        public virtual int? StudentGrowthTypeDescriptorId 
        {
            get
            {
                if (_studentGrowthTypeDescriptorId == default(int?))
                    _studentGrowthTypeDescriptorId = string.IsNullOrWhiteSpace(_studentGrowthTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("StudentGrowthTypeDescriptor", _studentGrowthTypeDescriptor);

                return _studentGrowthTypeDescriptorId;
            } 
            set
            {
                _studentGrowthTypeDescriptorId = value;
                _studentGrowthTypeDescriptor = null;
            }
        }

        private int? _studentGrowthTypeDescriptorId;
        private string _studentGrowthTypeDescriptor;

        public virtual string StudentGrowthTypeDescriptor
        {
            get
            {
                if (_studentGrowthTypeDescriptor == null)
                    _studentGrowthTypeDescriptor = _studentGrowthTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("StudentGrowthTypeDescriptor", _studentGrowthTypeDescriptorId.Value);
                    
                return _studentGrowthTypeDescriptor;
            }
            set
            {
                _studentGrowthTypeDescriptor = value;
                _studentGrowthTypeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffStudentGrowthMeasure.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffStudentGrowthMeasure.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffStudentGrowthMeasure.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureAcademicSubject> _staffStudentGrowthMeasureAcademicSubjects;
        private ICollection<Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubject> _staffStudentGrowthMeasureAcademicSubjectsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureAcademicSubject> StaffStudentGrowthMeasureAcademicSubjects
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _staffStudentGrowthMeasureAcademicSubjects)
                    if (item.StaffStudentGrowthMeasure == null)
                        item.StaffStudentGrowthMeasure = this;
                // -------------------------------------------------------------

                return _staffStudentGrowthMeasureAcademicSubjects;
            }
            set
            {
                _staffStudentGrowthMeasureAcademicSubjects = value;
                _staffStudentGrowthMeasureAcademicSubjectsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubject, Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureAcademicSubject>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubject> Entities.Common.TPDM.IStaffStudentGrowthMeasure.StaffStudentGrowthMeasureAcademicSubjects
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _staffStudentGrowthMeasureAcademicSubjects)
                    if (item.StaffStudentGrowthMeasure == null)
                        item.StaffStudentGrowthMeasure = this;
                // -------------------------------------------------------------

                return _staffStudentGrowthMeasureAcademicSubjectsCovariant;
            }
            set
            {
                StaffStudentGrowthMeasureAcademicSubjects = new HashSet<Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureAcademicSubject>(value.Cast<Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureAcademicSubject>());
            }
        }


        private ICollection<Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureGradeLevel> _staffStudentGrowthMeasureGradeLevels;
        private ICollection<Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevel> _staffStudentGrowthMeasureGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureGradeLevel> StaffStudentGrowthMeasureGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _staffStudentGrowthMeasureGradeLevels)
                    if (item.StaffStudentGrowthMeasure == null)
                        item.StaffStudentGrowthMeasure = this;
                // -------------------------------------------------------------

                return _staffStudentGrowthMeasureGradeLevels;
            }
            set
            {
                _staffStudentGrowthMeasureGradeLevels = value;
                _staffStudentGrowthMeasureGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevel, Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevel> Entities.Common.TPDM.IStaffStudentGrowthMeasure.StaffStudentGrowthMeasureGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _staffStudentGrowthMeasureGradeLevels)
                    if (item.StaffStudentGrowthMeasure == null)
                        item.StaffStudentGrowthMeasure = this;
                // -------------------------------------------------------------

                return _staffStudentGrowthMeasureGradeLevelsCovariant;
            }
            set
            {
                StaffStudentGrowthMeasureGradeLevels = new HashSet<Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureGradeLevel>(value.Cast<Entities.NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureGradeLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "StudentGrowthTypeDescriptor", new LookupColumnDetails { PropertyName = "StudentGrowthTypeDescriptorId", LookupTypeName = "StudentGrowthTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("StaffStudentGrowthMeasureIdentifier", StaffStudentGrowthMeasureIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffStudentGrowthMeasure)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffStudentGrowthMeasure) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        private bool _isStaffStudentGrowthMeasureAcademicSubjectsSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStaffStudentGrowthMeasureAcademicSubjectsSupported
        {
            get { return _isStaffStudentGrowthMeasureAcademicSubjectsSupported; }
            set { _isStaffStudentGrowthMeasureAcademicSubjectsSupported = value; }
        }

        private bool _isStaffStudentGrowthMeasureGradeLevelsSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStaffStudentGrowthMeasureGradeLevelsSupported
        {
            get { return _isStaffStudentGrowthMeasureGradeLevelsSupported; }
            set { _isStaffStudentGrowthMeasureGradeLevelsSupported = value; }
        }

        private bool _isStandardErrorSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStandardErrorSupported
        {
            get { return _isStandardErrorSupported; }
            set { _isStandardErrorSupported = value; }
        }

        private bool _isStudentGrowthActualScoreSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthActualScoreSupported
        {
            get { return _isStudentGrowthActualScoreSupported; }
            set { _isStudentGrowthActualScoreSupported = value; }
        }

        private bool _isStudentGrowthMeasureDateSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthMeasureDateSupported
        {
            get { return _isStudentGrowthMeasureDateSupported; }
            set { _isStudentGrowthMeasureDateSupported = value; }
        }

        private bool _isStudentGrowthMetSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthMetSupported
        {
            get { return _isStudentGrowthMetSupported; }
            set { _isStudentGrowthMetSupported = value; }
        }

        private bool _isStudentGrowthNCountSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthNCountSupported
        {
            get { return _isStudentGrowthNCountSupported; }
            set { _isStudentGrowthNCountSupported = value; }
        }

        private bool _isStudentGrowthTargetScoreSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthTargetScoreSupported
        {
            get { return _isStudentGrowthTargetScoreSupported; }
            set { _isStudentGrowthTargetScoreSupported = value; }
        }

        private bool _isStudentGrowthTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthTypeDescriptorSupported
        {
            get { return _isStudentGrowthTypeDescriptorSupported; }
            set { _isStudentGrowthTypeDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubject, bool> _isStaffStudentGrowthMeasureAcademicSubjectIncluded;
        Func<Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubject, bool> Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStaffStudentGrowthMeasureAcademicSubjectIncluded
        {
            get { return _isStaffStudentGrowthMeasureAcademicSubjectIncluded; }
            set { _isStaffStudentGrowthMeasureAcademicSubjectIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevel, bool> _isStaffStudentGrowthMeasureGradeLevelIncluded;
        Func<Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevel, bool> Entities.Common.TPDM.IStaffStudentGrowthMeasureSynchronizationSourceSupport.IsStaffStudentGrowthMeasureGradeLevelIncluded
        {
            get { return _isStaffStudentGrowthMeasureGradeLevelIncluded; }
            set { _isStaffStudentGrowthMeasureGradeLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffStudentGrowthMeasureAcademicSubject table of the StaffStudentGrowthMeasure aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffStudentGrowthMeasureAcademicSubject : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubject, Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureAcademicSubjectRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffStudentGrowthMeasureAcademicSubject()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual StaffStudentGrowthMeasure StaffStudentGrowthMeasure { get; set; }

        Entities.Common.TPDM.IStaffStudentGrowthMeasure IStaffStudentGrowthMeasureAcademicSubject.StaffStudentGrowthMeasure
        {
            get { return StaffStudentGrowthMeasure; }
            set { StaffStudentGrowthMeasure = (StaffStudentGrowthMeasure) value; }
        }

        DateTime Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureAcademicSubjectRecord.FactAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).FactAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).FactAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureAcademicSubjectRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureAcademicSubjectRecord.StaffStudentGrowthMeasureIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).StaffStudentGrowthMeasureIdentifier; }
            set { ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).StaffStudentGrowthMeasureIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureAcademicSubjectRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).StaffUSI; }
            set { ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).StaffUSI = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int))
                    _academicSubjectDescriptorId = DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffStudentGrowthMeasure as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicSubjectDescriptorId", AcademicSubjectDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureAcademicSubject) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffStudentGrowthMeasure = (StaffStudentGrowthMeasure) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffStudentGrowthMeasureGradeLevel table of the StaffStudentGrowthMeasure aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffStudentGrowthMeasureGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevel, Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureGradeLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffStudentGrowthMeasureGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual StaffStudentGrowthMeasure StaffStudentGrowthMeasure { get; set; }

        Entities.Common.TPDM.IStaffStudentGrowthMeasure IStaffStudentGrowthMeasureGradeLevel.StaffStudentGrowthMeasure
        {
            get { return StaffStudentGrowthMeasure; }
            set { StaffStudentGrowthMeasure = (StaffStudentGrowthMeasure) value; }
        }

        DateTime Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureGradeLevelRecord.FactAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).FactAsOfDate; }
            set { ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).FactAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureGradeLevelRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureGradeLevelRecord.StaffStudentGrowthMeasureIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).StaffStudentGrowthMeasureIdentifier; }
            set { ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).StaffStudentGrowthMeasureIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureGradeLevelRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).StaffUSI; }
            set { ((Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureRecord) StaffStudentGrowthMeasure).StaffUSI = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffStudentGrowthMeasure as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffStudentGrowthMeasure = (StaffStudentGrowthMeasure) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: StaffStudentGrowthMeasureCourseAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffStudentGrowthMeasureCourseAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffStudentGrowthMeasureCourseAssociation"/> entity.
    /// </summary>
    public class StaffStudentGrowthMeasureCourseAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string CourseCode { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string StaffStudentGrowthMeasureIdentifier { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("StaffStudentGrowthMeasureIdentifier", StaffStudentGrowthMeasureIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffStudentGrowthMeasureCourseAssociation table of the StaffStudentGrowthMeasureCourseAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffStudentGrowthMeasureCourseAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociation, Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureCourseAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffStudentGrowthMeasureCourseAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string StaffStudentGrowthMeasureIdentifier  { get; set; }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CourseAggregate.EdFi.CourseReferenceData CourseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Course discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociation.CourseDiscriminator
        {
            get { return CourseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Course resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociation.CourseResourceId
        {
            get { return CourseReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureReferenceData StaffStudentGrowthMeasureReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the StaffStudentGrowthMeasure discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociation.StaffStudentGrowthMeasureDiscriminator
        {
            get { return StaffStudentGrowthMeasureReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the StaffStudentGrowthMeasure resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociation.StaffStudentGrowthMeasureResourceId
        {
            get { return StaffStudentGrowthMeasureReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("StaffStudentGrowthMeasureIdentifier", StaffStudentGrowthMeasureIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffStudentGrowthMeasureEducationOrganizationAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffStudentGrowthMeasureEducationOrganizationAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffStudentGrowthMeasureEducationOrganizationAssociation"/> entity.
    /// </summary>
    public class StaffStudentGrowthMeasureEducationOrganizationAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string StaffStudentGrowthMeasureIdentifier { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("StaffStudentGrowthMeasureIdentifier", StaffStudentGrowthMeasureIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffStudentGrowthMeasureEducationOrganizationAssociation table of the StaffStudentGrowthMeasureEducationOrganizationAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffStudentGrowthMeasureEducationOrganizationAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociation, Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffStudentGrowthMeasureEducationOrganizationAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string StaffStudentGrowthMeasureIdentifier  { get; set; }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociation.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociation.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureReferenceData StaffStudentGrowthMeasureReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the StaffStudentGrowthMeasure discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociation.StaffStudentGrowthMeasureDiscriminator
        {
            get { return StaffStudentGrowthMeasureReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the StaffStudentGrowthMeasure resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociation.StaffStudentGrowthMeasureResourceId
        {
            get { return StaffStudentGrowthMeasureReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("StaffStudentGrowthMeasureIdentifier", StaffStudentGrowthMeasureIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffStudentGrowthMeasureSectionAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffStudentGrowthMeasureSectionAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffStudentGrowthMeasureSectionAssociation"/> entity.
    /// </summary>
    public class StaffStudentGrowthMeasureSectionAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual string LocalCourseCode { get; set; }
        public virtual int SchoolId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string SectionIdentifier { get; set; }
        public virtual string SessionName { get; set; }
        public virtual string StaffStudentGrowthMeasureIdentifier { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("StaffStudentGrowthMeasureIdentifier", StaffStudentGrowthMeasureIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffStudentGrowthMeasureSectionAssociation table of the StaffStudentGrowthMeasureSectionAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffStudentGrowthMeasureSectionAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociation, Entities.Common.Records.TPDM.IStaffStudentGrowthMeasureSectionAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffStudentGrowthMeasureSectionAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string LocalCourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SchoolId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SectionIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SessionName  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string StaffStudentGrowthMeasureIdentifier  { get; set; }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SectionAggregate.EdFi.SectionReferenceData SectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Section discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociation.SectionDiscriminator
        {
            get { return SectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Section resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociation.SectionResourceId
        {
            get { return SectionReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffStudentGrowthMeasureAggregate.TPDM.StaffStudentGrowthMeasureReferenceData StaffStudentGrowthMeasureReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the StaffStudentGrowthMeasure discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociation.StaffStudentGrowthMeasureDiscriminator
        {
            get { return StaffStudentGrowthMeasureReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the StaffStudentGrowthMeasure resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociation.StaffStudentGrowthMeasureResourceId
        {
            get { return StaffStudentGrowthMeasureReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("StaffStudentGrowthMeasureIdentifier", StaffStudentGrowthMeasureIdentifier);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StaffTeacherPreparationProviderAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffTeacherPreparationProviderAssociation"/> entity.
    /// </summary>
    public class StaffTeacherPreparationProviderAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int StaffUSI { get; set; }
        public virtual int TeacherPreparationProviderId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("StaffUSI", StaffUSI);
            keyValues.Add("TeacherPreparationProviderId", TeacherPreparationProviderId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffTeacherPreparationProviderAssociation table of the StaffTeacherPreparationProviderAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffTeacherPreparationProviderAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation, Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffTeacherPreparationProviderAssociation()
        {
            StaffTeacherPreparationProviderAssociationAcademicSubjects = new HashSet<StaffTeacherPreparationProviderAssociationAcademicSubject>();
            StaffTeacherPreparationProviderAssociationGradeLevels = new HashSet<StaffTeacherPreparationProviderAssociationGradeLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TeacherPreparationProviderId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault]
        public virtual int ProgramAssignmentDescriptorId 
        {
            get
            {
                if (_programAssignmentDescriptorId == default(int))
                    _programAssignmentDescriptorId = DescriptorsCache.GetCache().GetId("ProgramAssignmentDescriptor", _programAssignmentDescriptor);

                return _programAssignmentDescriptorId;
            } 
            set
            {
                _programAssignmentDescriptorId = value;
                _programAssignmentDescriptor = null;
            }
        }

        private int _programAssignmentDescriptorId;
        private string _programAssignmentDescriptor;

        public virtual string ProgramAssignmentDescriptor
        {
            get
            {
                if (_programAssignmentDescriptor == null)
                    _programAssignmentDescriptor = DescriptorsCache.GetCache().GetValue("ProgramAssignmentDescriptor", _programAssignmentDescriptorId);
                    
                return _programAssignmentDescriptor;
            }
            set
            {
                _programAssignmentDescriptor = value;
                _programAssignmentDescriptorId = default(int);
            }
        }
        [RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData TeacherPreparationProviderReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherPreparationProvider resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation.TeacherPreparationProviderResourceId
        {
            get { return TeacherPreparationProviderReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationAcademicSubject> _staffTeacherPreparationProviderAssociationAcademicSubjects;
        private ICollection<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubject> _staffTeacherPreparationProviderAssociationAcademicSubjectsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationAcademicSubject> StaffTeacherPreparationProviderAssociationAcademicSubjects
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _staffTeacherPreparationProviderAssociationAcademicSubjects)
                    if (item.StaffTeacherPreparationProviderAssociation == null)
                        item.StaffTeacherPreparationProviderAssociation = this;
                // -------------------------------------------------------------

                return _staffTeacherPreparationProviderAssociationAcademicSubjects;
            }
            set
            {
                _staffTeacherPreparationProviderAssociationAcademicSubjects = value;
                _staffTeacherPreparationProviderAssociationAcademicSubjectsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubject, Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationAcademicSubject>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubject> Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation.StaffTeacherPreparationProviderAssociationAcademicSubjects
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _staffTeacherPreparationProviderAssociationAcademicSubjects)
                    if (item.StaffTeacherPreparationProviderAssociation == null)
                        item.StaffTeacherPreparationProviderAssociation = this;
                // -------------------------------------------------------------

                return _staffTeacherPreparationProviderAssociationAcademicSubjectsCovariant;
            }
            set
            {
                StaffTeacherPreparationProviderAssociationAcademicSubjects = new HashSet<Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationAcademicSubject>(value.Cast<Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationAcademicSubject>());
            }
        }


        private ICollection<Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationGradeLevel> _staffTeacherPreparationProviderAssociationGradeLevels;
        private ICollection<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevel> _staffTeacherPreparationProviderAssociationGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationGradeLevel> StaffTeacherPreparationProviderAssociationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _staffTeacherPreparationProviderAssociationGradeLevels)
                    if (item.StaffTeacherPreparationProviderAssociation == null)
                        item.StaffTeacherPreparationProviderAssociation = this;
                // -------------------------------------------------------------

                return _staffTeacherPreparationProviderAssociationGradeLevels;
            }
            set
            {
                _staffTeacherPreparationProviderAssociationGradeLevels = value;
                _staffTeacherPreparationProviderAssociationGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevel, Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevel> Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation.StaffTeacherPreparationProviderAssociationGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _staffTeacherPreparationProviderAssociationGradeLevels)
                    if (item.StaffTeacherPreparationProviderAssociation == null)
                        item.StaffTeacherPreparationProviderAssociation = this;
                // -------------------------------------------------------------

                return _staffTeacherPreparationProviderAssociationGradeLevelsCovariant;
            }
            set
            {
                StaffTeacherPreparationProviderAssociationGradeLevels = new HashSet<Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationGradeLevel>(value.Cast<Entities.NHibernate.StaffTeacherPreparationProviderAssociationAggregate.TPDM.StaffTeacherPreparationProviderAssociationGradeLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramAssignmentDescriptor", new LookupColumnDetails { PropertyName = "ProgramAssignmentDescriptorId", LookupTypeName = "ProgramAssignmentDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("StaffUSI", StaffUSI);
            keyValues.Add("TeacherPreparationProviderId", TeacherPreparationProviderId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isProgramAssignmentDescriptorSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsProgramAssignmentDescriptorSupported
        {
            get { return _isProgramAssignmentDescriptorSupported; }
            set { _isProgramAssignmentDescriptorSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported
        {
            get { return _isStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported; }
            set { _isStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported = value; }
        }

        private bool _isStaffTeacherPreparationProviderAssociationGradeLevelsSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported
        {
            get { return _isStaffTeacherPreparationProviderAssociationGradeLevelsSupported; }
            set { _isStaffTeacherPreparationProviderAssociationGradeLevelsSupported = value; }
        }

        private Func<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubject, bool> _isStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded;
        Func<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubject, bool> Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded
        {
            get { return _isStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded; }
            set { _isStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded = value; }
        }

        private Func<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevel, bool> _isStaffTeacherPreparationProviderAssociationGradeLevelIncluded;
        Func<Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevel, bool> Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded
        {
            get { return _isStaffTeacherPreparationProviderAssociationGradeLevelIncluded; }
            set { _isStaffTeacherPreparationProviderAssociationGradeLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffTeacherPreparationProviderAssociationAcademicSubject table of the StaffTeacherPreparationProviderAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffTeacherPreparationProviderAssociationAcademicSubject : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubject, Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubjectRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffTeacherPreparationProviderAssociationAcademicSubject()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual StaffTeacherPreparationProviderAssociation StaffTeacherPreparationProviderAssociation { get; set; }

        Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation IStaffTeacherPreparationProviderAssociationAcademicSubject.StaffTeacherPreparationProviderAssociation
        {
            get { return StaffTeacherPreparationProviderAssociation; }
            set { StaffTeacherPreparationProviderAssociation = (StaffTeacherPreparationProviderAssociation) value; }
        }

        int Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubjectRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord) StaffTeacherPreparationProviderAssociation).StaffUSI; }
            set { ((Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord) StaffTeacherPreparationProviderAssociation).StaffUSI = value; }
        }

        int Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubjectRecord.TeacherPreparationProviderId
        {
            get { return ((Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord) StaffTeacherPreparationProviderAssociation).TeacherPreparationProviderId; }
            set { ((Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord) StaffTeacherPreparationProviderAssociation).TeacherPreparationProviderId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int))
                    _academicSubjectDescriptorId = DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffTeacherPreparationProviderAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicSubjectDescriptorId", AcademicSubjectDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationAcademicSubject) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffTeacherPreparationProviderAssociation = (StaffTeacherPreparationProviderAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffTeacherPreparationProviderAssociationGradeLevel table of the StaffTeacherPreparationProviderAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffTeacherPreparationProviderAssociationGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevel, Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffTeacherPreparationProviderAssociationGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual StaffTeacherPreparationProviderAssociation StaffTeacherPreparationProviderAssociation { get; set; }

        Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociation IStaffTeacherPreparationProviderAssociationGradeLevel.StaffTeacherPreparationProviderAssociation
        {
            get { return StaffTeacherPreparationProviderAssociation; }
            set { StaffTeacherPreparationProviderAssociation = (StaffTeacherPreparationProviderAssociation) value; }
        }

        int Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevelRecord.StaffUSI
        {
            get { return ((Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord) StaffTeacherPreparationProviderAssociation).StaffUSI; }
            set { ((Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord) StaffTeacherPreparationProviderAssociation).StaffUSI = value; }
        }

        int Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevelRecord.TeacherPreparationProviderId
        {
            get { return ((Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord) StaffTeacherPreparationProviderAssociation).TeacherPreparationProviderId; }
            set { ((Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderAssociationRecord) StaffTeacherPreparationProviderAssociation).TeacherPreparationProviderId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StaffTeacherPreparationProviderAssociation as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffTeacherPreparationProviderAssociationGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StaffTeacherPreparationProviderAssociation = (StaffTeacherPreparationProviderAssociation) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: StaffTeacherPreparationProviderProgramAssociation

namespace EdFi.Ods.Entities.NHibernate.StaffTeacherPreparationProviderProgramAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="StaffTeacherPreparationProviderProgramAssociation"/> entity.
    /// </summary>
    public class StaffTeacherPreparationProviderProgramAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProgramName { get; set; }
        public virtual int ProgramTypeDescriptorId { get; set; }
        public virtual int StaffUSI { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StaffTeacherPreparationProviderProgramAssociation table of the StaffTeacherPreparationProviderProgramAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StaffTeacherPreparationProviderProgramAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociation, Entities.Common.Records.TPDM.IStaffTeacherPreparationProviderProgramAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StaffTeacherPreparationProviderProgramAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string ProgramName  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramTypeDescriptorId 
        {
            get
            {
                if (_programTypeDescriptorId == default(int))
                    _programTypeDescriptorId = DescriptorsCache.GetCache().GetId("ProgramTypeDescriptor", _programTypeDescriptor);

                return _programTypeDescriptorId;
            } 
            set
            {
                _programTypeDescriptorId = value;
                _programTypeDescriptor = null;
            }
        }

        private int _programTypeDescriptorId;
        private string _programTypeDescriptor;

        public virtual string ProgramTypeDescriptor
        {
            get
            {
                if (_programTypeDescriptor == null)
                    _programTypeDescriptor = DescriptorsCache.GetCache().GetValue("ProgramTypeDescriptor", _programTypeDescriptorId);
                    
                return _programTypeDescriptor;
            }
            set
            {
                _programTypeDescriptor = value;
                _programTypeDescriptorId = default(int);
            }
        }
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual bool? StudentRecordAccess  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociation.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociation.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherPreparationProviderProgramAggregate.TPDM.TeacherPreparationProviderProgramReferenceData TeacherPreparationProviderProgramReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherPreparationProviderProgram discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociation.TeacherPreparationProviderProgramDiscriminator
        {
            get { return TeacherPreparationProviderProgramReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherPreparationProviderProgram resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociation.TeacherPreparationProviderProgramResourceId
        {
            get { return TeacherPreparationProviderProgramReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);
            keyValues.Add("StaffUSI", StaffUSI);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isStudentRecordAccessSupported = true;
        bool Entities.Common.TPDM.IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport.IsStudentRecordAccessSupported
        {
            get { return _isStudentRecordAccessSupported; }
            set { _isStudentRecordAccessSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Entities.NHibernate.StateEducationAgencyAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StateEducationAgencyExtension table of the StateEducationAgency aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StateEducationAgencyExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStateEducationAgencyExtension, Entities.Common.Records.TPDM.IStateEducationAgencyExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStateEducationAgencyExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StateEducationAgencyExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StateEducationAgency StateEducationAgency { get; set; }

        Entities.Common.EdFi.IStateEducationAgency IStateEducationAgencyExtension.StateEducationAgency
        {
            get { return StateEducationAgency; }
            set { StateEducationAgency = (EdFi.StateEducationAgency) value; }
        }

        int Entities.Common.Records.TPDM.IStateEducationAgencyExtensionRecord.StateEducationAgencyId
        {
            get { return ((Entities.Common.Records.EdFi.IStateEducationAgencyRecord) StateEducationAgency).StateEducationAgencyId; }
            set { ((Entities.Common.Records.EdFi.IStateEducationAgencyRecord) StateEducationAgency).StateEducationAgencyId = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StateEducationAgency as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStateEducationAgencyExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStateEducationAgencyExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StateEducationAgency = (EdFi.StateEducationAgency) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.IStateEducationAgencyExtensionSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Entities.NHibernate.StudentGradebookEntryAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StudentGradebookEntryExtension table of the StudentGradebookEntry aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StudentGradebookEntryExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.IStudentGradebookEntryExtension, Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public StudentGradebookEntryExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.StudentGradebookEntry StudentGradebookEntry { get; set; }

        Entities.Common.EdFi.IStudentGradebookEntry IStudentGradebookEntryExtension.StudentGradebookEntry
        {
            get { return StudentGradebookEntry; }
            set { StudentGradebookEntry = (EdFi.StudentGradebookEntry) value; }
        }

        DateTime Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.BeginDate
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).BeginDate; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).BeginDate = value; }
        }

        DateTime Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.DateAssigned
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).DateAssigned; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).DateAssigned = value; }
        }

        string Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.GradebookEntryTitle
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).GradebookEntryTitle; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).GradebookEntryTitle = value; }
        }

        string Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.LocalCourseCode
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).LocalCourseCode; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).LocalCourseCode = value; }
        }

        int Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.SchoolId
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).SchoolId; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).SchoolId = value; }
        }

        short Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).SchoolYear; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.SectionIdentifier
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).SectionIdentifier; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).SectionIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.SessionName
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).SessionName; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).SessionName = value; }
        }

        int Entities.Common.Records.TPDM.IStudentGradebookEntryExtensionRecord.StudentUSI
        {
            get { return ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).StudentUSI; }
            set { ((Entities.Common.Records.EdFi.IStudentGradebookEntryRecord) StudentGradebookEntry).StudentUSI = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? AssignmentPassed  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? DateCompleted 
        {
            get { return _dateCompleted; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _dateCompleted = null;
                } else
                {
                    var given = (DateTime) value;
                    _dateCompleted = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _dateCompleted;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (StudentGradebookEntry as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStudentGradebookEntryExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStudentGradebookEntryExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            StudentGradebookEntry = (EdFi.StudentGradebookEntry) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAssignmentPassedSupported = true;
        bool Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport.IsAssignmentPassedSupported
        {
            get { return _isAssignmentPassedSupported; }
            set { _isAssignmentPassedSupported = value; }
        }

        private bool _isDateCompletedSupported = true;
        bool Entities.Common.TPDM.IStudentGradebookEntryExtensionSynchronizationSourceSupport.IsDateCompletedSupported
        {
            get { return _isDateCompletedSupported; }
            set { _isDateCompletedSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: StudentGrowthTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.StudentGrowthTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.StudentGrowthTypeDescriptor table of the StudentGrowthTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class StudentGrowthTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IStudentGrowthTypeDescriptor, Entities.Common.Records.TPDM.IStudentGrowthTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IStudentGrowthTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int StudentGrowthTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("StudentGrowthTypeDescriptorId", StudentGrowthTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IStudentGrowthTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IStudentGrowthTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IStudentGrowthTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IStudentGrowthTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IStudentGrowthTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IStudentGrowthTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IStudentGrowthTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IStudentGrowthTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IStudentGrowthTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SurveyResponse

namespace EdFi.Ods.Entities.NHibernate.SurveyResponseAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveyResponseExtension table of the SurveyResponse aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveyResponseExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ISurveyResponseExtension, Entities.Common.Records.TPDM.ISurveyResponseExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveyResponseExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.SurveyResponse SurveyResponse { get; set; }

        Entities.Common.EdFi.ISurveyResponse ISurveyResponseExtension.SurveyResponse
        {
            get { return SurveyResponse; }
            set { SurveyResponse = (EdFi.SurveyResponse) value; }
        }

        string Entities.Common.Records.TPDM.ISurveyResponseExtensionRecord.Namespace
        {
            get { return ((Entities.Common.Records.EdFi.ISurveyResponseRecord) SurveyResponse).Namespace; }
            set { ((Entities.Common.Records.EdFi.ISurveyResponseRecord) SurveyResponse).Namespace = value; }
        }

        string Entities.Common.Records.TPDM.ISurveyResponseExtensionRecord.SurveyIdentifier
        {
            get { return ((Entities.Common.Records.EdFi.ISurveyResponseRecord) SurveyResponse).SurveyIdentifier; }
            set { ((Entities.Common.Records.EdFi.ISurveyResponseRecord) SurveyResponse).SurveyIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.ISurveyResponseExtensionRecord.SurveyResponseIdentifier
        {
            get { return ((Entities.Common.Records.EdFi.ISurveyResponseRecord) SurveyResponse).SurveyResponseIdentifier; }
            set { ((Entities.Common.Records.EdFi.ISurveyResponseRecord) SurveyResponse).SurveyResponseIdentifier = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(32), NoDangerousText]
        public virtual string ApplicantIdentifier  { get; set; }
        [StringLength(32), NoDangerousText]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.ApplicantAggregate.TPDM.ApplicantReferenceData ApplicantReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Applicant discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveyResponseExtension.ApplicantDiscriminator
        {
            get { return ApplicantReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Applicant resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveyResponseExtension.ApplicantResourceId
        {
            get { return ApplicantReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveyResponseExtension.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveyResponseExtension.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (SurveyResponse as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveyResponseExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveyResponseExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            SurveyResponse = (EdFi.SurveyResponse) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApplicantIdentifierSupported = true;
        bool Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport.IsApplicantIdentifierSupported
        {
            get { return _isApplicantIdentifierSupported; }
            set { _isApplicantIdentifierSupported = value; }
        }

        private bool _isTeacherCandidateIdentifierSupported = true;
        bool Entities.Common.TPDM.ISurveyResponseExtensionSynchronizationSourceSupport.IsTeacherCandidateIdentifierSupported
        {
            get { return _isTeacherCandidateIdentifierSupported; }
            set { _isTeacherCandidateIdentifierSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SurveyResponseTeacherCandidateTargetAssociation

namespace EdFi.Ods.Entities.NHibernate.SurveyResponseTeacherCandidateTargetAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="SurveyResponseTeacherCandidateTargetAssociation"/> entity.
    /// </summary>
    public class SurveyResponseTeacherCandidateTargetAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string Namespace { get; set; }
        public virtual string SurveyIdentifier { get; set; }
        public virtual string SurveyResponseIdentifier { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveyResponseIdentifier", SurveyResponseIdentifier);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveyResponseTeacherCandidateTargetAssociation table of the SurveyResponseTeacherCandidateTargetAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveyResponseTeacherCandidateTargetAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ISurveyResponseTeacherCandidateTargetAssociation, Entities.Common.Records.TPDM.ISurveyResponseTeacherCandidateTargetAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveyResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveyResponseTeacherCandidateTargetAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyResponseIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SurveyResponseAggregate.EdFi.SurveyResponseReferenceData SurveyResponseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SurveyResponse discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveyResponseTeacherCandidateTargetAssociation.SurveyResponseDiscriminator
        {
            get { return SurveyResponseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the SurveyResponse resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveyResponseTeacherCandidateTargetAssociation.SurveyResponseResourceId
        {
            get { return SurveyResponseReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveyResponseTeacherCandidateTargetAssociation.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveyResponseTeacherCandidateTargetAssociation.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveyResponseIdentifier", SurveyResponseIdentifier);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveyResponseTeacherCandidateTargetAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveyResponseTeacherCandidateTargetAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: SurveySection

namespace EdFi.Ods.Entities.NHibernate.SurveySectionAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveySectionExtension table of the SurveySection aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveySectionExtension : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ISurveySectionExtension, Entities.Common.Records.TPDM.ISurveySectionExtensionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveySectionExtension()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual EdFi.SurveySection SurveySection { get; set; }

        Entities.Common.EdFi.ISurveySection ISurveySectionExtension.SurveySection
        {
            get { return SurveySection; }
            set { SurveySection = (EdFi.SurveySection) value; }
        }

        string Entities.Common.Records.TPDM.ISurveySectionExtensionRecord.Namespace
        {
            get { return ((Entities.Common.Records.EdFi.ISurveySectionRecord) SurveySection).Namespace; }
            set { ((Entities.Common.Records.EdFi.ISurveySectionRecord) SurveySection).Namespace = value; }
        }

        string Entities.Common.Records.TPDM.ISurveySectionExtensionRecord.SurveyIdentifier
        {
            get { return ((Entities.Common.Records.EdFi.ISurveySectionRecord) SurveySection).SurveyIdentifier; }
            set { ((Entities.Common.Records.EdFi.ISurveySectionRecord) SurveySection).SurveyIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.ISurveySectionExtensionRecord.SurveySectionTitle
        {
            get { return ((Entities.Common.Records.EdFi.ISurveySectionRecord) SurveySection).SurveySectionTitle; }
            set { ((Entities.Common.Records.EdFi.ISurveySectionRecord) SurveySection).SurveySectionTitle = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? EducationOrganizationId  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string EvaluationElementTitle  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        public virtual int? EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int?))
                    _evaluationPeriodDescriptorId = string.IsNullOrWhiteSpace(_evaluationPeriodDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int? _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = _evaluationPeriodDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId.Value);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int?);
            }
        }
        [StringLength(50), NoDangerousText]
        public virtual string EvaluationTitle  { get; set; }
        [StringLength(50), NoDangerousText]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        public virtual int? PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int?))
                    _performanceEvaluationTypeDescriptorId = string.IsNullOrWhiteSpace(_performanceEvaluationTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int? _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = _performanceEvaluationTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId.Value);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int?);
            }
        }
        public virtual short? SchoolYear  { get; set; }
        public virtual int? TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int?))
                    _termDescriptorId = string.IsNullOrWhiteSpace(_termDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int? _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = _termDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId.Value);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementAggregate.TPDM.EvaluationElementReferenceData EvaluationElementReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElement discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionExtension.EvaluationElementDiscriminator
        {
            get { return EvaluationElementReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElement resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionExtension.EvaluationElementResourceId
        {
            get { return EvaluationElementReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (SurveySection as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveySectionExtension)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveySectionExtension) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            SurveySection = (EdFi.SurveySection) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEducationOrganizationIdSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEducationOrganizationIdSupported
        {
            get { return _isEducationOrganizationIdSupported; }
            set { _isEducationOrganizationIdSupported = value; }
        }

        private bool _isEvaluationElementTitleSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationElementTitleSupported
        {
            get { return _isEvaluationElementTitleSupported; }
            set { _isEvaluationElementTitleSupported = value; }
        }

        private bool _isEvaluationObjectiveTitleSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationObjectiveTitleSupported
        {
            get { return _isEvaluationObjectiveTitleSupported; }
            set { _isEvaluationObjectiveTitleSupported = value; }
        }

        private bool _isEvaluationPeriodDescriptorSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationPeriodDescriptorSupported
        {
            get { return _isEvaluationPeriodDescriptorSupported; }
            set { _isEvaluationPeriodDescriptorSupported = value; }
        }

        private bool _isEvaluationTitleSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsEvaluationTitleSupported
        {
            get { return _isEvaluationTitleSupported; }
            set { _isEvaluationTitleSupported = value; }
        }

        private bool _isPerformanceEvaluationTitleSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsPerformanceEvaluationTitleSupported
        {
            get { return _isPerformanceEvaluationTitleSupported; }
            set { _isPerformanceEvaluationTitleSupported = value; }
        }

        private bool _isPerformanceEvaluationTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsPerformanceEvaluationTypeDescriptorSupported
        {
            get { return _isPerformanceEvaluationTypeDescriptorSupported; }
            set { _isPerformanceEvaluationTypeDescriptorSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        private bool _isTermDescriptorSupported = true;
        bool Entities.Common.TPDM.ISurveySectionExtensionSynchronizationSourceSupport.IsTermDescriptorSupported
        {
            get { return _isTermDescriptorSupported; }
            set { _isTermDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SurveySectionAggregateResponse

namespace EdFi.Ods.Entities.NHibernate.SurveySectionAggregateResponseAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="SurveySectionAggregateResponse"/> entity.
    /// </summary>
    public class SurveySectionAggregateResponseReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime EvaluationDate { get; set; }
        public virtual string EvaluationElementTitle { get; set; }
        public virtual string EvaluationObjectiveTitle { get; set; }
        public virtual int EvaluationPeriodDescriptorId { get; set; }
        public virtual string EvaluationTitle { get; set; }
        public virtual string Namespace { get; set; }
        public virtual string PerformanceEvaluationTitle { get; set; }
        public virtual int PerformanceEvaluationTypeDescriptorId { get; set; }
        public virtual string PersonId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual int SourceSystemDescriptorId { get; set; }
        public virtual string SurveyIdentifier { get; set; }
        public virtual string SurveySectionTitle { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveySectionTitle", SurveySectionTitle);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveySectionAggregateResponse table of the SurveySectionAggregateResponse aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveySectionAggregateResponse : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ISurveySectionAggregateResponse, Entities.Common.Records.TPDM.ISurveySectionAggregateResponseRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveySectionAggregateResponseSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveySectionAggregateResponse()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EvaluationDate 
        {
            get { return _evaluationDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _evaluationDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _evaluationDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string EvaluationElementTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationObjectiveTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EvaluationPeriodDescriptorId 
        {
            get
            {
                if (_evaluationPeriodDescriptorId == default(int))
                    _evaluationPeriodDescriptorId = DescriptorsCache.GetCache().GetId("EvaluationPeriodDescriptor", _evaluationPeriodDescriptor);

                return _evaluationPeriodDescriptorId;
            } 
            set
            {
                _evaluationPeriodDescriptorId = value;
                _evaluationPeriodDescriptor = null;
            }
        }

        private int _evaluationPeriodDescriptorId;
        private string _evaluationPeriodDescriptor;

        public virtual string EvaluationPeriodDescriptor
        {
            get
            {
                if (_evaluationPeriodDescriptor == null)
                    _evaluationPeriodDescriptor = DescriptorsCache.GetCache().GetValue("EvaluationPeriodDescriptor", _evaluationPeriodDescriptorId);
                    
                return _evaluationPeriodDescriptor;
            }
            set
            {
                _evaluationPeriodDescriptor = value;
                _evaluationPeriodDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string EvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(50), NoDangerousText, NoWhitespace]
        public virtual string PerformanceEvaluationTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PerformanceEvaluationTypeDescriptorId 
        {
            get
            {
                if (_performanceEvaluationTypeDescriptorId == default(int))
                    _performanceEvaluationTypeDescriptorId = DescriptorsCache.GetCache().GetId("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptor);

                return _performanceEvaluationTypeDescriptorId;
            } 
            set
            {
                _performanceEvaluationTypeDescriptorId = value;
                _performanceEvaluationTypeDescriptor = null;
            }
        }

        private int _performanceEvaluationTypeDescriptorId;
        private string _performanceEvaluationTypeDescriptor;

        public virtual string PerformanceEvaluationTypeDescriptor
        {
            get
            {
                if (_performanceEvaluationTypeDescriptor == null)
                    _performanceEvaluationTypeDescriptor = DescriptorsCache.GetCache().GetValue("PerformanceEvaluationTypeDescriptor", _performanceEvaluationTypeDescriptorId);
                    
                return _performanceEvaluationTypeDescriptor;
            }
            set
            {
                _performanceEvaluationTypeDescriptor = value;
                _performanceEvaluationTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string PersonId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int))
                    _sourceSystemDescriptorId = DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SurveySectionTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999.999", "999.999")]
        public virtual decimal ScoreValue  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EvaluationElementRatingAggregate.TPDM.EvaluationElementRatingReferenceData EvaluationElementRatingReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EvaluationElementRating discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationElementRatingDiscriminator
        {
            get { return EvaluationElementRatingReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EvaluationElementRating resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionAggregateResponse.EvaluationElementRatingResourceId
        {
            get { return EvaluationElementRatingReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SurveySectionAggregate.EdFi.SurveySectionReferenceData SurveySectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SurveySection discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionAggregateResponse.SurveySectionDiscriminator
        {
            get { return SurveySectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the SurveySection resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionAggregateResponse.SurveySectionResourceId
        {
            get { return SurveySectionReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EvaluationPeriodDescriptor", new LookupColumnDetails { PropertyName = "EvaluationPeriodDescriptorId", LookupTypeName = "EvaluationPeriodDescriptor"} },
                { "PerformanceEvaluationTypeDescriptor", new LookupColumnDetails { PropertyName = "PerformanceEvaluationTypeDescriptorId", LookupTypeName = "PerformanceEvaluationTypeDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("EvaluationDate", EvaluationDate);
            keyValues.Add("EvaluationElementTitle", EvaluationElementTitle);
            keyValues.Add("EvaluationObjectiveTitle", EvaluationObjectiveTitle);
            keyValues.Add("EvaluationPeriodDescriptorId", EvaluationPeriodDescriptorId);
            keyValues.Add("EvaluationTitle", EvaluationTitle);
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("PerformanceEvaluationTitle", PerformanceEvaluationTitle);
            keyValues.Add("PerformanceEvaluationTypeDescriptorId", PerformanceEvaluationTypeDescriptorId);
            keyValues.Add("PersonId", PersonId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SourceSystemDescriptorId", SourceSystemDescriptorId);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveySectionTitle", SurveySectionTitle);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveySectionAggregateResponse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveySectionAggregateResponse) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isScoreValueSupported = true;
        bool Entities.Common.TPDM.ISurveySectionAggregateResponseSynchronizationSourceSupport.IsScoreValueSupported
        {
            get { return _isScoreValueSupported; }
            set { _isScoreValueSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: SurveySectionResponseTeacherCandidateTargetAssociation

namespace EdFi.Ods.Entities.NHibernate.SurveySectionResponseTeacherCandidateTargetAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="SurveySectionResponseTeacherCandidateTargetAssociation"/> entity.
    /// </summary>
    public class SurveySectionResponseTeacherCandidateTargetAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string Namespace { get; set; }
        public virtual string SurveyIdentifier { get; set; }
        public virtual string SurveyResponseIdentifier { get; set; }
        public virtual string SurveySectionTitle { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveyResponseIdentifier", SurveyResponseIdentifier);
            keyValues.Add("SurveySectionTitle", SurveySectionTitle);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.SurveySectionResponseTeacherCandidateTargetAssociation table of the SurveySectionResponseTeacherCandidateTargetAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class SurveySectionResponseTeacherCandidateTargetAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociation, Entities.Common.Records.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public SurveySectionResponseTeacherCandidateTargetAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string Namespace  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SurveyResponseIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SurveySectionTitle  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SurveySectionResponseAggregate.EdFi.SurveySectionResponseReferenceData SurveySectionResponseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SurveySectionResponse discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociation.SurveySectionResponseDiscriminator
        {
            get { return SurveySectionResponseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the SurveySectionResponse resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociation.SurveySectionResponseResourceId
        {
            get { return SurveySectionResponseReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociation.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociation.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("Namespace", Namespace);
            keyValues.Add("SurveyIdentifier", SurveyIdentifier);
            keyValues.Add("SurveyResponseIdentifier", SurveyResponseIdentifier);
            keyValues.Add("SurveySectionTitle", SurveySectionTitle);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ISurveySectionResponseTeacherCandidateTargetAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidate

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidate"/> entity.
    /// </summary>
    public class TeacherCandidateReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string TeacherCandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidate table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidate : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidate, Entities.Common.Records.TPDM.ITeacherCandidateRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidate()
        {
           TeacherCandidateBackgroundCheckPersistentList = new HashSet<TeacherCandidateBackgroundCheck>();
            TeacherCandidateAddresses = new HashSet<TeacherCandidateAddress>();
            TeacherCandidateAids = new HashSet<TeacherCandidateAid>();
            TeacherCandidateCharacteristics = new HashSet<TeacherCandidateCharacteristic>();
            TeacherCandidateCohortYears = new HashSet<TeacherCandidateCohortYear>();
            TeacherCandidateDegreeSpecializations = new HashSet<TeacherCandidateDegreeSpecialization>();
            TeacherCandidateDisabilities = new HashSet<TeacherCandidateDisability>();
            TeacherCandidateElectronicMails = new HashSet<TeacherCandidateElectronicMail>();
            TeacherCandidateIdentificationCodes = new HashSet<TeacherCandidateIdentificationCode>();
            TeacherCandidateIdentificationDocuments = new HashSet<TeacherCandidateIdentificationDocument>();
            TeacherCandidateIndicators = new HashSet<TeacherCandidateIndicator>();
            TeacherCandidateInternationalAddresses = new HashSet<TeacherCandidateInternationalAddress>();
            TeacherCandidateLanguages = new HashSet<TeacherCandidateLanguage>();
            TeacherCandidateOtherNames = new HashSet<TeacherCandidateOtherName>();
            TeacherCandidatePersonalIdentificationDocuments = new HashSet<TeacherCandidatePersonalIdentificationDocument>();
            TeacherCandidateRaces = new HashSet<TeacherCandidateRace>();
            TeacherCandidateTelephones = new HashSet<TeacherCandidateTelephone>();
            TeacherCandidateTPPProgramDegrees = new HashSet<TeacherCandidateTPPProgramDegree>();
            TeacherCandidateVisas = new HashSet<TeacherCandidateVisa>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(30), NoDangerousText]
        public virtual string BirthCity  { get; set; }
        public virtual int? BirthCountryDescriptorId 
        {
            get
            {
                if (_birthCountryDescriptorId == default(int?))
                    _birthCountryDescriptorId = string.IsNullOrWhiteSpace(_birthCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _birthCountryDescriptor);

                return _birthCountryDescriptorId;
            } 
            set
            {
                _birthCountryDescriptorId = value;
                _birthCountryDescriptor = null;
            }
        }

        private int? _birthCountryDescriptorId;
        private string _birthCountryDescriptor;

        public virtual string BirthCountryDescriptor
        {
            get
            {
                if (_birthCountryDescriptor == null)
                    _birthCountryDescriptor = _birthCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _birthCountryDescriptorId.Value);
                    
                return _birthCountryDescriptor;
            }
            set
            {
                _birthCountryDescriptor = value;
                _birthCountryDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BirthDate 
        {
            get { return _birthDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _birthDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _birthDate;
        
        [StringLength(150), NoDangerousText]
        public virtual string BirthInternationalProvince  { get; set; }
        public virtual int? BirthSexDescriptorId 
        {
            get
            {
                if (_birthSexDescriptorId == default(int?))
                    _birthSexDescriptorId = string.IsNullOrWhiteSpace(_birthSexDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SexDescriptor", _birthSexDescriptor);

                return _birthSexDescriptorId;
            } 
            set
            {
                _birthSexDescriptorId = value;
                _birthSexDescriptor = null;
            }
        }

        private int? _birthSexDescriptorId;
        private string _birthSexDescriptor;

        public virtual string BirthSexDescriptor
        {
            get
            {
                if (_birthSexDescriptor == null)
                    _birthSexDescriptor = _birthSexDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SexDescriptor", _birthSexDescriptorId.Value);
                    
                return _birthSexDescriptor;
            }
            set
            {
                _birthSexDescriptor = value;
                _birthSexDescriptorId = default(int?);
            }
        }
        public virtual int? BirthStateAbbreviationDescriptorId 
        {
            get
            {
                if (_birthStateAbbreviationDescriptorId == default(int?))
                    _birthStateAbbreviationDescriptorId = string.IsNullOrWhiteSpace(_birthStateAbbreviationDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("StateAbbreviationDescriptor", _birthStateAbbreviationDescriptor);

                return _birthStateAbbreviationDescriptorId;
            } 
            set
            {
                _birthStateAbbreviationDescriptorId = value;
                _birthStateAbbreviationDescriptor = null;
            }
        }

        private int? _birthStateAbbreviationDescriptorId;
        private string _birthStateAbbreviationDescriptor;

        public virtual string BirthStateAbbreviationDescriptor
        {
            get
            {
                if (_birthStateAbbreviationDescriptor == null)
                    _birthStateAbbreviationDescriptor = _birthStateAbbreviationDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("StateAbbreviationDescriptor", _birthStateAbbreviationDescriptorId.Value);
                    
                return _birthStateAbbreviationDescriptor;
            }
            set
            {
                _birthStateAbbreviationDescriptor = value;
                _birthStateAbbreviationDescriptorId = default(int?);
            }
        }
        public virtual int? CitizenshipStatusDescriptorId 
        {
            get
            {
                if (_citizenshipStatusDescriptorId == default(int?))
                    _citizenshipStatusDescriptorId = string.IsNullOrWhiteSpace(_citizenshipStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CitizenshipStatusDescriptor", _citizenshipStatusDescriptor);

                return _citizenshipStatusDescriptorId;
            } 
            set
            {
                _citizenshipStatusDescriptorId = value;
                _citizenshipStatusDescriptor = null;
            }
        }

        private int? _citizenshipStatusDescriptorId;
        private string _citizenshipStatusDescriptor;

        public virtual string CitizenshipStatusDescriptor
        {
            get
            {
                if (_citizenshipStatusDescriptor == null)
                    _citizenshipStatusDescriptor = _citizenshipStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CitizenshipStatusDescriptor", _citizenshipStatusDescriptorId.Value);
                    
                return _citizenshipStatusDescriptor;
            }
            set
            {
                _citizenshipStatusDescriptor = value;
                _citizenshipStatusDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? DateEnteredUS 
        {
            get { return _dateEnteredUS; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _dateEnteredUS = null;
                } else
                {
                    var given = (DateTime) value;
                    _dateEnteredUS = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _dateEnteredUS;
        
        [StringLength(30), NoDangerousText]
        public virtual string DisplacementStatus  { get; set; }
        public virtual bool? EconomicDisadvantaged  { get; set; }
        public virtual int? EnglishLanguageExamDescriptorId 
        {
            get
            {
                if (_englishLanguageExamDescriptorId == default(int?))
                    _englishLanguageExamDescriptorId = string.IsNullOrWhiteSpace(_englishLanguageExamDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EnglishLanguageExamDescriptor", _englishLanguageExamDescriptor);

                return _englishLanguageExamDescriptorId;
            } 
            set
            {
                _englishLanguageExamDescriptorId = value;
                _englishLanguageExamDescriptor = null;
            }
        }

        private int? _englishLanguageExamDescriptorId;
        private string _englishLanguageExamDescriptor;

        public virtual string EnglishLanguageExamDescriptor
        {
            get
            {
                if (_englishLanguageExamDescriptor == null)
                    _englishLanguageExamDescriptor = _englishLanguageExamDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EnglishLanguageExamDescriptor", _englishLanguageExamDescriptorId.Value);
                    
                return _englishLanguageExamDescriptor;
            }
            set
            {
                _englishLanguageExamDescriptor = value;
                _englishLanguageExamDescriptorId = default(int?);
            }
        }
        public virtual bool? FirstGenerationStudent  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string FirstName  { get; set; }
        public virtual int? GenderDescriptorId 
        {
            get
            {
                if (_genderDescriptorId == default(int?))
                    _genderDescriptorId = string.IsNullOrWhiteSpace(_genderDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GenderDescriptor", _genderDescriptor);

                return _genderDescriptorId;
            } 
            set
            {
                _genderDescriptorId = value;
                _genderDescriptor = null;
            }
        }

        private int? _genderDescriptorId;
        private string _genderDescriptor;

        public virtual string GenderDescriptor
        {
            get
            {
                if (_genderDescriptor == null)
                    _genderDescriptor = _genderDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GenderDescriptor", _genderDescriptorId.Value);
                    
                return _genderDescriptor;
            }
            set
            {
                _genderDescriptor = value;
                _genderDescriptorId = default(int?);
            }
        }
        [StringLength(10), NoDangerousText]
        public virtual string GenerationCodeSuffix  { get; set; }
        public virtual bool? HispanicLatinoEthnicity  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string LastSurname  { get; set; }
        public virtual int? LimitedEnglishProficiencyDescriptorId 
        {
            get
            {
                if (_limitedEnglishProficiencyDescriptorId == default(int?))
                    _limitedEnglishProficiencyDescriptorId = string.IsNullOrWhiteSpace(_limitedEnglishProficiencyDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LimitedEnglishProficiencyDescriptor", _limitedEnglishProficiencyDescriptor);

                return _limitedEnglishProficiencyDescriptorId;
            } 
            set
            {
                _limitedEnglishProficiencyDescriptorId = value;
                _limitedEnglishProficiencyDescriptor = null;
            }
        }

        private int? _limitedEnglishProficiencyDescriptorId;
        private string _limitedEnglishProficiencyDescriptor;

        public virtual string LimitedEnglishProficiencyDescriptor
        {
            get
            {
                if (_limitedEnglishProficiencyDescriptor == null)
                    _limitedEnglishProficiencyDescriptor = _limitedEnglishProficiencyDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LimitedEnglishProficiencyDescriptor", _limitedEnglishProficiencyDescriptorId.Value);
                    
                return _limitedEnglishProficiencyDescriptor;
            }
            set
            {
                _limitedEnglishProficiencyDescriptor = value;
                _limitedEnglishProficiencyDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string LoginId  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MaidenName  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MiddleName  { get; set; }
        public virtual bool? MultipleBirthStatus  { get; set; }
        public virtual int? OldEthnicityDescriptorId 
        {
            get
            {
                if (_oldEthnicityDescriptorId == default(int?))
                    _oldEthnicityDescriptorId = string.IsNullOrWhiteSpace(_oldEthnicityDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("OldEthnicityDescriptor", _oldEthnicityDescriptor);

                return _oldEthnicityDescriptorId;
            } 
            set
            {
                _oldEthnicityDescriptorId = value;
                _oldEthnicityDescriptor = null;
            }
        }

        private int? _oldEthnicityDescriptorId;
        private string _oldEthnicityDescriptor;

        public virtual string OldEthnicityDescriptor
        {
            get
            {
                if (_oldEthnicityDescriptor == null)
                    _oldEthnicityDescriptor = _oldEthnicityDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("OldEthnicityDescriptor", _oldEthnicityDescriptorId.Value);
                    
                return _oldEthnicityDescriptor;
            }
            set
            {
                _oldEthnicityDescriptor = value;
                _oldEthnicityDescriptorId = default(int?);
            }
        }
        [StringLength(30), NoDangerousText]
        public virtual string PersonalTitlePrefix  { get; set; }
        [StringLength(32), NoDangerousText]
        public virtual string PersonId  { get; set; }
        public virtual int? PreviousCareerDescriptorId 
        {
            get
            {
                if (_previousCareerDescriptorId == default(int?))
                    _previousCareerDescriptorId = string.IsNullOrWhiteSpace(_previousCareerDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("PreviousCareerDescriptor", _previousCareerDescriptor);

                return _previousCareerDescriptorId;
            } 
            set
            {
                _previousCareerDescriptorId = value;
                _previousCareerDescriptor = null;
            }
        }

        private int? _previousCareerDescriptorId;
        private string _previousCareerDescriptor;

        public virtual string PreviousCareerDescriptor
        {
            get
            {
                if (_previousCareerDescriptor == null)
                    _previousCareerDescriptor = _previousCareerDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("PreviousCareerDescriptor", _previousCareerDescriptorId.Value);
                    
                return _previousCareerDescriptor;
            }
            set
            {
                _previousCareerDescriptor = value;
                _previousCareerDescriptorId = default(int?);
            }
        }
        [StringLength(255), NoDangerousText]
        public virtual string ProfileThumbnail  { get; set; }
        public virtual bool? ProgramComplete  { get; set; }
        [RequiredWithNonDefault]
        public virtual int SexDescriptorId 
        {
            get
            {
                if (_sexDescriptorId == default(int))
                    _sexDescriptorId = DescriptorsCache.GetCache().GetId("SexDescriptor", _sexDescriptor);

                return _sexDescriptorId;
            } 
            set
            {
                _sexDescriptorId = value;
                _sexDescriptor = null;
            }
        }

        private int _sexDescriptorId;
        private string _sexDescriptor;

        public virtual string SexDescriptor
        {
            get
            {
                if (_sexDescriptor == null)
                    _sexDescriptor = DescriptorsCache.GetCache().GetValue("SexDescriptor", _sexDescriptorId);
                    
                return _sexDescriptor;
            }
            set
            {
                _sexDescriptor = value;
                _sexDescriptorId = default(int);
            }
        }
        public virtual int? SourceSystemDescriptorId 
        {
            get
            {
                if (_sourceSystemDescriptorId == default(int?))
                    _sourceSystemDescriptorId = string.IsNullOrWhiteSpace(_sourceSystemDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("SourceSystemDescriptor", _sourceSystemDescriptor);

                return _sourceSystemDescriptorId;
            } 
            set
            {
                _sourceSystemDescriptorId = value;
                _sourceSystemDescriptor = null;
            }
        }

        private int? _sourceSystemDescriptorId;
        private string _sourceSystemDescriptor;

        public virtual string SourceSystemDescriptor
        {
            get
            {
                if (_sourceSystemDescriptor == null)
                    _sourceSystemDescriptor = _sourceSystemDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("SourceSystemDescriptor", _sourceSystemDescriptorId.Value);
                    
                return _sourceSystemDescriptor;
            }
            set
            {
                _sourceSystemDescriptor = value;
                _sourceSystemDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault]
        public virtual int StudentUSI 
        {
            get
            {
                if (_studentUSI == default(int))
                    _studentUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Student", _studentUniqueId);

                return _studentUSI;
            } 
            set
            {
                _studentUSI = value;
            }
        }

        private int _studentUSI;
        private string _studentUniqueId;

        [RequiredWithNonDefault]
        public virtual string StudentUniqueId
        {
            get
            {
                if (_studentUniqueId == null)
                    _studentUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Student", _studentUSI);
                    
                return _studentUniqueId;
            }
            set
            {
                if (_studentUniqueId != value)
                        _studentUSI = default(int);

                _studentUniqueId = value;
            }
        }
        [Range(typeof(decimal), "-999999999999999.9999", "999999999999999.9999")]
        public virtual decimal? TuitionCost  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateBackgroundCheck TeacherCandidateBackgroundCheck
        {
            get
            {
                // Return the item in the list, if one exists
                if (TeacherCandidateBackgroundCheckPersistentList.Any())
                    return TeacherCandidateBackgroundCheckPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (TeacherCandidateBackgroundCheckPersistentList.Any())
                    TeacherCandidateBackgroundCheckPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.TeacherCandidate = this;

                    TeacherCandidateBackgroundCheckPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.ITeacherCandidateBackgroundCheck Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateBackgroundCheck
        {
            get { return TeacherCandidateBackgroundCheck; }
            set { TeacherCandidateBackgroundCheck = (Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateBackgroundCheck) value; }
        }

        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateBackgroundCheck> _teacherCandidateBackgroundCheckPersistentList;

        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateBackgroundCheck> TeacherCandidateBackgroundCheckPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateBackgroundCheckPersistentList)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateBackgroundCheckPersistentList;
            }
            set
            {
                _teacherCandidateBackgroundCheckPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.PersonAggregate.EdFi.PersonReferenceData PersonReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Person discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidate.PersonDiscriminator
        {
            get { return PersonReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Person resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidate.PersonResourceId
        {
            get { return PersonReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.StudentAggregate.EdFi.StudentReferenceData StudentReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Student discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidate.StudentDiscriminator
        {
            get { return StudentReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Student resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidate.StudentResourceId
        {
            get { return StudentReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddress> _teacherCandidateAddresses;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateAddress> _teacherCandidateAddressesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddress> TeacherCandidateAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAddresses)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateAddresses;
            }
            set
            {
                _teacherCandidateAddresses = value;
                _teacherCandidateAddressesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateAddress, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateAddress> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAddresses)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateAddressesCovariant;
            }
            set
            {
                TeacherCandidateAddresses = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddress>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddress>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAid> _teacherCandidateAids;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateAid> _teacherCandidateAidsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAid> TeacherCandidateAids
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAids)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateAids;
            }
            set
            {
                _teacherCandidateAids = value;
                _teacherCandidateAidsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateAid, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAid>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateAid> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateAids
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAids)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateAidsCovariant;
            }
            set
            {
                TeacherCandidateAids = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAid>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAid>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCharacteristic> _teacherCandidateCharacteristics;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateCharacteristic> _teacherCandidateCharacteristicsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCharacteristic> TeacherCandidateCharacteristics
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateCharacteristics)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateCharacteristics;
            }
            set
            {
                _teacherCandidateCharacteristics = value;
                _teacherCandidateCharacteristicsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateCharacteristic, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCharacteristic>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateCharacteristic> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateCharacteristics
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateCharacteristics)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateCharacteristicsCovariant;
            }
            set
            {
                TeacherCandidateCharacteristics = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCharacteristic>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCharacteristic>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCohortYear> _teacherCandidateCohortYears;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateCohortYear> _teacherCandidateCohortYearsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCohortYear> TeacherCandidateCohortYears
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateCohortYears)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateCohortYears;
            }
            set
            {
                _teacherCandidateCohortYears = value;
                _teacherCandidateCohortYearsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateCohortYear, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCohortYear>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateCohortYear> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateCohortYears
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateCohortYears)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateCohortYearsCovariant;
            }
            set
            {
                TeacherCandidateCohortYears = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCohortYear>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateCohortYear>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDegreeSpecialization> _teacherCandidateDegreeSpecializations;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateDegreeSpecialization> _teacherCandidateDegreeSpecializationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDegreeSpecialization> TeacherCandidateDegreeSpecializations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateDegreeSpecializations)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateDegreeSpecializations;
            }
            set
            {
                _teacherCandidateDegreeSpecializations = value;
                _teacherCandidateDegreeSpecializationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateDegreeSpecialization, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDegreeSpecialization>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateDegreeSpecialization> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateDegreeSpecializations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateDegreeSpecializations)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateDegreeSpecializationsCovariant;
            }
            set
            {
                TeacherCandidateDegreeSpecializations = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDegreeSpecialization>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDegreeSpecialization>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisability> _teacherCandidateDisabilities;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateDisability> _teacherCandidateDisabilitiesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisability> TeacherCandidateDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateDisabilities)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateDisabilities;
            }
            set
            {
                _teacherCandidateDisabilities = value;
                _teacherCandidateDisabilitiesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateDisability, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisability>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateDisability> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateDisabilities
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateDisabilities)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateDisabilitiesCovariant;
            }
            set
            {
                TeacherCandidateDisabilities = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisability>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisability>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateElectronicMail> _teacherCandidateElectronicMails;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateElectronicMail> _teacherCandidateElectronicMailsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateElectronicMail> TeacherCandidateElectronicMails
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateElectronicMails)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateElectronicMails;
            }
            set
            {
                _teacherCandidateElectronicMails = value;
                _teacherCandidateElectronicMailsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateElectronicMail, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateElectronicMail>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateElectronicMail> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateElectronicMails
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateElectronicMails)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateElectronicMailsCovariant;
            }
            set
            {
                TeacherCandidateElectronicMails = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateElectronicMail>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateElectronicMail>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationCode> _teacherCandidateIdentificationCodes;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateIdentificationCode> _teacherCandidateIdentificationCodesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationCode> TeacherCandidateIdentificationCodes
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateIdentificationCodes)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateIdentificationCodes;
            }
            set
            {
                _teacherCandidateIdentificationCodes = value;
                _teacherCandidateIdentificationCodesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateIdentificationCode, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationCode>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateIdentificationCode> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateIdentificationCodes
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateIdentificationCodes)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateIdentificationCodesCovariant;
            }
            set
            {
                TeacherCandidateIdentificationCodes = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationCode>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationCode>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationDocument> _teacherCandidateIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateIdentificationDocument> _teacherCandidateIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationDocument> TeacherCandidateIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateIdentificationDocuments)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateIdentificationDocuments;
            }
            set
            {
                _teacherCandidateIdentificationDocuments = value;
                _teacherCandidateIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateIdentificationDocument, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateIdentificationDocument> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateIdentificationDocuments)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateIdentificationDocumentsCovariant;
            }
            set
            {
                TeacherCandidateIdentificationDocuments = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationDocument>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIndicator> _teacherCandidateIndicators;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateIndicator> _teacherCandidateIndicatorsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIndicator> TeacherCandidateIndicators
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateIndicators)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateIndicators;
            }
            set
            {
                _teacherCandidateIndicators = value;
                _teacherCandidateIndicatorsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateIndicator, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIndicator>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateIndicator> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateIndicators
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateIndicators)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateIndicatorsCovariant;
            }
            set
            {
                TeacherCandidateIndicators = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIndicator>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateIndicator>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateInternationalAddress> _teacherCandidateInternationalAddresses;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateInternationalAddress> _teacherCandidateInternationalAddressesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateInternationalAddress> TeacherCandidateInternationalAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateInternationalAddresses)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateInternationalAddresses;
            }
            set
            {
                _teacherCandidateInternationalAddresses = value;
                _teacherCandidateInternationalAddressesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateInternationalAddress, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateInternationalAddress>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateInternationalAddress> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateInternationalAddresses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateInternationalAddresses)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateInternationalAddressesCovariant;
            }
            set
            {
                TeacherCandidateInternationalAddresses = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateInternationalAddress>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateInternationalAddress>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguage> _teacherCandidateLanguages;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateLanguage> _teacherCandidateLanguagesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguage> TeacherCandidateLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateLanguages)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateLanguages;
            }
            set
            {
                _teacherCandidateLanguages = value;
                _teacherCandidateLanguagesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateLanguage, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguage>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateLanguage> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateLanguages
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateLanguages)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateLanguagesCovariant;
            }
            set
            {
                TeacherCandidateLanguages = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguage>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguage>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateOtherName> _teacherCandidateOtherNames;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateOtherName> _teacherCandidateOtherNamesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateOtherName> TeacherCandidateOtherNames
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateOtherNames)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateOtherNames;
            }
            set
            {
                _teacherCandidateOtherNames = value;
                _teacherCandidateOtherNamesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateOtherName, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateOtherName>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateOtherName> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateOtherNames
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateOtherNames)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateOtherNamesCovariant;
            }
            set
            {
                TeacherCandidateOtherNames = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateOtherName>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateOtherName>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidatePersonalIdentificationDocument> _teacherCandidatePersonalIdentificationDocuments;
        private ICollection<Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocument> _teacherCandidatePersonalIdentificationDocumentsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidatePersonalIdentificationDocument> TeacherCandidatePersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidatePersonalIdentificationDocuments)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidatePersonalIdentificationDocuments;
            }
            set
            {
                _teacherCandidatePersonalIdentificationDocuments = value;
                _teacherCandidatePersonalIdentificationDocumentsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocument, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidatePersonalIdentificationDocument>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocument> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidatePersonalIdentificationDocuments
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidatePersonalIdentificationDocuments)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidatePersonalIdentificationDocumentsCovariant;
            }
            set
            {
                TeacherCandidatePersonalIdentificationDocuments = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidatePersonalIdentificationDocument>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidatePersonalIdentificationDocument>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateRace> _teacherCandidateRaces;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateRace> _teacherCandidateRacesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateRace> TeacherCandidateRaces
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateRaces)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateRaces;
            }
            set
            {
                _teacherCandidateRaces = value;
                _teacherCandidateRacesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateRace, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateRace>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateRace> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateRaces
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateRaces)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateRacesCovariant;
            }
            set
            {
                TeacherCandidateRaces = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateRace>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateRace>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTelephone> _teacherCandidateTelephones;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateTelephone> _teacherCandidateTelephonesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTelephone> TeacherCandidateTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateTelephones)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateTelephones;
            }
            set
            {
                _teacherCandidateTelephones = value;
                _teacherCandidateTelephonesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateTelephone, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTelephone>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateTelephone> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateTelephones
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateTelephones)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateTelephonesCovariant;
            }
            set
            {
                TeacherCandidateTelephones = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTelephone>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTelephone>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTPPProgramDegree> _teacherCandidateTPPProgramDegrees;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateTPPProgramDegree> _teacherCandidateTPPProgramDegreesCovariant;
        [RequiredCollection]
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTPPProgramDegree> TeacherCandidateTPPProgramDegrees
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateTPPProgramDegrees)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateTPPProgramDegrees;
            }
            set
            {
                _teacherCandidateTPPProgramDegrees = value;
                _teacherCandidateTPPProgramDegreesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateTPPProgramDegree, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTPPProgramDegree>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateTPPProgramDegree> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateTPPProgramDegrees
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateTPPProgramDegrees)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateTPPProgramDegreesCovariant;
            }
            set
            {
                TeacherCandidateTPPProgramDegrees = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTPPProgramDegree>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateTPPProgramDegree>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateVisa> _teacherCandidateVisas;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateVisa> _teacherCandidateVisasCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateVisa> TeacherCandidateVisas
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateVisas)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateVisas;
            }
            set
            {
                _teacherCandidateVisas = value;
                _teacherCandidateVisasCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateVisa, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateVisa>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateVisa> Entities.Common.TPDM.ITeacherCandidate.TeacherCandidateVisas
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateVisas)
                    if (item.TeacherCandidate == null)
                        item.TeacherCandidate = this;
                // -------------------------------------------------------------

                return _teacherCandidateVisasCovariant;
            }
            set
            {
                TeacherCandidateVisas = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateVisa>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateVisa>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "BirthCountryDescriptor", new LookupColumnDetails { PropertyName = "BirthCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "BirthSexDescriptor", new LookupColumnDetails { PropertyName = "BirthSexDescriptorId", LookupTypeName = "SexDescriptor"} },
                { "BirthStateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "BirthStateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
                { "CitizenshipStatusDescriptor", new LookupColumnDetails { PropertyName = "CitizenshipStatusDescriptorId", LookupTypeName = "CitizenshipStatusDescriptor"} },
                { "EnglishLanguageExamDescriptor", new LookupColumnDetails { PropertyName = "EnglishLanguageExamDescriptorId", LookupTypeName = "EnglishLanguageExamDescriptor"} },
                { "GenderDescriptor", new LookupColumnDetails { PropertyName = "GenderDescriptorId", LookupTypeName = "GenderDescriptor"} },
                { "LimitedEnglishProficiencyDescriptor", new LookupColumnDetails { PropertyName = "LimitedEnglishProficiencyDescriptorId", LookupTypeName = "LimitedEnglishProficiencyDescriptor"} },
                { "OldEthnicityDescriptor", new LookupColumnDetails { PropertyName = "OldEthnicityDescriptorId", LookupTypeName = "OldEthnicityDescriptor"} },
                { "PreviousCareerDescriptor", new LookupColumnDetails { PropertyName = "PreviousCareerDescriptorId", LookupTypeName = "PreviousCareerDescriptor"} },
                { "SexDescriptor", new LookupColumnDetails { PropertyName = "SexDescriptorId", LookupTypeName = "SexDescriptor"} },
                { "SourceSystemDescriptor", new LookupColumnDetails { PropertyName = "SourceSystemDescriptorId", LookupTypeName = "SourceSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidate)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidate) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBirthCitySupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsBirthCitySupported
        {
            get { return _isBirthCitySupported; }
            set { _isBirthCitySupported = value; }
        }

        private bool _isBirthCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsBirthCountryDescriptorSupported
        {
            get { return _isBirthCountryDescriptorSupported; }
            set { _isBirthCountryDescriptorSupported = value; }
        }

        private bool _isBirthDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsBirthDateSupported
        {
            get { return _isBirthDateSupported; }
            set { _isBirthDateSupported = value; }
        }

        private bool _isBirthInternationalProvinceSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsBirthInternationalProvinceSupported
        {
            get { return _isBirthInternationalProvinceSupported; }
            set { _isBirthInternationalProvinceSupported = value; }
        }

        private bool _isBirthSexDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsBirthSexDescriptorSupported
        {
            get { return _isBirthSexDescriptorSupported; }
            set { _isBirthSexDescriptorSupported = value; }
        }

        private bool _isBirthStateAbbreviationDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsBirthStateAbbreviationDescriptorSupported
        {
            get { return _isBirthStateAbbreviationDescriptorSupported; }
            set { _isBirthStateAbbreviationDescriptorSupported = value; }
        }

        private bool _isCitizenshipStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsCitizenshipStatusDescriptorSupported
        {
            get { return _isCitizenshipStatusDescriptorSupported; }
            set { _isCitizenshipStatusDescriptorSupported = value; }
        }

        private bool _isDateEnteredUSSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsDateEnteredUSSupported
        {
            get { return _isDateEnteredUSSupported; }
            set { _isDateEnteredUSSupported = value; }
        }

        private bool _isDisplacementStatusSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsDisplacementStatusSupported
        {
            get { return _isDisplacementStatusSupported; }
            set { _isDisplacementStatusSupported = value; }
        }

        private bool _isEconomicDisadvantagedSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsEconomicDisadvantagedSupported
        {
            get { return _isEconomicDisadvantagedSupported; }
            set { _isEconomicDisadvantagedSupported = value; }
        }

        private bool _isEnglishLanguageExamDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsEnglishLanguageExamDescriptorSupported
        {
            get { return _isEnglishLanguageExamDescriptorSupported; }
            set { _isEnglishLanguageExamDescriptorSupported = value; }
        }

        private bool _isFirstGenerationStudentSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsFirstGenerationStudentSupported
        {
            get { return _isFirstGenerationStudentSupported; }
            set { _isFirstGenerationStudentSupported = value; }
        }

        private bool _isFirstNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsFirstNameSupported
        {
            get { return _isFirstNameSupported; }
            set { _isFirstNameSupported = value; }
        }

        private bool _isGenderDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsGenderDescriptorSupported
        {
            get { return _isGenderDescriptorSupported; }
            set { _isGenderDescriptorSupported = value; }
        }

        private bool _isGenerationCodeSuffixSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsGenerationCodeSuffixSupported
        {
            get { return _isGenerationCodeSuffixSupported; }
            set { _isGenerationCodeSuffixSupported = value; }
        }

        private bool _isHispanicLatinoEthnicitySupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsHispanicLatinoEthnicitySupported
        {
            get { return _isHispanicLatinoEthnicitySupported; }
            set { _isHispanicLatinoEthnicitySupported = value; }
        }

        private bool _isLastSurnameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsLastSurnameSupported
        {
            get { return _isLastSurnameSupported; }
            set { _isLastSurnameSupported = value; }
        }

        private bool _isLimitedEnglishProficiencyDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsLimitedEnglishProficiencyDescriptorSupported
        {
            get { return _isLimitedEnglishProficiencyDescriptorSupported; }
            set { _isLimitedEnglishProficiencyDescriptorSupported = value; }
        }

        private bool _isLoginIdSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsLoginIdSupported
        {
            get { return _isLoginIdSupported; }
            set { _isLoginIdSupported = value; }
        }

        private bool _isMaidenNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsMaidenNameSupported
        {
            get { return _isMaidenNameSupported; }
            set { _isMaidenNameSupported = value; }
        }

        private bool _isMiddleNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsMiddleNameSupported
        {
            get { return _isMiddleNameSupported; }
            set { _isMiddleNameSupported = value; }
        }

        private bool _isMultipleBirthStatusSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsMultipleBirthStatusSupported
        {
            get { return _isMultipleBirthStatusSupported; }
            set { _isMultipleBirthStatusSupported = value; }
        }

        private bool _isOldEthnicityDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsOldEthnicityDescriptorSupported
        {
            get { return _isOldEthnicityDescriptorSupported; }
            set { _isOldEthnicityDescriptorSupported = value; }
        }

        private bool _isPersonalTitlePrefixSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsPersonalTitlePrefixSupported
        {
            get { return _isPersonalTitlePrefixSupported; }
            set { _isPersonalTitlePrefixSupported = value; }
        }

        private bool _isPersonIdSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsPersonIdSupported
        {
            get { return _isPersonIdSupported; }
            set { _isPersonIdSupported = value; }
        }

        private bool _isPreviousCareerDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsPreviousCareerDescriptorSupported
        {
            get { return _isPreviousCareerDescriptorSupported; }
            set { _isPreviousCareerDescriptorSupported = value; }
        }

        private bool _isProfileThumbnailSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsProfileThumbnailSupported
        {
            get { return _isProfileThumbnailSupported; }
            set { _isProfileThumbnailSupported = value; }
        }

        private bool _isProgramCompleteSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsProgramCompleteSupported
        {
            get { return _isProgramCompleteSupported; }
            set { _isProgramCompleteSupported = value; }
        }

        private bool _isSexDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsSexDescriptorSupported
        {
            get { return _isSexDescriptorSupported; }
            set { _isSexDescriptorSupported = value; }
        }

        private bool _isSourceSystemDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsSourceSystemDescriptorSupported
        {
            get { return _isSourceSystemDescriptorSupported; }
            set { _isSourceSystemDescriptorSupported = value; }
        }

        private bool _isStudentUniqueIdSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsStudentUniqueIdSupported
        {
            get { return _isStudentUniqueIdSupported; }
            set { _isStudentUniqueIdSupported = value; }
        }

        private bool _isTeacherCandidateAddressesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateAddressesSupported
        {
            get { return _isTeacherCandidateAddressesSupported; }
            set { _isTeacherCandidateAddressesSupported = value; }
        }

        private bool _isTeacherCandidateAidsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateAidsSupported
        {
            get { return _isTeacherCandidateAidsSupported; }
            set { _isTeacherCandidateAidsSupported = value; }
        }

        private bool _isTeacherCandidateBackgroundCheckSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateBackgroundCheckSupported
        {
            get { return _isTeacherCandidateBackgroundCheckSupported; }
            set { _isTeacherCandidateBackgroundCheckSupported = value; }
        }

        private bool _isTeacherCandidateCharacteristicsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateCharacteristicsSupported
        {
            get { return _isTeacherCandidateCharacteristicsSupported; }
            set { _isTeacherCandidateCharacteristicsSupported = value; }
        }

        private bool _isTeacherCandidateCohortYearsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateCohortYearsSupported
        {
            get { return _isTeacherCandidateCohortYearsSupported; }
            set { _isTeacherCandidateCohortYearsSupported = value; }
        }

        private bool _isTeacherCandidateDegreeSpecializationsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateDegreeSpecializationsSupported
        {
            get { return _isTeacherCandidateDegreeSpecializationsSupported; }
            set { _isTeacherCandidateDegreeSpecializationsSupported = value; }
        }

        private bool _isTeacherCandidateDisabilitiesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateDisabilitiesSupported
        {
            get { return _isTeacherCandidateDisabilitiesSupported; }
            set { _isTeacherCandidateDisabilitiesSupported = value; }
        }

        private bool _isTeacherCandidateElectronicMailsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateElectronicMailsSupported
        {
            get { return _isTeacherCandidateElectronicMailsSupported; }
            set { _isTeacherCandidateElectronicMailsSupported = value; }
        }

        private bool _isTeacherCandidateIdentificationCodesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateIdentificationCodesSupported
        {
            get { return _isTeacherCandidateIdentificationCodesSupported; }
            set { _isTeacherCandidateIdentificationCodesSupported = value; }
        }

        private bool _isTeacherCandidateIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateIdentificationDocumentsSupported
        {
            get { return _isTeacherCandidateIdentificationDocumentsSupported; }
            set { _isTeacherCandidateIdentificationDocumentsSupported = value; }
        }

        private bool _isTeacherCandidateIndicatorsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateIndicatorsSupported
        {
            get { return _isTeacherCandidateIndicatorsSupported; }
            set { _isTeacherCandidateIndicatorsSupported = value; }
        }

        private bool _isTeacherCandidateInternationalAddressesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateInternationalAddressesSupported
        {
            get { return _isTeacherCandidateInternationalAddressesSupported; }
            set { _isTeacherCandidateInternationalAddressesSupported = value; }
        }

        private bool _isTeacherCandidateLanguagesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateLanguagesSupported
        {
            get { return _isTeacherCandidateLanguagesSupported; }
            set { _isTeacherCandidateLanguagesSupported = value; }
        }

        private bool _isTeacherCandidateOtherNamesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateOtherNamesSupported
        {
            get { return _isTeacherCandidateOtherNamesSupported; }
            set { _isTeacherCandidateOtherNamesSupported = value; }
        }

        private bool _isTeacherCandidatePersonalIdentificationDocumentsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidatePersonalIdentificationDocumentsSupported
        {
            get { return _isTeacherCandidatePersonalIdentificationDocumentsSupported; }
            set { _isTeacherCandidatePersonalIdentificationDocumentsSupported = value; }
        }

        private bool _isTeacherCandidateRacesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateRacesSupported
        {
            get { return _isTeacherCandidateRacesSupported; }
            set { _isTeacherCandidateRacesSupported = value; }
        }

        private bool _isTeacherCandidateTelephonesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateTelephonesSupported
        {
            get { return _isTeacherCandidateTelephonesSupported; }
            set { _isTeacherCandidateTelephonesSupported = value; }
        }

        private bool _isTeacherCandidateTPPProgramDegreesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateTPPProgramDegreesSupported
        {
            get { return _isTeacherCandidateTPPProgramDegreesSupported; }
            set { _isTeacherCandidateTPPProgramDegreesSupported = value; }
        }

        private bool _isTeacherCandidateVisasSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateVisasSupported
        {
            get { return _isTeacherCandidateVisasSupported; }
            set { _isTeacherCandidateVisasSupported = value; }
        }

        private bool _isTuitionCostSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTuitionCostSupported
        {
            get { return _isTuitionCostSupported; }
            set { _isTuitionCostSupported = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateAddress, bool> _isTeacherCandidateAddressIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateAddress, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateAddressIncluded
        {
            get { return _isTeacherCandidateAddressIncluded; }
            set { _isTeacherCandidateAddressIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateAid, bool> _isTeacherCandidateAidIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateAid, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateAidIncluded
        {
            get { return _isTeacherCandidateAidIncluded; }
            set { _isTeacherCandidateAidIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateCharacteristic, bool> _isTeacherCandidateCharacteristicIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateCharacteristic, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateCharacteristicIncluded
        {
            get { return _isTeacherCandidateCharacteristicIncluded; }
            set { _isTeacherCandidateCharacteristicIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateCohortYear, bool> _isTeacherCandidateCohortYearIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateCohortYear, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateCohortYearIncluded
        {
            get { return _isTeacherCandidateCohortYearIncluded; }
            set { _isTeacherCandidateCohortYearIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateDegreeSpecialization, bool> _isTeacherCandidateDegreeSpecializationIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateDegreeSpecialization, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateDegreeSpecializationIncluded
        {
            get { return _isTeacherCandidateDegreeSpecializationIncluded; }
            set { _isTeacherCandidateDegreeSpecializationIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateDisability, bool> _isTeacherCandidateDisabilityIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateDisability, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateDisabilityIncluded
        {
            get { return _isTeacherCandidateDisabilityIncluded; }
            set { _isTeacherCandidateDisabilityIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateElectronicMail, bool> _isTeacherCandidateElectronicMailIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateElectronicMail, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateElectronicMailIncluded
        {
            get { return _isTeacherCandidateElectronicMailIncluded; }
            set { _isTeacherCandidateElectronicMailIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateIdentificationCode, bool> _isTeacherCandidateIdentificationCodeIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateIdentificationCode, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateIdentificationCodeIncluded
        {
            get { return _isTeacherCandidateIdentificationCodeIncluded; }
            set { _isTeacherCandidateIdentificationCodeIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateIdentificationDocument, bool> _isTeacherCandidateIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateIdentificationDocument, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateIdentificationDocumentIncluded
        {
            get { return _isTeacherCandidateIdentificationDocumentIncluded; }
            set { _isTeacherCandidateIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateIndicator, bool> _isTeacherCandidateIndicatorIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateIndicator, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateIndicatorIncluded
        {
            get { return _isTeacherCandidateIndicatorIncluded; }
            set { _isTeacherCandidateIndicatorIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateInternationalAddress, bool> _isTeacherCandidateInternationalAddressIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateInternationalAddress, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateInternationalAddressIncluded
        {
            get { return _isTeacherCandidateInternationalAddressIncluded; }
            set { _isTeacherCandidateInternationalAddressIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateLanguage, bool> _isTeacherCandidateLanguageIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateLanguage, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateLanguageIncluded
        {
            get { return _isTeacherCandidateLanguageIncluded; }
            set { _isTeacherCandidateLanguageIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateOtherName, bool> _isTeacherCandidateOtherNameIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateOtherName, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateOtherNameIncluded
        {
            get { return _isTeacherCandidateOtherNameIncluded; }
            set { _isTeacherCandidateOtherNameIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocument, bool> _isTeacherCandidatePersonalIdentificationDocumentIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocument, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidatePersonalIdentificationDocumentIncluded
        {
            get { return _isTeacherCandidatePersonalIdentificationDocumentIncluded; }
            set { _isTeacherCandidatePersonalIdentificationDocumentIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateRace, bool> _isTeacherCandidateRaceIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateRace, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateRaceIncluded
        {
            get { return _isTeacherCandidateRaceIncluded; }
            set { _isTeacherCandidateRaceIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateTelephone, bool> _isTeacherCandidateTelephoneIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateTelephone, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateTelephoneIncluded
        {
            get { return _isTeacherCandidateTelephoneIncluded; }
            set { _isTeacherCandidateTelephoneIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateTPPProgramDegree, bool> _isTeacherCandidateTPPProgramDegreeIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateTPPProgramDegree, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateTPPProgramDegreeIncluded
        {
            get { return _isTeacherCandidateTPPProgramDegreeIncluded; }
            set { _isTeacherCandidateTPPProgramDegreeIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateVisa, bool> _isTeacherCandidateVisaIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateVisa, bool> Entities.Common.TPDM.ITeacherCandidateSynchronizationSourceSupport.IsTeacherCandidateVisaIncluded
        {
            get { return _isTeacherCandidateVisaIncluded; }
            set { _isTeacherCandidateVisaIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAddress table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAddress : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateAddress, Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAddress()
        {
            TeacherCandidateAddressPeriods = new HashSet<TeacherCandidateAddressPeriod>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateAddress.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AddressTypeDescriptorId 
        {
            get
            {
                if (_addressTypeDescriptorId == default(int))
                    _addressTypeDescriptorId = DescriptorsCache.GetCache().GetId("AddressTypeDescriptor", _addressTypeDescriptor);

                return _addressTypeDescriptorId;
            } 
            set
            {
                _addressTypeDescriptorId = value;
                _addressTypeDescriptor = null;
            }
        }

        private int _addressTypeDescriptorId;
        private string _addressTypeDescriptor;

        public virtual string AddressTypeDescriptor
        {
            get
            {
                if (_addressTypeDescriptor == null)
                    _addressTypeDescriptor = DescriptorsCache.GetCache().GetValue("AddressTypeDescriptor", _addressTypeDescriptorId);
                    
                return _addressTypeDescriptor;
            }
            set
            {
                _addressTypeDescriptor = value;
                _addressTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(30), NoDangerousText, NoWhitespace]
        public virtual string City  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(17), NoDangerousText, NoWhitespace]
        public virtual string PostalCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int StateAbbreviationDescriptorId 
        {
            get
            {
                if (_stateAbbreviationDescriptorId == default(int))
                    _stateAbbreviationDescriptorId = DescriptorsCache.GetCache().GetId("StateAbbreviationDescriptor", _stateAbbreviationDescriptor);

                return _stateAbbreviationDescriptorId;
            } 
            set
            {
                _stateAbbreviationDescriptorId = value;
                _stateAbbreviationDescriptor = null;
            }
        }

        private int _stateAbbreviationDescriptorId;
        private string _stateAbbreviationDescriptor;

        public virtual string StateAbbreviationDescriptor
        {
            get
            {
                if (_stateAbbreviationDescriptor == null)
                    _stateAbbreviationDescriptor = DescriptorsCache.GetCache().GetValue("StateAbbreviationDescriptor", _stateAbbreviationDescriptorId);
                    
                return _stateAbbreviationDescriptor;
            }
            set
            {
                _stateAbbreviationDescriptor = value;
                _stateAbbreviationDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(150), NoDangerousText, NoWhitespace]
        public virtual string StreetNumberName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(50), NoDangerousText]
        public virtual string ApartmentRoomSuiteNumber  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string BuildingSiteNumber  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string CongressionalDistrict  { get; set; }
        [StringLength(5), NoDangerousText]
        public virtual string CountyFIPSCode  { get; set; }
        public virtual bool? DoNotPublishIndicator  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string Latitude  { get; set; }
        public virtual int? LocaleDescriptorId 
        {
            get
            {
                if (_localeDescriptorId == default(int?))
                    _localeDescriptorId = string.IsNullOrWhiteSpace(_localeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("LocaleDescriptor", _localeDescriptor);

                return _localeDescriptorId;
            } 
            set
            {
                _localeDescriptorId = value;
                _localeDescriptor = null;
            }
        }

        private int? _localeDescriptorId;
        private string _localeDescriptor;

        public virtual string LocaleDescriptor
        {
            get
            {
                if (_localeDescriptor == null)
                    _localeDescriptor = _localeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("LocaleDescriptor", _localeDescriptorId.Value);
                    
                return _localeDescriptor;
            }
            set
            {
                _localeDescriptor = value;
                _localeDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string Longitude  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string NameOfCounty  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddressPeriod> _teacherCandidateAddressPeriods;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateAddressPeriod> _teacherCandidateAddressPeriodsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddressPeriod> TeacherCandidateAddressPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAddressPeriods)
                    if (item.TeacherCandidateAddress == null)
                        item.TeacherCandidateAddress = this;
                // -------------------------------------------------------------

                return _teacherCandidateAddressPeriods;
            }
            set
            {
                _teacherCandidateAddressPeriods = value;
                _teacherCandidateAddressPeriodsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateAddressPeriod, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddressPeriod>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateAddressPeriod> Entities.Common.TPDM.ITeacherCandidateAddress.TeacherCandidateAddressPeriods
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAddressPeriods)
                    if (item.TeacherCandidateAddress == null)
                        item.TeacherCandidateAddress = this;
                // -------------------------------------------------------------

                return _teacherCandidateAddressPeriodsCovariant;
            }
            set
            {
                TeacherCandidateAddressPeriods = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddressPeriod>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateAddressPeriod>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "LocaleDescriptor", new LookupColumnDetails { PropertyName = "LocaleDescriptorId", LookupTypeName = "LocaleDescriptor"} },
                { "StateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AddressTypeDescriptorId", AddressTypeDescriptorId);
            keyValues.Add("City", City);
            keyValues.Add("PostalCode", PostalCode);
            keyValues.Add("StateAbbreviationDescriptorId", StateAbbreviationDescriptorId);
            keyValues.Add("StreetNumberName", StreetNumberName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAddress) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isApartmentRoomSuiteNumberSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsApartmentRoomSuiteNumberSupported
        {
            get { return _isApartmentRoomSuiteNumberSupported; }
            set { _isApartmentRoomSuiteNumberSupported = value; }
        }

        private bool _isBuildingSiteNumberSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsBuildingSiteNumberSupported
        {
            get { return _isBuildingSiteNumberSupported; }
            set { _isBuildingSiteNumberSupported = value; }
        }

        private bool _isCongressionalDistrictSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsCongressionalDistrictSupported
        {
            get { return _isCongressionalDistrictSupported; }
            set { _isCongressionalDistrictSupported = value; }
        }

        private bool _isCountyFIPSCodeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsCountyFIPSCodeSupported
        {
            get { return _isCountyFIPSCodeSupported; }
            set { _isCountyFIPSCodeSupported = value; }
        }

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isLatitudeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsLatitudeSupported
        {
            get { return _isLatitudeSupported; }
            set { _isLatitudeSupported = value; }
        }

        private bool _isLocaleDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsLocaleDescriptorSupported
        {
            get { return _isLocaleDescriptorSupported; }
            set { _isLocaleDescriptorSupported = value; }
        }

        private bool _isLongitudeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsLongitudeSupported
        {
            get { return _isLongitudeSupported; }
            set { _isLongitudeSupported = value; }
        }

        private bool _isNameOfCountySupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsNameOfCountySupported
        {
            get { return _isNameOfCountySupported; }
            set { _isNameOfCountySupported = value; }
        }

        private bool _isTeacherCandidateAddressPeriodsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsTeacherCandidateAddressPeriodsSupported
        {
            get { return _isTeacherCandidateAddressPeriodsSupported; }
            set { _isTeacherCandidateAddressPeriodsSupported = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateAddressPeriod, bool> _isTeacherCandidateAddressPeriodIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateAddressPeriod, bool> Entities.Common.TPDM.ITeacherCandidateAddressSynchronizationSourceSupport.IsTeacherCandidateAddressPeriodIncluded
        {
            get { return _isTeacherCandidateAddressPeriodIncluded; }
            set { _isTeacherCandidateAddressPeriodIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAddressPeriod table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAddressPeriod : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateAddressPeriod, Entities.Common.Records.TPDM.ITeacherCandidateAddressPeriodRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAddressPeriodSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAddressPeriod()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateAddress TeacherCandidateAddress { get; set; }

        Entities.Common.TPDM.ITeacherCandidateAddress ITeacherCandidateAddressPeriod.TeacherCandidateAddress
        {
            get { return TeacherCandidateAddress; }
            set { TeacherCandidateAddress = (TeacherCandidateAddress) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAddressPeriodRecord.AddressTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).AddressTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).AddressTypeDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAddressPeriodRecord.City
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).City; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).City = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAddressPeriodRecord.PostalCode
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).PostalCode; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).PostalCode = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAddressPeriodRecord.StateAbbreviationDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).StateAbbreviationDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).StateAbbreviationDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAddressPeriodRecord.StreetNumberName
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).StreetNumberName; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).StreetNumberName = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAddressPeriodRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAddressRecord) TeacherCandidateAddress).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "StateAbbreviationDescriptor", new LookupColumnDetails { PropertyName = "StateAbbreviationDescriptorId", LookupTypeName = "StateAbbreviationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateAddress as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAddressPeriod)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAddressPeriod) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateAddress = (TeacherCandidateAddress) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAddressPeriodSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAid table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAid : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateAid, Entities.Common.Records.TPDM.ITeacherCandidateAidRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAidSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAid()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateAid.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAidRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AidTypeDescriptorId 
        {
            get
            {
                if (_aidTypeDescriptorId == default(int))
                    _aidTypeDescriptorId = DescriptorsCache.GetCache().GetId("AidTypeDescriptor", _aidTypeDescriptor);

                return _aidTypeDescriptorId;
            } 
            set
            {
                _aidTypeDescriptorId = value;
                _aidTypeDescriptor = null;
            }
        }

        private int _aidTypeDescriptorId;
        private string _aidTypeDescriptor;

        public virtual string AidTypeDescriptor
        {
            get
            {
                if (_aidTypeDescriptor == null)
                    _aidTypeDescriptor = DescriptorsCache.GetCache().GetValue("AidTypeDescriptor", _aidTypeDescriptorId);
                    
                return _aidTypeDescriptor;
            }
            set
            {
                _aidTypeDescriptor = value;
                _aidTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999999999999.9999", "999999999999999.9999")]
        public virtual decimal? AidAmount  { get; set; }
        [StringLength(1024), NoDangerousText]
        public virtual string AidConditionDescription  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual bool? PellGrantRecipient  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AidTypeDescriptor", new LookupColumnDetails { PropertyName = "AidTypeDescriptorId", LookupTypeName = "AidTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AidTypeDescriptorId", AidTypeDescriptorId);
            keyValues.Add("BeginDate", BeginDate);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAid)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAid) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAidAmountSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAidSynchronizationSourceSupport.IsAidAmountSupported
        {
            get { return _isAidAmountSupported; }
            set { _isAidAmountSupported = value; }
        }

        private bool _isAidConditionDescriptionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAidSynchronizationSourceSupport.IsAidConditionDescriptionSupported
        {
            get { return _isAidConditionDescriptionSupported; }
            set { _isAidConditionDescriptionSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAidSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isPellGrantRecipientSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAidSynchronizationSourceSupport.IsPellGrantRecipientSupported
        {
            get { return _isPellGrantRecipientSupported; }
            set { _isPellGrantRecipientSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateBackgroundCheck table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateBackgroundCheck : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateBackgroundCheck, Entities.Common.Records.TPDM.ITeacherCandidateBackgroundCheckRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateBackgroundCheckSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateBackgroundCheck()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateBackgroundCheck.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateBackgroundCheckRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BackgroundCheckCompletedDate 
        {
            get { return _backgroundCheckCompletedDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _backgroundCheckCompletedDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _backgroundCheckCompletedDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _backgroundCheckCompletedDate;
        
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BackgroundCheckRequestedDate 
        {
            get { return _backgroundCheckRequestedDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _backgroundCheckRequestedDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _backgroundCheckRequestedDate;
        
        public virtual int? BackgroundCheckStatusDescriptorId 
        {
            get
            {
                if (_backgroundCheckStatusDescriptorId == default(int?))
                    _backgroundCheckStatusDescriptorId = string.IsNullOrWhiteSpace(_backgroundCheckStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptor);

                return _backgroundCheckStatusDescriptorId;
            } 
            set
            {
                _backgroundCheckStatusDescriptorId = value;
                _backgroundCheckStatusDescriptor = null;
            }
        }

        private int? _backgroundCheckStatusDescriptorId;
        private string _backgroundCheckStatusDescriptor;

        public virtual string BackgroundCheckStatusDescriptor
        {
            get
            {
                if (_backgroundCheckStatusDescriptor == null)
                    _backgroundCheckStatusDescriptor = _backgroundCheckStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("BackgroundCheckStatusDescriptor", _backgroundCheckStatusDescriptorId.Value);
                    
                return _backgroundCheckStatusDescriptor;
            }
            set
            {
                _backgroundCheckStatusDescriptor = value;
                _backgroundCheckStatusDescriptorId = default(int?);
            }
        }
        [RequiredWithNonDefault]
        public virtual int BackgroundCheckTypeDescriptorId 
        {
            get
            {
                if (_backgroundCheckTypeDescriptorId == default(int))
                    _backgroundCheckTypeDescriptorId = DescriptorsCache.GetCache().GetId("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptor);

                return _backgroundCheckTypeDescriptorId;
            } 
            set
            {
                _backgroundCheckTypeDescriptorId = value;
                _backgroundCheckTypeDescriptor = null;
            }
        }

        private int _backgroundCheckTypeDescriptorId;
        private string _backgroundCheckTypeDescriptor;

        public virtual string BackgroundCheckTypeDescriptor
        {
            get
            {
                if (_backgroundCheckTypeDescriptor == null)
                    _backgroundCheckTypeDescriptor = DescriptorsCache.GetCache().GetValue("BackgroundCheckTypeDescriptor", _backgroundCheckTypeDescriptorId);
                    
                return _backgroundCheckTypeDescriptor;
            }
            set
            {
                _backgroundCheckTypeDescriptor = value;
                _backgroundCheckTypeDescriptorId = default(int);
            }
        }
        public virtual bool? Fingerprint  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "BackgroundCheckStatusDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckStatusDescriptorId", LookupTypeName = "BackgroundCheckStatusDescriptor"} },
                { "BackgroundCheckTypeDescriptor", new LookupColumnDetails { PropertyName = "BackgroundCheckTypeDescriptorId", LookupTypeName = "BackgroundCheckTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateBackgroundCheck)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateBackgroundCheck) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBackgroundCheckCompletedDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckCompletedDateSupported
        {
            get { return _isBackgroundCheckCompletedDateSupported; }
            set { _isBackgroundCheckCompletedDateSupported = value; }
        }

        private bool _isBackgroundCheckRequestedDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckRequestedDateSupported
        {
            get { return _isBackgroundCheckRequestedDateSupported; }
            set { _isBackgroundCheckRequestedDateSupported = value; }
        }

        private bool _isBackgroundCheckStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckStatusDescriptorSupported
        {
            get { return _isBackgroundCheckStatusDescriptorSupported; }
            set { _isBackgroundCheckStatusDescriptorSupported = value; }
        }

        private bool _isBackgroundCheckTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateBackgroundCheckSynchronizationSourceSupport.IsBackgroundCheckTypeDescriptorSupported
        {
            get { return _isBackgroundCheckTypeDescriptorSupported; }
            set { _isBackgroundCheckTypeDescriptorSupported = value; }
        }

        private bool _isFingerprintSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateBackgroundCheckSynchronizationSourceSupport.IsFingerprintSupported
        {
            get { return _isFingerprintSupported; }
            set { _isFingerprintSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateCharacteristic table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateCharacteristic : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateCharacteristic, Entities.Common.Records.TPDM.ITeacherCandidateCharacteristicRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateCharacteristicSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateCharacteristic()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateCharacteristic.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateCharacteristicRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int StudentCharacteristicDescriptorId 
        {
            get
            {
                if (_studentCharacteristicDescriptorId == default(int))
                    _studentCharacteristicDescriptorId = DescriptorsCache.GetCache().GetId("StudentCharacteristicDescriptor", _studentCharacteristicDescriptor);

                return _studentCharacteristicDescriptorId;
            } 
            set
            {
                _studentCharacteristicDescriptorId = value;
                _studentCharacteristicDescriptor = null;
            }
        }

        private int _studentCharacteristicDescriptorId;
        private string _studentCharacteristicDescriptor;

        public virtual string StudentCharacteristicDescriptor
        {
            get
            {
                if (_studentCharacteristicDescriptor == null)
                    _studentCharacteristicDescriptor = DescriptorsCache.GetCache().GetValue("StudentCharacteristicDescriptor", _studentCharacteristicDescriptorId);
                    
                return _studentCharacteristicDescriptor;
            }
            set
            {
                _studentCharacteristicDescriptor = value;
                _studentCharacteristicDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DesignatedBy  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StudentCharacteristicDescriptor", new LookupColumnDetails { PropertyName = "StudentCharacteristicDescriptorId", LookupTypeName = "StudentCharacteristicDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("StudentCharacteristicDescriptorId", StudentCharacteristicDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateCharacteristic)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateCharacteristic) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isDesignatedBySupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicSynchronizationSourceSupport.IsDesignatedBySupported
        {
            get { return _isDesignatedBySupported; }
            set { _isDesignatedBySupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateCohortYear table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateCohortYear : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateCohortYear, Entities.Common.Records.TPDM.ITeacherCandidateCohortYearRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateCohortYearSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateCohortYear()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateCohortYear.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateCohortYearRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int CohortYearTypeDescriptorId 
        {
            get
            {
                if (_cohortYearTypeDescriptorId == default(int))
                    _cohortYearTypeDescriptorId = DescriptorsCache.GetCache().GetId("CohortYearTypeDescriptor", _cohortYearTypeDescriptor);

                return _cohortYearTypeDescriptorId;
            } 
            set
            {
                _cohortYearTypeDescriptorId = value;
                _cohortYearTypeDescriptor = null;
            }
        }

        private int _cohortYearTypeDescriptorId;
        private string _cohortYearTypeDescriptor;

        public virtual string CohortYearTypeDescriptor
        {
            get
            {
                if (_cohortYearTypeDescriptor == null)
                    _cohortYearTypeDescriptor = DescriptorsCache.GetCache().GetValue("CohortYearTypeDescriptor", _cohortYearTypeDescriptorId);
                    
                return _cohortYearTypeDescriptor;
            }
            set
            {
                _cohortYearTypeDescriptor = value;
                _cohortYearTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateCohortYear.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CohortYearTypeDescriptor", new LookupColumnDetails { PropertyName = "CohortYearTypeDescriptorId", LookupTypeName = "CohortYearTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("CohortYearTypeDescriptorId", CohortYearTypeDescriptorId);
            keyValues.Add("SchoolYear", SchoolYear);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateCohortYear)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateCohortYear) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateDegreeSpecialization table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateDegreeSpecialization : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateDegreeSpecialization, Entities.Common.Records.TPDM.ITeacherCandidateDegreeSpecializationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateDegreeSpecialization()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateDegreeSpecialization.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateDegreeSpecializationRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(75), NoDangerousText, NoWhitespace]
        public virtual string MajorSpecialization  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [StringLength(75), NoDangerousText]
        public virtual string MinorSpecialization  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("MajorSpecialization", MajorSpecialization);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateDegreeSpecialization)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateDegreeSpecialization) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isMinorSpecializationSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport.IsMinorSpecializationSupported
        {
            get { return _isMinorSpecializationSupported; }
            set { _isMinorSpecializationSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateDisability table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateDisability : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateDisability, Entities.Common.Records.TPDM.ITeacherCandidateDisabilityRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateDisabilitySynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateDisability()
        {
            TeacherCandidateDisabilityDesignations = new HashSet<TeacherCandidateDisabilityDesignation>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateDisability.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateDisabilityRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDescriptorId 
        {
            get
            {
                if (_disabilityDescriptorId == default(int))
                    _disabilityDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDescriptor", _disabilityDescriptor);

                return _disabilityDescriptorId;
            } 
            set
            {
                _disabilityDescriptorId = value;
                _disabilityDescriptor = null;
            }
        }

        private int _disabilityDescriptorId;
        private string _disabilityDescriptor;

        public virtual string DisabilityDescriptor
        {
            get
            {
                if (_disabilityDescriptor == null)
                    _disabilityDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDescriptor", _disabilityDescriptorId);
                    
                return _disabilityDescriptor;
            }
            set
            {
                _disabilityDescriptor = value;
                _disabilityDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? DisabilityDeterminationSourceTypeDescriptorId 
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptorId == default(int?))
                    _disabilityDeterminationSourceTypeDescriptorId = string.IsNullOrWhiteSpace(_disabilityDeterminationSourceTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptor);

                return _disabilityDeterminationSourceTypeDescriptorId;
            } 
            set
            {
                _disabilityDeterminationSourceTypeDescriptorId = value;
                _disabilityDeterminationSourceTypeDescriptor = null;
            }
        }

        private int? _disabilityDeterminationSourceTypeDescriptorId;
        private string _disabilityDeterminationSourceTypeDescriptor;

        public virtual string DisabilityDeterminationSourceTypeDescriptor
        {
            get
            {
                if (_disabilityDeterminationSourceTypeDescriptor == null)
                    _disabilityDeterminationSourceTypeDescriptor = _disabilityDeterminationSourceTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DisabilityDeterminationSourceTypeDescriptor", _disabilityDeterminationSourceTypeDescriptorId.Value);
                    
                return _disabilityDeterminationSourceTypeDescriptor;
            }
            set
            {
                _disabilityDeterminationSourceTypeDescriptor = value;
                _disabilityDeterminationSourceTypeDescriptorId = default(int?);
            }
        }
        [StringLength(80), NoDangerousText]
        public virtual string DisabilityDiagnosis  { get; set; }
        public virtual int? OrderOfDisability  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisabilityDesignation> _teacherCandidateDisabilityDesignations;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateDisabilityDesignation> _teacherCandidateDisabilityDesignationsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisabilityDesignation> TeacherCandidateDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateDisabilityDesignations)
                    if (item.TeacherCandidateDisability == null)
                        item.TeacherCandidateDisability = this;
                // -------------------------------------------------------------

                return _teacherCandidateDisabilityDesignations;
            }
            set
            {
                _teacherCandidateDisabilityDesignations = value;
                _teacherCandidateDisabilityDesignationsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateDisabilityDesignation, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisabilityDesignation>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateDisabilityDesignation> Entities.Common.TPDM.ITeacherCandidateDisability.TeacherCandidateDisabilityDesignations
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateDisabilityDesignations)
                    if (item.TeacherCandidateDisability == null)
                        item.TeacherCandidateDisability = this;
                // -------------------------------------------------------------

                return _teacherCandidateDisabilityDesignationsCovariant;
            }
            set
            {
                TeacherCandidateDisabilityDesignations = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisabilityDesignation>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateDisabilityDesignation>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDeterminationSourceTypeDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDeterminationSourceTypeDescriptorId", LookupTypeName = "DisabilityDeterminationSourceTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDescriptorId", DisabilityDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateDisability)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateDisability) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDisabilityDeterminationSourceTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateDisabilitySynchronizationSourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported
        {
            get { return _isDisabilityDeterminationSourceTypeDescriptorSupported; }
            set { _isDisabilityDeterminationSourceTypeDescriptorSupported = value; }
        }

        private bool _isDisabilityDiagnosisSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateDisabilitySynchronizationSourceSupport.IsDisabilityDiagnosisSupported
        {
            get { return _isDisabilityDiagnosisSupported; }
            set { _isDisabilityDiagnosisSupported = value; }
        }

        private bool _isOrderOfDisabilitySupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateDisabilitySynchronizationSourceSupport.IsOrderOfDisabilitySupported
        {
            get { return _isOrderOfDisabilitySupported; }
            set { _isOrderOfDisabilitySupported = value; }
        }

        private bool _isTeacherCandidateDisabilityDesignationsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateDisabilitySynchronizationSourceSupport.IsTeacherCandidateDisabilityDesignationsSupported
        {
            get { return _isTeacherCandidateDisabilityDesignationsSupported; }
            set { _isTeacherCandidateDisabilityDesignationsSupported = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateDisabilityDesignation, bool> _isTeacherCandidateDisabilityDesignationIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateDisabilityDesignation, bool> Entities.Common.TPDM.ITeacherCandidateDisabilitySynchronizationSourceSupport.IsTeacherCandidateDisabilityDesignationIncluded
        {
            get { return _isTeacherCandidateDisabilityDesignationIncluded; }
            set { _isTeacherCandidateDisabilityDesignationIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateDisabilityDesignation table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateDisabilityDesignation : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateDisabilityDesignation, Entities.Common.Records.TPDM.ITeacherCandidateDisabilityDesignationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateDisabilityDesignation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateDisability TeacherCandidateDisability { get; set; }

        Entities.Common.TPDM.ITeacherCandidateDisability ITeacherCandidateDisabilityDesignation.TeacherCandidateDisability
        {
            get { return TeacherCandidateDisability; }
            set { TeacherCandidateDisability = (TeacherCandidateDisability) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateDisabilityDesignationRecord.DisabilityDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateDisabilityRecord) TeacherCandidateDisability).DisabilityDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateDisabilityRecord) TeacherCandidateDisability).DisabilityDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateDisabilityDesignationRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateDisabilityRecord) TeacherCandidateDisability).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateDisabilityRecord) TeacherCandidateDisability).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int DisabilityDesignationDescriptorId 
        {
            get
            {
                if (_disabilityDesignationDescriptorId == default(int))
                    _disabilityDesignationDescriptorId = DescriptorsCache.GetCache().GetId("DisabilityDesignationDescriptor", _disabilityDesignationDescriptor);

                return _disabilityDesignationDescriptorId;
            } 
            set
            {
                _disabilityDesignationDescriptorId = value;
                _disabilityDesignationDescriptor = null;
            }
        }

        private int _disabilityDesignationDescriptorId;
        private string _disabilityDesignationDescriptor;

        public virtual string DisabilityDesignationDescriptor
        {
            get
            {
                if (_disabilityDesignationDescriptor == null)
                    _disabilityDesignationDescriptor = DescriptorsCache.GetCache().GetValue("DisabilityDesignationDescriptor", _disabilityDesignationDescriptorId);
                    
                return _disabilityDesignationDescriptor;
            }
            set
            {
                _disabilityDesignationDescriptor = value;
                _disabilityDesignationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "DisabilityDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDescriptorId", LookupTypeName = "DisabilityDescriptor"} },
                { "DisabilityDesignationDescriptor", new LookupColumnDetails { PropertyName = "DisabilityDesignationDescriptorId", LookupTypeName = "DisabilityDesignationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateDisability as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DisabilityDesignationDescriptorId", DisabilityDesignationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateDisabilityDesignation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateDisabilityDesignation) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateDisability = (TeacherCandidateDisability) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateElectronicMail table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateElectronicMail : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateElectronicMail, Entities.Common.Records.TPDM.ITeacherCandidateElectronicMailRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateElectronicMailSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateElectronicMail()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateElectronicMail.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateElectronicMailRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(128), NoDangerousText, NoWhitespace]
        public virtual string ElectronicMailAddress  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ElectronicMailTypeDescriptorId 
        {
            get
            {
                if (_electronicMailTypeDescriptorId == default(int))
                    _electronicMailTypeDescriptorId = DescriptorsCache.GetCache().GetId("ElectronicMailTypeDescriptor", _electronicMailTypeDescriptor);

                return _electronicMailTypeDescriptorId;
            } 
            set
            {
                _electronicMailTypeDescriptorId = value;
                _electronicMailTypeDescriptor = null;
            }
        }

        private int _electronicMailTypeDescriptorId;
        private string _electronicMailTypeDescriptor;

        public virtual string ElectronicMailTypeDescriptor
        {
            get
            {
                if (_electronicMailTypeDescriptor == null)
                    _electronicMailTypeDescriptor = DescriptorsCache.GetCache().GetValue("ElectronicMailTypeDescriptor", _electronicMailTypeDescriptorId);
                    
                return _electronicMailTypeDescriptor;
            }
            set
            {
                _electronicMailTypeDescriptor = value;
                _electronicMailTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual bool? PrimaryEmailAddressIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ElectronicMailTypeDescriptor", new LookupColumnDetails { PropertyName = "ElectronicMailTypeDescriptorId", LookupTypeName = "ElectronicMailTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("ElectronicMailAddress", ElectronicMailAddress);
            keyValues.Add("ElectronicMailTypeDescriptorId", ElectronicMailTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateElectronicMail)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateElectronicMail) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateElectronicMailSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isPrimaryEmailAddressIndicatorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateElectronicMailSynchronizationSourceSupport.IsPrimaryEmailAddressIndicatorSupported
        {
            get { return _isPrimaryEmailAddressIndicatorSupported; }
            set { _isPrimaryEmailAddressIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateIdentificationCode table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateIdentificationCode : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateIdentificationCode, Entities.Common.Records.TPDM.ITeacherCandidateIdentificationCodeRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateIdentificationCodeSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateIdentificationCode()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateIdentificationCode.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateIdentificationCodeRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string AssigningOrganizationIdentificationCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int StudentIdentificationSystemDescriptorId 
        {
            get
            {
                if (_studentIdentificationSystemDescriptorId == default(int))
                    _studentIdentificationSystemDescriptorId = DescriptorsCache.GetCache().GetId("StudentIdentificationSystemDescriptor", _studentIdentificationSystemDescriptor);

                return _studentIdentificationSystemDescriptorId;
            } 
            set
            {
                _studentIdentificationSystemDescriptorId = value;
                _studentIdentificationSystemDescriptor = null;
            }
        }

        private int _studentIdentificationSystemDescriptorId;
        private string _studentIdentificationSystemDescriptor;

        public virtual string StudentIdentificationSystemDescriptor
        {
            get
            {
                if (_studentIdentificationSystemDescriptor == null)
                    _studentIdentificationSystemDescriptor = DescriptorsCache.GetCache().GetValue("StudentIdentificationSystemDescriptor", _studentIdentificationSystemDescriptorId);
                    
                return _studentIdentificationSystemDescriptor;
            }
            set
            {
                _studentIdentificationSystemDescriptor = value;
                _studentIdentificationSystemDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(60), NoDangerousText]
        public virtual string IdentificationCode  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "StudentIdentificationSystemDescriptor", new LookupColumnDetails { PropertyName = "StudentIdentificationSystemDescriptorId", LookupTypeName = "StudentIdentificationSystemDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AssigningOrganizationIdentificationCode", AssigningOrganizationIdentificationCode);
            keyValues.Add("StudentIdentificationSystemDescriptorId", StudentIdentificationSystemDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateIdentificationCode)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateIdentificationCode) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIdentificationCodeSynchronizationSourceSupport.IsIdentificationCodeSupported
        {
            get { return _isIdentificationCodeSupported; }
            set { _isIdentificationCodeSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateIdentificationDocument table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateIdentificationDocument, Entities.Common.Records.TPDM.ITeacherCandidateIdentificationDocumentRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateIdentificationDocument.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateIdentificationDocumentRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateIndicator table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateIndicator : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateIndicator, Entities.Common.Records.TPDM.ITeacherCandidateIndicatorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateIndicatorSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateIndicator()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateIndicator.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateIndicatorRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(200), NoDangerousText, NoWhitespace]
        public virtual string IndicatorName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DesignatedBy  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [RequiredWithNonDefault, StringLength(35), NoDangerousText]
        public virtual string Indicator  { get; set; }
        [StringLength(200), NoDangerousText]
        public virtual string IndicatorGroup  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IndicatorName", IndicatorName);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateIndicator)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateIndicator) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIndicatorSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isDesignatedBySupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIndicatorSynchronizationSourceSupport.IsDesignatedBySupported
        {
            get { return _isDesignatedBySupported; }
            set { _isDesignatedBySupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIndicatorSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isIndicatorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIndicatorSynchronizationSourceSupport.IsIndicatorSupported
        {
            get { return _isIndicatorSupported; }
            set { _isIndicatorSupported = value; }
        }

        private bool _isIndicatorGroupSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateIndicatorSynchronizationSourceSupport.IsIndicatorGroupSupported
        {
            get { return _isIndicatorGroupSupported; }
            set { _isIndicatorGroupSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateInternationalAddress table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateInternationalAddress : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateInternationalAddress, Entities.Common.Records.TPDM.ITeacherCandidateInternationalAddressRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateInternationalAddress()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateInternationalAddress.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateInternationalAddressRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AddressTypeDescriptorId 
        {
            get
            {
                if (_addressTypeDescriptorId == default(int))
                    _addressTypeDescriptorId = DescriptorsCache.GetCache().GetId("AddressTypeDescriptor", _addressTypeDescriptor);

                return _addressTypeDescriptorId;
            } 
            set
            {
                _addressTypeDescriptorId = value;
                _addressTypeDescriptor = null;
            }
        }

        private int _addressTypeDescriptorId;
        private string _addressTypeDescriptor;

        public virtual string AddressTypeDescriptor
        {
            get
            {
                if (_addressTypeDescriptor == null)
                    _addressTypeDescriptor = DescriptorsCache.GetCache().GetValue("AddressTypeDescriptor", _addressTypeDescriptorId);
                    
                return _addressTypeDescriptor;
            }
            set
            {
                _addressTypeDescriptor = value;
                _addressTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(150), NoDangerousText]
        public virtual string AddressLine1  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine2  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine3  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string AddressLine4  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [RequiredWithNonDefault]
        public virtual int CountryDescriptorId 
        {
            get
            {
                if (_countryDescriptorId == default(int))
                    _countryDescriptorId = DescriptorsCache.GetCache().GetId("CountryDescriptor", _countryDescriptor);

                return _countryDescriptorId;
            } 
            set
            {
                _countryDescriptorId = value;
                _countryDescriptor = null;
            }
        }

        private int _countryDescriptorId;
        private string _countryDescriptor;

        public virtual string CountryDescriptor
        {
            get
            {
                if (_countryDescriptor == null)
                    _countryDescriptor = DescriptorsCache.GetCache().GetValue("CountryDescriptor", _countryDescriptorId);
                    
                return _countryDescriptor;
            }
            set
            {
                _countryDescriptor = value;
                _countryDescriptorId = default(int);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        [StringLength(20), NoDangerousText]
        public virtual string Latitude  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string Longitude  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AddressTypeDescriptor", new LookupColumnDetails { PropertyName = "AddressTypeDescriptorId", LookupTypeName = "AddressTypeDescriptor"} },
                { "CountryDescriptor", new LookupColumnDetails { PropertyName = "CountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AddressTypeDescriptorId", AddressTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateInternationalAddress)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateInternationalAddress) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAddressLine1Supported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine1Supported
        {
            get { return _isAddressLine1Supported; }
            set { _isAddressLine1Supported = value; }
        }

        private bool _isAddressLine2Supported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine2Supported
        {
            get { return _isAddressLine2Supported; }
            set { _isAddressLine2Supported = value; }
        }

        private bool _isAddressLine3Supported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine3Supported
        {
            get { return _isAddressLine3Supported; }
            set { _isAddressLine3Supported = value; }
        }

        private bool _isAddressLine4Supported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsAddressLine4Supported
        {
            get { return _isAddressLine4Supported; }
            set { _isAddressLine4Supported = value; }
        }

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsCountryDescriptorSupported
        {
            get { return _isCountryDescriptorSupported; }
            set { _isCountryDescriptorSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isLatitudeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsLatitudeSupported
        {
            get { return _isLatitudeSupported; }
            set { _isLatitudeSupported = value; }
        }

        private bool _isLongitudeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateInternationalAddressSynchronizationSourceSupport.IsLongitudeSupported
        {
            get { return _isLongitudeSupported; }
            set { _isLongitudeSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateLanguage table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateLanguage : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateLanguage, Entities.Common.Records.TPDM.ITeacherCandidateLanguageRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateLanguageSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateLanguage()
        {
            TeacherCandidateLanguageUses = new HashSet<TeacherCandidateLanguageUse>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateLanguage.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateLanguageRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageDescriptorId 
        {
            get
            {
                if (_languageDescriptorId == default(int))
                    _languageDescriptorId = DescriptorsCache.GetCache().GetId("LanguageDescriptor", _languageDescriptor);

                return _languageDescriptorId;
            } 
            set
            {
                _languageDescriptorId = value;
                _languageDescriptor = null;
            }
        }

        private int _languageDescriptorId;
        private string _languageDescriptor;

        public virtual string LanguageDescriptor
        {
            get
            {
                if (_languageDescriptor == null)
                    _languageDescriptor = DescriptorsCache.GetCache().GetValue("LanguageDescriptor", _languageDescriptorId);
                    
                return _languageDescriptor;
            }
            set
            {
                _languageDescriptor = value;
                _languageDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguageUse> _teacherCandidateLanguageUses;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateLanguageUse> _teacherCandidateLanguageUsesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguageUse> TeacherCandidateLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateLanguageUses)
                    if (item.TeacherCandidateLanguage == null)
                        item.TeacherCandidateLanguage = this;
                // -------------------------------------------------------------

                return _teacherCandidateLanguageUses;
            }
            set
            {
                _teacherCandidateLanguageUses = value;
                _teacherCandidateLanguageUsesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateLanguageUse, Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguageUse>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateLanguageUse> Entities.Common.TPDM.ITeacherCandidateLanguage.TeacherCandidateLanguageUses
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateLanguageUses)
                    if (item.TeacherCandidateLanguage == null)
                        item.TeacherCandidateLanguage = this;
                // -------------------------------------------------------------

                return _teacherCandidateLanguageUsesCovariant;
            }
            set
            {
                TeacherCandidateLanguageUses = new HashSet<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguageUse>(value.Cast<Entities.NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateLanguageUse>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageDescriptorId", LanguageDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateLanguage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateLanguage) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isTeacherCandidateLanguageUsesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateLanguageSynchronizationSourceSupport.IsTeacherCandidateLanguageUsesSupported
        {
            get { return _isTeacherCandidateLanguageUsesSupported; }
            set { _isTeacherCandidateLanguageUsesSupported = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateLanguageUse, bool> _isTeacherCandidateLanguageUseIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateLanguageUse, bool> Entities.Common.TPDM.ITeacherCandidateLanguageSynchronizationSourceSupport.IsTeacherCandidateLanguageUseIncluded
        {
            get { return _isTeacherCandidateLanguageUseIncluded; }
            set { _isTeacherCandidateLanguageUseIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateLanguageUse table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateLanguageUse : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateLanguageUse, Entities.Common.Records.TPDM.ITeacherCandidateLanguageUseRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateLanguageUseSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateLanguageUse()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateLanguage TeacherCandidateLanguage { get; set; }

        Entities.Common.TPDM.ITeacherCandidateLanguage ITeacherCandidateLanguageUse.TeacherCandidateLanguage
        {
            get { return TeacherCandidateLanguage; }
            set { TeacherCandidateLanguage = (TeacherCandidateLanguage) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateLanguageUseRecord.LanguageDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateLanguageRecord) TeacherCandidateLanguage).LanguageDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateLanguageRecord) TeacherCandidateLanguage).LanguageDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateLanguageUseRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateLanguageRecord) TeacherCandidateLanguage).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateLanguageRecord) TeacherCandidateLanguage).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int LanguageUseDescriptorId 
        {
            get
            {
                if (_languageUseDescriptorId == default(int))
                    _languageUseDescriptorId = DescriptorsCache.GetCache().GetId("LanguageUseDescriptor", _languageUseDescriptor);

                return _languageUseDescriptorId;
            } 
            set
            {
                _languageUseDescriptorId = value;
                _languageUseDescriptor = null;
            }
        }

        private int _languageUseDescriptorId;
        private string _languageUseDescriptor;

        public virtual string LanguageUseDescriptor
        {
            get
            {
                if (_languageUseDescriptor == null)
                    _languageUseDescriptor = DescriptorsCache.GetCache().GetValue("LanguageUseDescriptor", _languageUseDescriptorId);
                    
                return _languageUseDescriptor;
            }
            set
            {
                _languageUseDescriptor = value;
                _languageUseDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "LanguageDescriptor", new LookupColumnDetails { PropertyName = "LanguageDescriptorId", LookupTypeName = "LanguageDescriptor"} },
                { "LanguageUseDescriptor", new LookupColumnDetails { PropertyName = "LanguageUseDescriptorId", LookupTypeName = "LanguageUseDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateLanguage as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("LanguageUseDescriptorId", LanguageUseDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateLanguageUse)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateLanguageUse) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateLanguage = (TeacherCandidateLanguage) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateOtherName table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateOtherName : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateOtherName, Entities.Common.Records.TPDM.ITeacherCandidateOtherNameRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateOtherNameSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateOtherName()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateOtherName.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateOtherNameRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int OtherNameTypeDescriptorId 
        {
            get
            {
                if (_otherNameTypeDescriptorId == default(int))
                    _otherNameTypeDescriptorId = DescriptorsCache.GetCache().GetId("OtherNameTypeDescriptor", _otherNameTypeDescriptor);

                return _otherNameTypeDescriptorId;
            } 
            set
            {
                _otherNameTypeDescriptorId = value;
                _otherNameTypeDescriptor = null;
            }
        }

        private int _otherNameTypeDescriptorId;
        private string _otherNameTypeDescriptor;

        public virtual string OtherNameTypeDescriptor
        {
            get
            {
                if (_otherNameTypeDescriptor == null)
                    _otherNameTypeDescriptor = DescriptorsCache.GetCache().GetValue("OtherNameTypeDescriptor", _otherNameTypeDescriptorId);
                    
                return _otherNameTypeDescriptor;
            }
            set
            {
                _otherNameTypeDescriptor = value;
                _otherNameTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string FirstName  { get; set; }
        [StringLength(10), NoDangerousText]
        public virtual string GenerationCodeSuffix  { get; set; }
        [RequiredWithNonDefault, StringLength(75), NoDangerousText]
        public virtual string LastSurname  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MiddleName  { get; set; }
        [StringLength(30), NoDangerousText]
        public virtual string PersonalTitlePrefix  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "OtherNameTypeDescriptor", new LookupColumnDetails { PropertyName = "OtherNameTypeDescriptorId", LookupTypeName = "OtherNameTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("OtherNameTypeDescriptorId", OtherNameTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateOtherName)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateOtherName) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isFirstNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateOtherNameSynchronizationSourceSupport.IsFirstNameSupported
        {
            get { return _isFirstNameSupported; }
            set { _isFirstNameSupported = value; }
        }

        private bool _isGenerationCodeSuffixSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateOtherNameSynchronizationSourceSupport.IsGenerationCodeSuffixSupported
        {
            get { return _isGenerationCodeSuffixSupported; }
            set { _isGenerationCodeSuffixSupported = value; }
        }

        private bool _isLastSurnameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateOtherNameSynchronizationSourceSupport.IsLastSurnameSupported
        {
            get { return _isLastSurnameSupported; }
            set { _isLastSurnameSupported = value; }
        }

        private bool _isMiddleNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateOtherNameSynchronizationSourceSupport.IsMiddleNameSupported
        {
            get { return _isMiddleNameSupported; }
            set { _isMiddleNameSupported = value; }
        }

        private bool _isPersonalTitlePrefixSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateOtherNameSynchronizationSourceSupport.IsPersonalTitlePrefixSupported
        {
            get { return _isPersonalTitlePrefixSupported; }
            set { _isPersonalTitlePrefixSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidatePersonalIdentificationDocument table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidatePersonalIdentificationDocument : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocument, Entities.Common.Records.TPDM.ITeacherCandidatePersonalIdentificationDocumentRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidatePersonalIdentificationDocument()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidatePersonalIdentificationDocument.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidatePersonalIdentificationDocumentRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int IdentificationDocumentUseDescriptorId 
        {
            get
            {
                if (_identificationDocumentUseDescriptorId == default(int))
                    _identificationDocumentUseDescriptorId = DescriptorsCache.GetCache().GetId("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptor);

                return _identificationDocumentUseDescriptorId;
            } 
            set
            {
                _identificationDocumentUseDescriptorId = value;
                _identificationDocumentUseDescriptor = null;
            }
        }

        private int _identificationDocumentUseDescriptorId;
        private string _identificationDocumentUseDescriptor;

        public virtual string IdentificationDocumentUseDescriptor
        {
            get
            {
                if (_identificationDocumentUseDescriptor == null)
                    _identificationDocumentUseDescriptor = DescriptorsCache.GetCache().GetValue("IdentificationDocumentUseDescriptor", _identificationDocumentUseDescriptorId);
                    
                return _identificationDocumentUseDescriptor;
            }
            set
            {
                _identificationDocumentUseDescriptor = value;
                _identificationDocumentUseDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int PersonalInformationVerificationDescriptorId 
        {
            get
            {
                if (_personalInformationVerificationDescriptorId == default(int))
                    _personalInformationVerificationDescriptorId = DescriptorsCache.GetCache().GetId("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptor);

                return _personalInformationVerificationDescriptorId;
            } 
            set
            {
                _personalInformationVerificationDescriptorId = value;
                _personalInformationVerificationDescriptor = null;
            }
        }

        private int _personalInformationVerificationDescriptorId;
        private string _personalInformationVerificationDescriptor;

        public virtual string PersonalInformationVerificationDescriptor
        {
            get
            {
                if (_personalInformationVerificationDescriptor == null)
                    _personalInformationVerificationDescriptor = DescriptorsCache.GetCache().GetValue("PersonalInformationVerificationDescriptor", _personalInformationVerificationDescriptorId);
                    
                return _personalInformationVerificationDescriptor;
            }
            set
            {
                _personalInformationVerificationDescriptor = value;
                _personalInformationVerificationDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? DocumentExpirationDate 
        {
            get { return _documentExpirationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _documentExpirationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _documentExpirationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _documentExpirationDate;
        
        [StringLength(60), NoDangerousText]
        public virtual string DocumentTitle  { get; set; }
        public virtual int? IssuerCountryDescriptorId 
        {
            get
            {
                if (_issuerCountryDescriptorId == default(int?))
                    _issuerCountryDescriptorId = string.IsNullOrWhiteSpace(_issuerCountryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CountryDescriptor", _issuerCountryDescriptor);

                return _issuerCountryDescriptorId;
            } 
            set
            {
                _issuerCountryDescriptorId = value;
                _issuerCountryDescriptor = null;
            }
        }

        private int? _issuerCountryDescriptorId;
        private string _issuerCountryDescriptor;

        public virtual string IssuerCountryDescriptor
        {
            get
            {
                if (_issuerCountryDescriptor == null)
                    _issuerCountryDescriptor = _issuerCountryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CountryDescriptor", _issuerCountryDescriptorId.Value);
                    
                return _issuerCountryDescriptor;
            }
            set
            {
                _issuerCountryDescriptor = value;
                _issuerCountryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string IssuerDocumentIdentificationCode  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "IdentificationDocumentUseDescriptor", new LookupColumnDetails { PropertyName = "IdentificationDocumentUseDescriptorId", LookupTypeName = "IdentificationDocumentUseDescriptor"} },
                { "IssuerCountryDescriptor", new LookupColumnDetails { PropertyName = "IssuerCountryDescriptorId", LookupTypeName = "CountryDescriptor"} },
                { "PersonalInformationVerificationDescriptor", new LookupColumnDetails { PropertyName = "PersonalInformationVerificationDescriptorId", LookupTypeName = "PersonalInformationVerificationDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("IdentificationDocumentUseDescriptorId", IdentificationDocumentUseDescriptorId);
            keyValues.Add("PersonalInformationVerificationDescriptorId", PersonalInformationVerificationDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocument)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocument) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDocumentExpirationDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentExpirationDateSupported
        {
            get { return _isDocumentExpirationDateSupported; }
            set { _isDocumentExpirationDateSupported = value; }
        }

        private bool _isDocumentTitleSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsDocumentTitleSupported
        {
            get { return _isDocumentTitleSupported; }
            set { _isDocumentTitleSupported = value; }
        }

        private bool _isIssuerCountryDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerCountryDescriptorSupported
        {
            get { return _isIssuerCountryDescriptorSupported; }
            set { _isIssuerCountryDescriptorSupported = value; }
        }

        private bool _isIssuerDocumentIdentificationCodeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerDocumentIdentificationCodeSupported
        {
            get { return _isIssuerDocumentIdentificationCodeSupported; }
            set { _isIssuerDocumentIdentificationCodeSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateRace table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateRace : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateRace, Entities.Common.Records.TPDM.ITeacherCandidateRaceRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateRaceSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateRace()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateRace.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateRaceRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int RaceDescriptorId 
        {
            get
            {
                if (_raceDescriptorId == default(int))
                    _raceDescriptorId = DescriptorsCache.GetCache().GetId("RaceDescriptor", _raceDescriptor);

                return _raceDescriptorId;
            } 
            set
            {
                _raceDescriptorId = value;
                _raceDescriptor = null;
            }
        }

        private int _raceDescriptorId;
        private string _raceDescriptor;

        public virtual string RaceDescriptor
        {
            get
            {
                if (_raceDescriptor == null)
                    _raceDescriptor = DescriptorsCache.GetCache().GetValue("RaceDescriptor", _raceDescriptorId);
                    
                return _raceDescriptor;
            }
            set
            {
                _raceDescriptor = value;
                _raceDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "RaceDescriptor", new LookupColumnDetails { PropertyName = "RaceDescriptorId", LookupTypeName = "RaceDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RaceDescriptorId", RaceDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateRace)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateRace) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateTelephone table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateTelephone : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateTelephone, Entities.Common.Records.TPDM.ITeacherCandidateTelephoneRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateTelephoneSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateTelephone()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateTelephone.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateTelephoneRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault, StringLength(24), NoDangerousText, NoWhitespace]
        public virtual string TelephoneNumber  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TelephoneNumberTypeDescriptorId 
        {
            get
            {
                if (_telephoneNumberTypeDescriptorId == default(int))
                    _telephoneNumberTypeDescriptorId = DescriptorsCache.GetCache().GetId("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptor);

                return _telephoneNumberTypeDescriptorId;
            } 
            set
            {
                _telephoneNumberTypeDescriptorId = value;
                _telephoneNumberTypeDescriptor = null;
            }
        }

        private int _telephoneNumberTypeDescriptorId;
        private string _telephoneNumberTypeDescriptor;

        public virtual string TelephoneNumberTypeDescriptor
        {
            get
            {
                if (_telephoneNumberTypeDescriptor == null)
                    _telephoneNumberTypeDescriptor = DescriptorsCache.GetCache().GetValue("TelephoneNumberTypeDescriptor", _telephoneNumberTypeDescriptorId);
                    
                return _telephoneNumberTypeDescriptor;
            }
            set
            {
                _telephoneNumberTypeDescriptor = value;
                _telephoneNumberTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual bool? DoNotPublishIndicator  { get; set; }
        public virtual int? OrderOfPriority  { get; set; }
        public virtual bool? TextMessageCapabilityIndicator  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TelephoneNumberTypeDescriptor", new LookupColumnDetails { PropertyName = "TelephoneNumberTypeDescriptorId", LookupTypeName = "TelephoneNumberTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("TelephoneNumber", TelephoneNumber);
            keyValues.Add("TelephoneNumberTypeDescriptorId", TelephoneNumberTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateTelephone)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateTelephone) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isDoNotPublishIndicatorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTelephoneSynchronizationSourceSupport.IsDoNotPublishIndicatorSupported
        {
            get { return _isDoNotPublishIndicatorSupported; }
            set { _isDoNotPublishIndicatorSupported = value; }
        }

        private bool _isOrderOfPrioritySupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTelephoneSynchronizationSourceSupport.IsOrderOfPrioritySupported
        {
            get { return _isOrderOfPrioritySupported; }
            set { _isOrderOfPrioritySupported = value; }
        }

        private bool _isTextMessageCapabilityIndicatorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTelephoneSynchronizationSourceSupport.IsTextMessageCapabilityIndicatorSupported
        {
            get { return _isTextMessageCapabilityIndicatorSupported; }
            set { _isTextMessageCapabilityIndicatorSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateTPPProgramDegree table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateTPPProgramDegree : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateTPPProgramDegree, Entities.Common.Records.TPDM.ITeacherCandidateTPPProgramDegreeRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateTPPProgramDegree()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateTPPProgramDegree.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateTPPProgramDegreeRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int))
                    _academicSubjectDescriptorId = DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TPPDegreeTypeDescriptorId 
        {
            get
            {
                if (_tppDegreeTypeDescriptorId == default(int))
                    _tppDegreeTypeDescriptorId = DescriptorsCache.GetCache().GetId("TPPDegreeTypeDescriptor", _tppDegreeTypeDescriptor);

                return _tppDegreeTypeDescriptorId;
            } 
            set
            {
                _tppDegreeTypeDescriptorId = value;
                _tppDegreeTypeDescriptor = null;
            }
        }

        private int _tppDegreeTypeDescriptorId;
        private string _tppDegreeTypeDescriptor;

        public virtual string TPPDegreeTypeDescriptor
        {
            get
            {
                if (_tppDegreeTypeDescriptor == null)
                    _tppDegreeTypeDescriptor = DescriptorsCache.GetCache().GetValue("TPPDegreeTypeDescriptor", _tppDegreeTypeDescriptorId);
                    
                return _tppDegreeTypeDescriptor;
            }
            set
            {
                _tppDegreeTypeDescriptor = value;
                _tppDegreeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
                { "TPPDegreeTypeDescriptor", new LookupColumnDetails { PropertyName = "TPPDegreeTypeDescriptorId", LookupTypeName = "TPPDegreeTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicSubjectDescriptorId", AcademicSubjectDescriptorId);
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);
            keyValues.Add("TPPDegreeTypeDescriptorId", TPPDegreeTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateTPPProgramDegree)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateTPPProgramDegree) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateVisa table of the TeacherCandidate aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateVisa : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateVisa, Entities.Common.Records.TPDM.ITeacherCandidateVisaRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateVisaSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateVisa()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidate TeacherCandidate { get; set; }

        Entities.Common.TPDM.ITeacherCandidate ITeacherCandidateVisa.TeacherCandidate
        {
            get { return TeacherCandidate; }
            set { TeacherCandidate = (TeacherCandidate) value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateVisaRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateRecord) TeacherCandidate).TeacherCandidateIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int VisaDescriptorId 
        {
            get
            {
                if (_visaDescriptorId == default(int))
                    _visaDescriptorId = DescriptorsCache.GetCache().GetId("VisaDescriptor", _visaDescriptor);

                return _visaDescriptorId;
            } 
            set
            {
                _visaDescriptorId = value;
                _visaDescriptor = null;
            }
        }

        private int _visaDescriptorId;
        private string _visaDescriptor;

        public virtual string VisaDescriptor
        {
            get
            {
                if (_visaDescriptor == null)
                    _visaDescriptor = DescriptorsCache.GetCache().GetValue("VisaDescriptor", _visaDescriptorId);
                    
                return _visaDescriptor;
            }
            set
            {
                _visaDescriptor = value;
                _visaDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "VisaDescriptor", new LookupColumnDetails { PropertyName = "VisaDescriptorId", LookupTypeName = "VisaDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidate as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("VisaDescriptorId", VisaDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateVisa)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateVisa) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidate = (TeacherCandidate) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateAcademicRecord

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateAcademicRecord"/> entity.
    /// </summary>
    public class TeacherCandidateAcademicRecordReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAcademicRecord table of the TeacherCandidateAcademicRecord aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAcademicRecord : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateAcademicRecord, Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAcademicRecord()
        {
           TeacherCandidateAcademicRecordClassRankingPersistentList = new HashSet<TeacherCandidateAcademicRecordClassRanking>();
            TeacherCandidateAcademicRecordAcademicHonors = new HashSet<TeacherCandidateAcademicRecordAcademicHonor>();
            TeacherCandidateAcademicRecordDiplomas = new HashSet<TeacherCandidateAcademicRecordDiploma>();
            TeacherCandidateAcademicRecordGradePointAverages = new HashSet<TeacherCandidateAcademicRecordGradePointAverage>();
            TeacherCandidateAcademicRecordRecognitions = new HashSet<TeacherCandidateAcademicRecordRecognition>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? ContentGradePointAverage  { get; set; }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? ContentGradePointEarned  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? CumulativeAttemptedCreditConversion  { get; set; }
        [Range(typeof(decimal), "-999999.999", "999999.999")]
        public virtual decimal? CumulativeAttemptedCredits  { get; set; }
        public virtual int? CumulativeAttemptedCreditTypeDescriptorId 
        {
            get
            {
                if (_cumulativeAttemptedCreditTypeDescriptorId == default(int?))
                    _cumulativeAttemptedCreditTypeDescriptorId = string.IsNullOrWhiteSpace(_cumulativeAttemptedCreditTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CreditTypeDescriptor", _cumulativeAttemptedCreditTypeDescriptor);

                return _cumulativeAttemptedCreditTypeDescriptorId;
            } 
            set
            {
                _cumulativeAttemptedCreditTypeDescriptorId = value;
                _cumulativeAttemptedCreditTypeDescriptor = null;
            }
        }

        private int? _cumulativeAttemptedCreditTypeDescriptorId;
        private string _cumulativeAttemptedCreditTypeDescriptor;

        public virtual string CumulativeAttemptedCreditTypeDescriptor
        {
            get
            {
                if (_cumulativeAttemptedCreditTypeDescriptor == null)
                    _cumulativeAttemptedCreditTypeDescriptor = _cumulativeAttemptedCreditTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CreditTypeDescriptor", _cumulativeAttemptedCreditTypeDescriptorId.Value);
                    
                return _cumulativeAttemptedCreditTypeDescriptor;
            }
            set
            {
                _cumulativeAttemptedCreditTypeDescriptor = value;
                _cumulativeAttemptedCreditTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? CumulativeEarnedCreditConversion  { get; set; }
        [Range(typeof(decimal), "-999999.999", "999999.999")]
        public virtual decimal? CumulativeEarnedCredits  { get; set; }
        public virtual int? CumulativeEarnedCreditTypeDescriptorId 
        {
            get
            {
                if (_cumulativeEarnedCreditTypeDescriptorId == default(int?))
                    _cumulativeEarnedCreditTypeDescriptorId = string.IsNullOrWhiteSpace(_cumulativeEarnedCreditTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CreditTypeDescriptor", _cumulativeEarnedCreditTypeDescriptor);

                return _cumulativeEarnedCreditTypeDescriptorId;
            } 
            set
            {
                _cumulativeEarnedCreditTypeDescriptorId = value;
                _cumulativeEarnedCreditTypeDescriptor = null;
            }
        }

        private int? _cumulativeEarnedCreditTypeDescriptorId;
        private string _cumulativeEarnedCreditTypeDescriptor;

        public virtual string CumulativeEarnedCreditTypeDescriptor
        {
            get
            {
                if (_cumulativeEarnedCreditTypeDescriptor == null)
                    _cumulativeEarnedCreditTypeDescriptor = _cumulativeEarnedCreditTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CreditTypeDescriptor", _cumulativeEarnedCreditTypeDescriptorId.Value);
                    
                return _cumulativeEarnedCreditTypeDescriptor;
            }
            set
            {
                _cumulativeEarnedCreditTypeDescriptor = value;
                _cumulativeEarnedCreditTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? CumulativeGradePointAverage  { get; set; }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? CumulativeGradePointsEarned  { get; set; }
        [StringLength(80), NoDangerousText]
        public virtual string GradeValueQualifier  { get; set; }
        [RequiredWithNonDefault]
        public virtual int ProgramGatewayDescriptorId 
        {
            get
            {
                if (_programGatewayDescriptorId == default(int))
                    _programGatewayDescriptorId = DescriptorsCache.GetCache().GetId("ProgramGatewayDescriptor", _programGatewayDescriptor);

                return _programGatewayDescriptorId;
            } 
            set
            {
                _programGatewayDescriptorId = value;
                _programGatewayDescriptor = null;
            }
        }

        private int _programGatewayDescriptorId;
        private string _programGatewayDescriptor;

        public virtual string ProgramGatewayDescriptor
        {
            get
            {
                if (_programGatewayDescriptor == null)
                    _programGatewayDescriptor = DescriptorsCache.GetCache().GetValue("ProgramGatewayDescriptor", _programGatewayDescriptorId);
                    
                return _programGatewayDescriptor;
            }
            set
            {
                _programGatewayDescriptor = value;
                _programGatewayDescriptorId = default(int);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? ProjectedGraduationDate 
        {
            get { return _projectedGraduationDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _projectedGraduationDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _projectedGraduationDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _projectedGraduationDate;
        
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? SessionAttemptedCreditConversion  { get; set; }
        [Range(typeof(decimal), "-999999.999", "999999.999")]
        public virtual decimal? SessionAttemptedCredits  { get; set; }
        public virtual int? SessionAttemptedCreditTypeDescriptorId 
        {
            get
            {
                if (_sessionAttemptedCreditTypeDescriptorId == default(int?))
                    _sessionAttemptedCreditTypeDescriptorId = string.IsNullOrWhiteSpace(_sessionAttemptedCreditTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CreditTypeDescriptor", _sessionAttemptedCreditTypeDescriptor);

                return _sessionAttemptedCreditTypeDescriptorId;
            } 
            set
            {
                _sessionAttemptedCreditTypeDescriptorId = value;
                _sessionAttemptedCreditTypeDescriptor = null;
            }
        }

        private int? _sessionAttemptedCreditTypeDescriptorId;
        private string _sessionAttemptedCreditTypeDescriptor;

        public virtual string SessionAttemptedCreditTypeDescriptor
        {
            get
            {
                if (_sessionAttemptedCreditTypeDescriptor == null)
                    _sessionAttemptedCreditTypeDescriptor = _sessionAttemptedCreditTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CreditTypeDescriptor", _sessionAttemptedCreditTypeDescriptorId.Value);
                    
                return _sessionAttemptedCreditTypeDescriptor;
            }
            set
            {
                _sessionAttemptedCreditTypeDescriptor = value;
                _sessionAttemptedCreditTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? SessionEarnedCreditConversion  { get; set; }
        [Range(typeof(decimal), "-999999.999", "999999.999")]
        public virtual decimal? SessionEarnedCredits  { get; set; }
        public virtual int? SessionEarnedCreditTypeDescriptorId 
        {
            get
            {
                if (_sessionEarnedCreditTypeDescriptorId == default(int?))
                    _sessionEarnedCreditTypeDescriptorId = string.IsNullOrWhiteSpace(_sessionEarnedCreditTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CreditTypeDescriptor", _sessionEarnedCreditTypeDescriptor);

                return _sessionEarnedCreditTypeDescriptorId;
            } 
            set
            {
                _sessionEarnedCreditTypeDescriptorId = value;
                _sessionEarnedCreditTypeDescriptor = null;
            }
        }

        private int? _sessionEarnedCreditTypeDescriptorId;
        private string _sessionEarnedCreditTypeDescriptor;

        public virtual string SessionEarnedCreditTypeDescriptor
        {
            get
            {
                if (_sessionEarnedCreditTypeDescriptor == null)
                    _sessionEarnedCreditTypeDescriptor = _sessionEarnedCreditTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CreditTypeDescriptor", _sessionEarnedCreditTypeDescriptorId.Value);
                    
                return _sessionEarnedCreditTypeDescriptor;
            }
            set
            {
                _sessionEarnedCreditTypeDescriptor = value;
                _sessionEarnedCreditTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? SessionGradePointAverage  { get; set; }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? SessionGradePointsEarned  { get; set; }
        [RequiredWithNonDefault]
        public virtual int TPPDegreeTypeDescriptorId 
        {
            get
            {
                if (_tppDegreeTypeDescriptorId == default(int))
                    _tppDegreeTypeDescriptorId = DescriptorsCache.GetCache().GetId("TPPDegreeTypeDescriptor", _tppDegreeTypeDescriptor);

                return _tppDegreeTypeDescriptorId;
            } 
            set
            {
                _tppDegreeTypeDescriptorId = value;
                _tppDegreeTypeDescriptor = null;
            }
        }

        private int _tppDegreeTypeDescriptorId;
        private string _tppDegreeTypeDescriptor;

        public virtual string TPPDegreeTypeDescriptor
        {
            get
            {
                if (_tppDegreeTypeDescriptor == null)
                    _tppDegreeTypeDescriptor = DescriptorsCache.GetCache().GetValue("TPPDegreeTypeDescriptor", _tppDegreeTypeDescriptorId);
                    
                return _tppDegreeTypeDescriptor;
            }
            set
            {
                _tppDegreeTypeDescriptor = value;
                _tppDegreeTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        [ValidateObject]
        public virtual Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordClassRanking TeacherCandidateAcademicRecordClassRanking
        {
            get
            {
                // Return the item in the list, if one exists
                if (TeacherCandidateAcademicRecordClassRankingPersistentList.Any())
                    return TeacherCandidateAcademicRecordClassRankingPersistentList.First();

                // No reference is present
                return null;
            }
            set
            {
                // Delete the existing object
                if (TeacherCandidateAcademicRecordClassRankingPersistentList.Any())
                    TeacherCandidateAcademicRecordClassRankingPersistentList.Clear();

                // If we're setting a value, add it to the list now
                if (value != null)
                {
                    // Set the back-reference to the parent
                    value.TeacherCandidateAcademicRecord = this;

                    TeacherCandidateAcademicRecordClassRankingPersistentList.Add(value);
                }
            }
        }

        Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRanking Entities.Common.TPDM.ITeacherCandidateAcademicRecord.TeacherCandidateAcademicRecordClassRanking
        {
            get { return TeacherCandidateAcademicRecordClassRanking; }
            set { TeacherCandidateAcademicRecordClassRanking = (Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordClassRanking) value; }
        }

        private ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordClassRanking> _teacherCandidateAcademicRecordClassRankingPersistentList;

        public virtual ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordClassRanking> TeacherCandidateAcademicRecordClassRankingPersistentList
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordClassRankingPersistentList)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordClassRankingPersistentList;
            }
            set
            {
                _teacherCandidateAcademicRecordClassRankingPersistentList = value;
            }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateAcademicRecord.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateAcademicRecord.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateAcademicRecord.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateAcademicRecord.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateAcademicRecord.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordAcademicHonor> _teacherCandidateAcademicRecordAcademicHonors;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonor> _teacherCandidateAcademicRecordAcademicHonorsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordAcademicHonor> TeacherCandidateAcademicRecordAcademicHonors
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordAcademicHonors)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordAcademicHonors;
            }
            set
            {
                _teacherCandidateAcademicRecordAcademicHonors = value;
                _teacherCandidateAcademicRecordAcademicHonorsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonor, Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordAcademicHonor>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonor> Entities.Common.TPDM.ITeacherCandidateAcademicRecord.TeacherCandidateAcademicRecordAcademicHonors
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordAcademicHonors)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordAcademicHonorsCovariant;
            }
            set
            {
                TeacherCandidateAcademicRecordAcademicHonors = new HashSet<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordAcademicHonor>(value.Cast<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordAcademicHonor>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordDiploma> _teacherCandidateAcademicRecordDiplomas;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiploma> _teacherCandidateAcademicRecordDiplomasCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordDiploma> TeacherCandidateAcademicRecordDiplomas
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordDiplomas)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordDiplomas;
            }
            set
            {
                _teacherCandidateAcademicRecordDiplomas = value;
                _teacherCandidateAcademicRecordDiplomasCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiploma, Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordDiploma>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiploma> Entities.Common.TPDM.ITeacherCandidateAcademicRecord.TeacherCandidateAcademicRecordDiplomas
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordDiplomas)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordDiplomasCovariant;
            }
            set
            {
                TeacherCandidateAcademicRecordDiplomas = new HashSet<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordDiploma>(value.Cast<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordDiploma>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordGradePointAverage> _teacherCandidateAcademicRecordGradePointAverages;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverage> _teacherCandidateAcademicRecordGradePointAveragesCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordGradePointAverage> TeacherCandidateAcademicRecordGradePointAverages
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordGradePointAverages)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordGradePointAverages;
            }
            set
            {
                _teacherCandidateAcademicRecordGradePointAverages = value;
                _teacherCandidateAcademicRecordGradePointAveragesCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverage, Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordGradePointAverage>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverage> Entities.Common.TPDM.ITeacherCandidateAcademicRecord.TeacherCandidateAcademicRecordGradePointAverages
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordGradePointAverages)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordGradePointAveragesCovariant;
            }
            set
            {
                TeacherCandidateAcademicRecordGradePointAverages = new HashSet<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordGradePointAverage>(value.Cast<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordGradePointAverage>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordRecognition> _teacherCandidateAcademicRecordRecognitions;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognition> _teacherCandidateAcademicRecordRecognitionsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordRecognition> TeacherCandidateAcademicRecordRecognitions
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordRecognitions)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordRecognitions;
            }
            set
            {
                _teacherCandidateAcademicRecordRecognitions = value;
                _teacherCandidateAcademicRecordRecognitionsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognition, Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordRecognition>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognition> Entities.Common.TPDM.ITeacherCandidateAcademicRecord.TeacherCandidateAcademicRecordRecognitions
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateAcademicRecordRecognitions)
                    if (item.TeacherCandidateAcademicRecord == null)
                        item.TeacherCandidateAcademicRecord = this;
                // -------------------------------------------------------------

                return _teacherCandidateAcademicRecordRecognitionsCovariant;
            }
            set
            {
                TeacherCandidateAcademicRecordRecognitions = new HashSet<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordRecognition>(value.Cast<Entities.NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordRecognition>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "CumulativeAttemptedCreditTypeDescriptor", new LookupColumnDetails { PropertyName = "CumulativeAttemptedCreditTypeDescriptorId", LookupTypeName = "CreditTypeDescriptor"} },
                { "CumulativeEarnedCreditTypeDescriptor", new LookupColumnDetails { PropertyName = "CumulativeEarnedCreditTypeDescriptorId", LookupTypeName = "CreditTypeDescriptor"} },
                { "ProgramGatewayDescriptor", new LookupColumnDetails { PropertyName = "ProgramGatewayDescriptorId", LookupTypeName = "ProgramGatewayDescriptor"} },
                { "SessionAttemptedCreditTypeDescriptor", new LookupColumnDetails { PropertyName = "SessionAttemptedCreditTypeDescriptorId", LookupTypeName = "CreditTypeDescriptor"} },
                { "SessionEarnedCreditTypeDescriptor", new LookupColumnDetails { PropertyName = "SessionEarnedCreditTypeDescriptorId", LookupTypeName = "CreditTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
                { "TPPDegreeTypeDescriptor", new LookupColumnDetails { PropertyName = "TPPDegreeTypeDescriptorId", LookupTypeName = "TPPDegreeTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecord)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecord) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isContentGradePointAverageSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsContentGradePointAverageSupported
        {
            get { return _isContentGradePointAverageSupported; }
            set { _isContentGradePointAverageSupported = value; }
        }

        private bool _isContentGradePointEarnedSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsContentGradePointEarnedSupported
        {
            get { return _isContentGradePointEarnedSupported; }
            set { _isContentGradePointEarnedSupported = value; }
        }

        private bool _isCumulativeAttemptedCreditConversionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsCumulativeAttemptedCreditConversionSupported
        {
            get { return _isCumulativeAttemptedCreditConversionSupported; }
            set { _isCumulativeAttemptedCreditConversionSupported = value; }
        }

        private bool _isCumulativeAttemptedCreditsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsCumulativeAttemptedCreditsSupported
        {
            get { return _isCumulativeAttemptedCreditsSupported; }
            set { _isCumulativeAttemptedCreditsSupported = value; }
        }

        private bool _isCumulativeAttemptedCreditTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported
        {
            get { return _isCumulativeAttemptedCreditTypeDescriptorSupported; }
            set { _isCumulativeAttemptedCreditTypeDescriptorSupported = value; }
        }

        private bool _isCumulativeEarnedCreditConversionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsCumulativeEarnedCreditConversionSupported
        {
            get { return _isCumulativeEarnedCreditConversionSupported; }
            set { _isCumulativeEarnedCreditConversionSupported = value; }
        }

        private bool _isCumulativeEarnedCreditsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsCumulativeEarnedCreditsSupported
        {
            get { return _isCumulativeEarnedCreditsSupported; }
            set { _isCumulativeEarnedCreditsSupported = value; }
        }

        private bool _isCumulativeEarnedCreditTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsCumulativeEarnedCreditTypeDescriptorSupported
        {
            get { return _isCumulativeEarnedCreditTypeDescriptorSupported; }
            set { _isCumulativeEarnedCreditTypeDescriptorSupported = value; }
        }

        private bool _isCumulativeGradePointAverageSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsCumulativeGradePointAverageSupported
        {
            get { return _isCumulativeGradePointAverageSupported; }
            set { _isCumulativeGradePointAverageSupported = value; }
        }

        private bool _isCumulativeGradePointsEarnedSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsCumulativeGradePointsEarnedSupported
        {
            get { return _isCumulativeGradePointsEarnedSupported; }
            set { _isCumulativeGradePointsEarnedSupported = value; }
        }

        private bool _isGradeValueQualifierSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsGradeValueQualifierSupported
        {
            get { return _isGradeValueQualifierSupported; }
            set { _isGradeValueQualifierSupported = value; }
        }

        private bool _isProgramGatewayDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsProgramGatewayDescriptorSupported
        {
            get { return _isProgramGatewayDescriptorSupported; }
            set { _isProgramGatewayDescriptorSupported = value; }
        }

        private bool _isProjectedGraduationDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsProjectedGraduationDateSupported
        {
            get { return _isProjectedGraduationDateSupported; }
            set { _isProjectedGraduationDateSupported = value; }
        }

        private bool _isSessionAttemptedCreditConversionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsSessionAttemptedCreditConversionSupported
        {
            get { return _isSessionAttemptedCreditConversionSupported; }
            set { _isSessionAttemptedCreditConversionSupported = value; }
        }

        private bool _isSessionAttemptedCreditsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsSessionAttemptedCreditsSupported
        {
            get { return _isSessionAttemptedCreditsSupported; }
            set { _isSessionAttemptedCreditsSupported = value; }
        }

        private bool _isSessionAttemptedCreditTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsSessionAttemptedCreditTypeDescriptorSupported
        {
            get { return _isSessionAttemptedCreditTypeDescriptorSupported; }
            set { _isSessionAttemptedCreditTypeDescriptorSupported = value; }
        }

        private bool _isSessionEarnedCreditConversionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsSessionEarnedCreditConversionSupported
        {
            get { return _isSessionEarnedCreditConversionSupported; }
            set { _isSessionEarnedCreditConversionSupported = value; }
        }

        private bool _isSessionEarnedCreditsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsSessionEarnedCreditsSupported
        {
            get { return _isSessionEarnedCreditsSupported; }
            set { _isSessionEarnedCreditsSupported = value; }
        }

        private bool _isSessionEarnedCreditTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsSessionEarnedCreditTypeDescriptorSupported
        {
            get { return _isSessionEarnedCreditTypeDescriptorSupported; }
            set { _isSessionEarnedCreditTypeDescriptorSupported = value; }
        }

        private bool _isSessionGradePointAverageSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsSessionGradePointAverageSupported
        {
            get { return _isSessionGradePointAverageSupported; }
            set { _isSessionGradePointAverageSupported = value; }
        }

        private bool _isSessionGradePointsEarnedSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsSessionGradePointsEarnedSupported
        {
            get { return _isSessionGradePointsEarnedSupported; }
            set { _isSessionGradePointsEarnedSupported = value; }
        }

        private bool _isTeacherCandidateAcademicRecordAcademicHonorsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordAcademicHonorsSupported
        {
            get { return _isTeacherCandidateAcademicRecordAcademicHonorsSupported; }
            set { _isTeacherCandidateAcademicRecordAcademicHonorsSupported = value; }
        }

        private bool _isTeacherCandidateAcademicRecordClassRankingSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordClassRankingSupported
        {
            get { return _isTeacherCandidateAcademicRecordClassRankingSupported; }
            set { _isTeacherCandidateAcademicRecordClassRankingSupported = value; }
        }

        private bool _isTeacherCandidateAcademicRecordDiplomasSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordDiplomasSupported
        {
            get { return _isTeacherCandidateAcademicRecordDiplomasSupported; }
            set { _isTeacherCandidateAcademicRecordDiplomasSupported = value; }
        }

        private bool _isTeacherCandidateAcademicRecordGradePointAveragesSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordGradePointAveragesSupported
        {
            get { return _isTeacherCandidateAcademicRecordGradePointAveragesSupported; }
            set { _isTeacherCandidateAcademicRecordGradePointAveragesSupported = value; }
        }

        private bool _isTeacherCandidateAcademicRecordRecognitionsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordRecognitionsSupported
        {
            get { return _isTeacherCandidateAcademicRecordRecognitionsSupported; }
            set { _isTeacherCandidateAcademicRecordRecognitionsSupported = value; }
        }

        private bool _isTPPDegreeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTPPDegreeTypeDescriptorSupported
        {
            get { return _isTPPDegreeTypeDescriptorSupported; }
            set { _isTPPDegreeTypeDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonor, bool> _isTeacherCandidateAcademicRecordAcademicHonorIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonor, bool> Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordAcademicHonorIncluded
        {
            get { return _isTeacherCandidateAcademicRecordAcademicHonorIncluded; }
            set { _isTeacherCandidateAcademicRecordAcademicHonorIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiploma, bool> _isTeacherCandidateAcademicRecordDiplomaIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiploma, bool> Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordDiplomaIncluded
        {
            get { return _isTeacherCandidateAcademicRecordDiplomaIncluded; }
            set { _isTeacherCandidateAcademicRecordDiplomaIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverage, bool> _isTeacherCandidateAcademicRecordGradePointAverageIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverage, bool> Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordGradePointAverageIncluded
        {
            get { return _isTeacherCandidateAcademicRecordGradePointAverageIncluded; }
            set { _isTeacherCandidateAcademicRecordGradePointAverageIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognition, bool> _isTeacherCandidateAcademicRecordRecognitionIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognition, bool> Entities.Common.TPDM.ITeacherCandidateAcademicRecordSynchronizationSourceSupport.IsTeacherCandidateAcademicRecordRecognitionIncluded
        {
            get { return _isTeacherCandidateAcademicRecordRecognitionIncluded; }
            set { _isTeacherCandidateAcademicRecordRecognitionIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAcademicRecordAcademicHonor table of the TeacherCandidateAcademicRecord aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAcademicRecordAcademicHonor : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonor, Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordAcademicHonorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAcademicRecordAcademicHonor()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateAcademicRecord TeacherCandidateAcademicRecord { get; set; }

        Entities.Common.TPDM.ITeacherCandidateAcademicRecord ITeacherCandidateAcademicRecordAcademicHonor.TeacherCandidateAcademicRecord
        {
            get { return TeacherCandidateAcademicRecord; }
            set { TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordAcademicHonorRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId = value; }
        }

        short Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordAcademicHonorRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordAcademicHonorRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordAcademicHonorRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicHonorCategoryDescriptorId 
        {
            get
            {
                if (_academicHonorCategoryDescriptorId == default(int))
                    _academicHonorCategoryDescriptorId = DescriptorsCache.GetCache().GetId("AcademicHonorCategoryDescriptor", _academicHonorCategoryDescriptor);

                return _academicHonorCategoryDescriptorId;
            } 
            set
            {
                _academicHonorCategoryDescriptorId = value;
                _academicHonorCategoryDescriptor = null;
            }
        }

        private int _academicHonorCategoryDescriptorId;
        private string _academicHonorCategoryDescriptor;

        public virtual string AcademicHonorCategoryDescriptor
        {
            get
            {
                if (_academicHonorCategoryDescriptor == null)
                    _academicHonorCategoryDescriptor = DescriptorsCache.GetCache().GetValue("AcademicHonorCategoryDescriptor", _academicHonorCategoryDescriptorId);
                    
                return _academicHonorCategoryDescriptor;
            }
            set
            {
                _academicHonorCategoryDescriptor = value;
                _academicHonorCategoryDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(80), NoDangerousText, NoWhitespace]
        public virtual string HonorDescription  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AchievementCategoryDescriptorId 
        {
            get
            {
                if (_achievementCategoryDescriptorId == default(int?))
                    _achievementCategoryDescriptorId = string.IsNullOrWhiteSpace(_achievementCategoryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AchievementCategoryDescriptor", _achievementCategoryDescriptor);

                return _achievementCategoryDescriptorId;
            } 
            set
            {
                _achievementCategoryDescriptorId = value;
                _achievementCategoryDescriptor = null;
            }
        }

        private int? _achievementCategoryDescriptorId;
        private string _achievementCategoryDescriptor;

        public virtual string AchievementCategoryDescriptor
        {
            get
            {
                if (_achievementCategoryDescriptor == null)
                    _achievementCategoryDescriptor = _achievementCategoryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AchievementCategoryDescriptor", _achievementCategoryDescriptorId.Value);
                    
                return _achievementCategoryDescriptor;
            }
            set
            {
                _achievementCategoryDescriptor = value;
                _achievementCategoryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string AchievementCategorySystem  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string AchievementTitle  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string Criteria  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string CriteriaURL  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string EvidenceStatement  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? HonorAwardDate 
        {
            get { return _honorAwardDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _honorAwardDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _honorAwardDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _honorAwardDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? HonorAwardExpiresDate 
        {
            get { return _honorAwardExpiresDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _honorAwardExpiresDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _honorAwardExpiresDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _honorAwardExpiresDate;
        
        [StringLength(255), NoDangerousText]
        public virtual string ImageURL  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string IssuerOriginURL  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicHonorCategoryDescriptor", new LookupColumnDetails { PropertyName = "AcademicHonorCategoryDescriptorId", LookupTypeName = "AcademicHonorCategoryDescriptor"} },
                { "AchievementCategoryDescriptor", new LookupColumnDetails { PropertyName = "AchievementCategoryDescriptorId", LookupTypeName = "AchievementCategoryDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateAcademicRecord as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicHonorCategoryDescriptorId", AcademicHonorCategoryDescriptorId);
            keyValues.Add("HonorDescription", HonorDescription);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonor) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAchievementCategoryDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported
        {
            get { return _isAchievementCategoryDescriptorSupported; }
            set { _isAchievementCategoryDescriptorSupported = value; }
        }

        private bool _isAchievementCategorySystemSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsAchievementCategorySystemSupported
        {
            get { return _isAchievementCategorySystemSupported; }
            set { _isAchievementCategorySystemSupported = value; }
        }

        private bool _isAchievementTitleSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsAchievementTitleSupported
        {
            get { return _isAchievementTitleSupported; }
            set { _isAchievementTitleSupported = value; }
        }

        private bool _isCriteriaSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsCriteriaSupported
        {
            get { return _isCriteriaSupported; }
            set { _isCriteriaSupported = value; }
        }

        private bool _isCriteriaURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsCriteriaURLSupported
        {
            get { return _isCriteriaURLSupported; }
            set { _isCriteriaURLSupported = value; }
        }

        private bool _isEvidenceStatementSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsEvidenceStatementSupported
        {
            get { return _isEvidenceStatementSupported; }
            set { _isEvidenceStatementSupported = value; }
        }

        private bool _isHonorAwardDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsHonorAwardDateSupported
        {
            get { return _isHonorAwardDateSupported; }
            set { _isHonorAwardDateSupported = value; }
        }

        private bool _isHonorAwardExpiresDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsHonorAwardExpiresDateSupported
        {
            get { return _isHonorAwardExpiresDateSupported; }
            set { _isHonorAwardExpiresDateSupported = value; }
        }

        private bool _isImageURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsImageURLSupported
        {
            get { return _isImageURLSupported; }
            set { _isImageURLSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        private bool _isIssuerOriginURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport.IsIssuerOriginURLSupported
        {
            get { return _isIssuerOriginURLSupported; }
            set { _isIssuerOriginURLSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAcademicRecordClassRanking table of the TeacherCandidateAcademicRecord aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAcademicRecordClassRanking : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRanking, Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordClassRankingRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAcademicRecordClassRanking()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateAcademicRecord TeacherCandidateAcademicRecord { get; set; }

        Entities.Common.TPDM.ITeacherCandidateAcademicRecord ITeacherCandidateAcademicRecordClassRanking.TeacherCandidateAcademicRecord
        {
            get { return TeacherCandidateAcademicRecord; }
            set { TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordClassRankingRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId = value; }
        }

        short Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordClassRankingRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordClassRankingRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordClassRankingRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId = value; }
        }

        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int ClassRank  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? ClassRankingDate 
        {
            get { return _classRankingDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _classRankingDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _classRankingDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _classRankingDate;
        
        public virtual int? PercentageRanking  { get; set; }
        public virtual int TotalNumberInClass  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateAcademicRecord as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRanking)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRanking) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isClassRankSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport.IsClassRankSupported
        {
            get { return _isClassRankSupported; }
            set { _isClassRankSupported = value; }
        }

        private bool _isClassRankingDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport.IsClassRankingDateSupported
        {
            get { return _isClassRankingDateSupported; }
            set { _isClassRankingDateSupported = value; }
        }

        private bool _isPercentageRankingSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport.IsPercentageRankingSupported
        {
            get { return _isPercentageRankingSupported; }
            set { _isPercentageRankingSupported = value; }
        }

        private bool _isTotalNumberInClassSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport.IsTotalNumberInClassSupported
        {
            get { return _isTotalNumberInClassSupported; }
            set { _isTotalNumberInClassSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAcademicRecordDiploma table of the TeacherCandidateAcademicRecord aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAcademicRecordDiploma : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiploma, Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordDiplomaRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAcademicRecordDiploma()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateAcademicRecord TeacherCandidateAcademicRecord { get; set; }

        Entities.Common.TPDM.ITeacherCandidateAcademicRecord ITeacherCandidateAcademicRecordDiploma.TeacherCandidateAcademicRecord
        {
            get { return TeacherCandidateAcademicRecord; }
            set { TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordDiplomaRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId = value; }
        }

        short Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordDiplomaRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordDiplomaRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordDiplomaRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime DiplomaAwardDate 
        {
            get { return _diplomaAwardDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _diplomaAwardDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _diplomaAwardDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int DiplomaTypeDescriptorId 
        {
            get
            {
                if (_diplomaTypeDescriptorId == default(int))
                    _diplomaTypeDescriptorId = DescriptorsCache.GetCache().GetId("DiplomaTypeDescriptor", _diplomaTypeDescriptor);

                return _diplomaTypeDescriptorId;
            } 
            set
            {
                _diplomaTypeDescriptorId = value;
                _diplomaTypeDescriptor = null;
            }
        }

        private int _diplomaTypeDescriptorId;
        private string _diplomaTypeDescriptor;

        public virtual string DiplomaTypeDescriptor
        {
            get
            {
                if (_diplomaTypeDescriptor == null)
                    _diplomaTypeDescriptor = DescriptorsCache.GetCache().GetValue("DiplomaTypeDescriptor", _diplomaTypeDescriptorId);
                    
                return _diplomaTypeDescriptor;
            }
            set
            {
                _diplomaTypeDescriptor = value;
                _diplomaTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AchievementCategoryDescriptorId 
        {
            get
            {
                if (_achievementCategoryDescriptorId == default(int?))
                    _achievementCategoryDescriptorId = string.IsNullOrWhiteSpace(_achievementCategoryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AchievementCategoryDescriptor", _achievementCategoryDescriptor);

                return _achievementCategoryDescriptorId;
            } 
            set
            {
                _achievementCategoryDescriptorId = value;
                _achievementCategoryDescriptor = null;
            }
        }

        private int? _achievementCategoryDescriptorId;
        private string _achievementCategoryDescriptor;

        public virtual string AchievementCategoryDescriptor
        {
            get
            {
                if (_achievementCategoryDescriptor == null)
                    _achievementCategoryDescriptor = _achievementCategoryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AchievementCategoryDescriptor", _achievementCategoryDescriptorId.Value);
                    
                return _achievementCategoryDescriptor;
            }
            set
            {
                _achievementCategoryDescriptor = value;
                _achievementCategoryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string AchievementCategorySystem  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string AchievementTitle  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string Criteria  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string CriteriaURL  { get; set; }
        public virtual bool? CTECompleter  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? DiplomaAwardExpiresDate 
        {
            get { return _diplomaAwardExpiresDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _diplomaAwardExpiresDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _diplomaAwardExpiresDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _diplomaAwardExpiresDate;
        
        [StringLength(80), NoDangerousText]
        public virtual string DiplomaDescription  { get; set; }
        public virtual int? DiplomaLevelDescriptorId 
        {
            get
            {
                if (_diplomaLevelDescriptorId == default(int?))
                    _diplomaLevelDescriptorId = string.IsNullOrWhiteSpace(_diplomaLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("DiplomaLevelDescriptor", _diplomaLevelDescriptor);

                return _diplomaLevelDescriptorId;
            } 
            set
            {
                _diplomaLevelDescriptorId = value;
                _diplomaLevelDescriptor = null;
            }
        }

        private int? _diplomaLevelDescriptorId;
        private string _diplomaLevelDescriptor;

        public virtual string DiplomaLevelDescriptor
        {
            get
            {
                if (_diplomaLevelDescriptor == null)
                    _diplomaLevelDescriptor = _diplomaLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("DiplomaLevelDescriptor", _diplomaLevelDescriptorId.Value);
                    
                return _diplomaLevelDescriptor;
            }
            set
            {
                _diplomaLevelDescriptor = value;
                _diplomaLevelDescriptorId = default(int?);
            }
        }
        [StringLength(150), NoDangerousText]
        public virtual string EvidenceStatement  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string ImageURL  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string IssuerOriginURL  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AchievementCategoryDescriptor", new LookupColumnDetails { PropertyName = "AchievementCategoryDescriptorId", LookupTypeName = "AchievementCategoryDescriptor"} },
                { "DiplomaLevelDescriptor", new LookupColumnDetails { PropertyName = "DiplomaLevelDescriptorId", LookupTypeName = "DiplomaLevelDescriptor"} },
                { "DiplomaTypeDescriptor", new LookupColumnDetails { PropertyName = "DiplomaTypeDescriptorId", LookupTypeName = "DiplomaTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateAcademicRecord as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("DiplomaAwardDate", DiplomaAwardDate);
            keyValues.Add("DiplomaTypeDescriptorId", DiplomaTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiploma)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiploma) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAchievementCategoryDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported
        {
            get { return _isAchievementCategoryDescriptorSupported; }
            set { _isAchievementCategoryDescriptorSupported = value; }
        }

        private bool _isAchievementCategorySystemSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsAchievementCategorySystemSupported
        {
            get { return _isAchievementCategorySystemSupported; }
            set { _isAchievementCategorySystemSupported = value; }
        }

        private bool _isAchievementTitleSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsAchievementTitleSupported
        {
            get { return _isAchievementTitleSupported; }
            set { _isAchievementTitleSupported = value; }
        }

        private bool _isCriteriaSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsCriteriaSupported
        {
            get { return _isCriteriaSupported; }
            set { _isCriteriaSupported = value; }
        }

        private bool _isCriteriaURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsCriteriaURLSupported
        {
            get { return _isCriteriaURLSupported; }
            set { _isCriteriaURLSupported = value; }
        }

        private bool _isCTECompleterSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsCTECompleterSupported
        {
            get { return _isCTECompleterSupported; }
            set { _isCTECompleterSupported = value; }
        }

        private bool _isDiplomaAwardExpiresDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsDiplomaAwardExpiresDateSupported
        {
            get { return _isDiplomaAwardExpiresDateSupported; }
            set { _isDiplomaAwardExpiresDateSupported = value; }
        }

        private bool _isDiplomaDescriptionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsDiplomaDescriptionSupported
        {
            get { return _isDiplomaDescriptionSupported; }
            set { _isDiplomaDescriptionSupported = value; }
        }

        private bool _isDiplomaLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsDiplomaLevelDescriptorSupported
        {
            get { return _isDiplomaLevelDescriptorSupported; }
            set { _isDiplomaLevelDescriptorSupported = value; }
        }

        private bool _isEvidenceStatementSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsEvidenceStatementSupported
        {
            get { return _isEvidenceStatementSupported; }
            set { _isEvidenceStatementSupported = value; }
        }

        private bool _isImageURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsImageURLSupported
        {
            get { return _isImageURLSupported; }
            set { _isImageURLSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        private bool _isIssuerOriginURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport.IsIssuerOriginURLSupported
        {
            get { return _isIssuerOriginURLSupported; }
            set { _isIssuerOriginURLSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAcademicRecordGradePointAverage table of the TeacherCandidateAcademicRecord aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAcademicRecordGradePointAverage : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverage, Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordGradePointAverageRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAcademicRecordGradePointAverage()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateAcademicRecord TeacherCandidateAcademicRecord { get; set; }

        Entities.Common.TPDM.ITeacherCandidateAcademicRecord ITeacherCandidateAcademicRecordGradePointAverage.TeacherCandidateAcademicRecord
        {
            get { return TeacherCandidateAcademicRecord; }
            set { TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordGradePointAverageRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId = value; }
        }

        short Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordGradePointAverageRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordGradePointAverageRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordGradePointAverageRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradePointAverageTypeDescriptorId 
        {
            get
            {
                if (_gradePointAverageTypeDescriptorId == default(int))
                    _gradePointAverageTypeDescriptorId = DescriptorsCache.GetCache().GetId("GradePointAverageTypeDescriptor", _gradePointAverageTypeDescriptor);

                return _gradePointAverageTypeDescriptorId;
            } 
            set
            {
                _gradePointAverageTypeDescriptorId = value;
                _gradePointAverageTypeDescriptor = null;
            }
        }

        private int _gradePointAverageTypeDescriptorId;
        private string _gradePointAverageTypeDescriptor;

        public virtual string GradePointAverageTypeDescriptor
        {
            get
            {
                if (_gradePointAverageTypeDescriptor == null)
                    _gradePointAverageTypeDescriptor = DescriptorsCache.GetCache().GetValue("GradePointAverageTypeDescriptor", _gradePointAverageTypeDescriptorId);
                    
                return _gradePointAverageTypeDescriptor;
            }
            set
            {
                _gradePointAverageTypeDescriptor = value;
                _gradePointAverageTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal GradePointAverageValue  { get; set; }
        public virtual bool? IsCumulative  { get; set; }
        [Range(typeof(decimal), "-99999999999999.9999", "99999999999999.9999")]
        public virtual decimal? MaxGradePointAverageValue  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradePointAverageTypeDescriptor", new LookupColumnDetails { PropertyName = "GradePointAverageTypeDescriptorId", LookupTypeName = "GradePointAverageTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateAcademicRecord as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradePointAverageTypeDescriptorId", GradePointAverageTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverage)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverage) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isGradePointAverageValueSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport.IsGradePointAverageValueSupported
        {
            get { return _isGradePointAverageValueSupported; }
            set { _isGradePointAverageValueSupported = value; }
        }

        private bool _isIsCumulativeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport.IsIsCumulativeSupported
        {
            get { return _isIsCumulativeSupported; }
            set { _isIsCumulativeSupported = value; }
        }

        private bool _isMaxGradePointAverageValueSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport.IsMaxGradePointAverageValueSupported
        {
            get { return _isMaxGradePointAverageValueSupported; }
            set { _isMaxGradePointAverageValueSupported = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateAcademicRecordRecognition table of the TeacherCandidateAcademicRecord aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateAcademicRecordRecognition : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognition, Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecognitionRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateAcademicRecordRecognition()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateAcademicRecord TeacherCandidateAcademicRecord { get; set; }

        Entities.Common.TPDM.ITeacherCandidateAcademicRecord ITeacherCandidateAcademicRecordRecognition.TeacherCandidateAcademicRecord
        {
            get { return TeacherCandidateAcademicRecord; }
            set { TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecognitionRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).EducationOrganizationId = value; }
        }

        short Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecognitionRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecognitionRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TeacherCandidateIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecognitionRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateAcademicRecordRecord) TeacherCandidateAcademicRecord).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int RecognitionTypeDescriptorId 
        {
            get
            {
                if (_recognitionTypeDescriptorId == default(int))
                    _recognitionTypeDescriptorId = DescriptorsCache.GetCache().GetId("RecognitionTypeDescriptor", _recognitionTypeDescriptor);

                return _recognitionTypeDescriptorId;
            } 
            set
            {
                _recognitionTypeDescriptorId = value;
                _recognitionTypeDescriptor = null;
            }
        }

        private int _recognitionTypeDescriptorId;
        private string _recognitionTypeDescriptor;

        public virtual string RecognitionTypeDescriptor
        {
            get
            {
                if (_recognitionTypeDescriptor == null)
                    _recognitionTypeDescriptor = DescriptorsCache.GetCache().GetValue("RecognitionTypeDescriptor", _recognitionTypeDescriptorId);
                    
                return _recognitionTypeDescriptor;
            }
            set
            {
                _recognitionTypeDescriptor = value;
                _recognitionTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AchievementCategoryDescriptorId 
        {
            get
            {
                if (_achievementCategoryDescriptorId == default(int?))
                    _achievementCategoryDescriptorId = string.IsNullOrWhiteSpace(_achievementCategoryDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AchievementCategoryDescriptor", _achievementCategoryDescriptor);

                return _achievementCategoryDescriptorId;
            } 
            set
            {
                _achievementCategoryDescriptorId = value;
                _achievementCategoryDescriptor = null;
            }
        }

        private int? _achievementCategoryDescriptorId;
        private string _achievementCategoryDescriptor;

        public virtual string AchievementCategoryDescriptor
        {
            get
            {
                if (_achievementCategoryDescriptor == null)
                    _achievementCategoryDescriptor = _achievementCategoryDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AchievementCategoryDescriptor", _achievementCategoryDescriptorId.Value);
                    
                return _achievementCategoryDescriptor;
            }
            set
            {
                _achievementCategoryDescriptor = value;
                _achievementCategoryDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string AchievementCategorySystem  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string AchievementTitle  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string Criteria  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string CriteriaURL  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string EvidenceStatement  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string ImageURL  { get; set; }
        [StringLength(150), NoDangerousText]
        public virtual string IssuerName  { get; set; }
        [StringLength(255), NoDangerousText]
        public virtual string IssuerOriginURL  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? RecognitionAwardDate 
        {
            get { return _recognitionAwardDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _recognitionAwardDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _recognitionAwardDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _recognitionAwardDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? RecognitionAwardExpiresDate 
        {
            get { return _recognitionAwardExpiresDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _recognitionAwardExpiresDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _recognitionAwardExpiresDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _recognitionAwardExpiresDate;
        
        [StringLength(80), NoDangerousText]
        public virtual string RecognitionDescription  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AchievementCategoryDescriptor", new LookupColumnDetails { PropertyName = "AchievementCategoryDescriptorId", LookupTypeName = "AchievementCategoryDescriptor"} },
                { "RecognitionTypeDescriptor", new LookupColumnDetails { PropertyName = "RecognitionTypeDescriptorId", LookupTypeName = "RecognitionTypeDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateAcademicRecord as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("RecognitionTypeDescriptorId", RecognitionTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognition)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognition) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateAcademicRecord = (TeacherCandidateAcademicRecord) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAchievementCategoryDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsAchievementCategoryDescriptorSupported
        {
            get { return _isAchievementCategoryDescriptorSupported; }
            set { _isAchievementCategoryDescriptorSupported = value; }
        }

        private bool _isAchievementCategorySystemSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsAchievementCategorySystemSupported
        {
            get { return _isAchievementCategorySystemSupported; }
            set { _isAchievementCategorySystemSupported = value; }
        }

        private bool _isAchievementTitleSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsAchievementTitleSupported
        {
            get { return _isAchievementTitleSupported; }
            set { _isAchievementTitleSupported = value; }
        }

        private bool _isCriteriaSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsCriteriaSupported
        {
            get { return _isCriteriaSupported; }
            set { _isCriteriaSupported = value; }
        }

        private bool _isCriteriaURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsCriteriaURLSupported
        {
            get { return _isCriteriaURLSupported; }
            set { _isCriteriaURLSupported = value; }
        }

        private bool _isEvidenceStatementSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsEvidenceStatementSupported
        {
            get { return _isEvidenceStatementSupported; }
            set { _isEvidenceStatementSupported = value; }
        }

        private bool _isImageURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsImageURLSupported
        {
            get { return _isImageURLSupported; }
            set { _isImageURLSupported = value; }
        }

        private bool _isIssuerNameSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsIssuerNameSupported
        {
            get { return _isIssuerNameSupported; }
            set { _isIssuerNameSupported = value; }
        }

        private bool _isIssuerOriginURLSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsIssuerOriginURLSupported
        {
            get { return _isIssuerOriginURLSupported; }
            set { _isIssuerOriginURLSupported = value; }
        }

        private bool _isRecognitionAwardDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsRecognitionAwardDateSupported
        {
            get { return _isRecognitionAwardDateSupported; }
            set { _isRecognitionAwardDateSupported = value; }
        }

        private bool _isRecognitionAwardExpiresDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsRecognitionAwardExpiresDateSupported
        {
            get { return _isRecognitionAwardExpiresDateSupported; }
            set { _isRecognitionAwardExpiresDateSupported = value; }
        }

        private bool _isRecognitionDescriptionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport.IsRecognitionDescriptionSupported
        {
            get { return _isRecognitionDescriptionSupported; }
            set { _isRecognitionDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateCharacteristicDescriptor

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateCharacteristicDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateCharacteristicDescriptor table of the TeacherCandidateCharacteristicDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateCharacteristicDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptor, Entities.Common.Records.TPDM.ITeacherCandidateCharacteristicDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int TeacherCandidateCharacteristicDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("TeacherCandidateCharacteristicDescriptorId", TeacherCandidateCharacteristicDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateCourseTranscript

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateCourseTranscriptAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateCourseTranscript"/> entity.
    /// </summary>
    public class TeacherCandidateCourseTranscriptReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int CourseAttemptResultDescriptorId { get; set; }
        public virtual string CourseCode { get; set; }
        public virtual int CourseEducationOrganizationId { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        public virtual int TermDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CourseAttemptResultDescriptorId", CourseAttemptResultDescriptorId);
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("CourseEducationOrganizationId", CourseEducationOrganizationId);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateCourseTranscript table of the TeacherCandidateCourseTranscript aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateCourseTranscript : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateCourseTranscript, Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateCourseTranscript()
        {
            TeacherCandidateCourseTranscriptEarnedAdditionalCredits = new HashSet<TeacherCandidateCourseTranscriptEarnedAdditionalCredits>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int CourseAttemptResultDescriptorId 
        {
            get
            {
                if (_courseAttemptResultDescriptorId == default(int))
                    _courseAttemptResultDescriptorId = DescriptorsCache.GetCache().GetId("CourseAttemptResultDescriptor", _courseAttemptResultDescriptor);

                return _courseAttemptResultDescriptorId;
            } 
            set
            {
                _courseAttemptResultDescriptorId = value;
                _courseAttemptResultDescriptor = null;
            }
        }

        private int _courseAttemptResultDescriptorId;
        private string _courseAttemptResultDescriptor;

        public virtual string CourseAttemptResultDescriptor
        {
            get
            {
                if (_courseAttemptResultDescriptor == null)
                    _courseAttemptResultDescriptor = DescriptorsCache.GetCache().GetValue("CourseAttemptResultDescriptor", _courseAttemptResultDescriptorId);
                    
                return _courseAttemptResultDescriptor;
            }
            set
            {
                _courseAttemptResultDescriptor = value;
                _courseAttemptResultDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int CourseEducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TermDescriptorId 
        {
            get
            {
                if (_termDescriptorId == default(int))
                    _termDescriptorId = DescriptorsCache.GetCache().GetId("TermDescriptor", _termDescriptor);

                return _termDescriptorId;
            } 
            set
            {
                _termDescriptorId = value;
                _termDescriptor = null;
            }
        }

        private int _termDescriptorId;
        private string _termDescriptor;

        public virtual string TermDescriptor
        {
            get
            {
                if (_termDescriptor == null)
                    _termDescriptor = DescriptorsCache.GetCache().GetValue("TermDescriptor", _termDescriptorId);
                    
                return _termDescriptor;
            }
            set
            {
                _termDescriptor = value;
                _termDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(60), NoDangerousText]
        public virtual string AlternativeCourseCode  { get; set; }
        [StringLength(60), NoDangerousText]
        public virtual string AlternativeCourseTitle  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? AttemptedCreditConversion  { get; set; }
        [Range(typeof(decimal), "-999999.999", "999999.999")]
        public virtual decimal? AttemptedCredits  { get; set; }
        public virtual int? AttemptedCreditTypeDescriptorId 
        {
            get
            {
                if (_attemptedCreditTypeDescriptorId == default(int?))
                    _attemptedCreditTypeDescriptorId = string.IsNullOrWhiteSpace(_attemptedCreditTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CreditTypeDescriptor", _attemptedCreditTypeDescriptor);

                return _attemptedCreditTypeDescriptorId;
            } 
            set
            {
                _attemptedCreditTypeDescriptorId = value;
                _attemptedCreditTypeDescriptor = null;
            }
        }

        private int? _attemptedCreditTypeDescriptorId;
        private string _attemptedCreditTypeDescriptor;

        public virtual string AttemptedCreditTypeDescriptor
        {
            get
            {
                if (_attemptedCreditTypeDescriptor == null)
                    _attemptedCreditTypeDescriptor = _attemptedCreditTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CreditTypeDescriptor", _attemptedCreditTypeDescriptorId.Value);
                    
                return _attemptedCreditTypeDescriptor;
            }
            set
            {
                _attemptedCreditTypeDescriptor = value;
                _attemptedCreditTypeDescriptorId = default(int?);
            }
        }
        public virtual int? CourseRepeatCodeDescriptorId 
        {
            get
            {
                if (_courseRepeatCodeDescriptorId == default(int?))
                    _courseRepeatCodeDescriptorId = string.IsNullOrWhiteSpace(_courseRepeatCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CourseRepeatCodeDescriptor", _courseRepeatCodeDescriptor);

                return _courseRepeatCodeDescriptorId;
            } 
            set
            {
                _courseRepeatCodeDescriptorId = value;
                _courseRepeatCodeDescriptor = null;
            }
        }

        private int? _courseRepeatCodeDescriptorId;
        private string _courseRepeatCodeDescriptor;

        public virtual string CourseRepeatCodeDescriptor
        {
            get
            {
                if (_courseRepeatCodeDescriptor == null)
                    _courseRepeatCodeDescriptor = _courseRepeatCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CourseRepeatCodeDescriptor", _courseRepeatCodeDescriptorId.Value);
                    
                return _courseRepeatCodeDescriptor;
            }
            set
            {
                _courseRepeatCodeDescriptor = value;
                _courseRepeatCodeDescriptorId = default(int?);
            }
        }
        [StringLength(60), NoDangerousText]
        public virtual string CourseTitle  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? EarnedCreditConversion  { get; set; }
        [Range(typeof(decimal), "-999999.999", "999999.999")]
        public virtual decimal EarnedCredits  { get; set; }
        public virtual int? EarnedCreditTypeDescriptorId 
        {
            get
            {
                if (_earnedCreditTypeDescriptorId == default(int?))
                    _earnedCreditTypeDescriptorId = string.IsNullOrWhiteSpace(_earnedCreditTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("CreditTypeDescriptor", _earnedCreditTypeDescriptor);

                return _earnedCreditTypeDescriptorId;
            } 
            set
            {
                _earnedCreditTypeDescriptorId = value;
                _earnedCreditTypeDescriptor = null;
            }
        }

        private int? _earnedCreditTypeDescriptorId;
        private string _earnedCreditTypeDescriptor;

        public virtual string EarnedCreditTypeDescriptor
        {
            get
            {
                if (_earnedCreditTypeDescriptor == null)
                    _earnedCreditTypeDescriptor = _earnedCreditTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("CreditTypeDescriptor", _earnedCreditTypeDescriptorId.Value);
                    
                return _earnedCreditTypeDescriptor;
            }
            set
            {
                _earnedCreditTypeDescriptor = value;
                _earnedCreditTypeDescriptorId = default(int?);
            }
        }
        [StringLength(20), NoDangerousText]
        public virtual string FinalLetterGradeEarned  { get; set; }
        [Range(typeof(decimal), "-9999999.99", "9999999.99")]
        public virtual decimal? FinalNumericGradeEarned  { get; set; }
        public virtual int? MethodCreditEarnedDescriptorId 
        {
            get
            {
                if (_methodCreditEarnedDescriptorId == default(int?))
                    _methodCreditEarnedDescriptorId = string.IsNullOrWhiteSpace(_methodCreditEarnedDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("MethodCreditEarnedDescriptor", _methodCreditEarnedDescriptor);

                return _methodCreditEarnedDescriptorId;
            } 
            set
            {
                _methodCreditEarnedDescriptorId = value;
                _methodCreditEarnedDescriptor = null;
            }
        }

        private int? _methodCreditEarnedDescriptorId;
        private string _methodCreditEarnedDescriptor;

        public virtual string MethodCreditEarnedDescriptor
        {
            get
            {
                if (_methodCreditEarnedDescriptor == null)
                    _methodCreditEarnedDescriptor = _methodCreditEarnedDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("MethodCreditEarnedDescriptor", _methodCreditEarnedDescriptorId.Value);
                    
                return _methodCreditEarnedDescriptor;
            }
            set
            {
                _methodCreditEarnedDescriptor = value;
                _methodCreditEarnedDescriptorId = default(int?);
            }
        }
        public virtual int? SchoolId  { get; set; }
        public virtual int? WhenTakenGradeLevelDescriptorId 
        {
            get
            {
                if (_whenTakenGradeLevelDescriptorId == default(int?))
                    _whenTakenGradeLevelDescriptorId = string.IsNullOrWhiteSpace(_whenTakenGradeLevelDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _whenTakenGradeLevelDescriptor);

                return _whenTakenGradeLevelDescriptorId;
            } 
            set
            {
                _whenTakenGradeLevelDescriptorId = value;
                _whenTakenGradeLevelDescriptor = null;
            }
        }

        private int? _whenTakenGradeLevelDescriptorId;
        private string _whenTakenGradeLevelDescriptor;

        public virtual string WhenTakenGradeLevelDescriptor
        {
            get
            {
                if (_whenTakenGradeLevelDescriptor == null)
                    _whenTakenGradeLevelDescriptor = _whenTakenGradeLevelDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _whenTakenGradeLevelDescriptorId.Value);
                    
                return _whenTakenGradeLevelDescriptor;
            }
            set
            {
                _whenTakenGradeLevelDescriptor = value;
                _whenTakenGradeLevelDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CourseAggregate.EdFi.CourseReferenceData CourseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Course discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateCourseTranscript.CourseDiscriminator
        {
            get { return CourseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Course resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateCourseTranscript.CourseResourceId
        {
            get { return CourseReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData SchoolReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the School resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateCourseTranscript.SchoolResourceId
        {
            get { return SchoolReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAcademicRecordAggregate.TPDM.TeacherCandidateAcademicRecordReferenceData TeacherCandidateAcademicRecordReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidateAcademicRecord discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateCourseTranscript.TeacherCandidateAcademicRecordDiscriminator
        {
            get { return TeacherCandidateAcademicRecordReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidateAcademicRecord resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateCourseTranscript.TeacherCandidateAcademicRecordResourceId
        {
            get { return TeacherCandidateAcademicRecordReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.TeacherCandidateCourseTranscriptAggregate.TPDM.TeacherCandidateCourseTranscriptEarnedAdditionalCredits> _teacherCandidateCourseTranscriptEarnedAdditionalCredits;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCredits> _teacherCandidateCourseTranscriptEarnedAdditionalCreditsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateCourseTranscriptAggregate.TPDM.TeacherCandidateCourseTranscriptEarnedAdditionalCredits> TeacherCandidateCourseTranscriptEarnedAdditionalCredits
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateCourseTranscriptEarnedAdditionalCredits)
                    if (item.TeacherCandidateCourseTranscript == null)
                        item.TeacherCandidateCourseTranscript = this;
                // -------------------------------------------------------------

                return _teacherCandidateCourseTranscriptEarnedAdditionalCredits;
            }
            set
            {
                _teacherCandidateCourseTranscriptEarnedAdditionalCredits = value;
                _teacherCandidateCourseTranscriptEarnedAdditionalCreditsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCredits, Entities.NHibernate.TeacherCandidateCourseTranscriptAggregate.TPDM.TeacherCandidateCourseTranscriptEarnedAdditionalCredits>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCredits> Entities.Common.TPDM.ITeacherCandidateCourseTranscript.TeacherCandidateCourseTranscriptEarnedAdditionalCredits
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateCourseTranscriptEarnedAdditionalCredits)
                    if (item.TeacherCandidateCourseTranscript == null)
                        item.TeacherCandidateCourseTranscript = this;
                // -------------------------------------------------------------

                return _teacherCandidateCourseTranscriptEarnedAdditionalCreditsCovariant;
            }
            set
            {
                TeacherCandidateCourseTranscriptEarnedAdditionalCredits = new HashSet<Entities.NHibernate.TeacherCandidateCourseTranscriptAggregate.TPDM.TeacherCandidateCourseTranscriptEarnedAdditionalCredits>(value.Cast<Entities.NHibernate.TeacherCandidateCourseTranscriptAggregate.TPDM.TeacherCandidateCourseTranscriptEarnedAdditionalCredits>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AttemptedCreditTypeDescriptor", new LookupColumnDetails { PropertyName = "AttemptedCreditTypeDescriptorId", LookupTypeName = "CreditTypeDescriptor"} },
                { "CourseAttemptResultDescriptor", new LookupColumnDetails { PropertyName = "CourseAttemptResultDescriptorId", LookupTypeName = "CourseAttemptResultDescriptor"} },
                { "CourseRepeatCodeDescriptor", new LookupColumnDetails { PropertyName = "CourseRepeatCodeDescriptorId", LookupTypeName = "CourseRepeatCodeDescriptor"} },
                { "EarnedCreditTypeDescriptor", new LookupColumnDetails { PropertyName = "EarnedCreditTypeDescriptorId", LookupTypeName = "CreditTypeDescriptor"} },
                { "MethodCreditEarnedDescriptor", new LookupColumnDetails { PropertyName = "MethodCreditEarnedDescriptorId", LookupTypeName = "MethodCreditEarnedDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
                { "WhenTakenGradeLevelDescriptor", new LookupColumnDetails { PropertyName = "WhenTakenGradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CourseAttemptResultDescriptorId", CourseAttemptResultDescriptorId);
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("CourseEducationOrganizationId", CourseEducationOrganizationId);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TermDescriptorId", TermDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateCourseTranscript)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateCourseTranscript) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAlternativeCourseCodeSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsAlternativeCourseCodeSupported
        {
            get { return _isAlternativeCourseCodeSupported; }
            set { _isAlternativeCourseCodeSupported = value; }
        }

        private bool _isAlternativeCourseTitleSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsAlternativeCourseTitleSupported
        {
            get { return _isAlternativeCourseTitleSupported; }
            set { _isAlternativeCourseTitleSupported = value; }
        }

        private bool _isAttemptedCreditConversionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsAttemptedCreditConversionSupported
        {
            get { return _isAttemptedCreditConversionSupported; }
            set { _isAttemptedCreditConversionSupported = value; }
        }

        private bool _isAttemptedCreditsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsAttemptedCreditsSupported
        {
            get { return _isAttemptedCreditsSupported; }
            set { _isAttemptedCreditsSupported = value; }
        }

        private bool _isAttemptedCreditTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsAttemptedCreditTypeDescriptorSupported
        {
            get { return _isAttemptedCreditTypeDescriptorSupported; }
            set { _isAttemptedCreditTypeDescriptorSupported = value; }
        }

        private bool _isCourseRepeatCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsCourseRepeatCodeDescriptorSupported
        {
            get { return _isCourseRepeatCodeDescriptorSupported; }
            set { _isCourseRepeatCodeDescriptorSupported = value; }
        }

        private bool _isCourseTitleSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsCourseTitleSupported
        {
            get { return _isCourseTitleSupported; }
            set { _isCourseTitleSupported = value; }
        }

        private bool _isEarnedCreditConversionSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsEarnedCreditConversionSupported
        {
            get { return _isEarnedCreditConversionSupported; }
            set { _isEarnedCreditConversionSupported = value; }
        }

        private bool _isEarnedCreditsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsEarnedCreditsSupported
        {
            get { return _isEarnedCreditsSupported; }
            set { _isEarnedCreditsSupported = value; }
        }

        private bool _isEarnedCreditTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsEarnedCreditTypeDescriptorSupported
        {
            get { return _isEarnedCreditTypeDescriptorSupported; }
            set { _isEarnedCreditTypeDescriptorSupported = value; }
        }

        private bool _isFinalLetterGradeEarnedSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsFinalLetterGradeEarnedSupported
        {
            get { return _isFinalLetterGradeEarnedSupported; }
            set { _isFinalLetterGradeEarnedSupported = value; }
        }

        private bool _isFinalNumericGradeEarnedSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsFinalNumericGradeEarnedSupported
        {
            get { return _isFinalNumericGradeEarnedSupported; }
            set { _isFinalNumericGradeEarnedSupported = value; }
        }

        private bool _isMethodCreditEarnedDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsMethodCreditEarnedDescriptorSupported
        {
            get { return _isMethodCreditEarnedDescriptorSupported; }
            set { _isMethodCreditEarnedDescriptorSupported = value; }
        }

        private bool _isSchoolIdSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsSchoolIdSupported
        {
            get { return _isSchoolIdSupported; }
            set { _isSchoolIdSupported = value; }
        }

        private bool _isTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported
        {
            get { return _isTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported; }
            set { _isTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported = value; }
        }

        private bool _isWhenTakenGradeLevelDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsWhenTakenGradeLevelDescriptorSupported
        {
            get { return _isWhenTakenGradeLevelDescriptorSupported; }
            set { _isWhenTakenGradeLevelDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCredits, bool> _isTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCredits, bool> Entities.Common.TPDM.ITeacherCandidateCourseTranscriptSynchronizationSourceSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded
        {
            get { return _isTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded; }
            set { _isTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateCourseTranscriptEarnedAdditionalCredits table of the TeacherCandidateCourseTranscript aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateCourseTranscriptEarnedAdditionalCredits : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCredits, Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateCourseTranscriptEarnedAdditionalCredits()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateCourseTranscript TeacherCandidateCourseTranscript { get; set; }

        Entities.Common.TPDM.ITeacherCandidateCourseTranscript ITeacherCandidateCourseTranscriptEarnedAdditionalCredits.TeacherCandidateCourseTranscript
        {
            get { return TeacherCandidateCourseTranscript; }
            set { TeacherCandidateCourseTranscript = (TeacherCandidateCourseTranscript) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsRecord.CourseAttemptResultDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).CourseAttemptResultDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).CourseAttemptResultDescriptorId = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsRecord.CourseCode
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).CourseCode; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).CourseCode = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsRecord.CourseEducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).CourseEducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).CourseEducationOrganizationId = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).EducationOrganizationId = value; }
        }

        short Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).TeacherCandidateIdentifier = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsRecord.TermDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).TermDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateCourseTranscriptRecord) TeacherCandidateCourseTranscript).TermDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AdditionalCreditTypeDescriptorId 
        {
            get
            {
                if (_additionalCreditTypeDescriptorId == default(int))
                    _additionalCreditTypeDescriptorId = DescriptorsCache.GetCache().GetId("AdditionalCreditTypeDescriptor", _additionalCreditTypeDescriptor);

                return _additionalCreditTypeDescriptorId;
            } 
            set
            {
                _additionalCreditTypeDescriptorId = value;
                _additionalCreditTypeDescriptor = null;
            }
        }

        private int _additionalCreditTypeDescriptorId;
        private string _additionalCreditTypeDescriptor;

        public virtual string AdditionalCreditTypeDescriptor
        {
            get
            {
                if (_additionalCreditTypeDescriptor == null)
                    _additionalCreditTypeDescriptor = DescriptorsCache.GetCache().GetValue("AdditionalCreditTypeDescriptor", _additionalCreditTypeDescriptorId);
                    
                return _additionalCreditTypeDescriptor;
            }
            set
            {
                _additionalCreditTypeDescriptor = value;
                _additionalCreditTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [Range(typeof(decimal), "-999999.999", "999999.999")]
        public virtual decimal Credits  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AdditionalCreditTypeDescriptor", new LookupColumnDetails { PropertyName = "AdditionalCreditTypeDescriptorId", LookupTypeName = "AdditionalCreditTypeDescriptor"} },
                { "CourseAttemptResultDescriptor", new LookupColumnDetails { PropertyName = "CourseAttemptResultDescriptorId", LookupTypeName = "CourseAttemptResultDescriptor"} },
                { "TermDescriptor", new LookupColumnDetails { PropertyName = "TermDescriptorId", LookupTypeName = "TermDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateCourseTranscript as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AdditionalCreditTypeDescriptorId", AdditionalCreditTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCredits)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCredits) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateCourseTranscript = (TeacherCandidateCourseTranscript) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCreditsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport.IsCreditsSupported
        {
            get { return _isCreditsSupported; }
            set { _isCreditsSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateStaffAssociation

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateStaffAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateStaffAssociation"/> entity.
    /// </summary>
    public class TeacherCandidateStaffAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int StaffUSI { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("StaffUSI", StaffUSI);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateStaffAssociation table of the TeacherCandidateStaffAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateStaffAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateStaffAssociation, Entities.Common.Records.TPDM.ITeacherCandidateStaffAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateStaffAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateStaffAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [Display(Name="StaffUniqueId")]
        [DomainSignature, RequiredWithNonDefault("Staff")]
        public virtual int StaffUSI 
        {
            get
            {
                if (_staffUSI == default(int))
                    _staffUSI = PersonUniqueIdToUsiCache.GetCache().GetUsi("Staff", _staffUniqueId);

                return _staffUSI;
            } 
            set
            {
                _staffUSI = value;
            }
        }

        private int _staffUSI;
        private string _staffUniqueId;

        [RequiredWithNonDefault]
        public virtual string StaffUniqueId
        {
            get
            {
                if (_staffUniqueId == null)
                    _staffUniqueId = PersonUniqueIdToUsiCache.GetCache().GetUniqueId("Staff", _staffUSI);
                    
                return _staffUniqueId;
            }
            set
            {
                if (_staffUniqueId != value)
                        _staffUSI = default(int);

                _staffUniqueId = value;
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [RequiredWithNonDefault, SqlServerDateTimeRange]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.StaffAggregate.EdFi.StaffReferenceData StaffReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Staff discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStaffAssociation.StaffDiscriminator
        {
            get { return StaffReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Staff resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStaffAssociation.StaffResourceId
        {
            get { return StaffReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStaffAssociation.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStaffAssociation.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("StaffUSI", StaffUSI);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateStaffAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateStaffAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStaffAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStaffAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateStudentGrowthMeasure

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateStudentGrowthMeasure"/> entity.
    /// </summary>
    public class TeacherCandidateStudentGrowthMeasureReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        public virtual string TeacherCandidateStudentGrowthMeasureIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherCandidateStudentGrowthMeasureIdentifier", TeacherCandidateStudentGrowthMeasureIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateStudentGrowthMeasure table of the TeacherCandidateStudentGrowthMeasure aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateStudentGrowthMeasure : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure, Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateStudentGrowthMeasure()
        {
            TeacherCandidateStudentGrowthMeasureAcademicSubjects = new HashSet<TeacherCandidateStudentGrowthMeasureAcademicSubject>();
            TeacherCandidateStudentGrowthMeasureGradeLevels = new HashSet<TeacherCandidateStudentGrowthMeasureGradeLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateStudentGrowthMeasureIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? ResultDatatypeTypeDescriptorId 
        {
            get
            {
                if (_resultDatatypeTypeDescriptorId == default(int?))
                    _resultDatatypeTypeDescriptorId = string.IsNullOrWhiteSpace(_resultDatatypeTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptor);

                return _resultDatatypeTypeDescriptorId;
            } 
            set
            {
                _resultDatatypeTypeDescriptorId = value;
                _resultDatatypeTypeDescriptor = null;
            }
        }

        private int? _resultDatatypeTypeDescriptorId;
        private string _resultDatatypeTypeDescriptor;

        public virtual string ResultDatatypeTypeDescriptor
        {
            get
            {
                if (_resultDatatypeTypeDescriptor == null)
                    _resultDatatypeTypeDescriptor = _resultDatatypeTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ResultDatatypeTypeDescriptor", _resultDatatypeTypeDescriptorId.Value);
                    
                return _resultDatatypeTypeDescriptor;
            }
            set
            {
                _resultDatatypeTypeDescriptor = value;
                _resultDatatypeTypeDescriptorId = default(int?);
            }
        }
        [Range(typeof(decimal), "-9.9999", "9.9999")]
        public virtual decimal? StandardError  { get; set; }
        public virtual int StudentGrowthActualScore  { get; set; }
        [SqlServerDateTimeRange]
        public virtual DateTime? StudentGrowthMeasureDate 
        {
            get { return _studentGrowthMeasureDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _studentGrowthMeasureDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _studentGrowthMeasureDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _studentGrowthMeasureDate;
        
        public virtual bool StudentGrowthMet  { get; set; }
        public virtual int? StudentGrowthNCount  { get; set; }
        public virtual int? StudentGrowthTargetScore  { get; set; }
        public virtual int? StudentGrowthTypeDescriptorId 
        {
            get
            {
                if (_studentGrowthTypeDescriptorId == default(int?))
                    _studentGrowthTypeDescriptorId = string.IsNullOrWhiteSpace(_studentGrowthTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("StudentGrowthTypeDescriptor", _studentGrowthTypeDescriptor);

                return _studentGrowthTypeDescriptorId;
            } 
            set
            {
                _studentGrowthTypeDescriptorId = value;
                _studentGrowthTypeDescriptor = null;
            }
        }

        private int? _studentGrowthTypeDescriptorId;
        private string _studentGrowthTypeDescriptor;

        public virtual string StudentGrowthTypeDescriptor
        {
            get
            {
                if (_studentGrowthTypeDescriptor == null)
                    _studentGrowthTypeDescriptor = _studentGrowthTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("StudentGrowthTypeDescriptor", _studentGrowthTypeDescriptorId.Value);
                    
                return _studentGrowthTypeDescriptor;
            }
            set
            {
                _studentGrowthTypeDescriptor = value;
                _studentGrowthTypeDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureAcademicSubject> _teacherCandidateStudentGrowthMeasureAcademicSubjects;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubject> _teacherCandidateStudentGrowthMeasureAcademicSubjectsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureAcademicSubject> TeacherCandidateStudentGrowthMeasureAcademicSubjects
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateStudentGrowthMeasureAcademicSubjects)
                    if (item.TeacherCandidateStudentGrowthMeasure == null)
                        item.TeacherCandidateStudentGrowthMeasure = this;
                // -------------------------------------------------------------

                return _teacherCandidateStudentGrowthMeasureAcademicSubjects;
            }
            set
            {
                _teacherCandidateStudentGrowthMeasureAcademicSubjects = value;
                _teacherCandidateStudentGrowthMeasureAcademicSubjectsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubject, Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureAcademicSubject>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubject> Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure.TeacherCandidateStudentGrowthMeasureAcademicSubjects
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateStudentGrowthMeasureAcademicSubjects)
                    if (item.TeacherCandidateStudentGrowthMeasure == null)
                        item.TeacherCandidateStudentGrowthMeasure = this;
                // -------------------------------------------------------------

                return _teacherCandidateStudentGrowthMeasureAcademicSubjectsCovariant;
            }
            set
            {
                TeacherCandidateStudentGrowthMeasureAcademicSubjects = new HashSet<Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureAcademicSubject>(value.Cast<Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureAcademicSubject>());
            }
        }


        private ICollection<Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureGradeLevel> _teacherCandidateStudentGrowthMeasureGradeLevels;
        private ICollection<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevel> _teacherCandidateStudentGrowthMeasureGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureGradeLevel> TeacherCandidateStudentGrowthMeasureGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateStudentGrowthMeasureGradeLevels)
                    if (item.TeacherCandidateStudentGrowthMeasure == null)
                        item.TeacherCandidateStudentGrowthMeasure = this;
                // -------------------------------------------------------------

                return _teacherCandidateStudentGrowthMeasureGradeLevels;
            }
            set
            {
                _teacherCandidateStudentGrowthMeasureGradeLevels = value;
                _teacherCandidateStudentGrowthMeasureGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevel, Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevel> Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure.TeacherCandidateStudentGrowthMeasureGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherCandidateStudentGrowthMeasureGradeLevels)
                    if (item.TeacherCandidateStudentGrowthMeasure == null)
                        item.TeacherCandidateStudentGrowthMeasure = this;
                // -------------------------------------------------------------

                return _teacherCandidateStudentGrowthMeasureGradeLevelsCovariant;
            }
            set
            {
                TeacherCandidateStudentGrowthMeasureGradeLevels = new HashSet<Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureGradeLevel>(value.Cast<Entities.NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureGradeLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ResultDatatypeTypeDescriptor", new LookupColumnDetails { PropertyName = "ResultDatatypeTypeDescriptorId", LookupTypeName = "ResultDatatypeTypeDescriptor"} },
                { "StudentGrowthTypeDescriptor", new LookupColumnDetails { PropertyName = "StudentGrowthTypeDescriptorId", LookupTypeName = "StudentGrowthTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherCandidateStudentGrowthMeasureIdentifier", TeacherCandidateStudentGrowthMeasureIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isResultDatatypeTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsResultDatatypeTypeDescriptorSupported
        {
            get { return _isResultDatatypeTypeDescriptorSupported; }
            set { _isResultDatatypeTypeDescriptorSupported = value; }
        }

        private bool _isStandardErrorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsStandardErrorSupported
        {
            get { return _isStandardErrorSupported; }
            set { _isStandardErrorSupported = value; }
        }

        private bool _isStudentGrowthActualScoreSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthActualScoreSupported
        {
            get { return _isStudentGrowthActualScoreSupported; }
            set { _isStudentGrowthActualScoreSupported = value; }
        }

        private bool _isStudentGrowthMeasureDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthMeasureDateSupported
        {
            get { return _isStudentGrowthMeasureDateSupported; }
            set { _isStudentGrowthMeasureDateSupported = value; }
        }

        private bool _isStudentGrowthMetSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthMetSupported
        {
            get { return _isStudentGrowthMetSupported; }
            set { _isStudentGrowthMetSupported = value; }
        }

        private bool _isStudentGrowthNCountSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthNCountSupported
        {
            get { return _isStudentGrowthNCountSupported; }
            set { _isStudentGrowthNCountSupported = value; }
        }

        private bool _isStudentGrowthTargetScoreSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthTargetScoreSupported
        {
            get { return _isStudentGrowthTargetScoreSupported; }
            set { _isStudentGrowthTargetScoreSupported = value; }
        }

        private bool _isStudentGrowthTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsStudentGrowthTypeDescriptorSupported
        {
            get { return _isStudentGrowthTypeDescriptorSupported; }
            set { _isStudentGrowthTypeDescriptorSupported = value; }
        }

        private bool _isTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported
        {
            get { return _isTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported; }
            set { _isTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported = value; }
        }

        private bool _isTeacherCandidateStudentGrowthMeasureGradeLevelsSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported
        {
            get { return _isTeacherCandidateStudentGrowthMeasureGradeLevelsSupported; }
            set { _isTeacherCandidateStudentGrowthMeasureGradeLevelsSupported = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubject, bool> _isTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubject, bool> Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded
        {
            get { return _isTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded; }
            set { _isTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevel, bool> _isTeacherCandidateStudentGrowthMeasureGradeLevelIncluded;
        Func<Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevel, bool> Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded
        {
            get { return _isTeacherCandidateStudentGrowthMeasureGradeLevelIncluded; }
            set { _isTeacherCandidateStudentGrowthMeasureGradeLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateStudentGrowthMeasureAcademicSubject table of the TeacherCandidateStudentGrowthMeasure aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateStudentGrowthMeasureAcademicSubject : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubject, Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubjectRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateStudentGrowthMeasureAcademicSubject()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateStudentGrowthMeasure TeacherCandidateStudentGrowthMeasure { get; set; }

        Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure ITeacherCandidateStudentGrowthMeasureAcademicSubject.TeacherCandidateStudentGrowthMeasure
        {
            get { return TeacherCandidateStudentGrowthMeasure; }
            set { TeacherCandidateStudentGrowthMeasure = (TeacherCandidateStudentGrowthMeasure) value; }
        }

        DateTime Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubjectRecord.FactAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).FactAsOfDate; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).FactAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubjectRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubjectRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).TeacherCandidateIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubjectRecord.TeacherCandidateStudentGrowthMeasureIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).TeacherCandidateStudentGrowthMeasureIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).TeacherCandidateStudentGrowthMeasureIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int AcademicSubjectDescriptorId 
        {
            get
            {
                if (_academicSubjectDescriptorId == default(int))
                    _academicSubjectDescriptorId = DescriptorsCache.GetCache().GetId("AcademicSubjectDescriptor", _academicSubjectDescriptor);

                return _academicSubjectDescriptorId;
            } 
            set
            {
                _academicSubjectDescriptorId = value;
                _academicSubjectDescriptor = null;
            }
        }

        private int _academicSubjectDescriptorId;
        private string _academicSubjectDescriptor;

        public virtual string AcademicSubjectDescriptor
        {
            get
            {
                if (_academicSubjectDescriptor == null)
                    _academicSubjectDescriptor = DescriptorsCache.GetCache().GetValue("AcademicSubjectDescriptor", _academicSubjectDescriptorId);
                    
                return _academicSubjectDescriptor;
            }
            set
            {
                _academicSubjectDescriptor = value;
                _academicSubjectDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AcademicSubjectDescriptor", new LookupColumnDetails { PropertyName = "AcademicSubjectDescriptorId", LookupTypeName = "AcademicSubjectDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateStudentGrowthMeasure as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("AcademicSubjectDescriptorId", AcademicSubjectDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubject)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureAcademicSubject) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateStudentGrowthMeasure = (TeacherCandidateStudentGrowthMeasure) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateStudentGrowthMeasureGradeLevel table of the TeacherCandidateStudentGrowthMeasure aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateStudentGrowthMeasureGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevel, Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateStudentGrowthMeasureGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherCandidateStudentGrowthMeasure TeacherCandidateStudentGrowthMeasure { get; set; }

        Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasure ITeacherCandidateStudentGrowthMeasureGradeLevel.TeacherCandidateStudentGrowthMeasure
        {
            get { return TeacherCandidateStudentGrowthMeasure; }
            set { TeacherCandidateStudentGrowthMeasure = (TeacherCandidateStudentGrowthMeasure) value; }
        }

        DateTime Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevelRecord.FactAsOfDate
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).FactAsOfDate; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).FactAsOfDate = value; }
        }

        short Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevelRecord.SchoolYear
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).SchoolYear; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).SchoolYear = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevelRecord.TeacherCandidateIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).TeacherCandidateIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).TeacherCandidateIdentifier = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevelRecord.TeacherCandidateStudentGrowthMeasureIdentifier
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).TeacherCandidateStudentGrowthMeasureIdentifier; }
            set { ((Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureRecord) TeacherCandidateStudentGrowthMeasure).TeacherCandidateStudentGrowthMeasureIdentifier = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherCandidateStudentGrowthMeasure as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherCandidateStudentGrowthMeasure = (TeacherCandidateStudentGrowthMeasure) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateStudentGrowthMeasureCourseAssociation

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateStudentGrowthMeasureCourseAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateStudentGrowthMeasureCourseAssociation"/> entity.
    /// </summary>
    public class TeacherCandidateStudentGrowthMeasureCourseAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual string CourseCode { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        public virtual string TeacherCandidateStudentGrowthMeasureIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherCandidateStudentGrowthMeasureIdentifier", TeacherCandidateStudentGrowthMeasureIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateStudentGrowthMeasureCourseAssociation table of the TeacherCandidateStudentGrowthMeasureCourseAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateStudentGrowthMeasureCourseAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociation, Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateStudentGrowthMeasureCourseAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string CourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateStudentGrowthMeasureIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.CourseAggregate.EdFi.CourseReferenceData CourseReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Course discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociation.CourseDiscriminator
        {
            get { return CourseReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Course resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociation.CourseResourceId
        {
            get { return CourseReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureReferenceData TeacherCandidateStudentGrowthMeasureReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidateStudentGrowthMeasure discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociation.TeacherCandidateStudentGrowthMeasureDiscriminator
        {
            get { return TeacherCandidateStudentGrowthMeasureReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidateStudentGrowthMeasure resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociation.TeacherCandidateStudentGrowthMeasureResourceId
        {
            get { return TeacherCandidateStudentGrowthMeasureReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("CourseCode", CourseCode);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherCandidateStudentGrowthMeasureIdentifier", TeacherCandidateStudentGrowthMeasureIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation"/> entity.
    /// </summary>
    public class TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        public virtual string TeacherCandidateStudentGrowthMeasureIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherCandidateStudentGrowthMeasureIdentifier", TeacherCandidateStudentGrowthMeasureIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation table of the TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation, Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateStudentGrowthMeasureIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureReferenceData TeacherCandidateStudentGrowthMeasureReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidateStudentGrowthMeasure discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation.TeacherCandidateStudentGrowthMeasureDiscriminator
        {
            get { return TeacherCandidateStudentGrowthMeasureReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidateStudentGrowthMeasure resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation.TeacherCandidateStudentGrowthMeasureResourceId
        {
            get { return TeacherCandidateStudentGrowthMeasureReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherCandidateStudentGrowthMeasureIdentifier", TeacherCandidateStudentGrowthMeasureIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateStudentGrowthMeasureSectionAssociation

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateStudentGrowthMeasureSectionAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateStudentGrowthMeasureSectionAssociation"/> entity.
    /// </summary>
    public class TeacherCandidateStudentGrowthMeasureSectionAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime FactAsOfDate { get; set; }
        public virtual string LocalCourseCode { get; set; }
        public virtual int SchoolId { get; set; }
        public virtual short SchoolYear { get; set; }
        public virtual string SectionIdentifier { get; set; }
        public virtual string SessionName { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        public virtual string TeacherCandidateStudentGrowthMeasureIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherCandidateStudentGrowthMeasureIdentifier", TeacherCandidateStudentGrowthMeasureIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateStudentGrowthMeasureSectionAssociation table of the TeacherCandidateStudentGrowthMeasureSectionAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateStudentGrowthMeasureSectionAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociation, Entities.Common.Records.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateStudentGrowthMeasureSectionAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime FactAsOfDate 
        {
            get { return _factAsOfDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _factAsOfDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _factAsOfDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string LocalCourseCode  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int SchoolId  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual short SchoolYear  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string SectionIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(60), NoDangerousText, NoWhitespace]
        public virtual string SessionName  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(64), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateStudentGrowthMeasureIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? BeginDate 
        {
            get { return _beginDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _beginDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _beginDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _beginDate;
        
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SectionAggregate.EdFi.SectionReferenceData SectionReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the Section discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociation.SectionDiscriminator
        {
            get { return SectionReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the Section resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociation.SectionResourceId
        {
            get { return SectionReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateStudentGrowthMeasureAggregate.TPDM.TeacherCandidateStudentGrowthMeasureReferenceData TeacherCandidateStudentGrowthMeasureReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidateStudentGrowthMeasure discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociation.TeacherCandidateStudentGrowthMeasureDiscriminator
        {
            get { return TeacherCandidateStudentGrowthMeasureReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidateStudentGrowthMeasure resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociation.TeacherCandidateStudentGrowthMeasureResourceId
        {
            get { return TeacherCandidateStudentGrowthMeasureReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("FactAsOfDate", FactAsOfDate);
            keyValues.Add("LocalCourseCode", LocalCourseCode);
            keyValues.Add("SchoolId", SchoolId);
            keyValues.Add("SchoolYear", SchoolYear);
            keyValues.Add("SectionIdentifier", SectionIdentifier);
            keyValues.Add("SessionName", SessionName);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherCandidateStudentGrowthMeasureIdentifier", TeacherCandidateStudentGrowthMeasureIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport.IsBeginDateSupported
        {
            get { return _isBeginDateSupported; }
            set { _isBeginDateSupported = value; }
        }

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateTeacherPreparationProviderAssociation

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateTeacherPreparationProviderAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateTeacherPreparationProviderAssociation"/> entity.
    /// </summary>
    public class TeacherCandidateTeacherPreparationProviderAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime EntryDate { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        public virtual int TeacherPreparationProviderId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EntryDate", EntryDate);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherPreparationProviderId", TeacherPreparationProviderId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateTeacherPreparationProviderAssociation table of the TeacherCandidateTeacherPreparationProviderAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateTeacherPreparationProviderAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociation, Entities.Common.Records.TPDM.ITeacherCandidateTeacherPreparationProviderAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateTeacherPreparationProviderAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime EntryDate 
        {
            get { return _entryDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _entryDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _entryDate;
        
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TeacherPreparationProviderId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual short? ClassOfSchoolYear  { get; set; }
        public virtual int? EntryTypeDescriptorId 
        {
            get
            {
                if (_entryTypeDescriptorId == default(int?))
                    _entryTypeDescriptorId = string.IsNullOrWhiteSpace(_entryTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("EntryTypeDescriptor", _entryTypeDescriptor);

                return _entryTypeDescriptorId;
            } 
            set
            {
                _entryTypeDescriptorId = value;
                _entryTypeDescriptor = null;
            }
        }

        private int? _entryTypeDescriptorId;
        private string _entryTypeDescriptor;

        public virtual string EntryTypeDescriptor
        {
            get
            {
                if (_entryTypeDescriptor == null)
                    _entryTypeDescriptor = _entryTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("EntryTypeDescriptor", _entryTypeDescriptorId.Value);
                    
                return _entryTypeDescriptor;
            }
            set
            {
                _entryTypeDescriptor = value;
                _entryTypeDescriptorId = default(int?);
            }
        }
        [SqlServerDateTimeRange]
        public virtual DateTime? ExitWithdrawDate 
        {
            get { return _exitWithdrawDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _exitWithdrawDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _exitWithdrawDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _exitWithdrawDate;
        
        public virtual int? ExitWithdrawTypeDescriptorId 
        {
            get
            {
                if (_exitWithdrawTypeDescriptorId == default(int?))
                    _exitWithdrawTypeDescriptorId = string.IsNullOrWhiteSpace(_exitWithdrawTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ExitWithdrawTypeDescriptor", _exitWithdrawTypeDescriptor);

                return _exitWithdrawTypeDescriptorId;
            } 
            set
            {
                _exitWithdrawTypeDescriptorId = value;
                _exitWithdrawTypeDescriptor = null;
            }
        }

        private int? _exitWithdrawTypeDescriptorId;
        private string _exitWithdrawTypeDescriptor;

        public virtual string ExitWithdrawTypeDescriptor
        {
            get
            {
                if (_exitWithdrawTypeDescriptor == null)
                    _exitWithdrawTypeDescriptor = _exitWithdrawTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ExitWithdrawTypeDescriptor", _exitWithdrawTypeDescriptorId.Value);
                    
                return _exitWithdrawTypeDescriptor;
            }
            set
            {
                _exitWithdrawTypeDescriptor = value;
                _exitWithdrawTypeDescriptorId = default(int?);
            }
        }
        public virtual short? SchoolYear  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData ClassOfSchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the ClassOfSchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociation.ClassOfSchoolYearTypeResourceId
        {
            get { return ClassOfSchoolYearTypeReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.SchoolYearTypeAggregate.EdFi.SchoolYearTypeReferenceData SchoolYearTypeReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the SchoolYearType resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociation.SchoolYearTypeResourceId
        {
            get { return SchoolYearTypeReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociation.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociation.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData TeacherPreparationProviderReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherPreparationProvider resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociation.TeacherPreparationProviderResourceId
        {
            get { return TeacherPreparationProviderReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "EntryTypeDescriptor", new LookupColumnDetails { PropertyName = "EntryTypeDescriptorId", LookupTypeName = "EntryTypeDescriptor"} },
                { "ExitWithdrawTypeDescriptor", new LookupColumnDetails { PropertyName = "ExitWithdrawTypeDescriptorId", LookupTypeName = "ExitWithdrawTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EntryDate", EntryDate);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);
            keyValues.Add("TeacherPreparationProviderId", TeacherPreparationProviderId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isClassOfSchoolYearSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsClassOfSchoolYearSupported
        {
            get { return _isClassOfSchoolYearSupported; }
            set { _isClassOfSchoolYearSupported = value; }
        }

        private bool _isEntryTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsEntryTypeDescriptorSupported
        {
            get { return _isEntryTypeDescriptorSupported; }
            set { _isEntryTypeDescriptorSupported = value; }
        }

        private bool _isExitWithdrawDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsExitWithdrawDateSupported
        {
            get { return _isExitWithdrawDateSupported; }
            set { _isExitWithdrawDateSupported = value; }
        }

        private bool _isExitWithdrawTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsExitWithdrawTypeDescriptorSupported
        {
            get { return _isExitWithdrawTypeDescriptorSupported; }
            set { _isExitWithdrawTypeDescriptorSupported = value; }
        }

        private bool _isSchoolYearSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport.IsSchoolYearSupported
        {
            get { return _isSchoolYearSupported; }
            set { _isSchoolYearSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherCandidateTeacherPreparationProviderProgramAssociation

namespace EdFi.Ods.Entities.NHibernate.TeacherCandidateTeacherPreparationProviderProgramAssociationAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherCandidateTeacherPreparationProviderProgramAssociation"/> entity.
    /// </summary>
    public class TeacherCandidateTeacherPreparationProviderProgramAssociationReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual DateTime BeginDate { get; set; }
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProgramName { get; set; }
        public virtual int ProgramTypeDescriptorId { get; set; }
        public virtual string TeacherCandidateIdentifier { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherCandidateTeacherPreparationProviderProgramAssociation table of the TeacherCandidateTeacherPreparationProviderProgramAssociation aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherCandidateTeacherPreparationProviderProgramAssociation : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation, Entities.Common.Records.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociationRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherCandidateTeacherPreparationProviderProgramAssociation()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual DateTime BeginDate 
        {
            get { return _beginDate; }
            //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
            set { _beginDate = new DateTime(value.Year, value.Month, value.Day); }
        }

        private DateTime _beginDate;
        
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string ProgramName  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramTypeDescriptorId 
        {
            get
            {
                if (_programTypeDescriptorId == default(int))
                    _programTypeDescriptorId = DescriptorsCache.GetCache().GetId("ProgramTypeDescriptor", _programTypeDescriptor);

                return _programTypeDescriptorId;
            } 
            set
            {
                _programTypeDescriptorId = value;
                _programTypeDescriptor = null;
            }
        }

        private int _programTypeDescriptorId;
        private string _programTypeDescriptor;

        public virtual string ProgramTypeDescriptor
        {
            get
            {
                if (_programTypeDescriptor == null)
                    _programTypeDescriptor = DescriptorsCache.GetCache().GetValue("ProgramTypeDescriptor", _programTypeDescriptorId);
                    
                return _programTypeDescriptor;
            }
            set
            {
                _programTypeDescriptor = value;
                _programTypeDescriptorId = default(int);
            }
        }
        [DomainSignature, RequiredWithNonDefault, StringLength(32), NoDangerousText, NoWhitespace]
        public virtual string TeacherCandidateIdentifier  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [SqlServerDateTimeRange]
        public virtual DateTime? EndDate 
        {
            get { return _endDate; }
            set 
            { 
                //This is only stored as a Date in the DB and NHibernate will retrieve it using the default (local) DateTime.Kind.  We must ensure it is set consistently for any equality/change evaluation.
                if(value == null)
                {
                    _endDate = null;
                } else
                {
                    var given = (DateTime) value;
                    _endDate = new DateTime(given.Year, given.Month, given.Day);
                }
            }
        }

        private DateTime? _endDate;
        
        public virtual int? ReasonExitedDescriptorId 
        {
            get
            {
                if (_reasonExitedDescriptorId == default(int?))
                    _reasonExitedDescriptorId = string.IsNullOrWhiteSpace(_reasonExitedDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("ReasonExitedDescriptor", _reasonExitedDescriptor);

                return _reasonExitedDescriptorId;
            } 
            set
            {
                _reasonExitedDescriptorId = value;
                _reasonExitedDescriptor = null;
            }
        }

        private int? _reasonExitedDescriptorId;
        private string _reasonExitedDescriptor;

        public virtual string ReasonExitedDescriptor
        {
            get
            {
                if (_reasonExitedDescriptor == null)
                    _reasonExitedDescriptor = _reasonExitedDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("ReasonExitedDescriptor", _reasonExitedDescriptorId.Value);
                    
                return _reasonExitedDescriptor;
            }
            set
            {
                _reasonExitedDescriptor = value;
                _reasonExitedDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherCandidateAggregate.TPDM.TeacherCandidateReferenceData TeacherCandidateReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation.TeacherCandidateDiscriminator
        {
            get { return TeacherCandidateReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherCandidate resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation.TeacherCandidateResourceId
        {
            get { return TeacherCandidateReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.TeacherPreparationProviderProgramAggregate.TPDM.TeacherPreparationProviderProgramReferenceData TeacherPreparationProviderProgramReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the TeacherPreparationProviderProgram discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation.TeacherPreparationProviderProgramDiscriminator
        {
            get { return TeacherPreparationProviderProgramReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the TeacherPreparationProviderProgram resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation.TeacherPreparationProviderProgramResourceId
        {
            get { return TeacherPreparationProviderProgramReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
                { "ReasonExitedDescriptor", new LookupColumnDetails { PropertyName = "ReasonExitedDescriptorId", LookupTypeName = "ReasonExitedDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("BeginDate", BeginDate);
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);
            keyValues.Add("TeacherCandidateIdentifier", TeacherCandidateIdentifier);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociation) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport.IsEndDateSupported
        {
            get { return _isEndDateSupported; }
            set { _isEndDateSupported = value; }
        }

        private bool _isReasonExitedDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport.IsReasonExitedDescriptorSupported
        {
            get { return _isReasonExitedDescriptorSupported; }
            set { _isReasonExitedDescriptorSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherPreparationProgramTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.TeacherPreparationProgramTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherPreparationProgramTypeDescriptor table of the TeacherPreparationProgramTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherPreparationProgramTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptor, Entities.Common.Records.TPDM.ITeacherPreparationProgramTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int TeacherPreparationProgramTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("TeacherPreparationProgramTypeDescriptorId", TeacherPreparationProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherPreparationProvider

namespace EdFi.Ods.Entities.NHibernate.TeacherPreparationProviderAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherPreparationProvider table of the TeacherPreparationProvider aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherPreparationProvider : EducationOrganizationAggregate.EdFi.EducationOrganization,
        Entities.Common.TPDM.ITeacherPreparationProvider, Entities.Common.Records.TPDM.ITeacherPreparationProviderRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport
    {
        public TeacherPreparationProvider()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int TeacherPreparationProviderId 
        {
            get { return base.EducationOrganizationId; }
            set { base.EducationOrganizationId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IEducationOrganization.NameOfInstitution
        {
            get { return NameOfInstitution; }
            set { NameOfInstitution = value; }
        }
        string IEducationOrganization.OperationalStatusDescriptor
        {
            get { return OperationalStatusDescriptor; }
            set { OperationalStatusDescriptor = value; }
        }
        string IEducationOrganization.ShortNameOfInstitution
        {
            get { return ShortNameOfInstitution; }
            set { ShortNameOfInstitution = value; }
        }
        string IEducationOrganization.WebSite
        {
            get { return WebSite; }
            set { WebSite = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? AccreditationStatusDescriptorId 
        {
            get
            {
                if (_accreditationStatusDescriptorId == default(int?))
                    _accreditationStatusDescriptorId = string.IsNullOrWhiteSpace(_accreditationStatusDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("AccreditationStatusDescriptor", _accreditationStatusDescriptor);

                return _accreditationStatusDescriptorId;
            } 
            set
            {
                _accreditationStatusDescriptorId = value;
                _accreditationStatusDescriptor = null;
            }
        }

        private int? _accreditationStatusDescriptorId;
        private string _accreditationStatusDescriptor;

        public virtual string AccreditationStatusDescriptor
        {
            get
            {
                if (_accreditationStatusDescriptor == null)
                    _accreditationStatusDescriptor = _accreditationStatusDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("AccreditationStatusDescriptor", _accreditationStatusDescriptorId.Value);
                    
                return _accreditationStatusDescriptor;
            }
            set
            {
                _accreditationStatusDescriptor = value;
                _accreditationStatusDescriptorId = default(int?);
            }
        }
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        public virtual int? SchoolId  { get; set; }
        public virtual int? UniversityId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData SchoolReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the School resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherPreparationProvider.SchoolResourceId
        {
            get { return SchoolReferenceData?.Id; }
            set { }
        }

        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData UniversityReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the University resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherPreparationProvider.UniversityResourceId
        {
            get { return UniversityReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "AccreditationStatusDescriptor", new LookupColumnDetails { PropertyName = "AccreditationStatusDescriptorId", LookupTypeName = "AccreditationStatusDescriptor"} },
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("TeacherPreparationProviderId", TeacherPreparationProviderId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherPreparationProvider)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherPreparationProvider) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isAccreditationStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsAccreditationStatusDescriptorSupported
        {
            get { return _isAccreditationStatusDescriptorSupported; }
            set { _isAccreditationStatusDescriptorSupported = value; }
        }

        private bool _isEducationOrganizationAddressesSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationAddressesSupported
        {
            get { return _isEducationOrganizationAddressesSupported; }
            set { _isEducationOrganizationAddressesSupported = value; }
        }

        private bool _isEducationOrganizationCategoriesSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationCategoriesSupported
        {
            get { return _isEducationOrganizationCategoriesSupported; }
            set { _isEducationOrganizationCategoriesSupported = value; }
        }

        private bool _isEducationOrganizationIdentificationCodesSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationIdentificationCodesSupported
        {
            get { return _isEducationOrganizationIdentificationCodesSupported; }
            set { _isEducationOrganizationIdentificationCodesSupported = value; }
        }

        private bool _isEducationOrganizationIndicatorsSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationIndicatorsSupported
        {
            get { return _isEducationOrganizationIndicatorsSupported; }
            set { _isEducationOrganizationIndicatorsSupported = value; }
        }

        private bool _isEducationOrganizationInstitutionTelephonesSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephonesSupported
        {
            get { return _isEducationOrganizationInstitutionTelephonesSupported; }
            set { _isEducationOrganizationInstitutionTelephonesSupported = value; }
        }

        private bool _isEducationOrganizationInternationalAddressesSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationInternationalAddressesSupported
        {
            get { return _isEducationOrganizationInternationalAddressesSupported; }
            set { _isEducationOrganizationInternationalAddressesSupported = value; }
        }

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        private bool _isNameOfInstitutionSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsNameOfInstitutionSupported
        {
            get { return _isNameOfInstitutionSupported; }
            set { _isNameOfInstitutionSupported = value; }
        }

        private bool _isOperationalStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsOperationalStatusDescriptorSupported
        {
            get { return _isOperationalStatusDescriptorSupported; }
            set { _isOperationalStatusDescriptorSupported = value; }
        }

        private bool _isSchoolIdSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsSchoolIdSupported
        {
            get { return _isSchoolIdSupported; }
            set { _isSchoolIdSupported = value; }
        }

        private bool _isShortNameOfInstitutionSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsShortNameOfInstitutionSupported
        {
            get { return _isShortNameOfInstitutionSupported; }
            set { _isShortNameOfInstitutionSupported = value; }
        }

        private bool _isUniversityIdSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsUniversityIdSupported
        {
            get { return _isUniversityIdSupported; }
            set { _isUniversityIdSupported = value; }
        }

        private bool _isWebSiteSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsWebSiteSupported
        {
            get { return _isWebSiteSupported; }
            set { _isWebSiteSupported = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationAddress, bool> _isEducationOrganizationAddressIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationAddress, bool> Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationAddressIncluded
        {
            get { return _isEducationOrganizationAddressIncluded; }
            set { _isEducationOrganizationAddressIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationCategory, bool> _isEducationOrganizationCategoryIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationCategory, bool> Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationCategoryIncluded
        {
            get { return _isEducationOrganizationCategoryIncluded; }
            set { _isEducationOrganizationCategoryIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationIdentificationCode, bool> _isEducationOrganizationIdentificationCodeIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationIdentificationCode, bool> Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationIdentificationCodeIncluded
        {
            get { return _isEducationOrganizationIdentificationCodeIncluded; }
            set { _isEducationOrganizationIdentificationCodeIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationIndicator, bool> _isEducationOrganizationIndicatorIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationIndicator, bool> Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationIndicatorIncluded
        {
            get { return _isEducationOrganizationIndicatorIncluded; }
            set { _isEducationOrganizationIndicatorIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationInstitutionTelephone, bool> _isEducationOrganizationInstitutionTelephoneIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationInstitutionTelephone, bool> Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded
        {
            get { return _isEducationOrganizationInstitutionTelephoneIncluded; }
            set { _isEducationOrganizationInstitutionTelephoneIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationInternationalAddress, bool> _isEducationOrganizationInternationalAddressIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationInternationalAddress, bool> Entities.Common.TPDM.ITeacherPreparationProviderSynchronizationSourceSupport.IsEducationOrganizationInternationalAddressIncluded
        {
            get { return _isEducationOrganizationInternationalAddressIncluded; }
            set { _isEducationOrganizationInternationalAddressIncluded = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TeacherPreparationProviderProgram

namespace EdFi.Ods.Entities.NHibernate.TeacherPreparationProviderProgramAggregate.TPDM
{
    /// <summary>
    /// Represents a read-only reference to the <see cref="TeacherPreparationProviderProgram"/> entity.
    /// </summary>
    public class TeacherPreparationProviderProgramReferenceData : IHasPrimaryKeyValues
    {
        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        public virtual int EducationOrganizationId { get; set; }
        public virtual string ProgramName { get; set; }
        public virtual int ProgramTypeDescriptorId { get; set; }
        // -------------------------------------------------------------

        /// <summary>
        /// The id of the referenced entity (used as the resource identifier in the API).
        /// </summary>
        public virtual Guid? Id { get; set; }

        /// <summary>
        /// Gets and sets the discriminator value which identifies the concrete sub-type of the referenced entity
        /// when that entity has been derived; otherwise <b>null</b>.
        /// </summary>
        public virtual string Discriminator { get; set; }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (!entry.Value.Equals(thoseKeys[entry.Key]))
                    return false;
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                }

                return hashCode;
            }
        }
        #endregion
    }

// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherPreparationProviderProgram table of the TeacherPreparationProviderProgram aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherPreparationProviderProgram : AggregateRootWithCompositeKey,
        Entities.Common.TPDM.ITeacherPreparationProviderProgram, Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherPreparationProviderProgramSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherPreparationProviderProgram()
        {
            TeacherPreparationProviderProgramGradeLevels = new HashSet<TeacherPreparationProviderProgramGradeLevel>();
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int EducationOrganizationId  { get; set; }
        [DomainSignature, RequiredWithNonDefault, StringLength(255), NoDangerousText, NoWhitespace]
        public virtual string ProgramName  { get; set; }
        [DomainSignature, RequiredWithNonDefault]
        public virtual int ProgramTypeDescriptorId 
        {
            get
            {
                if (_programTypeDescriptorId == default(int))
                    _programTypeDescriptorId = DescriptorsCache.GetCache().GetId("ProgramTypeDescriptor", _programTypeDescriptor);

                return _programTypeDescriptorId;
            } 
            set
            {
                _programTypeDescriptorId = value;
                _programTypeDescriptor = null;
            }
        }

        private int _programTypeDescriptorId;
        private string _programTypeDescriptor;

        public virtual string ProgramTypeDescriptor
        {
            get
            {
                if (_programTypeDescriptor == null)
                    _programTypeDescriptor = DescriptorsCache.GetCache().GetValue("ProgramTypeDescriptor", _programTypeDescriptorId);
                    
                return _programTypeDescriptor;
            }
            set
            {
                _programTypeDescriptor = value;
                _programTypeDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        [StringLength(75), NoDangerousText]
        public virtual string MajorSpecialization  { get; set; }
        [StringLength(75), NoDangerousText]
        public virtual string MinorSpecialization  { get; set; }
        [StringLength(20), NoDangerousText]
        public virtual string ProgramId  { get; set; }
        public virtual int? TeacherPreparationProgramTypeDescriptorId 
        {
            get
            {
                if (_teacherPreparationProgramTypeDescriptorId == default(int?))
                    _teacherPreparationProgramTypeDescriptorId = string.IsNullOrWhiteSpace(_teacherPreparationProgramTypeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TeacherPreparationProgramTypeDescriptor", _teacherPreparationProgramTypeDescriptor);

                return _teacherPreparationProgramTypeDescriptorId;
            } 
            set
            {
                _teacherPreparationProgramTypeDescriptorId = value;
                _teacherPreparationProgramTypeDescriptor = null;
            }
        }

        private int? _teacherPreparationProgramTypeDescriptorId;
        private string _teacherPreparationProgramTypeDescriptor;

        public virtual string TeacherPreparationProgramTypeDescriptor
        {
            get
            {
                if (_teacherPreparationProgramTypeDescriptor == null)
                    _teacherPreparationProgramTypeDescriptor = _teacherPreparationProgramTypeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TeacherPreparationProgramTypeDescriptor", _teacherPreparationProgramTypeDescriptorId.Value);
                    
                return _teacherPreparationProgramTypeDescriptor;
            }
            set
            {
                _teacherPreparationProgramTypeDescriptor = value;
                _teacherPreparationProgramTypeDescriptorId = default(int?);
            }
        }
        public virtual int? TPPProgramPathwayDescriptorId 
        {
            get
            {
                if (_tppProgramPathwayDescriptorId == default(int?))
                    _tppProgramPathwayDescriptorId = string.IsNullOrWhiteSpace(_tppProgramPathwayDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("TPPProgramPathwayDescriptor", _tppProgramPathwayDescriptor);

                return _tppProgramPathwayDescriptorId;
            } 
            set
            {
                _tppProgramPathwayDescriptorId = value;
                _tppProgramPathwayDescriptor = null;
            }
        }

        private int? _tppProgramPathwayDescriptorId;
        private string _tppProgramPathwayDescriptor;

        public virtual string TPPProgramPathwayDescriptor
        {
            get
            {
                if (_tppProgramPathwayDescriptor == null)
                    _tppProgramPathwayDescriptor = _tppProgramPathwayDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("TPPProgramPathwayDescriptor", _tppProgramPathwayDescriptorId.Value);
                    
                return _tppProgramPathwayDescriptor;
            }
            set
            {
                _tppProgramPathwayDescriptor = value;
                _tppProgramPathwayDescriptorId = default(int?);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData EducationOrganizationReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the EducationOrganization discriminator value to be mapped to the resource reference.
        /// </summary>
        string Entities.Common.TPDM.ITeacherPreparationProviderProgram.EducationOrganizationDiscriminator
        {
            get { return EducationOrganizationReferenceData?.Discriminator; }
            set { }
        }

        /// <summary>
        /// Read-only property that allows the EducationOrganization resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.ITeacherPreparationProviderProgram.EducationOrganizationResourceId
        {
            get { return EducationOrganizationReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------

        private ICollection<Entities.NHibernate.TeacherPreparationProviderProgramAggregate.TPDM.TeacherPreparationProviderProgramGradeLevel> _teacherPreparationProviderProgramGradeLevels;
        private ICollection<Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevel> _teacherPreparationProviderProgramGradeLevelsCovariant;
        [ValidateEnumerable, NoDuplicateMembers]
        public virtual ICollection<Entities.NHibernate.TeacherPreparationProviderProgramAggregate.TPDM.TeacherPreparationProviderProgramGradeLevel> TeacherPreparationProviderProgramGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // On-demand deserialization logic to attach reverse reference of children
                // due to ServiceStack's lack of [OnDeserialized] attribute support.
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherPreparationProviderProgramGradeLevels)
                    if (item.TeacherPreparationProviderProgram == null)
                        item.TeacherPreparationProviderProgram = this;
                // -------------------------------------------------------------

                return _teacherPreparationProviderProgramGradeLevels;
            }
            set
            {
                _teacherPreparationProviderProgramGradeLevels = value;
                _teacherPreparationProviderProgramGradeLevelsCovariant = new CovariantCollectionAdapter<Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevel, Entities.NHibernate.TeacherPreparationProviderProgramAggregate.TPDM.TeacherPreparationProviderProgramGradeLevel>(value);
            }
        }

        // Covariant version, visible only on the interface
        ICollection<Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevel> Entities.Common.TPDM.ITeacherPreparationProviderProgram.TeacherPreparationProviderProgramGradeLevels
        {
            get
            {
                // -------------------------------------------------------------
                // Back-reference is required by NHibernate for persistence.
                // -------------------------------------------------------------
                foreach (var item in _teacherPreparationProviderProgramGradeLevels)
                    if (item.TeacherPreparationProviderProgram == null)
                        item.TeacherPreparationProviderProgram = this;
                // -------------------------------------------------------------

                return _teacherPreparationProviderProgramGradeLevelsCovariant;
            }
            set
            {
                TeacherPreparationProviderProgramGradeLevels = new HashSet<Entities.NHibernate.TeacherPreparationProviderProgramAggregate.TPDM.TeacherPreparationProviderProgramGradeLevel>(value.Cast<Entities.NHibernate.TeacherPreparationProviderProgramAggregate.TPDM.TeacherPreparationProviderProgramGradeLevel>());
            }
        }

        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
                { "TeacherPreparationProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "TeacherPreparationProgramTypeDescriptorId", LookupTypeName = "TeacherPreparationProgramTypeDescriptor"} },
                { "TPPProgramPathwayDescriptor", new LookupColumnDetails { PropertyName = "TPPProgramPathwayDescriptorId", LookupTypeName = "TPPProgramPathwayDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("EducationOrganizationId", EducationOrganizationId);
            keyValues.Add("ProgramName", ProgramName);
            keyValues.Add("ProgramTypeDescriptorId", ProgramTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherPreparationProviderProgram)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherPreparationProviderProgram) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isMajorSpecializationSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderProgramSynchronizationSourceSupport.IsMajorSpecializationSupported
        {
            get { return _isMajorSpecializationSupported; }
            set { _isMajorSpecializationSupported = value; }
        }

        private bool _isMinorSpecializationSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderProgramSynchronizationSourceSupport.IsMinorSpecializationSupported
        {
            get { return _isMinorSpecializationSupported; }
            set { _isMinorSpecializationSupported = value; }
        }

        private bool _isProgramIdSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderProgramSynchronizationSourceSupport.IsProgramIdSupported
        {
            get { return _isProgramIdSupported; }
            set { _isProgramIdSupported = value; }
        }

        private bool _isTeacherPreparationProgramTypeDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderProgramSynchronizationSourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported
        {
            get { return _isTeacherPreparationProgramTypeDescriptorSupported; }
            set { _isTeacherPreparationProgramTypeDescriptorSupported = value; }
        }

        private bool _isTeacherPreparationProviderProgramGradeLevelsSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderProgramSynchronizationSourceSupport.IsTeacherPreparationProviderProgramGradeLevelsSupported
        {
            get { return _isTeacherPreparationProviderProgramGradeLevelsSupported; }
            set { _isTeacherPreparationProviderProgramGradeLevelsSupported = value; }
        }

        private bool _isTPPProgramPathwayDescriptorSupported = true;
        bool Entities.Common.TPDM.ITeacherPreparationProviderProgramSynchronizationSourceSupport.IsTPPProgramPathwayDescriptorSupported
        {
            get { return _isTPPProgramPathwayDescriptorSupported; }
            set { _isTPPProgramPathwayDescriptorSupported = value; }
        }

        private Func<Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevel, bool> _isTeacherPreparationProviderProgramGradeLevelIncluded;
        Func<Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevel, bool> Entities.Common.TPDM.ITeacherPreparationProviderProgramSynchronizationSourceSupport.IsTeacherPreparationProviderProgramGradeLevelIncluded
        {
            get { return _isTeacherPreparationProviderProgramGradeLevelIncluded; }
            set { _isTeacherPreparationProviderProgramGradeLevelIncluded = value; }
        }

        // -----------------------------------------
    }
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TeacherPreparationProviderProgramGradeLevel table of the TeacherPreparationProviderProgram aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TeacherPreparationProviderProgramGradeLevel : EntityWithCompositeKey, IChildEntity,
        Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevel, Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramGradeLevelRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport
    {
        public virtual void SuspendReferenceAssignmentCheck() { }

        public TeacherPreparationProviderProgramGradeLevel()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, JsonIgnore, IgnoreDataMember]
        public virtual TeacherPreparationProviderProgram TeacherPreparationProviderProgram { get; set; }

        Entities.Common.TPDM.ITeacherPreparationProviderProgram ITeacherPreparationProviderProgramGradeLevel.TeacherPreparationProviderProgram
        {
            get { return TeacherPreparationProviderProgram; }
            set { TeacherPreparationProviderProgram = (TeacherPreparationProviderProgram) value; }
        }

        int Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramGradeLevelRecord.EducationOrganizationId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramRecord) TeacherPreparationProviderProgram).EducationOrganizationId; }
            set { ((Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramRecord) TeacherPreparationProviderProgram).EducationOrganizationId = value; }
        }

        string Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramGradeLevelRecord.ProgramName
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramRecord) TeacherPreparationProviderProgram).ProgramName; }
            set { ((Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramRecord) TeacherPreparationProviderProgram).ProgramName = value; }
        }

        int Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramGradeLevelRecord.ProgramTypeDescriptorId
        {
            get { return ((Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramRecord) TeacherPreparationProviderProgram).ProgramTypeDescriptorId; }
            set { ((Entities.Common.Records.TPDM.ITeacherPreparationProviderProgramRecord) TeacherPreparationProviderProgram).ProgramTypeDescriptorId = value; }
        }

        [DomainSignature, RequiredWithNonDefault]
        public virtual int GradeLevelDescriptorId 
        {
            get
            {
                if (_gradeLevelDescriptorId == default(int))
                    _gradeLevelDescriptorId = DescriptorsCache.GetCache().GetId("GradeLevelDescriptor", _gradeLevelDescriptor);

                return _gradeLevelDescriptorId;
            } 
            set
            {
                _gradeLevelDescriptorId = value;
                _gradeLevelDescriptor = null;
            }
        }

        private int _gradeLevelDescriptorId;
        private string _gradeLevelDescriptor;

        public virtual string GradeLevelDescriptor
        {
            get
            {
                if (_gradeLevelDescriptor == null)
                    _gradeLevelDescriptor = DescriptorsCache.GetCache().GetValue("GradeLevelDescriptor", _gradeLevelDescriptorId);
                    
                return _gradeLevelDescriptor;
            }
            set
            {
                _gradeLevelDescriptor = value;
                _gradeLevelDescriptorId = default(int);
            }
        }
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "GradeLevelDescriptor", new LookupColumnDetails { PropertyName = "GradeLevelDescriptorId", LookupTypeName = "GradeLevelDescriptor"} },
                { "ProgramTypeDescriptor", new LookupColumnDetails { PropertyName = "ProgramTypeDescriptorId", LookupTypeName = "ProgramTypeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Get parent key values
            var keyValues = (TeacherPreparationProviderProgram as IHasPrimaryKeyValues).GetPrimaryKeyValues();

            // Add current key values
            keyValues.Add("GradeLevelDescriptorId", GradeLevelDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevel)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITeacherPreparationProviderProgramGradeLevel) target, null);
        }

        void IChildEntity.SetParent(object value)
        {
            TeacherPreparationProviderProgram = (TeacherPreparationProviderProgram) value;
        }

        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        // -----------------------------------------
    }
}
// Aggregate: TPPDegreeTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.TPPDegreeTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TPPDegreeTypeDescriptor table of the TPPDegreeTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TPPDegreeTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ITPPDegreeTypeDescriptor, Entities.Common.Records.TPDM.ITPPDegreeTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITPPDegreeTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int TPPDegreeTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("TPPDegreeTypeDescriptorId", TPPDegreeTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITPPDegreeTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITPPDegreeTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ITPPDegreeTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ITPPDegreeTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ITPPDegreeTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ITPPDegreeTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ITPPDegreeTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ITPPDegreeTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ITPPDegreeTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: TPPProgramPathwayDescriptor

namespace EdFi.Ods.Entities.NHibernate.TPPProgramPathwayDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.TPPProgramPathwayDescriptor table of the TPPProgramPathwayDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class TPPProgramPathwayDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.ITPPProgramPathwayDescriptor, Entities.Common.Records.TPDM.ITPPProgramPathwayDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.ITPPProgramPathwayDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int TPPProgramPathwayDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("TPPProgramPathwayDescriptorId", TPPProgramPathwayDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.ITPPProgramPathwayDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.ITPPProgramPathwayDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.ITPPProgramPathwayDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.ITPPProgramPathwayDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.ITPPProgramPathwayDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.ITPPProgramPathwayDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.ITPPProgramPathwayDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.ITPPProgramPathwayDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.ITPPProgramPathwayDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: University

namespace EdFi.Ods.Entities.NHibernate.UniversityAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.University table of the University aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class University : EducationOrganizationAggregate.EdFi.EducationOrganization,
        Entities.Common.TPDM.IUniversity, Entities.Common.Records.TPDM.IUniversityRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IUniversitySynchronizationSourceSupport
    {
        public University()
        {
        }
// restore warnings for inheritance from classes marked Obsolete
#pragma warning restore 612, 618

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature, RequiredWithNonDefault]
        public virtual int UniversityId 
        {
            get { return base.EducationOrganizationId; }
            set { base.EducationOrganizationId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IEducationOrganization.NameOfInstitution
        {
            get { return NameOfInstitution; }
            set { NameOfInstitution = value; }
        }
        string IEducationOrganization.OperationalStatusDescriptor
        {
            get { return OperationalStatusDescriptor; }
            set { OperationalStatusDescriptor = value; }
        }
        string IEducationOrganization.ShortNameOfInstitution
        {
            get { return ShortNameOfInstitution; }
            set { ShortNameOfInstitution = value; }
        }
        string IEducationOrganization.WebSite
        {
            get { return WebSite; }
            set { WebSite = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        public virtual int? FederalLocaleCodeDescriptorId 
        {
            get
            {
                if (_federalLocaleCodeDescriptorId == default(int?))
                    _federalLocaleCodeDescriptorId = string.IsNullOrWhiteSpace(_federalLocaleCodeDescriptor) ? default(int?) : DescriptorsCache.GetCache().GetId("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptor);

                return _federalLocaleCodeDescriptorId;
            } 
            set
            {
                _federalLocaleCodeDescriptorId = value;
                _federalLocaleCodeDescriptor = null;
            }
        }

        private int? _federalLocaleCodeDescriptorId;
        private string _federalLocaleCodeDescriptor;

        public virtual string FederalLocaleCodeDescriptor
        {
            get
            {
                if (_federalLocaleCodeDescriptor == null)
                    _federalLocaleCodeDescriptor = _federalLocaleCodeDescriptorId == null ? null : DescriptorsCache.GetCache().GetValue("FederalLocaleCodeDescriptor", _federalLocaleCodeDescriptorId.Value);
                    
                return _federalLocaleCodeDescriptor;
            }
            set
            {
                _federalLocaleCodeDescriptor = value;
                _federalLocaleCodeDescriptorId = default(int?);
            }
        }
        public virtual int? SchoolId  { get; set; }
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        public virtual NHibernate.EducationOrganizationAggregate.EdFi.EducationOrganizationReferenceData SchoolReferenceData { get; set; }

        /// <summary>
        /// Read-only property that allows the School resource identifier value to be mapped to the resource reference.
        /// </summary>
        Guid? Entities.Common.TPDM.IUniversity.SchoolResourceId
        {
            get { return SchoolReferenceData?.Id; }
            set { }
        }

        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
                { "FederalLocaleCodeDescriptor", new LookupColumnDetails { PropertyName = "FederalLocaleCodeDescriptorId", LookupTypeName = "FederalLocaleCodeDescriptor"} },
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("UniversityId", UniversityId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IUniversity)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IUniversity) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isEducationOrganizationAddressesSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationAddressesSupported
        {
            get { return _isEducationOrganizationAddressesSupported; }
            set { _isEducationOrganizationAddressesSupported = value; }
        }

        private bool _isEducationOrganizationCategoriesSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationCategoriesSupported
        {
            get { return _isEducationOrganizationCategoriesSupported; }
            set { _isEducationOrganizationCategoriesSupported = value; }
        }

        private bool _isEducationOrganizationIdentificationCodesSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationIdentificationCodesSupported
        {
            get { return _isEducationOrganizationIdentificationCodesSupported; }
            set { _isEducationOrganizationIdentificationCodesSupported = value; }
        }

        private bool _isEducationOrganizationIndicatorsSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationIndicatorsSupported
        {
            get { return _isEducationOrganizationIndicatorsSupported; }
            set { _isEducationOrganizationIndicatorsSupported = value; }
        }

        private bool _isEducationOrganizationInstitutionTelephonesSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephonesSupported
        {
            get { return _isEducationOrganizationInstitutionTelephonesSupported; }
            set { _isEducationOrganizationInstitutionTelephonesSupported = value; }
        }

        private bool _isEducationOrganizationInternationalAddressesSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationInternationalAddressesSupported
        {
            get { return _isEducationOrganizationInternationalAddressesSupported; }
            set { _isEducationOrganizationInternationalAddressesSupported = value; }
        }

        private bool _isFederalLocaleCodeDescriptorSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsFederalLocaleCodeDescriptorSupported
        {
            get { return _isFederalLocaleCodeDescriptorSupported; }
            set { _isFederalLocaleCodeDescriptorSupported = value; }
        }

        private bool _isNameOfInstitutionSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsNameOfInstitutionSupported
        {
            get { return _isNameOfInstitutionSupported; }
            set { _isNameOfInstitutionSupported = value; }
        }

        private bool _isOperationalStatusDescriptorSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsOperationalStatusDescriptorSupported
        {
            get { return _isOperationalStatusDescriptorSupported; }
            set { _isOperationalStatusDescriptorSupported = value; }
        }

        private bool _isSchoolIdSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsSchoolIdSupported
        {
            get { return _isSchoolIdSupported; }
            set { _isSchoolIdSupported = value; }
        }

        private bool _isShortNameOfInstitutionSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsShortNameOfInstitutionSupported
        {
            get { return _isShortNameOfInstitutionSupported; }
            set { _isShortNameOfInstitutionSupported = value; }
        }

        private bool _isWebSiteSupported = true;
        bool Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsWebSiteSupported
        {
            get { return _isWebSiteSupported; }
            set { _isWebSiteSupported = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationAddress, bool> _isEducationOrganizationAddressIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationAddress, bool> Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationAddressIncluded
        {
            get { return _isEducationOrganizationAddressIncluded; }
            set { _isEducationOrganizationAddressIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationCategory, bool> _isEducationOrganizationCategoryIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationCategory, bool> Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationCategoryIncluded
        {
            get { return _isEducationOrganizationCategoryIncluded; }
            set { _isEducationOrganizationCategoryIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationIdentificationCode, bool> _isEducationOrganizationIdentificationCodeIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationIdentificationCode, bool> Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationIdentificationCodeIncluded
        {
            get { return _isEducationOrganizationIdentificationCodeIncluded; }
            set { _isEducationOrganizationIdentificationCodeIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationIndicator, bool> _isEducationOrganizationIndicatorIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationIndicator, bool> Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationIndicatorIncluded
        {
            get { return _isEducationOrganizationIndicatorIncluded; }
            set { _isEducationOrganizationIndicatorIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationInstitutionTelephone, bool> _isEducationOrganizationInstitutionTelephoneIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationInstitutionTelephone, bool> Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded
        {
            get { return _isEducationOrganizationInstitutionTelephoneIncluded; }
            set { _isEducationOrganizationInstitutionTelephoneIncluded = value; }
        }

        private Func<Entities.Common.EdFi.IEducationOrganizationInternationalAddress, bool> _isEducationOrganizationInternationalAddressIncluded;
        Func<Entities.Common.EdFi.IEducationOrganizationInternationalAddress, bool> Entities.Common.TPDM.IUniversitySynchronizationSourceSupport.IsEducationOrganizationInternationalAddressIncluded
        {
            get { return _isEducationOrganizationInternationalAddressIncluded; }
            set { _isEducationOrganizationInternationalAddressIncluded = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: ValueTypeDescriptor

namespace EdFi.Ods.Entities.NHibernate.ValueTypeDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.ValueTypeDescriptor table of the ValueTypeDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class ValueTypeDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IValueTypeDescriptor, Entities.Common.Records.TPDM.IValueTypeDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IValueTypeDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int ValueTypeDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("ValueTypeDescriptorId", ValueTypeDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IValueTypeDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IValueTypeDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IValueTypeDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IValueTypeDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IValueTypeDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IValueTypeDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IValueTypeDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IValueTypeDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IValueTypeDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}
// Aggregate: WithdrawReasonDescriptor

namespace EdFi.Ods.Entities.NHibernate.WithdrawReasonDescriptorAggregate.TPDM
{
// disable warnings for inheritance from classes marked Obsolete within this generated code only
#pragma warning disable 612, 618

    /// <summary>
    /// A class which represents the tpdm.WithdrawReasonDescriptor table of the WithdrawReasonDescriptor aggregate in the ODS database.
    /// </summary>
    [Serializable, Schema("tpdm")]
    [ExcludeFromCodeCoverage]
    public class WithdrawReasonDescriptor : DescriptorAggregate.EdFi.Descriptor,
        Entities.Common.TPDM.IWithdrawReasonDescriptor, Entities.Common.Records.TPDM.IWithdrawReasonDescriptorRecord, IHasPrimaryKeyValues, IHasLookupColumnPropertyMap, Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport, IEdFiDescriptor
    {

        // =============================================================
        //                         Primary Key
        // -------------------------------------------------------------
        [DomainSignature]
        public virtual int WithdrawReasonDescriptorId 
        {
            get { return base.DescriptorId; }
            set { base.DescriptorId = value; }
        }
        
        // -------------------------------------------------------------

        // =============================================================
        //                      Inherited Properties
        // -------------------------------------------------------------
        string IDescriptor.CodeValue
        {
            get { return CodeValue; }
            set { CodeValue = value; }
        }
        string IDescriptor.Description
        {
            get { return Description; }
            set { Description = value; }
        }
        DateTime? IDescriptor.EffectiveBeginDate
        {
            get { return EffectiveBeginDate; }
            set { EffectiveBeginDate = value; }
        }
        DateTime? IDescriptor.EffectiveEndDate
        {
            get { return EffectiveEndDate; }
            set { EffectiveEndDate = value; }
        }
        string IDescriptor.Namespace
        {
            get { return Namespace; }
            set { Namespace = value; }
        }
        int? IDescriptor.PriorDescriptorId
        {
            get { return PriorDescriptorId; }
            set { PriorDescriptorId = value; }
        }
        string IDescriptor.ShortDescription
        {
            get { return ShortDescription; }
            set { ShortDescription = value; }
        }
        // -------------------------------------------------------------
        
        // =============================================================
        //                          Properties
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     One-to-one relationships
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                          Extensions
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // =============================================================
        //                     Reference Data
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        //=============================================================
        //                          Collections
        // -------------------------------------------------------------
        // -------------------------------------------------------------

        // Provide lookup property map
        private static readonly Dictionary<string, LookupColumnDetails> _idPropertyByLookupProperty = new Dictionary<string, LookupColumnDetails>(StringComparer.InvariantCultureIgnoreCase)
            {
            };

        Dictionary<string, LookupColumnDetails> IHasLookupColumnPropertyMap.IdPropertyByLookupProperty
        {
            get { return _idPropertyByLookupProperty; }
        }

        // Provide primary key information
        OrderedDictionary IHasPrimaryKeyValues.GetPrimaryKeyValues()
        {
            // Initialize a new dictionary to hold the key values
            var keyValues = new OrderedDictionary();

            // Add current key values
            keyValues.Add("WithdrawReasonDescriptorId", WithdrawReasonDescriptorId);

            return keyValues;
        }

        #region Overrides for Equals() and GetHashCode()
        public override bool Equals(object obj)
        {
            var compareTo = obj as IHasPrimaryKeyValues;

            if (ReferenceEquals(this, compareTo))
                return true;

            if (compareTo == null)
                return false;

            var theseKeys = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();
            var thoseKeys = compareTo.GetPrimaryKeyValues();

            foreach (DictionaryEntry entry in theseKeys)
            {
                if (entry.Value is string)
                {
                    if (!((string) entry.Value).EqualsIgnoreCase((string) thoseKeys[entry.Key]))
                    {
                        return false;
                    }
                }
                else 
                {
                    if (!entry.Value.Equals(thoseKeys[entry.Key]))
                        return false;
                }
            }

            return true;
        }

        private const int HashMultiplier = 31; // or 33, 37, 39, 41

        public override int GetHashCode()
        {
            unchecked
            {
                var keyValues = (this as IHasPrimaryKeyValues).GetPrimaryKeyValues();

                if (keyValues.Count == 0)
                    return base.GetHashCode();

                int hashCode = this.GetType().GetHashCode();

                foreach (DictionaryEntry entry in keyValues)
                {
                    if (entry.Value == null)
                        continue;

                    if (entry.Value is string)
                    {
                        hashCode = (hashCode*HashMultiplier) ^ ((string) entry.Value).ToLower().GetHashCode();
                    }
                    else
                    {
                        hashCode = (hashCode*HashMultiplier) ^ entry.Value.GetHashCode();
                    }
                }

                return hashCode;
            }
        }
        #endregion
        bool ISynchronizable.Synchronize(object target)
        {
            return this.SynchronizeTo((Entities.Common.TPDM.IWithdrawReasonDescriptor)target);
        }

        void IMappable.Map(object target)
        {
            this.MapTo((Entities.Common.TPDM.IWithdrawReasonDescriptor) target, null);
        }


        // =========================================
        //        Synchronization Support
        // -----------------------------------------

        private bool _isCodeValueSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsCodeValueSupported
        {
            get { return _isCodeValueSupported; }
            set { _isCodeValueSupported = value; }
        }

        private bool _isDescriptionSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsDescriptionSupported
        {
            get { return _isDescriptionSupported; }
            set { _isDescriptionSupported = value; }
        }

        private bool _isEffectiveBeginDateSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsEffectiveBeginDateSupported
        {
            get { return _isEffectiveBeginDateSupported; }
            set { _isEffectiveBeginDateSupported = value; }
        }

        private bool _isEffectiveEndDateSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsEffectiveEndDateSupported
        {
            get { return _isEffectiveEndDateSupported; }
            set { _isEffectiveEndDateSupported = value; }
        }

        private bool _isNamespaceSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsNamespaceSupported
        {
            get { return _isNamespaceSupported; }
            set { _isNamespaceSupported = value; }
        }

        private bool _isPriorDescriptorIdSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsPriorDescriptorIdSupported
        {
            get { return _isPriorDescriptorIdSupported; }
            set { _isPriorDescriptorIdSupported = value; }
        }

        private bool _isShortDescriptionSupported = true;
        bool Entities.Common.TPDM.IWithdrawReasonDescriptorSynchronizationSourceSupport.IsShortDescriptionSupported
        {
            get { return _isShortDescriptionSupported; }
            set { _isShortDescriptionSupported = value; }
        }

        // -----------------------------------------
    }
}


