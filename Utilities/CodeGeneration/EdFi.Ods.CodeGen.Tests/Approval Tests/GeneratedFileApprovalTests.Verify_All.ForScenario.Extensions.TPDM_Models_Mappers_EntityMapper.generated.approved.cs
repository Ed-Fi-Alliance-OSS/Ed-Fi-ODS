using System;
using System.Diagnostics.CodeAnalysis;
using EdFi.Ods.Api.Extensions;
using EdFi.Ods.Api.Providers;
using EdFi.Ods.Common.Dependencies;
using EdFi.Ods.Common.Providers;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Constants;
using EdFi.Ods.Common.Conventions;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Entities.Common.EdFi;
// Aggregate: AccreditationStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.AccreditationStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AccreditationStatusDescriptorMapper
    {
        public static bool SynchronizeTo(this IAccreditationStatusDescriptor source, IAccreditationStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAccreditationStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccreditationStatusDescriptorId != target.AccreditationStatusDescriptorId)
            {
                source.AccreditationStatusDescriptorId = target.AccreditationStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAccreditationStatusDescriptor source, IAccreditationStatusDescriptor target, Action<IAccreditationStatusDescriptor, IAccreditationStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAccreditationStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAccreditationStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccreditationStatusDescriptorId = source.AccreditationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAccreditationStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: AidTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.AidTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AidTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IAidTypeDescriptor source, IAidTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAidTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AidTypeDescriptorId != target.AidTypeDescriptorId)
            {
                source.AidTypeDescriptorId = target.AidTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAidTypeDescriptor source, IAidTypeDescriptor target, Action<IAidTypeDescriptor, IAidTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAidTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAidTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AidTypeDescriptorId = source.AidTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAidTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: ApplicantProfile

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicantProfileAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileMapper
    {
        public static bool SynchronizeTo(this IApplicantProfile source, IApplicantProfile target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantProfileIdentifier != target.ApplicantProfileIdentifier)
            {
                source.ApplicantProfileIdentifier = target.ApplicantProfileIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBirthDateSupported)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitizenshipStatusDescriptorSupported)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEconomicDisadvantagedSupported)
                && target.EconomicDisadvantaged != source.EconomicDisadvantaged)
            {
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstGenerationStudentSupported)
                && target.FirstGenerationStudent != source.FirstGenerationStudent)
            {
                target.FirstGenerationStudent = source.FirstGenerationStudent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported)
                && target.HighestCompletedLevelOfEducationDescriptor != source.HighestCompletedLevelOfEducationDescriptor)
            {
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighlyQualifiedTeacherSupported)
                && target.HighlyQualifiedTeacher != source.HighlyQualifiedTeacher)
            {
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfPriorProfessionalExperienceSupported)
                && target.YearsOfPriorProfessionalExperience != source.YearsOfPriorProfessionalExperience)
            {
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfPriorTeachingExperienceSupported)
                && target.YearsOfPriorTeachingExperience != source.YearsOfPriorTeachingExperience)
            {
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantProfileAddressesSupported)
            {
                isModified |=
                    source.ApplicantProfileAddresses.SynchronizeCollectionTo(
                        target.ApplicantProfileAddresses,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileApplicantCharacteristicsSupported)
            {
                isModified |=
                    source.ApplicantProfileApplicantCharacteristics.SynchronizeCollectionTo(
                        target.ApplicantProfileApplicantCharacteristics,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileApplicantCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileBackgroundChecksSupported)
            {
                isModified |=
                    source.ApplicantProfileBackgroundChecks.SynchronizeCollectionTo(
                        target.ApplicantProfileBackgroundChecks,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileBackgroundCheckIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileDisabilitiesSupported)
            {
                isModified |=
                    source.ApplicantProfileDisabilities.SynchronizeCollectionTo(
                        target.ApplicantProfileDisabilities,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileEducatorPreparationProgramNamesSupported)
            {
                isModified |=
                    source.ApplicantProfileEducatorPreparationProgramNames.SynchronizeCollectionTo(
                        target.ApplicantProfileEducatorPreparationProgramNames,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileEducatorPreparationProgramNameIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileElectronicMailsSupported)
            {
                isModified |=
                    source.ApplicantProfileElectronicMails.SynchronizeCollectionTo(
                        target.ApplicantProfileElectronicMails,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileGradePointAveragesSupported)
            {
                isModified |=
                    source.ApplicantProfileGradePointAverages.SynchronizeCollectionTo(
                        target.ApplicantProfileGradePointAverages,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileGradePointAverageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectsSupported)
            {
                isModified |=
                    source.ApplicantProfileHighlyQualifiedAcademicSubjects.SynchronizeCollectionTo(
                        target.ApplicantProfileHighlyQualifiedAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileIdentificationDocumentsSupported)
            {
                isModified |=
                    source.ApplicantProfileIdentificationDocuments.SynchronizeCollectionTo(
                        target.ApplicantProfileIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileInternationalAddressesSupported)
            {
                isModified |=
                    source.ApplicantProfileInternationalAddresses.SynchronizeCollectionTo(
                        target.ApplicantProfileInternationalAddresses,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileLanguagesSupported)
            {
                isModified |=
                    source.ApplicantProfileLanguages.SynchronizeCollectionTo(
                        target.ApplicantProfileLanguages,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfilePersonalIdentificationDocumentsSupported)
            {
                isModified |=
                    source.ApplicantProfilePersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.ApplicantProfilePersonalIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfilePersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileRacesSupported)
            {
                isModified |=
                    source.ApplicantProfileRaces.SynchronizeCollectionTo(
                        target.ApplicantProfileRaces,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileTelephonesSupported)
            {
                isModified |=
                    source.ApplicantProfileTelephones.SynchronizeCollectionTo(
                        target.ApplicantProfileTelephones,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantProfileVisasSupported)
            {
                isModified |=
                    source.ApplicantProfileVisas.SynchronizeCollectionTo(
                        target.ApplicantProfileVisas,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfile = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileVisaIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantProfile source, IApplicantProfile target, Action<IApplicantProfile, IApplicantProfile> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantProfileIdentifier = source.ApplicantProfileIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBirthDateSupported)
                target.BirthDate = source.BirthDate;
            else
                targetSynchSupport.IsBirthDateSupported = false;

            if (sourceSynchSupport.IsCitizenshipStatusDescriptorSupported)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
            else
                targetSynchSupport.IsCitizenshipStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsEconomicDisadvantagedSupported)
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
            else
                targetSynchSupport.IsEconomicDisadvantagedSupported = false;

            if (sourceSynchSupport.IsFirstGenerationStudentSupported)
                target.FirstGenerationStudent = source.FirstGenerationStudent;
            else
                targetSynchSupport.IsFirstGenerationStudentSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHighestCompletedLevelOfEducationDescriptorSupported)
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
            else
                targetSynchSupport.IsHighestCompletedLevelOfEducationDescriptorSupported = false;

            if (sourceSynchSupport.IsHighlyQualifiedTeacherSupported)
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
            else
                targetSynchSupport.IsHighlyQualifiedTeacherSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsYearsOfPriorProfessionalExperienceSupported)
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
            else
                targetSynchSupport.IsYearsOfPriorProfessionalExperienceSupported = false;

            if (sourceSynchSupport.IsYearsOfPriorTeachingExperienceSupported)
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
            else
                targetSynchSupport.IsYearsOfPriorTeachingExperienceSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantProfileAddressesSupported)
            {
                targetSynchSupport.IsApplicantProfileAddressIncluded = sourceSynchSupport.IsApplicantProfileAddressIncluded;
                source.ApplicantProfileAddresses.MapCollectionTo(target.ApplicantProfileAddresses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileAddressesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileApplicantCharacteristicsSupported)
            {
                targetSynchSupport.IsApplicantProfileApplicantCharacteristicIncluded = sourceSynchSupport.IsApplicantProfileApplicantCharacteristicIncluded;
                source.ApplicantProfileApplicantCharacteristics.MapCollectionTo(target.ApplicantProfileApplicantCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileApplicantCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileBackgroundChecksSupported)
            {
                targetSynchSupport.IsApplicantProfileBackgroundCheckIncluded = sourceSynchSupport.IsApplicantProfileBackgroundCheckIncluded;
                source.ApplicantProfileBackgroundChecks.MapCollectionTo(target.ApplicantProfileBackgroundChecks, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileBackgroundChecksSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileDisabilitiesSupported)
            {
                targetSynchSupport.IsApplicantProfileDisabilityIncluded = sourceSynchSupport.IsApplicantProfileDisabilityIncluded;
                source.ApplicantProfileDisabilities.MapCollectionTo(target.ApplicantProfileDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileEducatorPreparationProgramNamesSupported)
            {
                targetSynchSupport.IsApplicantProfileEducatorPreparationProgramNameIncluded = sourceSynchSupport.IsApplicantProfileEducatorPreparationProgramNameIncluded;
                source.ApplicantProfileEducatorPreparationProgramNames.MapCollectionTo(target.ApplicantProfileEducatorPreparationProgramNames, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileEducatorPreparationProgramNamesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileElectronicMailsSupported)
            {
                targetSynchSupport.IsApplicantProfileElectronicMailIncluded = sourceSynchSupport.IsApplicantProfileElectronicMailIncluded;
                source.ApplicantProfileElectronicMails.MapCollectionTo(target.ApplicantProfileElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileGradePointAveragesSupported)
            {
                targetSynchSupport.IsApplicantProfileGradePointAverageIncluded = sourceSynchSupport.IsApplicantProfileGradePointAverageIncluded;
                source.ApplicantProfileGradePointAverages.MapCollectionTo(target.ApplicantProfileGradePointAverages, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileGradePointAveragesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectsSupported)
            {
                targetSynchSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectIncluded = sourceSynchSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectIncluded;
                source.ApplicantProfileHighlyQualifiedAcademicSubjects.MapCollectionTo(target.ApplicantProfileHighlyQualifiedAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileHighlyQualifiedAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileIdentificationDocumentsSupported)
            {
                targetSynchSupport.IsApplicantProfileIdentificationDocumentIncluded = sourceSynchSupport.IsApplicantProfileIdentificationDocumentIncluded;
                source.ApplicantProfileIdentificationDocuments.MapCollectionTo(target.ApplicantProfileIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileInternationalAddressesSupported)
            {
                targetSynchSupport.IsApplicantProfileInternationalAddressIncluded = sourceSynchSupport.IsApplicantProfileInternationalAddressIncluded;
                source.ApplicantProfileInternationalAddresses.MapCollectionTo(target.ApplicantProfileInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileLanguagesSupported)
            {
                targetSynchSupport.IsApplicantProfileLanguageIncluded = sourceSynchSupport.IsApplicantProfileLanguageIncluded;
                source.ApplicantProfileLanguages.MapCollectionTo(target.ApplicantProfileLanguages, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfilePersonalIdentificationDocumentsSupported)
            {
                targetSynchSupport.IsApplicantProfilePersonalIdentificationDocumentIncluded = sourceSynchSupport.IsApplicantProfilePersonalIdentificationDocumentIncluded;
                source.ApplicantProfilePersonalIdentificationDocuments.MapCollectionTo(target.ApplicantProfilePersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfilePersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileRacesSupported)
            {
                targetSynchSupport.IsApplicantProfileRaceIncluded = sourceSynchSupport.IsApplicantProfileRaceIncluded;
                source.ApplicantProfileRaces.MapCollectionTo(target.ApplicantProfileRaces, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileRacesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileTelephonesSupported)
            {
                targetSynchSupport.IsApplicantProfileTelephoneIncluded = sourceSynchSupport.IsApplicantProfileTelephoneIncluded;
                source.ApplicantProfileTelephones.MapCollectionTo(target.ApplicantProfileTelephones, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantProfileVisasSupported)
            {
                targetSynchSupport.IsApplicantProfileVisaIncluded = sourceSynchSupport.IsApplicantProfileVisaIncluded;
                source.ApplicantProfileVisas.MapCollectionTo(target.ApplicantProfileVisas, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileVisasSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileSynchronizationSourceSupport 
    {
        bool IsApplicantProfileAddressesSupported { get; set; }
        bool IsApplicantProfileApplicantCharacteristicsSupported { get; set; }
        bool IsApplicantProfileBackgroundChecksSupported { get; set; }
        bool IsApplicantProfileDisabilitiesSupported { get; set; }
        bool IsApplicantProfileEducatorPreparationProgramNamesSupported { get; set; }
        bool IsApplicantProfileElectronicMailsSupported { get; set; }
        bool IsApplicantProfileGradePointAveragesSupported { get; set; }
        bool IsApplicantProfileHighlyQualifiedAcademicSubjectsSupported { get; set; }
        bool IsApplicantProfileIdentificationDocumentsSupported { get; set; }
        bool IsApplicantProfileInternationalAddressesSupported { get; set; }
        bool IsApplicantProfileLanguagesSupported { get; set; }
        bool IsApplicantProfilePersonalIdentificationDocumentsSupported { get; set; }
        bool IsApplicantProfileRacesSupported { get; set; }
        bool IsApplicantProfileTelephonesSupported { get; set; }
        bool IsApplicantProfileVisasSupported { get; set; }
        bool IsBirthDateSupported { get; set; }
        bool IsCitizenshipStatusDescriptorSupported { get; set; }
        bool IsEconomicDisadvantagedSupported { get; set; }
        bool IsFirstGenerationStudentSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHighestCompletedLevelOfEducationDescriptorSupported { get; set; }
        bool IsHighlyQualifiedTeacherSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsYearsOfPriorProfessionalExperienceSupported { get; set; }
        bool IsYearsOfPriorTeachingExperienceSupported { get; set; }
        Func<IApplicantProfileAddress, bool> IsApplicantProfileAddressIncluded { get; set; }
        Func<IApplicantProfileApplicantCharacteristic, bool> IsApplicantProfileApplicantCharacteristicIncluded { get; set; }
        Func<IApplicantProfileBackgroundCheck, bool> IsApplicantProfileBackgroundCheckIncluded { get; set; }
        Func<IApplicantProfileDisability, bool> IsApplicantProfileDisabilityIncluded { get; set; }
        Func<IApplicantProfileEducatorPreparationProgramName, bool> IsApplicantProfileEducatorPreparationProgramNameIncluded { get; set; }
        Func<IApplicantProfileElectronicMail, bool> IsApplicantProfileElectronicMailIncluded { get; set; }
        Func<IApplicantProfileGradePointAverage, bool> IsApplicantProfileGradePointAverageIncluded { get; set; }
        Func<IApplicantProfileHighlyQualifiedAcademicSubject, bool> IsApplicantProfileHighlyQualifiedAcademicSubjectIncluded { get; set; }
        Func<IApplicantProfileIdentificationDocument, bool> IsApplicantProfileIdentificationDocumentIncluded { get; set; }
        Func<IApplicantProfileInternationalAddress, bool> IsApplicantProfileInternationalAddressIncluded { get; set; }
        Func<IApplicantProfileLanguage, bool> IsApplicantProfileLanguageIncluded { get; set; }
        Func<IApplicantProfilePersonalIdentificationDocument, bool> IsApplicantProfilePersonalIdentificationDocumentIncluded { get; set; }
        Func<IApplicantProfileRace, bool> IsApplicantProfileRaceIncluded { get; set; }
        Func<IApplicantProfileTelephone, bool> IsApplicantProfileTelephoneIncluded { get; set; }
        Func<IApplicantProfileVisa, bool> IsApplicantProfileVisaIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileAddressMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileAddress source, IApplicantProfileAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantProfileAddressPeriodsSupported)
            {
                isModified |=
                    source.ApplicantProfileAddressPeriods.SynchronizeCollectionTo(
                        target.ApplicantProfileAddressPeriods,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfileAddress = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileAddressPeriodIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantProfileAddress source, IApplicantProfileAddress target, Action<IApplicantProfileAddress, IApplicantProfileAddress> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantProfileAddressPeriodsSupported)
            {
                targetSynchSupport.IsApplicantProfileAddressPeriodIncluded = sourceSynchSupport.IsApplicantProfileAddressPeriodIncluded;
                source.ApplicantProfileAddressPeriods.MapCollectionTo(target.ApplicantProfileAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileAddressPeriodsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileAddressSynchronizationSourceSupport 
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsApplicantProfileAddressPeriodsSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        Func<IApplicantProfileAddressPeriod, bool> IsApplicantProfileAddressPeriodIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileAddressPeriodMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileAddressPeriod source, IApplicantProfileAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileAddressPeriod source, IApplicantProfileAddressPeriod target, Action<IApplicantProfileAddressPeriod, IApplicantProfileAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileAddressPeriodSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileApplicantCharacteristicMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileApplicantCharacteristic source, IApplicantProfileApplicantCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentCharacteristicDescriptor != target.StudentCharacteristicDescriptor)
            {
                source.StudentCharacteristicDescriptor = target.StudentCharacteristicDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileApplicantCharacteristic source, IApplicantProfileApplicantCharacteristic target, Action<IApplicantProfileApplicantCharacteristic, IApplicantProfileApplicantCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StudentCharacteristicDescriptor = source.StudentCharacteristicDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileApplicantCharacteristicSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileBackgroundCheckMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileBackgroundCheck source, IApplicantProfileBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptor != target.BackgroundCheckTypeDescriptor)
            {
                source.BackgroundCheckTypeDescriptor = target.BackgroundCheckTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileBackgroundCheck source, IApplicantProfileBackgroundCheck target, Action<IApplicantProfileBackgroundCheck, IApplicantProfileBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileDisabilityMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileDisability source, IApplicantProfileDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantProfileDisabilityDesignationsSupported)
            {
                isModified |=
                    source.ApplicantProfileDisabilityDesignations.SynchronizeCollectionTo(
                        target.ApplicantProfileDisabilityDesignations,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfileDisability = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantProfileDisability source, IApplicantProfileDisability target, Action<IApplicantProfileDisability, IApplicantProfileDisability> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantProfileDisabilityDesignationsSupported)
            {
                targetSynchSupport.IsApplicantProfileDisabilityDesignationIncluded = sourceSynchSupport.IsApplicantProfileDisabilityDesignationIncluded;
                source.ApplicantProfileDisabilityDesignations.MapCollectionTo(target.ApplicantProfileDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileDisabilitySynchronizationSourceSupport 
    {
        bool IsApplicantProfileDisabilityDesignationsSupported { get; set; }
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        Func<IApplicantProfileDisabilityDesignation, bool> IsApplicantProfileDisabilityDesignationIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileDisabilityDesignationMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileDisabilityDesignation source, IApplicantProfileDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileDisabilityDesignation source, IApplicantProfileDisabilityDesignation target, Action<IApplicantProfileDisabilityDesignation, IApplicantProfileDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileDisabilityDesignationSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileEducatorPreparationProgramNameMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileEducatorPreparationProgramName source, IApplicantProfileEducatorPreparationProgramName target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileEducatorPreparationProgramNameSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducatorPreparationProgramName != target.EducatorPreparationProgramName)
            {
                source.EducatorPreparationProgramName = target.EducatorPreparationProgramName;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileEducatorPreparationProgramName source, IApplicantProfileEducatorPreparationProgramName target, Action<IApplicantProfileEducatorPreparationProgramName, IApplicantProfileEducatorPreparationProgramName> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileEducatorPreparationProgramNameSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileEducatorPreparationProgramNameSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducatorPreparationProgramName = source.EducatorPreparationProgramName;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileEducatorPreparationProgramNameSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileElectronicMailMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileElectronicMail source, IApplicantProfileElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileElectronicMail source, IApplicantProfileElectronicMail target, Action<IApplicantProfileElectronicMail, IApplicantProfileElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileElectronicMailSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileGradePointAverageMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileGradePointAverage source, IApplicantProfileGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradePointAverageTypeDescriptor != target.GradePointAverageTypeDescriptor)
            {
                source.GradePointAverageTypeDescriptor = target.GradePointAverageTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageValueSupported)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsCumulativeSupported)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxGradePointAverageValueSupported)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileGradePointAverage source, IApplicantProfileGradePointAverage target, Action<IApplicantProfileGradePointAverage, IApplicantProfileGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageValueSupported)
                target.GradePointAverageValue = source.GradePointAverageValue;
            else
                targetSynchSupport.IsGradePointAverageValueSupported = false;

            if (sourceSynchSupport.IsIsCumulativeSupported)
                target.IsCumulative = source.IsCumulative;
            else
                targetSynchSupport.IsIsCumulativeSupported = false;

            if (sourceSynchSupport.IsMaxGradePointAverageValueSupported)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
            else
                targetSynchSupport.IsMaxGradePointAverageValueSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageValueSupported { get; set; }
        bool IsIsCumulativeSupported { get; set; }
        bool IsMaxGradePointAverageValueSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileHighlyQualifiedAcademicSubjectMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileHighlyQualifiedAcademicSubject source, IApplicantProfileHighlyQualifiedAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileHighlyQualifiedAcademicSubject source, IApplicantProfileHighlyQualifiedAcademicSubject target, Action<IApplicantProfileHighlyQualifiedAcademicSubject, IApplicantProfileHighlyQualifiedAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileHighlyQualifiedAcademicSubjectSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileIdentificationDocumentMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileIdentificationDocument source, IApplicantProfileIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileIdentificationDocument source, IApplicantProfileIdentificationDocument target, Action<IApplicantProfileIdentificationDocument, IApplicantProfileIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileInternationalAddressMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileInternationalAddress source, IApplicantProfileInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileInternationalAddress source, IApplicantProfileInternationalAddress target, Action<IApplicantProfileInternationalAddress, IApplicantProfileInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileInternationalAddressSynchronizationSourceSupport 
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileLanguageMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileLanguage source, IApplicantProfileLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantProfileLanguageUsesSupported)
            {
                isModified |=
                    source.ApplicantProfileLanguageUses.SynchronizeCollectionTo(
                        target.ApplicantProfileLanguageUses,
                        onChildAdded: child =>
                            {
                                child.ApplicantProfileLanguage = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicantProfileLanguageUseIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantProfileLanguage source, IApplicantProfileLanguage target, Action<IApplicantProfileLanguage, IApplicantProfileLanguage> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantProfileLanguageUsesSupported)
            {
                targetSynchSupport.IsApplicantProfileLanguageUseIncluded = sourceSynchSupport.IsApplicantProfileLanguageUseIncluded;
                source.ApplicantProfileLanguageUses.MapCollectionTo(target.ApplicantProfileLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantProfileLanguageUsesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileLanguageSynchronizationSourceSupport 
    {
        bool IsApplicantProfileLanguageUsesSupported { get; set; }
        Func<IApplicantProfileLanguageUse, bool> IsApplicantProfileLanguageUseIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileLanguageUseMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileLanguageUse source, IApplicantProfileLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileLanguageUse source, IApplicantProfileLanguageUse target, Action<IApplicantProfileLanguageUse, IApplicantProfileLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileLanguageUseSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfilePersonalIdentificationDocumentMapper
    {
        public static bool SynchronizeTo(this IApplicantProfilePersonalIdentificationDocument source, IApplicantProfilePersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfilePersonalIdentificationDocument source, IApplicantProfilePersonalIdentificationDocument target, Action<IApplicantProfilePersonalIdentificationDocument, IApplicantProfilePersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfilePersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileRaceMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileRace source, IApplicantProfileRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileRace source, IApplicantProfileRace target, Action<IApplicantProfileRace, IApplicantProfileRace> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileRaceSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileTelephoneMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileTelephone source, IApplicantProfileTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileTelephone source, IApplicantProfileTelephone target, Action<IApplicantProfileTelephone, IApplicantProfileTelephone> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicantProfileVisaMapper
    {
        public static bool SynchronizeTo(this IApplicantProfileVisa source, IApplicantProfileVisa target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProfileVisaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptor != target.VisaDescriptor)
            {
                source.VisaDescriptor = target.VisaDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProfileVisa source, IApplicantProfileVisa target, Action<IApplicantProfileVisa, IApplicantProfileVisa> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProfileVisaSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProfileVisaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProfileVisaSynchronizationSourceSupport 
    {
    }

}
// Aggregate: Application

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ApplicationMapper
    {
        public static bool SynchronizeTo(this IApplication source, IApplication target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantProfileIdentifier != target.ApplicantProfileIdentifier)
            {
                source.ApplicantProfileIdentifier = target.ApplicantProfileIdentifier;
            }
            if (source.ApplicationIdentifier != target.ApplicationIdentifier)
            {
                source.ApplicationIdentifier = target.ApplicationIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAcceptedDateSupported)
                && target.AcceptedDate != source.AcceptedDate)
            {
                target.AcceptedDate = source.AcceptedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationDateSupported)
                && target.ApplicationDate != source.ApplicationDate)
            {
                target.ApplicationDate = source.ApplicationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationSourceDescriptorSupported)
                && target.ApplicationSourceDescriptor != source.ApplicationSourceDescriptor)
            {
                target.ApplicationSourceDescriptor = source.ApplicationSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationStatusDescriptorSupported)
                && target.ApplicationStatusDescriptor != source.ApplicationStatusDescriptor)
            {
                target.ApplicationStatusDescriptor = source.ApplicationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCurrentEmployeeSupported)
                && target.CurrentEmployee != source.CurrentEmployee)
            {
                target.CurrentEmployee = source.CurrentEmployee;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstContactDateSupported)
                && target.FirstContactDate != source.FirstContactDate)
            {
                target.FirstContactDate = source.FirstContactDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighNeedsAcademicSubjectDescriptorSupported)
                && target.HighNeedsAcademicSubjectDescriptor != source.HighNeedsAcademicSubjectDescriptor)
            {
                target.HighNeedsAcademicSubjectDescriptor = source.HighNeedsAcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHireStatusDescriptorSupported)
                && target.HireStatusDescriptor != source.HireStatusDescriptor)
            {
                target.HireStatusDescriptor = source.HireStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHiringSourceDescriptorSupported)
                && target.HiringSourceDescriptor != source.HiringSourceDescriptor)
            {
                target.HiringSourceDescriptor = source.HiringSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRequisitionNumberSupported)
                && target.RequisitionNumber != source.RequisitionNumber)
            {
                target.RequisitionNumber = source.RequisitionNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWithdrawDateSupported)
                && target.WithdrawDate != source.WithdrawDate)
            {
                target.WithdrawDate = source.WithdrawDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWithdrawReasonDescriptorSupported)
                && target.WithdrawReasonDescriptor != source.WithdrawReasonDescriptor)
            {
                target.WithdrawReasonDescriptor = source.WithdrawReasonDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicationRecruitmentEventAttendancesSupported)
            {
                isModified |=
                    source.ApplicationRecruitmentEventAttendances.SynchronizeCollectionTo(
                        target.ApplicationRecruitmentEventAttendances,
                        onChildAdded: child =>
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicationRecruitmentEventAttendanceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicationScoreResultsSupported)
            {
                isModified |=
                    source.ApplicationScoreResults.SynchronizeCollectionTo(
                        target.ApplicationScoreResults,
                        onChildAdded: child =>
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicationScoreResultIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicationTermsSupported)
            {
                isModified |=
                    source.ApplicationTerms.SynchronizeCollectionTo(
                        target.ApplicationTerms,
                        onChildAdded: child =>
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsApplicationTermIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplication source, IApplication target, Action<IApplication, IApplication> onMapped)
        {
            var sourceSynchSupport = source as IApplicationSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantProfileIdentifier = source.ApplicantProfileIdentifier;
            target.ApplicationIdentifier = source.ApplicationIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsAcceptedDateSupported)
                target.AcceptedDate = source.AcceptedDate;
            else
                targetSynchSupport.IsAcceptedDateSupported = false;

            if (sourceSynchSupport.IsApplicationDateSupported)
                target.ApplicationDate = source.ApplicationDate;
            else
                targetSynchSupport.IsApplicationDateSupported = false;

            if (sourceSynchSupport.IsApplicationSourceDescriptorSupported)
                target.ApplicationSourceDescriptor = source.ApplicationSourceDescriptor;
            else
                targetSynchSupport.IsApplicationSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsApplicationStatusDescriptorSupported)
                target.ApplicationStatusDescriptor = source.ApplicationStatusDescriptor;
            else
                targetSynchSupport.IsApplicationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsCurrentEmployeeSupported)
                target.CurrentEmployee = source.CurrentEmployee;
            else
                targetSynchSupport.IsCurrentEmployeeSupported = false;

            if (sourceSynchSupport.IsFirstContactDateSupported)
                target.FirstContactDate = source.FirstContactDate;
            else
                targetSynchSupport.IsFirstContactDateSupported = false;

            if (sourceSynchSupport.IsHighNeedsAcademicSubjectDescriptorSupported)
                target.HighNeedsAcademicSubjectDescriptor = source.HighNeedsAcademicSubjectDescriptor;
            else
                targetSynchSupport.IsHighNeedsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsHireStatusDescriptorSupported)
                target.HireStatusDescriptor = source.HireStatusDescriptor;
            else
                targetSynchSupport.IsHireStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsHiringSourceDescriptorSupported)
                target.HiringSourceDescriptor = source.HiringSourceDescriptor;
            else
                targetSynchSupport.IsHiringSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsRequisitionNumberSupported)
                target.RequisitionNumber = source.RequisitionNumber;
            else
                targetSynchSupport.IsRequisitionNumberSupported = false;

            if (sourceSynchSupport.IsWithdrawDateSupported)
                target.WithdrawDate = source.WithdrawDate;
            else
                targetSynchSupport.IsWithdrawDateSupported = false;

            if (sourceSynchSupport.IsWithdrawReasonDescriptorSupported)
                target.WithdrawReasonDescriptor = source.WithdrawReasonDescriptor;
            else
                targetSynchSupport.IsWithdrawReasonDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicantProfileResourceId = source.ApplicantProfileResourceId;
                target.ApplicantProfileDiscriminator = source.ApplicantProfileDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicationRecruitmentEventAttendancesSupported)
            {
                targetSynchSupport.IsApplicationRecruitmentEventAttendanceIncluded = sourceSynchSupport.IsApplicationRecruitmentEventAttendanceIncluded;
                source.ApplicationRecruitmentEventAttendances.MapCollectionTo(target.ApplicationRecruitmentEventAttendances, target);
            }
            else
            {
                targetSynchSupport.IsApplicationRecruitmentEventAttendancesSupported = false;
            }

            if (sourceSynchSupport.IsApplicationScoreResultsSupported)
            {
                targetSynchSupport.IsApplicationScoreResultIncluded = sourceSynchSupport.IsApplicationScoreResultIncluded;
                source.ApplicationScoreResults.MapCollectionTo(target.ApplicationScoreResults, target);
            }
            else
            {
                targetSynchSupport.IsApplicationScoreResultsSupported = false;
            }

            if (sourceSynchSupport.IsApplicationTermsSupported)
            {
                targetSynchSupport.IsApplicationTermIncluded = sourceSynchSupport.IsApplicationTermIncluded;
                source.ApplicationTerms.MapCollectionTo(target.ApplicationTerms, target);
            }
            else
            {
                targetSynchSupport.IsApplicationTermsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsAcceptedDateSupported { get; set; }
        bool IsApplicationDateSupported { get; set; }
        bool IsApplicationRecruitmentEventAttendancesSupported { get; set; }
        bool IsApplicationScoreResultsSupported { get; set; }
        bool IsApplicationSourceDescriptorSupported { get; set; }
        bool IsApplicationStatusDescriptorSupported { get; set; }
        bool IsApplicationTermsSupported { get; set; }
        bool IsCurrentEmployeeSupported { get; set; }
        bool IsFirstContactDateSupported { get; set; }
        bool IsHighNeedsAcademicSubjectDescriptorSupported { get; set; }
        bool IsHireStatusDescriptorSupported { get; set; }
        bool IsHiringSourceDescriptorSupported { get; set; }
        bool IsRequisitionNumberSupported { get; set; }
        bool IsWithdrawDateSupported { get; set; }
        bool IsWithdrawReasonDescriptorSupported { get; set; }
        Func<IApplicationRecruitmentEventAttendance, bool> IsApplicationRecruitmentEventAttendanceIncluded { get; set; }
        Func<IApplicationScoreResult, bool> IsApplicationScoreResultIncluded { get; set; }
        Func<IApplicationTerm, bool> IsApplicationTermIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicationRecruitmentEventAttendanceMapper
    {
        public static bool SynchronizeTo(this IApplicationRecruitmentEventAttendance source, IApplicationRecruitmentEventAttendance target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationRecruitmentEventAttendanceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.EventTitle != target.EventTitle)
            {
                source.EventTitle = target.EventTitle;
            }
            if (source.RecruitmentEventAttendeeIdentifier != target.RecruitmentEventAttendeeIdentifier)
            {
                source.RecruitmentEventAttendeeIdentifier = target.RecruitmentEventAttendeeIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationRecruitmentEventAttendance source, IApplicationRecruitmentEventAttendance target, Action<IApplicationRecruitmentEventAttendance, IApplicationRecruitmentEventAttendance> onMapped)
        {
            var sourceSynchSupport = source as IApplicationRecruitmentEventAttendanceSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationRecruitmentEventAttendanceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EventDate = source.EventDate;
            target.EventTitle = source.EventTitle;
            target.RecruitmentEventAttendeeIdentifier = source.RecruitmentEventAttendeeIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.RecruitmentEventAttendanceResourceId = source.RecruitmentEventAttendanceResourceId;
                target.RecruitmentEventAttendanceDiscriminator = source.RecruitmentEventAttendanceDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationRecruitmentEventAttendanceSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicationScoreResultMapper
    {
        public static bool SynchronizeTo(this IApplicationScoreResult source, IApplicationScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultSupported)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationScoreResult source, IApplicationScoreResult target, Action<IApplicationScoreResult, IApplicationScoreResult> onMapped)
        {
            var sourceSynchSupport = source as IApplicationScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultSupported)
                target.Result = source.Result;
            else
                targetSynchSupport.IsResultSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationScoreResultSynchronizationSourceSupport 
    {
        bool IsResultSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class ApplicationTermMapper
    {
        public static bool SynchronizeTo(this IApplicationTerm source, IApplicationTerm target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationTermSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationTerm source, IApplicationTerm target, Action<IApplicationTerm, IApplicationTerm> onMapped)
        {
            var sourceSynchSupport = source as IApplicationTermSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationTermSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationTermSynchronizationSourceSupport 
    {
    }

}
// Aggregate: ApplicationEvent

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventMapper
    {
        public static bool SynchronizeTo(this IApplicationEvent source, IApplicationEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantProfileIdentifier != target.ApplicantProfileIdentifier)
            {
                source.ApplicantProfileIdentifier = target.ApplicantProfileIdentifier;
            }
            if (source.ApplicationEventTypeDescriptor != target.ApplicationEventTypeDescriptor)
            {
                source.ApplicationEventTypeDescriptor = target.ApplicationEventTypeDescriptor;
            }
            if (source.ApplicationIdentifier != target.ApplicationIdentifier)
            {
                source.ApplicationIdentifier = target.ApplicationIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.SequenceNumber != target.SequenceNumber)
            {
                source.SequenceNumber = target.SequenceNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApplicationEvaluationScoreSupported)
                && target.ApplicationEvaluationScore != source.ApplicationEvaluationScore)
            {
                target.ApplicationEvaluationScore = source.ApplicationEvaluationScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationEventResultDescriptorSupported)
                && target.ApplicationEventResultDescriptor != source.ApplicationEventResultDescriptor)
            {
                target.ApplicationEventResultDescriptor = source.ApplicationEventResultDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventEndDateSupported)
                && target.EventEndDate != source.EventEndDate)
            {
                target.EventEndDate = source.EventEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEvent source, IApplicationEvent target, Action<IApplicationEvent, IApplicationEvent> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantProfileIdentifier = source.ApplicantProfileIdentifier;
            target.ApplicationEventTypeDescriptor = source.ApplicationEventTypeDescriptor;
            target.ApplicationIdentifier = source.ApplicationIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.SequenceNumber = source.SequenceNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApplicationEvaluationScoreSupported)
                target.ApplicationEvaluationScore = source.ApplicationEvaluationScore;
            else
                targetSynchSupport.IsApplicationEvaluationScoreSupported = false;

            if (sourceSynchSupport.IsApplicationEventResultDescriptorSupported)
                target.ApplicationEventResultDescriptor = source.ApplicationEventResultDescriptor;
            else
                targetSynchSupport.IsApplicationEventResultDescriptorSupported = false;

            if (sourceSynchSupport.IsEventEndDateSupported)
                target.EventEndDate = source.EventEndDate;
            else
                targetSynchSupport.IsEventEndDateSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicationResourceId = source.ApplicationResourceId;
                target.ApplicationDiscriminator = source.ApplicationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventSynchronizationSourceSupport 
    {
        bool IsApplicationEvaluationScoreSupported { get; set; }
        bool IsApplicationEventResultDescriptorSupported { get; set; }
        bool IsEventEndDateSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }

}
// Aggregate: ApplicationEventResultDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventResultDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventResultDescriptorMapper
    {
        public static bool SynchronizeTo(this IApplicationEventResultDescriptor source, IApplicationEventResultDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventResultDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationEventResultDescriptorId != target.ApplicationEventResultDescriptorId)
            {
                source.ApplicationEventResultDescriptorId = target.ApplicationEventResultDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEventResultDescriptor source, IApplicationEventResultDescriptor target, Action<IApplicationEventResultDescriptor, IApplicationEventResultDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventResultDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventResultDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationEventResultDescriptorId = source.ApplicationEventResultDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventResultDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: ApplicationEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IApplicationEventTypeDescriptor source, IApplicationEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationEventTypeDescriptorId != target.ApplicationEventTypeDescriptorId)
            {
                source.ApplicationEventTypeDescriptorId = target.ApplicationEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEventTypeDescriptor source, IApplicationEventTypeDescriptor target, Action<IApplicationEventTypeDescriptor, IApplicationEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationEventTypeDescriptorId = source.ApplicationEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: ApplicationSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationSourceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ApplicationSourceDescriptorMapper
    {
        public static bool SynchronizeTo(this IApplicationSourceDescriptor source, IApplicationSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationSourceDescriptorId != target.ApplicationSourceDescriptorId)
            {
                source.ApplicationSourceDescriptorId = target.ApplicationSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationSourceDescriptor source, IApplicationSourceDescriptor target, Action<IApplicationSourceDescriptor, IApplicationSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationSourceDescriptorId = source.ApplicationSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: ApplicationStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ApplicationStatusDescriptorMapper
    {
        public static bool SynchronizeTo(this IApplicationStatusDescriptor source, IApplicationStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationStatusDescriptorId != target.ApplicationStatusDescriptorId)
            {
                source.ApplicationStatusDescriptorId = target.ApplicationStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationStatusDescriptor source, IApplicationStatusDescriptor target, Action<IApplicationStatusDescriptor, IApplicationStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationStatusDescriptorId = source.ApplicationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: Assessment

namespace EdFi.Ods.Entities.Common.TPDM //.AssessmentAggregate
{
    [ExcludeFromCodeCoverage]
    public static class AssessmentExtensionMapper
    {
        public static bool SynchronizeTo(this IAssessmentExtension source, IAssessmentExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Assessment as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentExtension source, IAssessmentExtension target, Action<IAssessmentExtension, IAssessmentExtension> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentExtensionSynchronizationSourceSupport 
    {
        bool IsProgramGatewayDescriptorSupported { get; set; }
    }

}
// Aggregate: BackgroundCheckStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.BackgroundCheckStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class BackgroundCheckStatusDescriptorMapper
    {
        public static bool SynchronizeTo(this IBackgroundCheckStatusDescriptor source, IBackgroundCheckStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckStatusDescriptorId != target.BackgroundCheckStatusDescriptorId)
            {
                source.BackgroundCheckStatusDescriptorId = target.BackgroundCheckStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IBackgroundCheckStatusDescriptor source, IBackgroundCheckStatusDescriptor target, Action<IBackgroundCheckStatusDescriptor, IBackgroundCheckStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BackgroundCheckStatusDescriptorId = source.BackgroundCheckStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBackgroundCheckStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: BackgroundCheckTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.BackgroundCheckTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class BackgroundCheckTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IBackgroundCheckTypeDescriptor source, IBackgroundCheckTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptorId != target.BackgroundCheckTypeDescriptorId)
            {
                source.BackgroundCheckTypeDescriptorId = target.BackgroundCheckTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IBackgroundCheckTypeDescriptor source, IBackgroundCheckTypeDescriptor target, Action<IBackgroundCheckTypeDescriptor, IBackgroundCheckTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptorId = source.BackgroundCheckTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBackgroundCheckTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: Candidate

namespace EdFi.Ods.Entities.Common.TPDM //.CandidateAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CandidateMapper
    {
        public static bool SynchronizeTo(this ICandidate source, ICandidate target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CandidateIdentifier != target.CandidateIdentifier)
            {
                source.CandidateIdentifier = target.CandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApplicantProfileIdentifierSupported)
                && target.ApplicantProfileIdentifier != source.ApplicantProfileIdentifier)
            {
                target.ApplicantProfileIdentifier = source.ApplicantProfileIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationIdentifierSupported)
                && target.ApplicationIdentifier != source.ApplicationIdentifier)
            {
                target.ApplicationIdentifier = source.ApplicationIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthCitySupported)
                && target.BirthCity != source.BirthCity)
            {
                target.BirthCity = source.BirthCity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthCountryDescriptorSupported)
                && target.BirthCountryDescriptor != source.BirthCountryDescriptor)
            {
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthDateSupported)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthInternationalProvinceSupported)
                && target.BirthInternationalProvince != source.BirthInternationalProvince)
            {
                target.BirthInternationalProvince = source.BirthInternationalProvince;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthSexDescriptorSupported)
                && target.BirthSexDescriptor != source.BirthSexDescriptor)
            {
                target.BirthSexDescriptor = source.BirthSexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthStateAbbreviationDescriptorSupported)
                && target.BirthStateAbbreviationDescriptor != source.BirthStateAbbreviationDescriptor)
            {
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitizenshipStatusDescriptorSupported)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateEnteredUSSupported)
                && target.DateEnteredUS != source.DateEnteredUS)
            {
                target.DateEnteredUS = source.DateEnteredUS;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisplacementStatusSupported)
                && target.DisplacementStatus != source.DisplacementStatus)
            {
                target.DisplacementStatus = source.DisplacementStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEconomicDisadvantagedSupported)
                && target.EconomicDisadvantaged != source.EconomicDisadvantaged)
            {
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEnglishLanguageExamDescriptorSupported)
                && target.EnglishLanguageExamDescriptor != source.EnglishLanguageExamDescriptor)
            {
                target.EnglishLanguageExamDescriptor = source.EnglishLanguageExamDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstGenerationStudentSupported)
                && target.FirstGenerationStudent != source.FirstGenerationStudent)
            {
                target.FirstGenerationStudent = source.FirstGenerationStudent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLimitedEnglishProficiencyDescriptorSupported)
                && target.LimitedEnglishProficiencyDescriptor != source.LimitedEnglishProficiencyDescriptor)
            {
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLoginIdSupported)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMultipleBirthStatusSupported)
                && target.MultipleBirthStatus != source.MultipleBirthStatus)
            {
                target.MultipleBirthStatus = source.MultipleBirthStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOldEthnicityDescriptorSupported)
                && target.OldEthnicityDescriptor != source.OldEthnicityDescriptor)
            {
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonIdSupported)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPreviousCareerDescriptorSupported)
                && target.PreviousCareerDescriptor != source.PreviousCareerDescriptor)
            {
                target.PreviousCareerDescriptor = source.PreviousCareerDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfileThumbnailSupported)
                && target.ProfileThumbnail != source.ProfileThumbnail)
            {
                target.ProfileThumbnail = source.ProfileThumbnail;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramCompleteSupported)
                && target.ProgramComplete != source.ProgramComplete)
            {
                target.ProgramComplete = source.ProgramComplete;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSourceSystemDescriptorSupported)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTuitionCostSupported)
                && target.TuitionCost != source.TuitionCost)
            {
                target.TuitionCost = source.TuitionCost;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // CandidateBackgroundCheck
            if (sourceSupport == null || sourceSupport.IsCandidateBackgroundCheckSupported)
            {
                if (source.CandidateBackgroundCheck == null)
                {
                    if (target.CandidateBackgroundCheck != null)
                    {
                        target.CandidateBackgroundCheck = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CandidateBackgroundCheck == null)
                    {
                        var itemType = target.GetType().GetProperty("CandidateBackgroundCheck").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CandidateBackgroundCheck = (ICandidateBackgroundCheck) newItem;
                    }

                    isModified |= source.CandidateBackgroundCheck.Synchronize(target.CandidateBackgroundCheck);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCandidateAddressesSupported)
            {
                isModified |=
                    source.CandidateAddresses.SynchronizeCollectionTo(
                        target.CandidateAddresses,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateAidsSupported)
            {
                isModified |=
                    source.CandidateAids.SynchronizeCollectionTo(
                        target.CandidateAids,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateAidIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateCharacteristicsSupported)
            {
                isModified |=
                    source.CandidateCharacteristics.SynchronizeCollectionTo(
                        target.CandidateCharacteristics,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateCohortYearsSupported)
            {
                isModified |=
                    source.CandidateCohortYears.SynchronizeCollectionTo(
                        target.CandidateCohortYears,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateCohortYearIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateDegreeSpecializationsSupported)
            {
                isModified |=
                    source.CandidateDegreeSpecializations.SynchronizeCollectionTo(
                        target.CandidateDegreeSpecializations,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateDegreeSpecializationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateDisabilitiesSupported)
            {
                isModified |=
                    source.CandidateDisabilities.SynchronizeCollectionTo(
                        target.CandidateDisabilities,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateElectronicMailsSupported)
            {
                isModified |=
                    source.CandidateElectronicMails.SynchronizeCollectionTo(
                        target.CandidateElectronicMails,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateEPPProgramDegreesSupported)
            {
                isModified |=
                    source.CandidateEPPProgramDegrees.SynchronizeCollectionTo(
                        target.CandidateEPPProgramDegrees,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateEPPProgramDegreeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateIdentificationCodesSupported)
            {
                isModified |=
                    source.CandidateIdentificationCodes.SynchronizeCollectionTo(
                        target.CandidateIdentificationCodes,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateIdentificationDocumentsSupported)
            {
                isModified |=
                    source.CandidateIdentificationDocuments.SynchronizeCollectionTo(
                        target.CandidateIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateIndicatorsSupported)
            {
                isModified |=
                    source.CandidateIndicators.SynchronizeCollectionTo(
                        target.CandidateIndicators,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateIndicatorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateInternationalAddressesSupported)
            {
                isModified |=
                    source.CandidateInternationalAddresses.SynchronizeCollectionTo(
                        target.CandidateInternationalAddresses,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateLanguagesSupported)
            {
                isModified |=
                    source.CandidateLanguages.SynchronizeCollectionTo(
                        target.CandidateLanguages,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateOtherNamesSupported)
            {
                isModified |=
                    source.CandidateOtherNames.SynchronizeCollectionTo(
                        target.CandidateOtherNames,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateOtherNameIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidatePersonalIdentificationDocumentsSupported)
            {
                isModified |=
                    source.CandidatePersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.CandidatePersonalIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidatePersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateRacesSupported)
            {
                isModified |=
                    source.CandidateRaces.SynchronizeCollectionTo(
                        target.CandidateRaces,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateTelephonesSupported)
            {
                isModified |=
                    source.CandidateTelephones.SynchronizeCollectionTo(
                        target.CandidateTelephones,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCandidateVisasSupported)
            {
                isModified |=
                    source.CandidateVisas.SynchronizeCollectionTo(
                        target.CandidateVisas,
                        onChildAdded: child =>
                            {
                                child.Candidate = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateVisaIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICandidate source, ICandidate target, Action<ICandidate, ICandidate> onMapped)
        {
            var sourceSynchSupport = source as ICandidateSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CandidateIdentifier = source.CandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApplicantProfileIdentifierSupported)
                target.ApplicantProfileIdentifier = source.ApplicantProfileIdentifier;
            else
                targetSynchSupport.IsApplicantProfileIdentifierSupported = false;

            if (sourceSynchSupport.IsApplicationIdentifierSupported)
                target.ApplicationIdentifier = source.ApplicationIdentifier;
            else
                targetSynchSupport.IsApplicationIdentifierSupported = false;

            if (sourceSynchSupport.IsBirthCitySupported)
                target.BirthCity = source.BirthCity;
            else
                targetSynchSupport.IsBirthCitySupported = false;

            if (sourceSynchSupport.IsBirthCountryDescriptorSupported)
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
            else
                targetSynchSupport.IsBirthCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsBirthDateSupported)
                target.BirthDate = source.BirthDate;
            else
                targetSynchSupport.IsBirthDateSupported = false;

            if (sourceSynchSupport.IsBirthInternationalProvinceSupported)
                target.BirthInternationalProvince = source.BirthInternationalProvince;
            else
                targetSynchSupport.IsBirthInternationalProvinceSupported = false;

            if (sourceSynchSupport.IsBirthSexDescriptorSupported)
                target.BirthSexDescriptor = source.BirthSexDescriptor;
            else
                targetSynchSupport.IsBirthSexDescriptorSupported = false;

            if (sourceSynchSupport.IsBirthStateAbbreviationDescriptorSupported)
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
            else
                targetSynchSupport.IsBirthStateAbbreviationDescriptorSupported = false;

            if (sourceSynchSupport.IsCitizenshipStatusDescriptorSupported)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
            else
                targetSynchSupport.IsCitizenshipStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsDateEnteredUSSupported)
                target.DateEnteredUS = source.DateEnteredUS;
            else
                targetSynchSupport.IsDateEnteredUSSupported = false;

            if (sourceSynchSupport.IsDisplacementStatusSupported)
                target.DisplacementStatus = source.DisplacementStatus;
            else
                targetSynchSupport.IsDisplacementStatusSupported = false;

            if (sourceSynchSupport.IsEconomicDisadvantagedSupported)
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
            else
                targetSynchSupport.IsEconomicDisadvantagedSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEnglishLanguageExamDescriptorSupported)
                target.EnglishLanguageExamDescriptor = source.EnglishLanguageExamDescriptor;
            else
                targetSynchSupport.IsEnglishLanguageExamDescriptorSupported = false;

            if (sourceSynchSupport.IsFirstGenerationStudentSupported)
                target.FirstGenerationStudent = source.FirstGenerationStudent;
            else
                targetSynchSupport.IsFirstGenerationStudentSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsLimitedEnglishProficiencyDescriptorSupported)
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
            else
                targetSynchSupport.IsLimitedEnglishProficiencyDescriptorSupported = false;

            if (sourceSynchSupport.IsLoginIdSupported)
                target.LoginId = source.LoginId;
            else
                targetSynchSupport.IsLoginIdSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsMultipleBirthStatusSupported)
                target.MultipleBirthStatus = source.MultipleBirthStatus;
            else
                targetSynchSupport.IsMultipleBirthStatusSupported = false;

            if (sourceSynchSupport.IsOldEthnicityDescriptorSupported)
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
            else
                targetSynchSupport.IsOldEthnicityDescriptorSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsPersonIdSupported)
                target.PersonId = source.PersonId;
            else
                targetSynchSupport.IsPersonIdSupported = false;

            if (sourceSynchSupport.IsPreviousCareerDescriptorSupported)
                target.PreviousCareerDescriptor = source.PreviousCareerDescriptor;
            else
                targetSynchSupport.IsPreviousCareerDescriptorSupported = false;

            if (sourceSynchSupport.IsProfileThumbnailSupported)
                target.ProfileThumbnail = source.ProfileThumbnail;
            else
                targetSynchSupport.IsProfileThumbnailSupported = false;

            if (sourceSynchSupport.IsProgramCompleteSupported)
                target.ProgramComplete = source.ProgramComplete;
            else
                targetSynchSupport.IsProgramCompleteSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsSourceSystemDescriptorSupported)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            else
                targetSynchSupport.IsSourceSystemDescriptorSupported = false;

            if (sourceSynchSupport.IsTuitionCostSupported)
                target.TuitionCost = source.TuitionCost;
            else
                targetSynchSupport.IsTuitionCostSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicationResourceId = source.ApplicationResourceId;
                target.ApplicationDiscriminator = source.ApplicationDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // CandidateBackgroundCheck (Source)
            if (sourceSynchSupport.IsCandidateBackgroundCheckSupported)
            {
                var itemProperty = target.GetType().GetProperty("CandidateBackgroundCheck");

                if (itemProperty != null)
                {
                    if (source.CandidateBackgroundCheck == null)
                    {
                        target.CandidateBackgroundCheck = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCandidateBackgroundCheck = Activator.CreateInstance(itemType);
                        (targetCandidateBackgroundCheck as IChildEntity)?.SetParent(target);
                        source.CandidateBackgroundCheck.Map(targetCandidateBackgroundCheck);

                        // Update the target reference appropriately
                        target.CandidateBackgroundCheck = (ICandidateBackgroundCheck) targetCandidateBackgroundCheck;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCandidateBackgroundCheckSupported = false;
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsCandidateAddressesSupported)
            {
                targetSynchSupport.IsCandidateAddressIncluded = sourceSynchSupport.IsCandidateAddressIncluded;
                source.CandidateAddresses.MapCollectionTo(target.CandidateAddresses, target);
            }
            else
            {
                targetSynchSupport.IsCandidateAddressesSupported = false;
            }

            if (sourceSynchSupport.IsCandidateAidsSupported)
            {
                targetSynchSupport.IsCandidateAidIncluded = sourceSynchSupport.IsCandidateAidIncluded;
                source.CandidateAids.MapCollectionTo(target.CandidateAids, target);
            }
            else
            {
                targetSynchSupport.IsCandidateAidsSupported = false;
            }

            if (sourceSynchSupport.IsCandidateCharacteristicsSupported)
            {
                targetSynchSupport.IsCandidateCharacteristicIncluded = sourceSynchSupport.IsCandidateCharacteristicIncluded;
                source.CandidateCharacteristics.MapCollectionTo(target.CandidateCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsCandidateCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsCandidateCohortYearsSupported)
            {
                targetSynchSupport.IsCandidateCohortYearIncluded = sourceSynchSupport.IsCandidateCohortYearIncluded;
                source.CandidateCohortYears.MapCollectionTo(target.CandidateCohortYears, target);
            }
            else
            {
                targetSynchSupport.IsCandidateCohortYearsSupported = false;
            }

            if (sourceSynchSupport.IsCandidateDegreeSpecializationsSupported)
            {
                targetSynchSupport.IsCandidateDegreeSpecializationIncluded = sourceSynchSupport.IsCandidateDegreeSpecializationIncluded;
                source.CandidateDegreeSpecializations.MapCollectionTo(target.CandidateDegreeSpecializations, target);
            }
            else
            {
                targetSynchSupport.IsCandidateDegreeSpecializationsSupported = false;
            }

            if (sourceSynchSupport.IsCandidateDisabilitiesSupported)
            {
                targetSynchSupport.IsCandidateDisabilityIncluded = sourceSynchSupport.IsCandidateDisabilityIncluded;
                source.CandidateDisabilities.MapCollectionTo(target.CandidateDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsCandidateDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsCandidateElectronicMailsSupported)
            {
                targetSynchSupport.IsCandidateElectronicMailIncluded = sourceSynchSupport.IsCandidateElectronicMailIncluded;
                source.CandidateElectronicMails.MapCollectionTo(target.CandidateElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsCandidateElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsCandidateEPPProgramDegreesSupported)
            {
                targetSynchSupport.IsCandidateEPPProgramDegreeIncluded = sourceSynchSupport.IsCandidateEPPProgramDegreeIncluded;
                source.CandidateEPPProgramDegrees.MapCollectionTo(target.CandidateEPPProgramDegrees, target);
            }
            else
            {
                targetSynchSupport.IsCandidateEPPProgramDegreesSupported = false;
            }

            if (sourceSynchSupport.IsCandidateIdentificationCodesSupported)
            {
                targetSynchSupport.IsCandidateIdentificationCodeIncluded = sourceSynchSupport.IsCandidateIdentificationCodeIncluded;
                source.CandidateIdentificationCodes.MapCollectionTo(target.CandidateIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsCandidateIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsCandidateIdentificationDocumentsSupported)
            {
                targetSynchSupport.IsCandidateIdentificationDocumentIncluded = sourceSynchSupport.IsCandidateIdentificationDocumentIncluded;
                source.CandidateIdentificationDocuments.MapCollectionTo(target.CandidateIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsCandidateIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsCandidateIndicatorsSupported)
            {
                targetSynchSupport.IsCandidateIndicatorIncluded = sourceSynchSupport.IsCandidateIndicatorIncluded;
                source.CandidateIndicators.MapCollectionTo(target.CandidateIndicators, target);
            }
            else
            {
                targetSynchSupport.IsCandidateIndicatorsSupported = false;
            }

            if (sourceSynchSupport.IsCandidateInternationalAddressesSupported)
            {
                targetSynchSupport.IsCandidateInternationalAddressIncluded = sourceSynchSupport.IsCandidateInternationalAddressIncluded;
                source.CandidateInternationalAddresses.MapCollectionTo(target.CandidateInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsCandidateInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsCandidateLanguagesSupported)
            {
                targetSynchSupport.IsCandidateLanguageIncluded = sourceSynchSupport.IsCandidateLanguageIncluded;
                source.CandidateLanguages.MapCollectionTo(target.CandidateLanguages, target);
            }
            else
            {
                targetSynchSupport.IsCandidateLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsCandidateOtherNamesSupported)
            {
                targetSynchSupport.IsCandidateOtherNameIncluded = sourceSynchSupport.IsCandidateOtherNameIncluded;
                source.CandidateOtherNames.MapCollectionTo(target.CandidateOtherNames, target);
            }
            else
            {
                targetSynchSupport.IsCandidateOtherNamesSupported = false;
            }

            if (sourceSynchSupport.IsCandidatePersonalIdentificationDocumentsSupported)
            {
                targetSynchSupport.IsCandidatePersonalIdentificationDocumentIncluded = sourceSynchSupport.IsCandidatePersonalIdentificationDocumentIncluded;
                source.CandidatePersonalIdentificationDocuments.MapCollectionTo(target.CandidatePersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsCandidatePersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsCandidateRacesSupported)
            {
                targetSynchSupport.IsCandidateRaceIncluded = sourceSynchSupport.IsCandidateRaceIncluded;
                source.CandidateRaces.MapCollectionTo(target.CandidateRaces, target);
            }
            else
            {
                targetSynchSupport.IsCandidateRacesSupported = false;
            }

            if (sourceSynchSupport.IsCandidateTelephonesSupported)
            {
                targetSynchSupport.IsCandidateTelephoneIncluded = sourceSynchSupport.IsCandidateTelephoneIncluded;
                source.CandidateTelephones.MapCollectionTo(target.CandidateTelephones, target);
            }
            else
            {
                targetSynchSupport.IsCandidateTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsCandidateVisasSupported)
            {
                targetSynchSupport.IsCandidateVisaIncluded = sourceSynchSupport.IsCandidateVisaIncluded;
                source.CandidateVisas.MapCollectionTo(target.CandidateVisas, target);
            }
            else
            {
                targetSynchSupport.IsCandidateVisasSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateSynchronizationSourceSupport 
    {
        bool IsApplicantProfileIdentifierSupported { get; set; }
        bool IsApplicationIdentifierSupported { get; set; }
        bool IsBirthCitySupported { get; set; }
        bool IsBirthCountryDescriptorSupported { get; set; }
        bool IsBirthDateSupported { get; set; }
        bool IsBirthInternationalProvinceSupported { get; set; }
        bool IsBirthSexDescriptorSupported { get; set; }
        bool IsBirthStateAbbreviationDescriptorSupported { get; set; }
        bool IsCandidateAddressesSupported { get; set; }
        bool IsCandidateAidsSupported { get; set; }
        bool IsCandidateBackgroundCheckSupported { get; set; }
        bool IsCandidateCharacteristicsSupported { get; set; }
        bool IsCandidateCohortYearsSupported { get; set; }
        bool IsCandidateDegreeSpecializationsSupported { get; set; }
        bool IsCandidateDisabilitiesSupported { get; set; }
        bool IsCandidateElectronicMailsSupported { get; set; }
        bool IsCandidateEPPProgramDegreesSupported { get; set; }
        bool IsCandidateIdentificationCodesSupported { get; set; }
        bool IsCandidateIdentificationDocumentsSupported { get; set; }
        bool IsCandidateIndicatorsSupported { get; set; }
        bool IsCandidateInternationalAddressesSupported { get; set; }
        bool IsCandidateLanguagesSupported { get; set; }
        bool IsCandidateOtherNamesSupported { get; set; }
        bool IsCandidatePersonalIdentificationDocumentsSupported { get; set; }
        bool IsCandidateRacesSupported { get; set; }
        bool IsCandidateTelephonesSupported { get; set; }
        bool IsCandidateVisasSupported { get; set; }
        bool IsCitizenshipStatusDescriptorSupported { get; set; }
        bool IsDateEnteredUSSupported { get; set; }
        bool IsDisplacementStatusSupported { get; set; }
        bool IsEconomicDisadvantagedSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEnglishLanguageExamDescriptorSupported { get; set; }
        bool IsFirstGenerationStudentSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsLimitedEnglishProficiencyDescriptorSupported { get; set; }
        bool IsLoginIdSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsMultipleBirthStatusSupported { get; set; }
        bool IsOldEthnicityDescriptorSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsPersonIdSupported { get; set; }
        bool IsPreviousCareerDescriptorSupported { get; set; }
        bool IsProfileThumbnailSupported { get; set; }
        bool IsProgramCompleteSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsSourceSystemDescriptorSupported { get; set; }
        bool IsTuitionCostSupported { get; set; }
        Func<ICandidateAddress, bool> IsCandidateAddressIncluded { get; set; }
        Func<ICandidateAid, bool> IsCandidateAidIncluded { get; set; }
        Func<ICandidateCharacteristic, bool> IsCandidateCharacteristicIncluded { get; set; }
        Func<ICandidateCohortYear, bool> IsCandidateCohortYearIncluded { get; set; }
        Func<ICandidateDegreeSpecialization, bool> IsCandidateDegreeSpecializationIncluded { get; set; }
        Func<ICandidateDisability, bool> IsCandidateDisabilityIncluded { get; set; }
        Func<ICandidateElectronicMail, bool> IsCandidateElectronicMailIncluded { get; set; }
        Func<ICandidateEPPProgramDegree, bool> IsCandidateEPPProgramDegreeIncluded { get; set; }
        Func<ICandidateIdentificationCode, bool> IsCandidateIdentificationCodeIncluded { get; set; }
        Func<ICandidateIdentificationDocument, bool> IsCandidateIdentificationDocumentIncluded { get; set; }
        Func<ICandidateIndicator, bool> IsCandidateIndicatorIncluded { get; set; }
        Func<ICandidateInternationalAddress, bool> IsCandidateInternationalAddressIncluded { get; set; }
        Func<ICandidateLanguage, bool> IsCandidateLanguageIncluded { get; set; }
        Func<ICandidateOtherName, bool> IsCandidateOtherNameIncluded { get; set; }
        Func<ICandidatePersonalIdentificationDocument, bool> IsCandidatePersonalIdentificationDocumentIncluded { get; set; }
        Func<ICandidateRace, bool> IsCandidateRaceIncluded { get; set; }
        Func<ICandidateTelephone, bool> IsCandidateTelephoneIncluded { get; set; }
        Func<ICandidateVisa, bool> IsCandidateVisaIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateAddressMapper
    {
        public static bool SynchronizeTo(this ICandidateAddress source, ICandidateAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCandidateAddressPeriodsSupported)
            {
                isModified |=
                    source.CandidateAddressPeriods.SynchronizeCollectionTo(
                        target.CandidateAddressPeriods,
                        onChildAdded: child =>
                            {
                                child.CandidateAddress = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateAddressPeriodIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICandidateAddress source, ICandidateAddress target, Action<ICandidateAddress, ICandidateAddress> onMapped)
        {
            var sourceSynchSupport = source as ICandidateAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCandidateAddressPeriodsSupported)
            {
                targetSynchSupport.IsCandidateAddressPeriodIncluded = sourceSynchSupport.IsCandidateAddressPeriodIncluded;
                source.CandidateAddressPeriods.MapCollectionTo(target.CandidateAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsCandidateAddressPeriodsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateAddressSynchronizationSourceSupport 
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCandidateAddressPeriodsSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        Func<ICandidateAddressPeriod, bool> IsCandidateAddressPeriodIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateAddressPeriodMapper
    {
        public static bool SynchronizeTo(this ICandidateAddressPeriod source, ICandidateAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateAddressPeriod source, ICandidateAddressPeriod target, Action<ICandidateAddressPeriod, ICandidateAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as ICandidateAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateAddressPeriodSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateAidMapper
    {
        public static bool SynchronizeTo(this ICandidateAid source, ICandidateAid target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateAidSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AidTypeDescriptor != target.AidTypeDescriptor)
            {
                source.AidTypeDescriptor = target.AidTypeDescriptor;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAidAmountSupported)
                && target.AidAmount != source.AidAmount)
            {
                target.AidAmount = source.AidAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidConditionDescriptionSupported)
                && target.AidConditionDescription != source.AidConditionDescription)
            {
                target.AidConditionDescription = source.AidConditionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPellGrantRecipientSupported)
                && target.PellGrantRecipient != source.PellGrantRecipient)
            {
                target.PellGrantRecipient = source.PellGrantRecipient;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateAid source, ICandidateAid target, Action<ICandidateAid, ICandidateAid> onMapped)
        {
            var sourceSynchSupport = source as ICandidateAidSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateAidSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AidTypeDescriptor = source.AidTypeDescriptor;
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAidAmountSupported)
                target.AidAmount = source.AidAmount;
            else
                targetSynchSupport.IsAidAmountSupported = false;

            if (sourceSynchSupport.IsAidConditionDescriptionSupported)
                target.AidConditionDescription = source.AidConditionDescription;
            else
                targetSynchSupport.IsAidConditionDescriptionSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsPellGrantRecipientSupported)
                target.PellGrantRecipient = source.PellGrantRecipient;
            else
                targetSynchSupport.IsPellGrantRecipientSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateAidSynchronizationSourceSupport 
    {
        bool IsAidAmountSupported { get; set; }
        bool IsAidConditionDescriptionSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsPellGrantRecipientSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateBackgroundCheckMapper
    {
        public static bool SynchronizeTo(this ICandidateBackgroundCheck source, ICandidateBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckTypeDescriptorSupported)
                && target.BackgroundCheckTypeDescriptor != source.BackgroundCheckTypeDescriptor)
            {
                target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateBackgroundCheck source, ICandidateBackgroundCheck target, Action<ICandidateBackgroundCheck, ICandidateBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as ICandidateBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckTypeDescriptorSupported)
                target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsBackgroundCheckTypeDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateCharacteristicMapper
    {
        public static bool SynchronizeTo(this ICandidateCharacteristic source, ICandidateCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CandidateCharacteristicDescriptor != target.CandidateCharacteristicDescriptor)
            {
                source.CandidateCharacteristicDescriptor = target.CandidateCharacteristicDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateCharacteristic source, ICandidateCharacteristic target, Action<ICandidateCharacteristic, ICandidateCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as ICandidateCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CandidateCharacteristicDescriptor = source.CandidateCharacteristicDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateCharacteristicSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateCohortYearMapper
    {
        public static bool SynchronizeTo(this ICandidateCohortYear source, ICandidateCohortYear target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateCohortYearSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CohortYearTypeDescriptor != target.CohortYearTypeDescriptor)
            {
                source.CohortYearTypeDescriptor = target.CohortYearTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateCohortYear source, ICandidateCohortYear target, Action<ICandidateCohortYear, ICandidateCohortYear> onMapped)
        {
            var sourceSynchSupport = source as ICandidateCohortYearSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateCohortYearSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CohortYearTypeDescriptor = source.CohortYearTypeDescriptor;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateCohortYearSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateDegreeSpecializationMapper
    {
        public static bool SynchronizeTo(this ICandidateDegreeSpecialization source, ICandidateDegreeSpecialization target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateDegreeSpecializationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.MajorSpecialization != target.MajorSpecialization)
            {
                source.MajorSpecialization = target.MajorSpecialization;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinorSpecializationSupported)
                && target.MinorSpecialization != source.MinorSpecialization)
            {
                target.MinorSpecialization = source.MinorSpecialization;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateDegreeSpecialization source, ICandidateDegreeSpecialization target, Action<ICandidateDegreeSpecialization, ICandidateDegreeSpecialization> onMapped)
        {
            var sourceSynchSupport = source as ICandidateDegreeSpecializationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateDegreeSpecializationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.MajorSpecialization = source.MajorSpecialization;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsMinorSpecializationSupported)
                target.MinorSpecialization = source.MinorSpecialization;
            else
                targetSynchSupport.IsMinorSpecializationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateDegreeSpecializationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsMinorSpecializationSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateDisabilityMapper
    {
        public static bool SynchronizeTo(this ICandidateDisability source, ICandidateDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCandidateDisabilityDesignationsSupported)
            {
                isModified |=
                    source.CandidateDisabilityDesignations.SynchronizeCollectionTo(
                        target.CandidateDisabilityDesignations,
                        onChildAdded: child =>
                            {
                                child.CandidateDisability = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICandidateDisability source, ICandidateDisability target, Action<ICandidateDisability, ICandidateDisability> onMapped)
        {
            var sourceSynchSupport = source as ICandidateDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCandidateDisabilityDesignationsSupported)
            {
                targetSynchSupport.IsCandidateDisabilityDesignationIncluded = sourceSynchSupport.IsCandidateDisabilityDesignationIncluded;
                source.CandidateDisabilityDesignations.MapCollectionTo(target.CandidateDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsCandidateDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateDisabilitySynchronizationSourceSupport 
    {
        bool IsCandidateDisabilityDesignationsSupported { get; set; }
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        Func<ICandidateDisabilityDesignation, bool> IsCandidateDisabilityDesignationIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateDisabilityDesignationMapper
    {
        public static bool SynchronizeTo(this ICandidateDisabilityDesignation source, ICandidateDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateDisabilityDesignation source, ICandidateDisabilityDesignation target, Action<ICandidateDisabilityDesignation, ICandidateDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as ICandidateDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateDisabilityDesignationSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateElectronicMailMapper
    {
        public static bool SynchronizeTo(this ICandidateElectronicMail source, ICandidateElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateElectronicMail source, ICandidateElectronicMail target, Action<ICandidateElectronicMail, ICandidateElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as ICandidateElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateElectronicMailSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateEPPProgramDegreeMapper
    {
        public static bool SynchronizeTo(this ICandidateEPPProgramDegree source, ICandidateEPPProgramDegree target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateEPPProgramDegreeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }
            if (source.EPPDegreeTypeDescriptor != target.EPPDegreeTypeDescriptor)
            {
                source.EPPDegreeTypeDescriptor = target.EPPDegreeTypeDescriptor;
            }
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateEPPProgramDegree source, ICandidateEPPProgramDegree target, Action<ICandidateEPPProgramDegree, ICandidateEPPProgramDegree> onMapped)
        {
            var sourceSynchSupport = source as ICandidateEPPProgramDegreeSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateEPPProgramDegreeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            target.EPPDegreeTypeDescriptor = source.EPPDegreeTypeDescriptor;
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateEPPProgramDegreeSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateIdentificationCodeMapper
    {
        public static bool SynchronizeTo(this ICandidateIdentificationCode source, ICandidateIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssigningOrganizationIdentificationCode != target.AssigningOrganizationIdentificationCode)
            {
                source.AssigningOrganizationIdentificationCode = target.AssigningOrganizationIdentificationCode;
            }
            if (source.IdentificationCode != target.IdentificationCode)
            {
                source.IdentificationCode = target.IdentificationCode;
            }
            if (source.StudentIdentificationSystemDescriptor != target.StudentIdentificationSystemDescriptor)
            {
                source.StudentIdentificationSystemDescriptor = target.StudentIdentificationSystemDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateIdentificationCode source, ICandidateIdentificationCode target, Action<ICandidateIdentificationCode, ICandidateIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as ICandidateIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            target.IdentificationCode = source.IdentificationCode;
            target.StudentIdentificationSystemDescriptor = source.StudentIdentificationSystemDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateIdentificationCodeSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateIdentificationDocumentMapper
    {
        public static bool SynchronizeTo(this ICandidateIdentificationDocument source, ICandidateIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateIdentificationDocument source, ICandidateIdentificationDocument target, Action<ICandidateIdentificationDocument, ICandidateIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as ICandidateIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateIndicatorMapper
    {
        public static bool SynchronizeTo(this ICandidateIndicator source, ICandidateIndicator target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateIndicatorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IndicatorName != target.IndicatorName)
            {
                source.IndicatorName = target.IndicatorName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorSupported)
                && target.Indicator != source.Indicator)
            {
                target.Indicator = source.Indicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorGroupSupported)
                && target.IndicatorGroup != source.IndicatorGroup)
            {
                target.IndicatorGroup = source.IndicatorGroup;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCandidateIndicatorPeriodsSupported)
            {
                isModified |=
                    source.CandidateIndicatorPeriods.SynchronizeCollectionTo(
                        target.CandidateIndicatorPeriods,
                        onChildAdded: child =>
                            {
                                child.CandidateIndicator = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateIndicatorPeriodIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICandidateIndicator source, ICandidateIndicator target, Action<ICandidateIndicator, ICandidateIndicator> onMapped)
        {
            var sourceSynchSupport = source as ICandidateIndicatorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateIndicatorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IndicatorName = source.IndicatorName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsIndicatorSupported)
                target.Indicator = source.Indicator;
            else
                targetSynchSupport.IsIndicatorSupported = false;

            if (sourceSynchSupport.IsIndicatorGroupSupported)
                target.IndicatorGroup = source.IndicatorGroup;
            else
                targetSynchSupport.IsIndicatorGroupSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCandidateIndicatorPeriodsSupported)
            {
                targetSynchSupport.IsCandidateIndicatorPeriodIncluded = sourceSynchSupport.IsCandidateIndicatorPeriodIncluded;
                source.CandidateIndicatorPeriods.MapCollectionTo(target.CandidateIndicatorPeriods, target);
            }
            else
            {
                targetSynchSupport.IsCandidateIndicatorPeriodsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateIndicatorSynchronizationSourceSupport 
    {
        bool IsCandidateIndicatorPeriodsSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsIndicatorSupported { get; set; }
        bool IsIndicatorGroupSupported { get; set; }
        Func<ICandidateIndicatorPeriod, bool> IsCandidateIndicatorPeriodIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateIndicatorPeriodMapper
    {
        public static bool SynchronizeTo(this ICandidateIndicatorPeriod source, ICandidateIndicatorPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateIndicatorPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateIndicatorPeriod source, ICandidateIndicatorPeriod target, Action<ICandidateIndicatorPeriod, ICandidateIndicatorPeriod> onMapped)
        {
            var sourceSynchSupport = source as ICandidateIndicatorPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateIndicatorPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateIndicatorPeriodSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateInternationalAddressMapper
    {
        public static bool SynchronizeTo(this ICandidateInternationalAddress source, ICandidateInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateInternationalAddress source, ICandidateInternationalAddress target, Action<ICandidateInternationalAddress, ICandidateInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as ICandidateInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateInternationalAddressSynchronizationSourceSupport 
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateLanguageMapper
    {
        public static bool SynchronizeTo(this ICandidateLanguage source, ICandidateLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCandidateLanguageUsesSupported)
            {
                isModified |=
                    source.CandidateLanguageUses.SynchronizeCollectionTo(
                        target.CandidateLanguageUses,
                        onChildAdded: child =>
                            {
                                child.CandidateLanguage = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCandidateLanguageUseIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICandidateLanguage source, ICandidateLanguage target, Action<ICandidateLanguage, ICandidateLanguage> onMapped)
        {
            var sourceSynchSupport = source as ICandidateLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCandidateLanguageUsesSupported)
            {
                targetSynchSupport.IsCandidateLanguageUseIncluded = sourceSynchSupport.IsCandidateLanguageUseIncluded;
                source.CandidateLanguageUses.MapCollectionTo(target.CandidateLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsCandidateLanguageUsesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateLanguageSynchronizationSourceSupport 
    {
        bool IsCandidateLanguageUsesSupported { get; set; }
        Func<ICandidateLanguageUse, bool> IsCandidateLanguageUseIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateLanguageUseMapper
    {
        public static bool SynchronizeTo(this ICandidateLanguageUse source, ICandidateLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateLanguageUse source, ICandidateLanguageUse target, Action<ICandidateLanguageUse, ICandidateLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as ICandidateLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateLanguageUseSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateOtherNameMapper
    {
        public static bool SynchronizeTo(this ICandidateOtherName source, ICandidateOtherName target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateOtherNameSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OtherNameTypeDescriptor != target.OtherNameTypeDescriptor)
            {
                source.OtherNameTypeDescriptor = target.OtherNameTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateOtherName source, ICandidateOtherName target, Action<ICandidateOtherName, ICandidateOtherName> onMapped)
        {
            var sourceSynchSupport = source as ICandidateOtherNameSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateOtherNameSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateOtherNameSynchronizationSourceSupport 
    {
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidatePersonalIdentificationDocumentMapper
    {
        public static bool SynchronizeTo(this ICandidatePersonalIdentificationDocument source, ICandidatePersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidatePersonalIdentificationDocument source, ICandidatePersonalIdentificationDocument target, Action<ICandidatePersonalIdentificationDocument, ICandidatePersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidatePersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateRaceMapper
    {
        public static bool SynchronizeTo(this ICandidateRace source, ICandidateRace target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateRace source, ICandidateRace target, Action<ICandidateRace, ICandidateRace> onMapped)
        {
            var sourceSynchSupport = source as ICandidateRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateRaceSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateTelephoneMapper
    {
        public static bool SynchronizeTo(this ICandidateTelephone source, ICandidateTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateTelephone source, ICandidateTelephone target, Action<ICandidateTelephone, ICandidateTelephone> onMapped)
        {
            var sourceSynchSupport = source as ICandidateTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateVisaMapper
    {
        public static bool SynchronizeTo(this ICandidateVisa source, ICandidateVisa target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateVisaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptor != target.VisaDescriptor)
            {
                source.VisaDescriptor = target.VisaDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateVisa source, ICandidateVisa target, Action<ICandidateVisa, ICandidateVisa> onMapped)
        {
            var sourceSynchSupport = source as ICandidateVisaSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateVisaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateVisaSynchronizationSourceSupport 
    {
    }

}
// Aggregate: CandidateCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CandidateCharacteristicDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CandidateCharacteristicDescriptorMapper
    {
        public static bool SynchronizeTo(this ICandidateCharacteristicDescriptor source, ICandidateCharacteristicDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateCharacteristicDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CandidateCharacteristicDescriptorId != target.CandidateCharacteristicDescriptorId)
            {
                source.CandidateCharacteristicDescriptorId = target.CandidateCharacteristicDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateCharacteristicDescriptor source, ICandidateCharacteristicDescriptor target, Action<ICandidateCharacteristicDescriptor, ICandidateCharacteristicDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICandidateCharacteristicDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateCharacteristicDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CandidateCharacteristicDescriptorId = source.CandidateCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateCharacteristicDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: CandidateEducatorPreparationProgramAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.CandidateEducatorPreparationProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CandidateEducatorPreparationProgramAssociationMapper
    {
        public static bool SynchronizeTo(this ICandidateEducatorPreparationProgramAssociation source, ICandidateEducatorPreparationProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.CandidateIdentifier != target.CandidateIdentifier)
            {
                source.CandidateIdentifier = target.CandidateIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEPPProgramPathwayDescriptorSupported)
                && target.EPPProgramPathwayDescriptor != source.EPPProgramPathwayDescriptor)
            {
                target.EPPProgramPathwayDescriptor = source.EPPProgramPathwayDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMajorSpecializationSupported)
                && target.MajorSpecialization != source.MajorSpecialization)
            {
                target.MajorSpecialization = source.MajorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinorSpecializationSupported)
                && target.MinorSpecialization != source.MinorSpecialization)
            {
                target.MinorSpecialization = source.MinorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // CandidateEducatorPreparationProgramAssociationCandidateIndicator
            if (sourceSupport == null || sourceSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported)
            {
                if (source.CandidateEducatorPreparationProgramAssociationCandidateIndicator == null)
                {
                    if (target.CandidateEducatorPreparationProgramAssociationCandidateIndicator != null)
                    {
                        target.CandidateEducatorPreparationProgramAssociationCandidateIndicator = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CandidateEducatorPreparationProgramAssociationCandidateIndicator == null)
                    {
                        var itemType = target.GetType().GetProperty("CandidateEducatorPreparationProgramAssociationCandidateIndicator").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CandidateEducatorPreparationProgramAssociationCandidateIndicator = (ICandidateEducatorPreparationProgramAssociationCandidateIndicator) newItem;
                    }

                    isModified |= source.CandidateEducatorPreparationProgramAssociationCandidateIndicator.Synchronize(target.CandidateEducatorPreparationProgramAssociationCandidateIndicator);
                }
            }

            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateEducatorPreparationProgramAssociation source, ICandidateEducatorPreparationProgramAssociation target, Action<ICandidateEducatorPreparationProgramAssociation, ICandidateEducatorPreparationProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.CandidateIdentifier = source.CandidateIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsEPPProgramPathwayDescriptorSupported)
                target.EPPProgramPathwayDescriptor = source.EPPProgramPathwayDescriptor;
            else
                targetSynchSupport.IsEPPProgramPathwayDescriptorSupported = false;

            if (sourceSynchSupport.IsMajorSpecializationSupported)
                target.MajorSpecialization = source.MajorSpecialization;
            else
                targetSynchSupport.IsMajorSpecializationSupported = false;

            if (sourceSynchSupport.IsMinorSpecializationSupported)
                target.MinorSpecialization = source.MinorSpecialization;
            else
                targetSynchSupport.IsMinorSpecializationSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CandidateResourceId = source.CandidateResourceId;
                target.CandidateDiscriminator = source.CandidateDiscriminator;
                target.EducatorPreparationProgramResourceId = source.EducatorPreparationProgramResourceId;
                target.EducatorPreparationProgramDiscriminator = source.EducatorPreparationProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // CandidateEducatorPreparationProgramAssociationCandidateIndicator (Source)
            if (sourceSynchSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported)
            {
                var itemProperty = target.GetType().GetProperty("CandidateEducatorPreparationProgramAssociationCandidateIndicator");

                if (itemProperty != null)
                {
                    if (source.CandidateEducatorPreparationProgramAssociationCandidateIndicator == null)
                    {
                        target.CandidateEducatorPreparationProgramAssociationCandidateIndicator = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCandidateEducatorPreparationProgramAssociationCandidateIndicator = Activator.CreateInstance(itemType);
                        (targetCandidateEducatorPreparationProgramAssociationCandidateIndicator as IChildEntity)?.SetParent(target);
                        source.CandidateEducatorPreparationProgramAssociationCandidateIndicator.Map(targetCandidateEducatorPreparationProgramAssociationCandidateIndicator);

                        // Update the target reference appropriately
                        target.CandidateEducatorPreparationProgramAssociationCandidateIndicator = (ICandidateEducatorPreparationProgramAssociationCandidateIndicator) targetCandidateEducatorPreparationProgramAssociationCandidateIndicator;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported = false;
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateEducatorPreparationProgramAssociationSynchronizationSourceSupport 
    {
        bool IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsEPPProgramPathwayDescriptorSupported { get; set; }
        bool IsMajorSpecializationSupported { get; set; }
        bool IsMinorSpecializationSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateEducatorPreparationProgramAssociationCandidateIndicatorMapper
    {
        public static bool SynchronizeTo(this ICandidateEducatorPreparationProgramAssociationCandidateIndicator source, ICandidateEducatorPreparationProgramAssociationCandidateIndicator target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorSupported)
                && target.Indicator != source.Indicator)
            {
                target.Indicator = source.Indicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorGroupSupported)
                && target.IndicatorGroup != source.IndicatorGroup)
            {
                target.IndicatorGroup = source.IndicatorGroup;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorNameSupported)
                && target.IndicatorName != source.IndicatorName)
            {
                target.IndicatorName = source.IndicatorName;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod
            if (sourceSupport == null || sourceSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported)
            {
                if (source.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod == null)
                {
                    if (target.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod != null)
                    {
                        target.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod == null)
                    {
                        var itemType = target.GetType().GetProperty("CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod = (ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod) newItem;
                    }

                    isModified |= source.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod.Synchronize(target.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod);
                }
            }

            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateEducatorPreparationProgramAssociationCandidateIndicator source, ICandidateEducatorPreparationProgramAssociationCandidateIndicator target, Action<ICandidateEducatorPreparationProgramAssociationCandidateIndicator, ICandidateEducatorPreparationProgramAssociationCandidateIndicator> onMapped)
        {
            var sourceSynchSupport = source as ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsIndicatorSupported)
                target.Indicator = source.Indicator;
            else
                targetSynchSupport.IsIndicatorSupported = false;

            if (sourceSynchSupport.IsIndicatorGroupSupported)
                target.IndicatorGroup = source.IndicatorGroup;
            else
                targetSynchSupport.IsIndicatorGroupSupported = false;

            if (sourceSynchSupport.IsIndicatorNameSupported)
                target.IndicatorName = source.IndicatorName;
            else
                targetSynchSupport.IsIndicatorNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod (Source)
            if (sourceSynchSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported)
            {
                var itemProperty = target.GetType().GetProperty("CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod");

                if (itemProperty != null)
                {
                    if (source.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod == null)
                    {
                        target.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod = Activator.CreateInstance(itemType);
                        (targetCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod as IChildEntity)?.SetParent(target);
                        source.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod.Map(targetCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod);

                        // Update the target reference appropriately
                        target.CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod = (ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod) targetCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported = false;
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateEducatorPreparationProgramAssociationCandidateIndicatorSynchronizationSourceSupport 
    {
        bool IsCandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsIndicatorSupported { get; set; }
        bool IsIndicatorGroupSupported { get; set; }
        bool IsIndicatorNameSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodMapper
    {
        public static bool SynchronizeTo(this ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod source, ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod source, ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod target, Action<ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod, ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriod> onMapped)
        {
            var sourceSynchSupport = source as ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateEducatorPreparationProgramAssociationCandidateIndicatorPeriodSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }

}
// Aggregate: CandidateRelationshipToStaffAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.CandidateRelationshipToStaffAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CandidateRelationshipToStaffAssociationMapper
    {
        public static bool SynchronizeTo(this ICandidateRelationshipToStaffAssociation source, ICandidateRelationshipToStaffAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CandidateIdentifier != target.CandidateIdentifier)
            {
                source.CandidateIdentifier = target.CandidateIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStaffToCandidateRelationshipDescriptorSupported)
                && target.StaffToCandidateRelationshipDescriptor != source.StaffToCandidateRelationshipDescriptor)
            {
                target.StaffToCandidateRelationshipDescriptor = source.StaffToCandidateRelationshipDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICandidateRelationshipToStaffAssociation source, ICandidateRelationshipToStaffAssociation target, Action<ICandidateRelationshipToStaffAssociation, ICandidateRelationshipToStaffAssociation> onMapped)
        {
            var sourceSynchSupport = source as ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CandidateIdentifier = source.CandidateIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsStaffToCandidateRelationshipDescriptorSupported)
                target.StaffToCandidateRelationshipDescriptor = source.StaffToCandidateRelationshipDescriptor;
            else
                targetSynchSupport.IsStaffToCandidateRelationshipDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CandidateResourceId = source.CandidateResourceId;
                target.CandidateDiscriminator = source.CandidateDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICandidateRelationshipToStaffAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsStaffToCandidateRelationshipDescriptorSupported { get; set; }
    }

}
// Aggregate: Certification

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationMapper
    {
        public static bool SynchronizeTo(this ICertification source, ICertification target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationIdentifier != target.CertificationIdentifier)
            {
                source.CertificationIdentifier = target.CertificationIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCertificationFieldDescriptorSupported)
                && target.CertificationFieldDescriptor != source.CertificationFieldDescriptor)
            {
                target.CertificationFieldDescriptor = source.CertificationFieldDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationLevelDescriptorSupported)
                && target.CertificationLevelDescriptor != source.CertificationLevelDescriptor)
            {
                target.CertificationLevelDescriptor = source.CertificationLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationStandardDescriptorSupported)
                && target.CertificationStandardDescriptor != source.CertificationStandardDescriptor)
            {
                target.CertificationStandardDescriptor = source.CertificationStandardDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationTitleSupported)
                && target.CertificationTitle != source.CertificationTitle)
            {
                target.CertificationTitle = source.CertificationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducatorRoleDescriptorSupported)
                && target.EducatorRoleDescriptor != source.EducatorRoleDescriptor)
            {
                target.EducatorRoleDescriptor = source.EducatorRoleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveDateSupported)
                && target.EffectiveDate != source.EffectiveDate)
            {
                target.EffectiveDate = source.EffectiveDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInstructionalSettingDescriptorSupported)
                && target.InstructionalSettingDescriptor != source.InstructionalSettingDescriptor)
            {
                target.InstructionalSettingDescriptor = source.InstructionalSettingDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumDegreeDescriptorSupported)
                && target.MinimumDegreeDescriptor != source.MinimumDegreeDescriptor)
            {
                target.MinimumDegreeDescriptor = source.MinimumDegreeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPopulationServedDescriptorSupported)
                && target.PopulationServedDescriptor != source.PopulationServedDescriptor)
            {
                target.PopulationServedDescriptor = source.PopulationServedDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCertificationCertificationExamsSupported)
            {
                isModified |=
                    source.CertificationCertificationExams.SynchronizeCollectionTo(
                        target.CertificationCertificationExams,
                        onChildAdded: child =>
                            {
                                child.Certification = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCertificationCertificationExamIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCertificationGradeLevelsSupported)
            {
                isModified |=
                    source.CertificationGradeLevels.SynchronizeCollectionTo(
                        target.CertificationGradeLevels,
                        onChildAdded: child =>
                            {
                                child.Certification = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCertificationGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCertificationRoutesSupported)
            {
                isModified |=
                    source.CertificationRoutes.SynchronizeCollectionTo(
                        target.CertificationRoutes,
                        onChildAdded: child =>
                            {
                                child.Certification = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCertificationRouteIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICertification source, ICertification target, Action<ICertification, ICertification> onMapped)
        {
            var sourceSynchSupport = source as ICertificationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationIdentifier = source.CertificationIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCertificationFieldDescriptorSupported)
                target.CertificationFieldDescriptor = source.CertificationFieldDescriptor;
            else
                targetSynchSupport.IsCertificationFieldDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationLevelDescriptorSupported)
                target.CertificationLevelDescriptor = source.CertificationLevelDescriptor;
            else
                targetSynchSupport.IsCertificationLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationStandardDescriptorSupported)
                target.CertificationStandardDescriptor = source.CertificationStandardDescriptor;
            else
                targetSynchSupport.IsCertificationStandardDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationTitleSupported)
                target.CertificationTitle = source.CertificationTitle;
            else
                targetSynchSupport.IsCertificationTitleSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEducatorRoleDescriptorSupported)
                target.EducatorRoleDescriptor = source.EducatorRoleDescriptor;
            else
                targetSynchSupport.IsEducatorRoleDescriptorSupported = false;

            if (sourceSynchSupport.IsEffectiveDateSupported)
                target.EffectiveDate = source.EffectiveDate;
            else
                targetSynchSupport.IsEffectiveDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsInstructionalSettingDescriptorSupported)
                target.InstructionalSettingDescriptor = source.InstructionalSettingDescriptor;
            else
                targetSynchSupport.IsInstructionalSettingDescriptorSupported = false;

            if (sourceSynchSupport.IsMinimumDegreeDescriptorSupported)
                target.MinimumDegreeDescriptor = source.MinimumDegreeDescriptor;
            else
                targetSynchSupport.IsMinimumDegreeDescriptorSupported = false;

            if (sourceSynchSupport.IsPopulationServedDescriptorSupported)
                target.PopulationServedDescriptor = source.PopulationServedDescriptor;
            else
                targetSynchSupport.IsPopulationServedDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCertificationCertificationExamsSupported)
            {
                targetSynchSupport.IsCertificationCertificationExamIncluded = sourceSynchSupport.IsCertificationCertificationExamIncluded;
                source.CertificationCertificationExams.MapCollectionTo(target.CertificationCertificationExams, target);
            }
            else
            {
                targetSynchSupport.IsCertificationCertificationExamsSupported = false;
            }

            if (sourceSynchSupport.IsCertificationGradeLevelsSupported)
            {
                targetSynchSupport.IsCertificationGradeLevelIncluded = sourceSynchSupport.IsCertificationGradeLevelIncluded;
                source.CertificationGradeLevels.MapCollectionTo(target.CertificationGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsCertificationGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsCertificationRoutesSupported)
            {
                targetSynchSupport.IsCertificationRouteIncluded = sourceSynchSupport.IsCertificationRouteIncluded;
                source.CertificationRoutes.MapCollectionTo(target.CertificationRoutes, target);
            }
            else
            {
                targetSynchSupport.IsCertificationRoutesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationSynchronizationSourceSupport 
    {
        bool IsCertificationCertificationExamsSupported { get; set; }
        bool IsCertificationFieldDescriptorSupported { get; set; }
        bool IsCertificationGradeLevelsSupported { get; set; }
        bool IsCertificationLevelDescriptorSupported { get; set; }
        bool IsCertificationRoutesSupported { get; set; }
        bool IsCertificationStandardDescriptorSupported { get; set; }
        bool IsCertificationTitleSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEducatorRoleDescriptorSupported { get; set; }
        bool IsEffectiveDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsInstructionalSettingDescriptorSupported { get; set; }
        bool IsMinimumDegreeDescriptorSupported { get; set; }
        bool IsPopulationServedDescriptorSupported { get; set; }
        Func<ICertificationCertificationExam, bool> IsCertificationCertificationExamIncluded { get; set; }
        Func<ICertificationGradeLevel, bool> IsCertificationGradeLevelIncluded { get; set; }
        Func<ICertificationRoute, bool> IsCertificationRouteIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CertificationCertificationExamMapper
    {
        public static bool SynchronizeTo(this ICertificationCertificationExam source, ICertificationCertificationExam target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationCertificationExamSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamIdentifier != target.CertificationExamIdentifier)
            {
                source.CertificationExamIdentifier = target.CertificationExamIdentifier;
            }
            if (source.CertificationExamNamespace != target.CertificationExamNamespace)
            {
                source.CertificationExamNamespace = target.CertificationExamNamespace;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationCertificationExam source, ICertificationCertificationExam target, Action<ICertificationCertificationExam, ICertificationCertificationExam> onMapped)
        {
            var sourceSynchSupport = source as ICertificationCertificationExamSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationCertificationExamSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CertificationExamIdentifier = source.CertificationExamIdentifier;
            target.CertificationExamNamespace = source.CertificationExamNamespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CertificationExamResourceId = source.CertificationExamResourceId;
                target.CertificationExamDiscriminator = source.CertificationExamDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationCertificationExamSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class CertificationGradeLevelMapper
    {
        public static bool SynchronizeTo(this ICertificationGradeLevel source, ICertificationGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationGradeLevel source, ICertificationGradeLevel target, Action<ICertificationGradeLevel, ICertificationGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ICertificationGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationGradeLevelSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class CertificationRouteMapper
    {
        public static bool SynchronizeTo(this ICertificationRoute source, ICertificationRoute target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationRouteSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationRouteDescriptor != target.CertificationRouteDescriptor)
            {
                source.CertificationRouteDescriptor = target.CertificationRouteDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationRoute source, ICertificationRoute target, Action<ICertificationRoute, ICertificationRoute> onMapped)
        {
            var sourceSynchSupport = source as ICertificationRouteSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationRouteSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationRouteSynchronizationSourceSupport 
    {
    }

}
// Aggregate: CertificationExam

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationExamMapper
    {
        public static bool SynchronizeTo(this ICertificationExam source, ICertificationExam target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamIdentifier != target.CertificationExamIdentifier)
            {
                source.CertificationExamIdentifier = target.CertificationExamIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCertificationExamTitleSupported)
                && target.CertificationExamTitle != source.CertificationExamTitle)
            {
                target.CertificationExamTitle = source.CertificationExamTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamTypeDescriptorSupported)
                && target.CertificationExamTypeDescriptor != source.CertificationExamTypeDescriptor)
            {
                target.CertificationExamTypeDescriptor = source.CertificationExamTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveDateSupported)
                && target.EffectiveDate != source.EffectiveDate)
            {
                target.EffectiveDate = source.EffectiveDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExam source, ICertificationExam target, Action<ICertificationExam, ICertificationExam> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamIdentifier = source.CertificationExamIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCertificationExamTitleSupported)
                target.CertificationExamTitle = source.CertificationExamTitle;
            else
                targetSynchSupport.IsCertificationExamTitleSupported = false;

            if (sourceSynchSupport.IsCertificationExamTypeDescriptorSupported)
                target.CertificationExamTypeDescriptor = source.CertificationExamTypeDescriptor;
            else
                targetSynchSupport.IsCertificationExamTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEffectiveDateSupported)
                target.EffectiveDate = source.EffectiveDate;
            else
                targetSynchSupport.IsEffectiveDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamSynchronizationSourceSupport 
    {
        bool IsCertificationExamTitleSupported { get; set; }
        bool IsCertificationExamTypeDescriptorSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEffectiveDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }

}
// Aggregate: CertificationExamResult

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamResultAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationExamResultMapper
    {
        public static bool SynchronizeTo(this ICertificationExamResult source, ICertificationExamResult target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamDate != target.CertificationExamDate)
            {
                source.CertificationExamDate = target.CertificationExamDate;
            }
            if (source.CertificationExamIdentifier != target.CertificationExamIdentifier)
            {
                source.CertificationExamIdentifier = target.CertificationExamIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttemptNumberSupported)
                && target.AttemptNumber != source.AttemptNumber)
            {
                target.AttemptNumber = source.AttemptNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamPassIndicatorSupported)
                && target.CertificationExamPassIndicator != source.CertificationExamPassIndicator)
            {
                target.CertificationExamPassIndicator = source.CertificationExamPassIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamScoreSupported)
                && target.CertificationExamScore != source.CertificationExamScore)
            {
                target.CertificationExamScore = source.CertificationExamScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamStatusDescriptorSupported)
                && target.CertificationExamStatusDescriptor != source.CertificationExamStatusDescriptor)
            {
                target.CertificationExamStatusDescriptor = source.CertificationExamStatusDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExamResult source, ICertificationExamResult target, Action<ICertificationExamResult, ICertificationExamResult> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamResultSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamResultSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamDate = source.CertificationExamDate;
            target.CertificationExamIdentifier = source.CertificationExamIdentifier;
            target.Namespace = source.Namespace;
            target.PersonId = source.PersonId;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttemptNumberSupported)
                target.AttemptNumber = source.AttemptNumber;
            else
                targetSynchSupport.IsAttemptNumberSupported = false;

            if (sourceSynchSupport.IsCertificationExamPassIndicatorSupported)
                target.CertificationExamPassIndicator = source.CertificationExamPassIndicator;
            else
                targetSynchSupport.IsCertificationExamPassIndicatorSupported = false;

            if (sourceSynchSupport.IsCertificationExamScoreSupported)
                target.CertificationExamScore = source.CertificationExamScore;
            else
                targetSynchSupport.IsCertificationExamScoreSupported = false;

            if (sourceSynchSupport.IsCertificationExamStatusDescriptorSupported)
                target.CertificationExamStatusDescriptor = source.CertificationExamStatusDescriptor;
            else
                targetSynchSupport.IsCertificationExamStatusDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CertificationExamResourceId = source.CertificationExamResourceId;
                target.CertificationExamDiscriminator = source.CertificationExamDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamResultSynchronizationSourceSupport 
    {
        bool IsAttemptNumberSupported { get; set; }
        bool IsCertificationExamPassIndicatorSupported { get; set; }
        bool IsCertificationExamScoreSupported { get; set; }
        bool IsCertificationExamStatusDescriptorSupported { get; set; }
    }

}
// Aggregate: CertificationExamStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationExamStatusDescriptorMapper
    {
        public static bool SynchronizeTo(this ICertificationExamStatusDescriptor source, ICertificationExamStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamStatusDescriptorId != target.CertificationExamStatusDescriptorId)
            {
                source.CertificationExamStatusDescriptorId = target.CertificationExamStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExamStatusDescriptor source, ICertificationExamStatusDescriptor target, Action<ICertificationExamStatusDescriptor, ICertificationExamStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamStatusDescriptorId = source.CertificationExamStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: CertificationExamTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationExamTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this ICertificationExamTypeDescriptor source, ICertificationExamTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamTypeDescriptorId != target.CertificationExamTypeDescriptorId)
            {
                source.CertificationExamTypeDescriptorId = target.CertificationExamTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExamTypeDescriptor source, ICertificationExamTypeDescriptor target, Action<ICertificationExamTypeDescriptor, ICertificationExamTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamTypeDescriptorId = source.CertificationExamTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: CertificationFieldDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationFieldDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationFieldDescriptorMapper
    {
        public static bool SynchronizeTo(this ICertificationFieldDescriptor source, ICertificationFieldDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationFieldDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationFieldDescriptorId != target.CertificationFieldDescriptorId)
            {
                source.CertificationFieldDescriptorId = target.CertificationFieldDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationFieldDescriptor source, ICertificationFieldDescriptor target, Action<ICertificationFieldDescriptor, ICertificationFieldDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationFieldDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationFieldDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationFieldDescriptorId = source.CertificationFieldDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationFieldDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: CertificationLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationLevelDescriptorMapper
    {
        public static bool SynchronizeTo(this ICertificationLevelDescriptor source, ICertificationLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationLevelDescriptorId != target.CertificationLevelDescriptorId)
            {
                source.CertificationLevelDescriptorId = target.CertificationLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationLevelDescriptor source, ICertificationLevelDescriptor target, Action<ICertificationLevelDescriptor, ICertificationLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationLevelDescriptorId = source.CertificationLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: CertificationRouteDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationRouteDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationRouteDescriptorMapper
    {
        public static bool SynchronizeTo(this ICertificationRouteDescriptor source, ICertificationRouteDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationRouteDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationRouteDescriptorId != target.CertificationRouteDescriptorId)
            {
                source.CertificationRouteDescriptorId = target.CertificationRouteDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationRouteDescriptor source, ICertificationRouteDescriptor target, Action<ICertificationRouteDescriptor, ICertificationRouteDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationRouteDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationRouteDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationRouteDescriptorId = source.CertificationRouteDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationRouteDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: CertificationStandardDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationStandardDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CertificationStandardDescriptorMapper
    {
        public static bool SynchronizeTo(this ICertificationStandardDescriptor source, ICertificationStandardDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationStandardDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationStandardDescriptorId != target.CertificationStandardDescriptorId)
            {
                source.CertificationStandardDescriptorId = target.CertificationStandardDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationStandardDescriptor source, ICertificationStandardDescriptor target, Action<ICertificationStandardDescriptor, ICertificationStandardDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationStandardDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationStandardDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationStandardDescriptorId = source.CertificationStandardDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationStandardDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: CoteachingStyleObservedDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CoteachingStyleObservedDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CoteachingStyleObservedDescriptorMapper
    {
        public static bool SynchronizeTo(this ICoteachingStyleObservedDescriptor source, ICoteachingStyleObservedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CoteachingStyleObservedDescriptorId != target.CoteachingStyleObservedDescriptorId)
            {
                source.CoteachingStyleObservedDescriptorId = target.CoteachingStyleObservedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICoteachingStyleObservedDescriptor source, ICoteachingStyleObservedDescriptor target, Action<ICoteachingStyleObservedDescriptor, ICoteachingStyleObservedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CoteachingStyleObservedDescriptorId = source.CoteachingStyleObservedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICoteachingStyleObservedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: Credential

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CredentialExtensionMapper
    {
        public static bool SynchronizeTo(this ICredentialExtension source, ICredentialExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Credential as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBoardCertificationIndicatorSupported)
                && target.BoardCertificationIndicator != source.BoardCertificationIndicator)
            {
                target.BoardCertificationIndicator = source.BoardCertificationIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationIdentifierSupported)
                && target.CertificationIdentifier != source.CertificationIdentifier)
            {
                target.CertificationIdentifier = source.CertificationIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationRouteDescriptorSupported)
                && target.CertificationRouteDescriptor != source.CertificationRouteDescriptor)
            {
                target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationTitleSupported)
                && target.CertificationTitle != source.CertificationTitle)
            {
                target.CertificationTitle = source.CertificationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCredentialStatusDateSupported)
                && target.CredentialStatusDate != source.CredentialStatusDate)
            {
                target.CredentialStatusDate = source.CredentialStatusDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCredentialStatusDescriptorSupported)
                && target.CredentialStatusDescriptor != source.CredentialStatusDescriptor)
            {
                target.CredentialStatusDescriptor = source.CredentialStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonIdSupported)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSourceSystemDescriptorSupported)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCredentialStudentAcademicRecordsSupported)
            {
                isModified |=
                    source.CredentialStudentAcademicRecords.SynchronizeCollectionTo(
                        target.CredentialStudentAcademicRecords,
                        onChildAdded: child =>
                            {
                                child.CredentialExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Credential);
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsCredentialStudentAcademicRecordIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICredentialExtension source, ICredentialExtension target, Action<ICredentialExtension, ICredentialExtension> onMapped)
        {
            var sourceSynchSupport = source as ICredentialExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBoardCertificationIndicatorSupported)
                target.BoardCertificationIndicator = source.BoardCertificationIndicator;
            else
                targetSynchSupport.IsBoardCertificationIndicatorSupported = false;

            if (sourceSynchSupport.IsCertificationIdentifierSupported)
                target.CertificationIdentifier = source.CertificationIdentifier;
            else
                targetSynchSupport.IsCertificationIdentifierSupported = false;

            if (sourceSynchSupport.IsCertificationRouteDescriptorSupported)
                target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;
            else
                targetSynchSupport.IsCertificationRouteDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationTitleSupported)
                target.CertificationTitle = source.CertificationTitle;
            else
                targetSynchSupport.IsCertificationTitleSupported = false;

            if (sourceSynchSupport.IsCredentialStatusDateSupported)
                target.CredentialStatusDate = source.CredentialStatusDate;
            else
                targetSynchSupport.IsCredentialStatusDateSupported = false;

            if (sourceSynchSupport.IsCredentialStatusDescriptorSupported)
                target.CredentialStatusDescriptor = source.CredentialStatusDescriptor;
            else
                targetSynchSupport.IsCredentialStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPersonIdSupported)
                target.PersonId = source.PersonId;
            else
                targetSynchSupport.IsPersonIdSupported = false;

            if (sourceSynchSupport.IsSourceSystemDescriptorSupported)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            else
                targetSynchSupport.IsSourceSystemDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CertificationResourceId = source.CertificationResourceId;
                target.CertificationDiscriminator = source.CertificationDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCredentialStudentAcademicRecordsSupported)
            {
                targetSynchSupport.IsCredentialStudentAcademicRecordIncluded = sourceSynchSupport.IsCredentialStudentAcademicRecordIncluded;
                source.CredentialStudentAcademicRecords.MapCollectionTo(target.CredentialStudentAcademicRecords, target.Credential);
            }
            else
            {
                targetSynchSupport.IsCredentialStudentAcademicRecordsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialExtensionSynchronizationSourceSupport 
    {
        bool IsBoardCertificationIndicatorSupported { get; set; }
        bool IsCertificationIdentifierSupported { get; set; }
        bool IsCertificationRouteDescriptorSupported { get; set; }
        bool IsCertificationTitleSupported { get; set; }
        bool IsCredentialStatusDateSupported { get; set; }
        bool IsCredentialStatusDescriptorSupported { get; set; }
        bool IsCredentialStudentAcademicRecordsSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPersonIdSupported { get; set; }
        bool IsSourceSystemDescriptorSupported { get; set; }
        Func<ICredentialStudentAcademicRecord, bool> IsCredentialStudentAcademicRecordIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class CredentialStudentAcademicRecordMapper
    {
        public static bool SynchronizeTo(this ICredentialStudentAcademicRecord source, ICredentialStudentAcademicRecord target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialStudentAcademicRecordSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialStudentAcademicRecord source, ICredentialStudentAcademicRecord target, Action<ICredentialStudentAcademicRecord, ICredentialStudentAcademicRecord> onMapped)
        {
            var sourceSynchSupport = source as ICredentialStudentAcademicRecordSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialStudentAcademicRecordSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.StudentUniqueId = source.StudentUniqueId;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentAcademicRecordResourceId = source.StudentAcademicRecordResourceId;
                target.StudentAcademicRecordDiscriminator = source.StudentAcademicRecordDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialStudentAcademicRecordSynchronizationSourceSupport 
    {
    }

}
// Aggregate: CredentialEvent

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CredentialEventMapper
    {
        public static bool SynchronizeTo(this ICredentialEvent source, ICredentialEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialEventDate != target.CredentialEventDate)
            {
                source.CredentialEventDate = target.CredentialEventDate;
            }
            if (source.CredentialEventTypeDescriptor != target.CredentialEventTypeDescriptor)
            {
                source.CredentialEventTypeDescriptor = target.CredentialEventTypeDescriptor;
            }
            if (source.CredentialIdentifier != target.CredentialIdentifier)
            {
                source.CredentialIdentifier = target.CredentialIdentifier;
            }
            if (source.StateOfIssueStateAbbreviationDescriptor != target.StateOfIssueStateAbbreviationDescriptor)
            {
                source.StateOfIssueStateAbbreviationDescriptor = target.StateOfIssueStateAbbreviationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCredentialEventReasonSupported)
                && target.CredentialEventReason != source.CredentialEventReason)
            {
                target.CredentialEventReason = source.CredentialEventReason;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialEvent source, ICredentialEvent target, Action<ICredentialEvent, ICredentialEvent> onMapped)
        {
            var sourceSynchSupport = source as ICredentialEventSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialEventDate = source.CredentialEventDate;
            target.CredentialEventTypeDescriptor = source.CredentialEventTypeDescriptor;
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCredentialEventReasonSupported)
                target.CredentialEventReason = source.CredentialEventReason;
            else
                targetSynchSupport.IsCredentialEventReasonSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialEventSynchronizationSourceSupport 
    {
        bool IsCredentialEventReasonSupported { get; set; }
    }

}
// Aggregate: CredentialEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialEventTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CredentialEventTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this ICredentialEventTypeDescriptor source, ICredentialEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialEventTypeDescriptorId != target.CredentialEventTypeDescriptorId)
            {
                source.CredentialEventTypeDescriptorId = target.CredentialEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialEventTypeDescriptor source, ICredentialEventTypeDescriptor target, Action<ICredentialEventTypeDescriptor, ICredentialEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICredentialEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialEventTypeDescriptorId = source.CredentialEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: CredentialStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class CredentialStatusDescriptorMapper
    {
        public static bool SynchronizeTo(this ICredentialStatusDescriptor source, ICredentialStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialStatusDescriptorId != target.CredentialStatusDescriptorId)
            {
                source.CredentialStatusDescriptorId = target.CredentialStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialStatusDescriptor source, ICredentialStatusDescriptor target, Action<ICredentialStatusDescriptor, ICredentialStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICredentialStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialStatusDescriptorId = source.CredentialStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: DegreeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.DegreeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class DegreeDescriptorMapper
    {
        public static bool SynchronizeTo(this IDegreeDescriptor source, IDegreeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDegreeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DegreeDescriptorId != target.DegreeDescriptorId)
            {
                source.DegreeDescriptorId = target.DegreeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDegreeDescriptor source, IDegreeDescriptor target, Action<IDegreeDescriptor, IDegreeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDegreeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDegreeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DegreeDescriptorId = source.DegreeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDegreeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: EducatorPreparationProgram

namespace EdFi.Ods.Entities.Common.TPDM //.EducatorPreparationProgramAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducatorPreparationProgramMapper
    {
        public static bool SynchronizeTo(this IEducatorPreparationProgram source, IEducatorPreparationProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducatorPreparationProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAccreditationStatusDescriptorSupported)
                && target.AccreditationStatusDescriptor != source.AccreditationStatusDescriptor)
            {
                target.AccreditationStatusDescriptor = source.AccreditationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducatorPreparationProgramTypeDescriptorSupported)
                && target.EducatorPreparationProgramTypeDescriptor != source.EducatorPreparationProgramTypeDescriptor)
            {
                target.EducatorPreparationProgramTypeDescriptor = source.EducatorPreparationProgramTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramIdSupported)
                && target.ProgramId != source.ProgramId)
            {
                target.ProgramId = source.ProgramId;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEducatorPreparationProgramGradeLevelsSupported)
            {
                isModified |=
                    source.EducatorPreparationProgramGradeLevels.SynchronizeCollectionTo(
                        target.EducatorPreparationProgramGradeLevels,
                        onChildAdded: child =>
                            {
                                child.EducatorPreparationProgram = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsEducatorPreparationProgramGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEducatorPreparationProgram source, IEducatorPreparationProgram target, Action<IEducatorPreparationProgram, IEducatorPreparationProgram> onMapped)
        {
            var sourceSynchSupport = source as IEducatorPreparationProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducatorPreparationProgramSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAccreditationStatusDescriptorSupported)
                target.AccreditationStatusDescriptor = source.AccreditationStatusDescriptor;
            else
                targetSynchSupport.IsAccreditationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsEducatorPreparationProgramTypeDescriptorSupported)
                target.EducatorPreparationProgramTypeDescriptor = source.EducatorPreparationProgramTypeDescriptor;
            else
                targetSynchSupport.IsEducatorPreparationProgramTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsProgramIdSupported)
                target.ProgramId = source.ProgramId;
            else
                targetSynchSupport.IsProgramIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEducatorPreparationProgramGradeLevelsSupported)
            {
                targetSynchSupport.IsEducatorPreparationProgramGradeLevelIncluded = sourceSynchSupport.IsEducatorPreparationProgramGradeLevelIncluded;
                source.EducatorPreparationProgramGradeLevels.MapCollectionTo(target.EducatorPreparationProgramGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsEducatorPreparationProgramGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducatorPreparationProgramSynchronizationSourceSupport 
    {
        bool IsAccreditationStatusDescriptorSupported { get; set; }
        bool IsEducatorPreparationProgramGradeLevelsSupported { get; set; }
        bool IsEducatorPreparationProgramTypeDescriptorSupported { get; set; }
        bool IsProgramIdSupported { get; set; }
        Func<IEducatorPreparationProgramGradeLevel, bool> IsEducatorPreparationProgramGradeLevelIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EducatorPreparationProgramGradeLevelMapper
    {
        public static bool SynchronizeTo(this IEducatorPreparationProgramGradeLevel source, IEducatorPreparationProgramGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducatorPreparationProgramGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducatorPreparationProgramGradeLevel source, IEducatorPreparationProgramGradeLevel target, Action<IEducatorPreparationProgramGradeLevel, IEducatorPreparationProgramGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IEducatorPreparationProgramGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducatorPreparationProgramGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducatorPreparationProgramGradeLevelSynchronizationSourceSupport 
    {
    }

}
// Aggregate: EducatorPreparationProgramTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EducatorPreparationProgramTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducatorPreparationProgramTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IEducatorPreparationProgramTypeDescriptor source, IEducatorPreparationProgramTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducatorPreparationProgramTypeDescriptorId != target.EducatorPreparationProgramTypeDescriptorId)
            {
                source.EducatorPreparationProgramTypeDescriptorId = target.EducatorPreparationProgramTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducatorPreparationProgramTypeDescriptor source, IEducatorPreparationProgramTypeDescriptor target, Action<IEducatorPreparationProgramTypeDescriptor, IEducatorPreparationProgramTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducatorPreparationProgramTypeDescriptorId = source.EducatorPreparationProgramTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducatorPreparationProgramTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: EducatorRoleDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EducatorRoleDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EducatorRoleDescriptorMapper
    {
        public static bool SynchronizeTo(this IEducatorRoleDescriptor source, IEducatorRoleDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducatorRoleDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducatorRoleDescriptorId != target.EducatorRoleDescriptorId)
            {
                source.EducatorRoleDescriptorId = target.EducatorRoleDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducatorRoleDescriptor source, IEducatorRoleDescriptor target, Action<IEducatorRoleDescriptor, IEducatorRoleDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEducatorRoleDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducatorRoleDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducatorRoleDescriptorId = source.EducatorRoleDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducatorRoleDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: EnglishLanguageExamDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EnglishLanguageExamDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EnglishLanguageExamDescriptorMapper
    {
        public static bool SynchronizeTo(this IEnglishLanguageExamDescriptor source, IEnglishLanguageExamDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EnglishLanguageExamDescriptorId != target.EnglishLanguageExamDescriptorId)
            {
                source.EnglishLanguageExamDescriptorId = target.EnglishLanguageExamDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEnglishLanguageExamDescriptor source, IEnglishLanguageExamDescriptor target, Action<IEnglishLanguageExamDescriptor, IEnglishLanguageExamDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EnglishLanguageExamDescriptorId = source.EnglishLanguageExamDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEnglishLanguageExamDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: EPPDegreeTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EPPDegreeTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EPPDegreeTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IEPPDegreeTypeDescriptor source, IEPPDegreeTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEPPDegreeTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EPPDegreeTypeDescriptorId != target.EPPDegreeTypeDescriptorId)
            {
                source.EPPDegreeTypeDescriptorId = target.EPPDegreeTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEPPDegreeTypeDescriptor source, IEPPDegreeTypeDescriptor target, Action<IEPPDegreeTypeDescriptor, IEPPDegreeTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEPPDegreeTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEPPDegreeTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EPPDegreeTypeDescriptorId = source.EPPDegreeTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEPPDegreeTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: EPPProgramPathwayDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EPPProgramPathwayDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EPPProgramPathwayDescriptorMapper
    {
        public static bool SynchronizeTo(this IEPPProgramPathwayDescriptor source, IEPPProgramPathwayDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEPPProgramPathwayDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EPPProgramPathwayDescriptorId != target.EPPProgramPathwayDescriptorId)
            {
                source.EPPProgramPathwayDescriptorId = target.EPPProgramPathwayDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEPPProgramPathwayDescriptor source, IEPPProgramPathwayDescriptor target, Action<IEPPProgramPathwayDescriptor, IEPPProgramPathwayDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEPPProgramPathwayDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEPPProgramPathwayDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EPPProgramPathwayDescriptorId = source.EPPProgramPathwayDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEPPProgramPathwayDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: Evaluation

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationMapper
    {
        public static bool SynchronizeTo(this IEvaluation source, IEvaluation target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluationTypeDescriptorSupported)
                && target.EvaluationTypeDescriptor != source.EvaluationTypeDescriptor)
            {
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterRaterReliabilityScoreSupported)
                && target.InterRaterReliabilityScore != source.InterRaterReliabilityScore)
            {
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationRatingLevelsSupported)
            {
                isModified |=
                    source.EvaluationRatingLevels.SynchronizeCollectionTo(
                        target.EvaluationRatingLevels,
                        onChildAdded: child =>
                            {
                                child.Evaluation = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsEvaluationRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluation source, IEvaluation target, Action<IEvaluation, IEvaluation> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluationTypeDescriptorSupported)
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
            else
                targetSynchSupport.IsEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsInterRaterReliabilityScoreSupported)
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
            else
                targetSynchSupport.IsInterRaterReliabilityScoreSupported = false;

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PerformanceEvaluationResourceId = source.PerformanceEvaluationResourceId;
                target.PerformanceEvaluationDiscriminator = source.PerformanceEvaluationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationRatingLevelsSupported)
            {
                targetSynchSupport.IsEvaluationRatingLevelIncluded = sourceSynchSupport.IsEvaluationRatingLevelIncluded;
                source.EvaluationRatingLevels.MapCollectionTo(target.EvaluationRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationSynchronizationSourceSupport 
    {
        bool IsEvaluationRatingLevelsSupported { get; set; }
        bool IsEvaluationTypeDescriptorSupported { get; set; }
        bool IsInterRaterReliabilityScoreSupported { get; set; }
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        Func<IEvaluationRatingLevel, bool> IsEvaluationRatingLevelIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingLevelMapper
    {
        public static bool SynchronizeTo(this IEvaluationRatingLevel source, IEvaluationRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptor != target.EvaluationRatingLevelDescriptor)
            {
                source.EvaluationRatingLevelDescriptor = target.EvaluationRatingLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingLevel source, IEvaluationRatingLevel target, Action<IEvaluationRatingLevel, IEvaluationRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
    }

}
// Aggregate: EvaluationElement

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationElementAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationElementMapper
    {
        public static bool SynchronizeTo(this IEvaluationElement source, IEvaluationElement target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluationTypeDescriptorSupported)
                && target.EvaluationTypeDescriptor != source.EvaluationTypeDescriptor)
            {
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSortOrderSupported)
                && target.SortOrder != source.SortOrder)
            {
                target.SortOrder = source.SortOrder;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationElementRatingLevelsSupported)
            {
                isModified |=
                    source.EvaluationElementRatingLevels.SynchronizeCollectionTo(
                        target.EvaluationElementRatingLevels,
                        onChildAdded: child =>
                            {
                                child.EvaluationElement = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsEvaluationElementRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationElement source, IEvaluationElement target, Action<IEvaluationElement, IEvaluationElement> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluationTypeDescriptorSupported)
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
            else
                targetSynchSupport.IsEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            if (sourceSynchSupport.IsSortOrderSupported)
                target.SortOrder = source.SortOrder;
            else
                targetSynchSupport.IsSortOrderSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationObjectiveResourceId = source.EvaluationObjectiveResourceId;
                target.EvaluationObjectiveDiscriminator = source.EvaluationObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationElementRatingLevelsSupported)
            {
                targetSynchSupport.IsEvaluationElementRatingLevelIncluded = sourceSynchSupport.IsEvaluationElementRatingLevelIncluded;
                source.EvaluationElementRatingLevels.MapCollectionTo(target.EvaluationElementRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationElementRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementSynchronizationSourceSupport 
    {
        bool IsEvaluationElementRatingLevelsSupported { get; set; }
        bool IsEvaluationTypeDescriptorSupported { get; set; }
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        bool IsSortOrderSupported { get; set; }
        Func<IEvaluationElementRatingLevel, bool> IsEvaluationElementRatingLevelIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EvaluationElementRatingLevelMapper
    {
        public static bool SynchronizeTo(this IEvaluationElementRatingLevel source, IEvaluationElementRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptor != target.EvaluationRatingLevelDescriptor)
            {
                source.EvaluationRatingLevelDescriptor = target.EvaluationRatingLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationElementRatingLevel source, IEvaluationElementRatingLevel target, Action<IEvaluationElementRatingLevel, IEvaluationElementRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
    }

}
// Aggregate: EvaluationElementRating

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationElementRatingAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationElementRatingMapper
    {
        public static bool SynchronizeTo(this IEvaluationElementRating source, IEvaluationElementRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAreaOfRefinementSupported)
                && target.AreaOfRefinement != source.AreaOfRefinement)
            {
                target.AreaOfRefinement = source.AreaOfRefinement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAreaOfReinforcementSupported)
                && target.AreaOfReinforcement != source.AreaOfReinforcement)
            {
                target.AreaOfReinforcement = source.AreaOfReinforcement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationElementRatingLevelDescriptorSupported)
                && target.EvaluationElementRatingLevelDescriptor != source.EvaluationElementRatingLevelDescriptor)
            {
                target.EvaluationElementRatingLevelDescriptor = source.EvaluationElementRatingLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFeedbackSupported)
                && target.Feedback != source.Feedback)
            {
                target.Feedback = source.Feedback;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationElementRatingResultsSupported)
            {
                isModified |=
                    source.EvaluationElementRatingResults.SynchronizeCollectionTo(
                        target.EvaluationElementRatingResults,
                        onChildAdded: child =>
                            {
                                child.EvaluationElementRating = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsEvaluationElementRatingResultIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationElementRating source, IEvaluationElementRating target, Action<IEvaluationElementRating, IEvaluationElementRating> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAreaOfRefinementSupported)
                target.AreaOfRefinement = source.AreaOfRefinement;
            else
                targetSynchSupport.IsAreaOfRefinementSupported = false;

            if (sourceSynchSupport.IsAreaOfReinforcementSupported)
                target.AreaOfReinforcement = source.AreaOfReinforcement;
            else
                targetSynchSupport.IsAreaOfReinforcementSupported = false;

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsEvaluationElementRatingLevelDescriptorSupported)
                target.EvaluationElementRatingLevelDescriptor = source.EvaluationElementRatingLevelDescriptor;
            else
                targetSynchSupport.IsEvaluationElementRatingLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsFeedbackSupported)
                target.Feedback = source.Feedback;
            else
                targetSynchSupport.IsFeedbackSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
                target.EvaluationObjectiveRatingResourceId = source.EvaluationObjectiveRatingResourceId;
                target.EvaluationObjectiveRatingDiscriminator = source.EvaluationObjectiveRatingDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationElementRatingResultsSupported)
            {
                targetSynchSupport.IsEvaluationElementRatingResultIncluded = sourceSynchSupport.IsEvaluationElementRatingResultIncluded;
                source.EvaluationElementRatingResults.MapCollectionTo(target.EvaluationElementRatingResults, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationElementRatingResultsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementRatingSynchronizationSourceSupport 
    {
        bool IsAreaOfRefinementSupported { get; set; }
        bool IsAreaOfReinforcementSupported { get; set; }
        bool IsCommentsSupported { get; set; }
        bool IsEvaluationElementRatingLevelDescriptorSupported { get; set; }
        bool IsEvaluationElementRatingResultsSupported { get; set; }
        bool IsFeedbackSupported { get; set; }
        Func<IEvaluationElementRatingResult, bool> IsEvaluationElementRatingResultIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EvaluationElementRatingResultMapper
    {
        public static bool SynchronizeTo(this IEvaluationElementRatingResult source, IEvaluationElementRatingResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementRatingResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Rating != target.Rating)
            {
                source.Rating = target.Rating;
            }
            if (source.RatingResultTitle != target.RatingResultTitle)
            {
                source.RatingResultTitle = target.RatingResultTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationElementRatingResult source, IEvaluationElementRatingResult target, Action<IEvaluationElementRatingResult, IEvaluationElementRatingResult> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementRatingResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementRatingResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Rating = source.Rating;
            target.RatingResultTitle = source.RatingResultTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementRatingResultSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }

}
// Aggregate: EvaluationElementRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationElementRatingLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationElementRatingLevelDescriptorMapper
    {
        public static bool SynchronizeTo(this IEvaluationElementRatingLevelDescriptor source, IEvaluationElementRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationElementRatingLevelDescriptorId != target.EvaluationElementRatingLevelDescriptorId)
            {
                source.EvaluationElementRatingLevelDescriptorId = target.EvaluationElementRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationElementRatingLevelDescriptor source, IEvaluationElementRatingLevelDescriptor target, Action<IEvaluationElementRatingLevelDescriptor, IEvaluationElementRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationElementRatingLevelDescriptorId = source.EvaluationElementRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: EvaluationObjective

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationObjectiveAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationObjectiveMapper
    {
        public static bool SynchronizeTo(this IEvaluationObjective source, IEvaluationObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluationTypeDescriptorSupported)
                && target.EvaluationTypeDescriptor != source.EvaluationTypeDescriptor)
            {
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSortOrderSupported)
                && target.SortOrder != source.SortOrder)
            {
                target.SortOrder = source.SortOrder;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationObjectiveRatingLevelsSupported)
            {
                isModified |=
                    source.EvaluationObjectiveRatingLevels.SynchronizeCollectionTo(
                        target.EvaluationObjectiveRatingLevels,
                        onChildAdded: child =>
                            {
                                child.EvaluationObjective = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsEvaluationObjectiveRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationObjective source, IEvaluationObjective target, Action<IEvaluationObjective, IEvaluationObjective> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationObjectiveSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluationTypeDescriptorSupported)
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
            else
                targetSynchSupport.IsEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            if (sourceSynchSupport.IsSortOrderSupported)
                target.SortOrder = source.SortOrder;
            else
                targetSynchSupport.IsSortOrderSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationResourceId = source.EvaluationResourceId;
                target.EvaluationDiscriminator = source.EvaluationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationObjectiveRatingLevelsSupported)
            {
                targetSynchSupport.IsEvaluationObjectiveRatingLevelIncluded = sourceSynchSupport.IsEvaluationObjectiveRatingLevelIncluded;
                source.EvaluationObjectiveRatingLevels.MapCollectionTo(target.EvaluationObjectiveRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationObjectiveRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationObjectiveSynchronizationSourceSupport 
    {
        bool IsEvaluationObjectiveRatingLevelsSupported { get; set; }
        bool IsEvaluationTypeDescriptorSupported { get; set; }
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        bool IsSortOrderSupported { get; set; }
        Func<IEvaluationObjectiveRatingLevel, bool> IsEvaluationObjectiveRatingLevelIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EvaluationObjectiveRatingLevelMapper
    {
        public static bool SynchronizeTo(this IEvaluationObjectiveRatingLevel source, IEvaluationObjectiveRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationObjectiveRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptor != target.EvaluationRatingLevelDescriptor)
            {
                source.EvaluationRatingLevelDescriptor = target.EvaluationRatingLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationObjectiveRatingLevel source, IEvaluationObjectiveRatingLevel target, Action<IEvaluationObjectiveRatingLevel, IEvaluationObjectiveRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationObjectiveRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationObjectiveRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationObjectiveRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
    }

}
// Aggregate: EvaluationObjectiveRating

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationObjectiveRatingAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationObjectiveRatingMapper
    {
        public static bool SynchronizeTo(this IEvaluationObjectiveRating source, IEvaluationObjectiveRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationObjectiveRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsObjectiveRatingLevelDescriptorSupported)
                && target.ObjectiveRatingLevelDescriptor != source.ObjectiveRatingLevelDescriptor)
            {
                target.ObjectiveRatingLevelDescriptor = source.ObjectiveRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationObjectiveRatingResultsSupported)
            {
                isModified |=
                    source.EvaluationObjectiveRatingResults.SynchronizeCollectionTo(
                        target.EvaluationObjectiveRatingResults,
                        onChildAdded: child =>
                            {
                                child.EvaluationObjectiveRating = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsEvaluationObjectiveRatingResultIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationObjectiveRating source, IEvaluationObjectiveRating target, Action<IEvaluationObjectiveRating, IEvaluationObjectiveRating> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationObjectiveRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationObjectiveRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsObjectiveRatingLevelDescriptorSupported)
                target.ObjectiveRatingLevelDescriptor = source.ObjectiveRatingLevelDescriptor;
            else
                targetSynchSupport.IsObjectiveRatingLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationObjectiveResourceId = source.EvaluationObjectiveResourceId;
                target.EvaluationObjectiveDiscriminator = source.EvaluationObjectiveDiscriminator;
                target.EvaluationRatingResourceId = source.EvaluationRatingResourceId;
                target.EvaluationRatingDiscriminator = source.EvaluationRatingDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationObjectiveRatingResultsSupported)
            {
                targetSynchSupport.IsEvaluationObjectiveRatingResultIncluded = sourceSynchSupport.IsEvaluationObjectiveRatingResultIncluded;
                source.EvaluationObjectiveRatingResults.MapCollectionTo(target.EvaluationObjectiveRatingResults, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationObjectiveRatingResultsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationObjectiveRatingSynchronizationSourceSupport 
    {
        bool IsCommentsSupported { get; set; }
        bool IsEvaluationObjectiveRatingResultsSupported { get; set; }
        bool IsObjectiveRatingLevelDescriptorSupported { get; set; }
        Func<IEvaluationObjectiveRatingResult, bool> IsEvaluationObjectiveRatingResultIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EvaluationObjectiveRatingResultMapper
    {
        public static bool SynchronizeTo(this IEvaluationObjectiveRatingResult source, IEvaluationObjectiveRatingResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationObjectiveRatingResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Rating != target.Rating)
            {
                source.Rating = target.Rating;
            }
            if (source.RatingResultTitle != target.RatingResultTitle)
            {
                source.RatingResultTitle = target.RatingResultTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationObjectiveRatingResult source, IEvaluationObjectiveRatingResult target, Action<IEvaluationObjectiveRatingResult, IEvaluationObjectiveRatingResult> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationObjectiveRatingResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationObjectiveRatingResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Rating = source.Rating;
            target.RatingResultTitle = source.RatingResultTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationObjectiveRatingResultSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }

}
// Aggregate: EvaluationPeriodDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationPeriodDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationPeriodDescriptorMapper
    {
        public static bool SynchronizeTo(this IEvaluationPeriodDescriptor source, IEvaluationPeriodDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationPeriodDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationPeriodDescriptorId != target.EvaluationPeriodDescriptorId)
            {
                source.EvaluationPeriodDescriptorId = target.EvaluationPeriodDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationPeriodDescriptor source, IEvaluationPeriodDescriptor target, Action<IEvaluationPeriodDescriptor, IEvaluationPeriodDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationPeriodDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationPeriodDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationPeriodDescriptorId = source.EvaluationPeriodDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationPeriodDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: EvaluationRating

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationRatingAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingMapper
    {
        public static bool SynchronizeTo(this IEvaluationRating source, IEvaluationRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluationRatingLevelDescriptorSupported)
                && target.EvaluationRatingLevelDescriptor != source.EvaluationRatingLevelDescriptor)
            {
                target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocalCourseCodeSupported)
                && target.LocalCourseCode != source.LocalCourseCode)
            {
                target.LocalCourseCode = source.LocalCourseCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSectionIdentifierSupported)
                && target.SectionIdentifier != source.SectionIdentifier)
            {
                target.SectionIdentifier = source.SectionIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionNameSupported)
                && target.SessionName != source.SessionName)
            {
                target.SessionName = source.SessionName;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationRatingResultsSupported)
            {
                isModified |=
                    source.EvaluationRatingResults.SynchronizeCollectionTo(
                        target.EvaluationRatingResults,
                        onChildAdded: child =>
                            {
                                child.EvaluationRating = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsEvaluationRatingResultIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEvaluationRatingReviewersSupported)
            {
                isModified |=
                    source.EvaluationRatingReviewers.SynchronizeCollectionTo(
                        target.EvaluationRatingReviewers,
                        onChildAdded: child =>
                            {
                                child.EvaluationRating = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsEvaluationRatingReviewerIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationRating source, IEvaluationRating target, Action<IEvaluationRating, IEvaluationRating> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluationRatingLevelDescriptorSupported)
                target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;
            else
                targetSynchSupport.IsEvaluationRatingLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsLocalCourseCodeSupported)
                target.LocalCourseCode = source.LocalCourseCode;
            else
                targetSynchSupport.IsLocalCourseCodeSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            if (sourceSynchSupport.IsSectionIdentifierSupported)
                target.SectionIdentifier = source.SectionIdentifier;
            else
                targetSynchSupport.IsSectionIdentifierSupported = false;

            if (sourceSynchSupport.IsSessionNameSupported)
                target.SessionName = source.SessionName;
            else
                targetSynchSupport.IsSessionNameSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationResourceId = source.EvaluationResourceId;
                target.EvaluationDiscriminator = source.EvaluationDiscriminator;
                target.PerformanceEvaluationRatingResourceId = source.PerformanceEvaluationRatingResourceId;
                target.PerformanceEvaluationRatingDiscriminator = source.PerformanceEvaluationRatingDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationRatingResultsSupported)
            {
                targetSynchSupport.IsEvaluationRatingResultIncluded = sourceSynchSupport.IsEvaluationRatingResultIncluded;
                source.EvaluationRatingResults.MapCollectionTo(target.EvaluationRatingResults, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationRatingResultsSupported = false;
            }

            if (sourceSynchSupport.IsEvaluationRatingReviewersSupported)
            {
                targetSynchSupport.IsEvaluationRatingReviewerIncluded = sourceSynchSupport.IsEvaluationRatingReviewerIncluded;
                source.EvaluationRatingReviewers.MapCollectionTo(target.EvaluationRatingReviewers, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationRatingReviewersSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingSynchronizationSourceSupport 
    {
        bool IsEvaluationRatingLevelDescriptorSupported { get; set; }
        bool IsEvaluationRatingResultsSupported { get; set; }
        bool IsEvaluationRatingReviewersSupported { get; set; }
        bool IsLocalCourseCodeSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsSectionIdentifierSupported { get; set; }
        bool IsSessionNameSupported { get; set; }
        Func<IEvaluationRatingResult, bool> IsEvaluationRatingResultIncluded { get; set; }
        Func<IEvaluationRatingReviewer, bool> IsEvaluationRatingReviewerIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingResultMapper
    {
        public static bool SynchronizeTo(this IEvaluationRatingResult source, IEvaluationRatingResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Rating != target.Rating)
            {
                source.Rating = target.Rating;
            }
            if (source.RatingResultTitle != target.RatingResultTitle)
            {
                source.RatingResultTitle = target.RatingResultTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingResult source, IEvaluationRatingResult target, Action<IEvaluationRatingResult, IEvaluationRatingResult> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Rating = source.Rating;
            target.RatingResultTitle = source.RatingResultTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingResultSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingReviewerMapper
    {
        public static bool SynchronizeTo(this IEvaluationRatingReviewer source, IEvaluationRatingReviewer target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingReviewerSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FirstName != target.FirstName)
            {
                source.FirstName = target.FirstName;
            }
            if (source.LastSurname != target.LastSurname)
            {
                source.LastSurname = target.LastSurname;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsReviewerPersonIdSupported)
                && target.ReviewerPersonId != source.ReviewerPersonId)
            {
                target.ReviewerPersonId = source.ReviewerPersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReviewerSourceSystemDescriptorSupported)
                && target.ReviewerSourceSystemDescriptor != source.ReviewerSourceSystemDescriptor)
            {
                target.ReviewerSourceSystemDescriptor = source.ReviewerSourceSystemDescriptor;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // EvaluationRatingReviewerReceivedTraining
            if (sourceSupport == null || sourceSupport.IsEvaluationRatingReviewerReceivedTrainingSupported)
            {
                if (source.EvaluationRatingReviewerReceivedTraining == null)
                {
                    if (target.EvaluationRatingReviewerReceivedTraining != null)
                    {
                        target.EvaluationRatingReviewerReceivedTraining = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EvaluationRatingReviewerReceivedTraining == null)
                    {
                        var itemType = target.GetType().GetProperty("EvaluationRatingReviewerReceivedTraining").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EvaluationRatingReviewerReceivedTraining = (IEvaluationRatingReviewerReceivedTraining) newItem;
                    }

                    isModified |= source.EvaluationRatingReviewerReceivedTraining.Synchronize(target.EvaluationRatingReviewerReceivedTraining);
                }
            }

            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingReviewer source, IEvaluationRatingReviewer target, Action<IEvaluationRatingReviewer, IEvaluationRatingReviewer> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingReviewerSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingReviewerSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FirstName = source.FirstName;
            target.LastSurname = source.LastSurname;

            // Copy non-PK properties

            if (sourceSynchSupport.IsReviewerPersonIdSupported)
                target.ReviewerPersonId = source.ReviewerPersonId;
            else
                targetSynchSupport.IsReviewerPersonIdSupported = false;

            if (sourceSynchSupport.IsReviewerSourceSystemDescriptorSupported)
                target.ReviewerSourceSystemDescriptor = source.ReviewerSourceSystemDescriptor;
            else
                targetSynchSupport.IsReviewerSourceSystemDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ReviewerPersonResourceId = source.ReviewerPersonResourceId;
                target.ReviewerPersonDiscriminator = source.ReviewerPersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // EvaluationRatingReviewerReceivedTraining (Source)
            if (sourceSynchSupport.IsEvaluationRatingReviewerReceivedTrainingSupported)
            {
                var itemProperty = target.GetType().GetProperty("EvaluationRatingReviewerReceivedTraining");

                if (itemProperty != null)
                {
                    if (source.EvaluationRatingReviewerReceivedTraining == null)
                    {
                        target.EvaluationRatingReviewerReceivedTraining = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEvaluationRatingReviewerReceivedTraining = Activator.CreateInstance(itemType);
                        (targetEvaluationRatingReviewerReceivedTraining as IChildEntity)?.SetParent(target);
                        source.EvaluationRatingReviewerReceivedTraining.Map(targetEvaluationRatingReviewerReceivedTraining);

                        // Update the target reference appropriately
                        target.EvaluationRatingReviewerReceivedTraining = (IEvaluationRatingReviewerReceivedTraining) targetEvaluationRatingReviewerReceivedTraining;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEvaluationRatingReviewerReceivedTrainingSupported = false;
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingReviewerSynchronizationSourceSupport 
    {
        bool IsEvaluationRatingReviewerReceivedTrainingSupported { get; set; }
        bool IsReviewerPersonIdSupported { get; set; }
        bool IsReviewerSourceSystemDescriptorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingReviewerReceivedTrainingMapper
    {
        public static bool SynchronizeTo(this IEvaluationRatingReviewerReceivedTraining source, IEvaluationRatingReviewerReceivedTraining target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsInterRaterReliabilityScoreSupported)
                && target.InterRaterReliabilityScore != source.InterRaterReliabilityScore)
            {
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReceivedTrainingDateSupported)
                && target.ReceivedTrainingDate != source.ReceivedTrainingDate)
            {
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingReviewerReceivedTraining source, IEvaluationRatingReviewerReceivedTraining target, Action<IEvaluationRatingReviewerReceivedTraining, IEvaluationRatingReviewerReceivedTraining> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsInterRaterReliabilityScoreSupported)
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
            else
                targetSynchSupport.IsInterRaterReliabilityScoreSupported = false;

            if (sourceSynchSupport.IsReceivedTrainingDateSupported)
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
            else
                targetSynchSupport.IsReceivedTrainingDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport 
    {
        bool IsInterRaterReliabilityScoreSupported { get; set; }
        bool IsReceivedTrainingDateSupported { get; set; }
    }

}
// Aggregate: EvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationRatingLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingLevelDescriptorMapper
    {
        public static bool SynchronizeTo(this IEvaluationRatingLevelDescriptor source, IEvaluationRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptorId != target.EvaluationRatingLevelDescriptorId)
            {
                source.EvaluationRatingLevelDescriptorId = target.EvaluationRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingLevelDescriptor source, IEvaluationRatingLevelDescriptor target, Action<IEvaluationRatingLevelDescriptor, IEvaluationRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptorId = source.EvaluationRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: EvaluationTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class EvaluationTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IEvaluationTypeDescriptor source, IEvaluationTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationTypeDescriptorId != target.EvaluationTypeDescriptorId)
            {
                source.EvaluationTypeDescriptorId = target.EvaluationTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationTypeDescriptor source, IEvaluationTypeDescriptor target, Action<IEvaluationTypeDescriptor, IEvaluationTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationTypeDescriptorId = source.EvaluationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: FederalLocaleCodeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FederalLocaleCodeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FederalLocaleCodeDescriptorMapper
    {
        public static bool SynchronizeTo(this IFederalLocaleCodeDescriptor source, IFederalLocaleCodeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FederalLocaleCodeDescriptorId != target.FederalLocaleCodeDescriptorId)
            {
                source.FederalLocaleCodeDescriptorId = target.FederalLocaleCodeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFederalLocaleCodeDescriptor source, IFederalLocaleCodeDescriptor target, Action<IFederalLocaleCodeDescriptor, IFederalLocaleCodeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FederalLocaleCodeDescriptorId = source.FederalLocaleCodeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFederalLocaleCodeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: FieldworkExperience

namespace EdFi.Ods.Entities.Common.TPDM //.FieldworkExperienceAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FieldworkExperienceMapper
    {
        public static bool SynchronizeTo(this IFieldworkExperience source, IFieldworkExperience target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkExperienceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FieldworkIdentifier != target.FieldworkIdentifier)
            {
                source.FieldworkIdentifier = target.FieldworkIdentifier;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFieldworkTypeDescriptorSupported)
                && target.FieldworkTypeDescriptor != source.FieldworkTypeDescriptor)
            {
                target.FieldworkTypeDescriptor = source.FieldworkTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHoursCompletedSupported)
                && target.HoursCompleted != source.HoursCompleted)
            {
                target.HoursCompleted = source.HoursCompleted;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramNameSupported)
                && target.ProgramName != source.ProgramName)
            {
                target.ProgramName = source.ProgramName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramTypeDescriptorSupported)
                && target.ProgramTypeDescriptor != source.ProgramTypeDescriptor)
            {
                target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // FieldworkExperienceCoteaching
            if (sourceSupport == null || sourceSupport.IsFieldworkExperienceCoteachingSupported)
            {
                if (source.FieldworkExperienceCoteaching == null)
                {
                    if (target.FieldworkExperienceCoteaching != null)
                    {
                        target.FieldworkExperienceCoteaching = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.FieldworkExperienceCoteaching == null)
                    {
                        var itemType = target.GetType().GetProperty("FieldworkExperienceCoteaching").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.FieldworkExperienceCoteaching = (IFieldworkExperienceCoteaching) newItem;
                    }

                    isModified |= source.FieldworkExperienceCoteaching.Synchronize(target.FieldworkExperienceCoteaching);
                }
            }

            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkExperience source, IFieldworkExperience target, Action<IFieldworkExperience, IFieldworkExperience> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkExperienceSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkExperienceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FieldworkIdentifier = source.FieldworkIdentifier;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsFieldworkTypeDescriptorSupported)
                target.FieldworkTypeDescriptor = source.FieldworkTypeDescriptor;
            else
                targetSynchSupport.IsFieldworkTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsHoursCompletedSupported)
                target.HoursCompleted = source.HoursCompleted;
            else
                targetSynchSupport.IsHoursCompletedSupported = false;

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            if (sourceSynchSupport.IsProgramNameSupported)
                target.ProgramName = source.ProgramName;
            else
                targetSynchSupport.IsProgramNameSupported = false;

            if (sourceSynchSupport.IsProgramTypeDescriptorSupported)
                target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            else
                targetSynchSupport.IsProgramTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducatorPreparationProgramResourceId = source.EducatorPreparationProgramResourceId;
                target.EducatorPreparationProgramDiscriminator = source.EducatorPreparationProgramDiscriminator;
                target.SchoolResourceId = source.SchoolResourceId;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // FieldworkExperienceCoteaching (Source)
            if (sourceSynchSupport.IsFieldworkExperienceCoteachingSupported)
            {
                var itemProperty = target.GetType().GetProperty("FieldworkExperienceCoteaching");

                if (itemProperty != null)
                {
                    if (source.FieldworkExperienceCoteaching == null)
                    {
                        target.FieldworkExperienceCoteaching = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetFieldworkExperienceCoteaching = Activator.CreateInstance(itemType);
                        (targetFieldworkExperienceCoteaching as IChildEntity)?.SetParent(target);
                        source.FieldworkExperienceCoteaching.Map(targetFieldworkExperienceCoteaching);

                        // Update the target reference appropriately
                        target.FieldworkExperienceCoteaching = (IFieldworkExperienceCoteaching) targetFieldworkExperienceCoteaching;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsFieldworkExperienceCoteachingSupported = false;
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkExperienceSynchronizationSourceSupport 
    {
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsFieldworkExperienceCoteachingSupported { get; set; }
        bool IsFieldworkTypeDescriptorSupported { get; set; }
        bool IsHoursCompletedSupported { get; set; }
        bool IsProgramGatewayDescriptorSupported { get; set; }
        bool IsProgramNameSupported { get; set; }
        bool IsProgramTypeDescriptorSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class FieldworkExperienceCoteachingMapper
    {
        public static bool SynchronizeTo(this IFieldworkExperienceCoteaching source, IFieldworkExperienceCoteaching target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkExperienceCoteachingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCoteachingBeginDateSupported)
                && target.CoteachingBeginDate != source.CoteachingBeginDate)
            {
                target.CoteachingBeginDate = source.CoteachingBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCoteachingEndDateSupported)
                && target.CoteachingEndDate != source.CoteachingEndDate)
            {
                target.CoteachingEndDate = source.CoteachingEndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkExperienceCoteaching source, IFieldworkExperienceCoteaching target, Action<IFieldworkExperienceCoteaching, IFieldworkExperienceCoteaching> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkExperienceCoteachingSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkExperienceCoteachingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCoteachingBeginDateSupported)
                target.CoteachingBeginDate = source.CoteachingBeginDate;
            else
                targetSynchSupport.IsCoteachingBeginDateSupported = false;

            if (sourceSynchSupport.IsCoteachingEndDateSupported)
                target.CoteachingEndDate = source.CoteachingEndDate;
            else
                targetSynchSupport.IsCoteachingEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkExperienceCoteachingSynchronizationSourceSupport 
    {
        bool IsCoteachingBeginDateSupported { get; set; }
        bool IsCoteachingEndDateSupported { get; set; }
    }

}
// Aggregate: FieldworkExperienceSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.FieldworkExperienceSectionAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FieldworkExperienceSectionAssociationMapper
    {
        public static bool SynchronizeTo(this IFieldworkExperienceSectionAssociation source, IFieldworkExperienceSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkExperienceSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FieldworkIdentifier != target.FieldworkIdentifier)
            {
                source.FieldworkIdentifier = target.FieldworkIdentifier;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkExperienceSectionAssociation source, IFieldworkExperienceSectionAssociation target, Action<IFieldworkExperienceSectionAssociation, IFieldworkExperienceSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkExperienceSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkExperienceSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FieldworkIdentifier = source.FieldworkIdentifier;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.FieldworkExperienceResourceId = source.FieldworkExperienceResourceId;
                target.FieldworkExperienceDiscriminator = source.FieldworkExperienceDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkExperienceSectionAssociationSynchronizationSourceSupport 
    {
    }

}
// Aggregate: FieldworkTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FieldworkTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FieldworkTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IFieldworkTypeDescriptor source, IFieldworkTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FieldworkTypeDescriptorId != target.FieldworkTypeDescriptorId)
            {
                source.FieldworkTypeDescriptorId = target.FieldworkTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkTypeDescriptor source, IFieldworkTypeDescriptor target, Action<IFieldworkTypeDescriptor, IFieldworkTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FieldworkTypeDescriptorId = source.FieldworkTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: FundingSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FundingSourceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class FundingSourceDescriptorMapper
    {
        public static bool SynchronizeTo(this IFundingSourceDescriptor source, IFundingSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFundingSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FundingSourceDescriptorId != target.FundingSourceDescriptorId)
            {
                source.FundingSourceDescriptorId = target.FundingSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFundingSourceDescriptor source, IFundingSourceDescriptor target, Action<IFundingSourceDescriptor, IFundingSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFundingSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFundingSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FundingSourceDescriptorId = source.FundingSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFundingSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: GenderDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.GenderDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GenderDescriptorMapper
    {
        public static bool SynchronizeTo(this IGenderDescriptor source, IGenderDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGenderDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GenderDescriptorId != target.GenderDescriptorId)
            {
                source.GenderDescriptorId = target.GenderDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGenderDescriptor source, IGenderDescriptor target, Action<IGenderDescriptor, IGenderDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGenderDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGenderDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GenderDescriptorId = source.GenderDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGenderDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: Goal

namespace EdFi.Ods.Entities.Common.TPDM //.GoalAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GoalMapper
    {
        public static bool SynchronizeTo(this IGoal source, IGoal target)
        {
            bool isModified = false;

            var sourceSupport = source as IGoalSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssignmentDate != target.AssignmentDate)
            {
                source.AssignmentDate = target.AssignmentDate;
            }
            if (source.GoalTitle != target.GoalTitle)
            {
                source.GoalTitle = target.GoalTitle;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCompletedDateSupported)
                && target.CompletedDate != source.CompletedDate)
            {
                target.CompletedDate = source.CompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCompletedIndicatorSupported)
                && target.CompletedIndicator != source.CompletedIndicator)
            {
                target.CompletedIndicator = source.CompletedIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDueDateSupported)
                && target.DueDate != source.DueDate)
            {
                target.DueDate = source.DueDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationElementTitleSupported)
                && target.EvaluationElementTitle != source.EvaluationElementTitle)
            {
                target.EvaluationElementTitle = source.EvaluationElementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationObjectiveTitleSupported)
                && target.EvaluationObjectiveTitle != source.EvaluationObjectiveTitle)
            {
                target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationPeriodDescriptorSupported)
                && target.EvaluationPeriodDescriptor != source.EvaluationPeriodDescriptor)
            {
                target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationTitleSupported)
                && target.EvaluationTitle != source.EvaluationTitle)
            {
                target.EvaluationTitle = source.EvaluationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGoalDescriptionSupported)
                && target.GoalDescription != source.GoalDescription)
            {
                target.GoalDescription = source.GoalDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGoalTypeDescriptorSupported)
                && target.GoalTypeDescriptor != source.GoalTypeDescriptor)
            {
                target.GoalTypeDescriptor = source.GoalTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationTitleSupported)
                && target.PerformanceEvaluationTitle != source.PerformanceEvaluationTitle)
            {
                target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationTypeDescriptorSupported)
                && target.PerformanceEvaluationTypeDescriptor != source.PerformanceEvaluationTypeDescriptor)
            {
                target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGoal source, IGoal target, Action<IGoal, IGoal> onMapped)
        {
            var sourceSynchSupport = source as IGoalSynchronizationSourceSupport;
            var targetSynchSupport = target as IGoalSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssignmentDate = source.AssignmentDate;
            target.GoalTitle = source.GoalTitle;
            target.PersonId = source.PersonId;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsCompletedDateSupported)
                target.CompletedDate = source.CompletedDate;
            else
                targetSynchSupport.IsCompletedDateSupported = false;

            if (sourceSynchSupport.IsCompletedIndicatorSupported)
                target.CompletedIndicator = source.CompletedIndicator;
            else
                targetSynchSupport.IsCompletedIndicatorSupported = false;

            if (sourceSynchSupport.IsDueDateSupported)
                target.DueDate = source.DueDate;
            else
                targetSynchSupport.IsDueDateSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEvaluationElementTitleSupported)
                target.EvaluationElementTitle = source.EvaluationElementTitle;
            else
                targetSynchSupport.IsEvaluationElementTitleSupported = false;

            if (sourceSynchSupport.IsEvaluationObjectiveTitleSupported)
                target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            else
                targetSynchSupport.IsEvaluationObjectiveTitleSupported = false;

            if (sourceSynchSupport.IsEvaluationPeriodDescriptorSupported)
                target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            else
                targetSynchSupport.IsEvaluationPeriodDescriptorSupported = false;

            if (sourceSynchSupport.IsEvaluationTitleSupported)
                target.EvaluationTitle = source.EvaluationTitle;
            else
                targetSynchSupport.IsEvaluationTitleSupported = false;

            if (sourceSynchSupport.IsGoalDescriptionSupported)
                target.GoalDescription = source.GoalDescription;
            else
                targetSynchSupport.IsGoalDescriptionSupported = false;

            if (sourceSynchSupport.IsGoalTypeDescriptorSupported)
                target.GoalTypeDescriptor = source.GoalTypeDescriptor;
            else
                targetSynchSupport.IsGoalTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationTitleSupported)
                target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            else
                targetSynchSupport.IsPerformanceEvaluationTitleSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationTypeDescriptorSupported)
                target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            else
                targetSynchSupport.IsPerformanceEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGoalSynchronizationSourceSupport 
    {
        bool IsCommentsSupported { get; set; }
        bool IsCompletedDateSupported { get; set; }
        bool IsCompletedIndicatorSupported { get; set; }
        bool IsDueDateSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEvaluationElementTitleSupported { get; set; }
        bool IsEvaluationObjectiveTitleSupported { get; set; }
        bool IsEvaluationPeriodDescriptorSupported { get; set; }
        bool IsEvaluationTitleSupported { get; set; }
        bool IsGoalDescriptionSupported { get; set; }
        bool IsGoalTypeDescriptorSupported { get; set; }
        bool IsPerformanceEvaluationTitleSupported { get; set; }
        bool IsPerformanceEvaluationTypeDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }

}
// Aggregate: GoalTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.GoalTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GoalTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IGoalTypeDescriptor source, IGoalTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGoalTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GoalTypeDescriptorId != target.GoalTypeDescriptorId)
            {
                source.GoalTypeDescriptorId = target.GoalTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGoalTypeDescriptor source, IGoalTypeDescriptor target, Action<IGoalTypeDescriptor, IGoalTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGoalTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGoalTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GoalTypeDescriptorId = source.GoalTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGoalTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: GraduationPlan

namespace EdFi.Ods.Entities.Common.TPDM //.GraduationPlanAggregate
{
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanExtensionMapper
    {
        public static bool SynchronizeTo(this IGraduationPlanExtension source, IGraduationPlanExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.GraduationPlan as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsGraduationPlanRequiredCertificationsSupported)
            {
                isModified |=
                    source.GraduationPlanRequiredCertifications.SynchronizeCollectionTo(
                        target.GraduationPlanRequiredCertifications,
                        onChildAdded: child =>
                            {
                                child.GraduationPlanExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.GraduationPlan);
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsGraduationPlanRequiredCertificationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IGraduationPlanExtension source, IGraduationPlanExtension target, Action<IGraduationPlanExtension, IGraduationPlanExtension> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsGraduationPlanRequiredCertificationsSupported)
            {
                targetSynchSupport.IsGraduationPlanRequiredCertificationIncluded = sourceSynchSupport.IsGraduationPlanRequiredCertificationIncluded;
                source.GraduationPlanRequiredCertifications.MapCollectionTo(target.GraduationPlanRequiredCertifications, target.GraduationPlan);
            }
            else
            {
                targetSynchSupport.IsGraduationPlanRequiredCertificationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanExtensionSynchronizationSourceSupport 
    {
        bool IsGraduationPlanRequiredCertificationsSupported { get; set; }
        Func<IGraduationPlanRequiredCertification, bool> IsGraduationPlanRequiredCertificationIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class GraduationPlanRequiredCertificationMapper
    {
        public static bool SynchronizeTo(this IGraduationPlanRequiredCertification source, IGraduationPlanRequiredCertification target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanRequiredCertificationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationTitle != target.CertificationTitle)
            {
                source.CertificationTitle = target.CertificationTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCertificationIdentifierSupported)
                && target.CertificationIdentifier != source.CertificationIdentifier)
            {
                target.CertificationIdentifier = source.CertificationIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationRouteDescriptorSupported)
                && target.CertificationRouteDescriptor != source.CertificationRouteDescriptor)
            {
                target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGraduationPlanRequiredCertification source, IGraduationPlanRequiredCertification target, Action<IGraduationPlanRequiredCertification, IGraduationPlanRequiredCertification> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanRequiredCertificationSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanRequiredCertificationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CertificationTitle = source.CertificationTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCertificationIdentifierSupported)
                target.CertificationIdentifier = source.CertificationIdentifier;
            else
                targetSynchSupport.IsCertificationIdentifierSupported = false;

            if (sourceSynchSupport.IsCertificationRouteDescriptorSupported)
                target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;
            else
                targetSynchSupport.IsCertificationRouteDescriptorSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CertificationResourceId = source.CertificationResourceId;
                target.CertificationDiscriminator = source.CertificationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanRequiredCertificationSynchronizationSourceSupport 
    {
        bool IsCertificationIdentifierSupported { get; set; }
        bool IsCertificationRouteDescriptorSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
    }

}
// Aggregate: HireStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.HireStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class HireStatusDescriptorMapper
    {
        public static bool SynchronizeTo(this IHireStatusDescriptor source, IHireStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IHireStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HireStatusDescriptorId != target.HireStatusDescriptorId)
            {
                source.HireStatusDescriptorId = target.HireStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IHireStatusDescriptor source, IHireStatusDescriptor target, Action<IHireStatusDescriptor, IHireStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IHireStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IHireStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HireStatusDescriptorId = source.HireStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IHireStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: HiringSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.HiringSourceDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class HiringSourceDescriptorMapper
    {
        public static bool SynchronizeTo(this IHiringSourceDescriptor source, IHiringSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IHiringSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HiringSourceDescriptorId != target.HiringSourceDescriptorId)
            {
                source.HiringSourceDescriptorId = target.HiringSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IHiringSourceDescriptor source, IHiringSourceDescriptor target, Action<IHiringSourceDescriptor, IHiringSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IHiringSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IHiringSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HiringSourceDescriptorId = source.HiringSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IHiringSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: InstructionalSettingDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.InstructionalSettingDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class InstructionalSettingDescriptorMapper
    {
        public static bool SynchronizeTo(this IInstructionalSettingDescriptor source, IInstructionalSettingDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInstructionalSettingDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InstructionalSettingDescriptorId != target.InstructionalSettingDescriptorId)
            {
                source.InstructionalSettingDescriptorId = target.InstructionalSettingDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInstructionalSettingDescriptor source, IInstructionalSettingDescriptor target, Action<IInstructionalSettingDescriptor, IInstructionalSettingDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInstructionalSettingDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInstructionalSettingDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InstructionalSettingDescriptorId = source.InstructionalSettingDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInstructionalSettingDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: LengthOfContractDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.LengthOfContractDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LengthOfContractDescriptorMapper
    {
        public static bool SynchronizeTo(this ILengthOfContractDescriptor source, ILengthOfContractDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILengthOfContractDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LengthOfContractDescriptorId != target.LengthOfContractDescriptorId)
            {
                source.LengthOfContractDescriptorId = target.LengthOfContractDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILengthOfContractDescriptor source, ILengthOfContractDescriptor target, Action<ILengthOfContractDescriptor, ILengthOfContractDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILengthOfContractDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILengthOfContractDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LengthOfContractDescriptorId = source.LengthOfContractDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILengthOfContractDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Entities.Common.TPDM //.LocalEducationAgencyAggregate
{
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyExtensionMapper
    {
        public static bool SynchronizeTo(this ILocalEducationAgencyExtension source, ILocalEducationAgencyExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocalEducationAgencyExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.LocalEducationAgency as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILocalEducationAgencyExtension source, ILocalEducationAgencyExtension target, Action<ILocalEducationAgencyExtension, ILocalEducationAgencyExtension> onMapped)
        {
            var sourceSynchSupport = source as ILocalEducationAgencyExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ILocalEducationAgencyExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocalEducationAgencyExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }

}
// Aggregate: ObjectiveRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ObjectiveRatingLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ObjectiveRatingLevelDescriptorMapper
    {
        public static bool SynchronizeTo(this IObjectiveRatingLevelDescriptor source, IObjectiveRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IObjectiveRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ObjectiveRatingLevelDescriptorId != target.ObjectiveRatingLevelDescriptorId)
            {
                source.ObjectiveRatingLevelDescriptorId = target.ObjectiveRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IObjectiveRatingLevelDescriptor source, IObjectiveRatingLevelDescriptor target, Action<IObjectiveRatingLevelDescriptor, IObjectiveRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IObjectiveRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IObjectiveRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ObjectiveRatingLevelDescriptorId = source.ObjectiveRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IObjectiveRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionExtensionMapper
    {
        public static bool SynchronizeTo(this IOpenStaffPositionExtension source, IOpenStaffPositionExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.OpenStaffPosition as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFullTimeEquivalencySupported)
                && target.FullTimeEquivalency != source.FullTimeEquivalency)
            {
                target.FullTimeEquivalency = source.FullTimeEquivalency;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFundingSourceDescriptorSupported)
                && target.FundingSourceDescriptor != source.FundingSourceDescriptor)
            {
                target.FundingSourceDescriptor = source.FundingSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighNeedAcademicSubjectSupported)
                && target.HighNeedAcademicSubject != source.HighNeedAcademicSubject)
            {
                target.HighNeedAcademicSubject = source.HighNeedAcademicSubject;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsActiveSupported)
                && target.IsActive != source.IsActive)
            {
                target.IsActive = source.IsActive;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxSalarySupported)
                && target.MaxSalary != source.MaxSalary)
            {
                target.MaxSalary = source.MaxSalary;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinSalarySupported)
                && target.MinSalary != source.MinSalary)
            {
                target.MinSalary = source.MinSalary;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOpenStaffPositionReasonDescriptorSupported)
                && target.OpenStaffPositionReasonDescriptor != source.OpenStaffPositionReasonDescriptor)
            {
                target.OpenStaffPositionReasonDescriptor = source.OpenStaffPositionReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPositionControlNumberSupported)
                && target.PositionControlNumber != source.PositionControlNumber)
            {
                target.PositionControlNumber = source.PositionControlNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalBudgetedSupported)
                && target.TotalBudgeted != source.TotalBudgeted)
            {
                target.TotalBudgeted = source.TotalBudgeted;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionExtension source, IOpenStaffPositionExtension target, Action<IOpenStaffPositionExtension, IOpenStaffPositionExtension> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFullTimeEquivalencySupported)
                target.FullTimeEquivalency = source.FullTimeEquivalency;
            else
                targetSynchSupport.IsFullTimeEquivalencySupported = false;

            if (sourceSynchSupport.IsFundingSourceDescriptorSupported)
                target.FundingSourceDescriptor = source.FundingSourceDescriptor;
            else
                targetSynchSupport.IsFundingSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsHighNeedAcademicSubjectSupported)
                target.HighNeedAcademicSubject = source.HighNeedAcademicSubject;
            else
                targetSynchSupport.IsHighNeedAcademicSubjectSupported = false;

            if (sourceSynchSupport.IsIsActiveSupported)
                target.IsActive = source.IsActive;
            else
                targetSynchSupport.IsIsActiveSupported = false;

            if (sourceSynchSupport.IsMaxSalarySupported)
                target.MaxSalary = source.MaxSalary;
            else
                targetSynchSupport.IsMaxSalarySupported = false;

            if (sourceSynchSupport.IsMinSalarySupported)
                target.MinSalary = source.MinSalary;
            else
                targetSynchSupport.IsMinSalarySupported = false;

            if (sourceSynchSupport.IsOpenStaffPositionReasonDescriptorSupported)
                target.OpenStaffPositionReasonDescriptor = source.OpenStaffPositionReasonDescriptor;
            else
                targetSynchSupport.IsOpenStaffPositionReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsPositionControlNumberSupported)
                target.PositionControlNumber = source.PositionControlNumber;
            else
                targetSynchSupport.IsPositionControlNumberSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            if (sourceSynchSupport.IsTotalBudgetedSupported)
                target.TotalBudgeted = source.TotalBudgeted;
            else
                targetSynchSupport.IsTotalBudgetedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionExtensionSynchronizationSourceSupport 
    {
        bool IsFullTimeEquivalencySupported { get; set; }
        bool IsFundingSourceDescriptorSupported { get; set; }
        bool IsHighNeedAcademicSubjectSupported { get; set; }
        bool IsIsActiveSupported { get; set; }
        bool IsMaxSalarySupported { get; set; }
        bool IsMinSalarySupported { get; set; }
        bool IsOpenStaffPositionReasonDescriptorSupported { get; set; }
        bool IsPositionControlNumberSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
        bool IsTotalBudgetedSupported { get; set; }
    }

}
// Aggregate: OpenStaffPositionEvent

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventMapper
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEvent source, IOpenStaffPositionEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.OpenStaffPositionEventTypeDescriptor != target.OpenStaffPositionEventTypeDescriptor)
            {
                source.OpenStaffPositionEventTypeDescriptor = target.OpenStaffPositionEventTypeDescriptor;
            }
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsOpenStaffPositionEventStatusDescriptorSupported)
                && target.OpenStaffPositionEventStatusDescriptor != source.OpenStaffPositionEventStatusDescriptor)
            {
                target.OpenStaffPositionEventStatusDescriptor = source.OpenStaffPositionEventStatusDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEvent source, IOpenStaffPositionEvent target, Action<IOpenStaffPositionEvent, IOpenStaffPositionEvent> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.OpenStaffPositionEventTypeDescriptor = source.OpenStaffPositionEventTypeDescriptor;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsOpenStaffPositionEventStatusDescriptorSupported)
                target.OpenStaffPositionEventStatusDescriptor = source.OpenStaffPositionEventStatusDescriptor;
            else
                targetSynchSupport.IsOpenStaffPositionEventStatusDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventSynchronizationSourceSupport 
    {
        bool IsOpenStaffPositionEventStatusDescriptorSupported { get; set; }
    }

}
// Aggregate: OpenStaffPositionEventStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventStatusDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventStatusDescriptorMapper
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEventStatusDescriptor source, IOpenStaffPositionEventStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionEventStatusDescriptorId != target.OpenStaffPositionEventStatusDescriptorId)
            {
                source.OpenStaffPositionEventStatusDescriptorId = target.OpenStaffPositionEventStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEventStatusDescriptor source, IOpenStaffPositionEventStatusDescriptor target, Action<IOpenStaffPositionEventStatusDescriptor, IOpenStaffPositionEventStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionEventStatusDescriptorId = source.OpenStaffPositionEventStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: OpenStaffPositionEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEventTypeDescriptor source, IOpenStaffPositionEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionEventTypeDescriptorId != target.OpenStaffPositionEventTypeDescriptorId)
            {
                source.OpenStaffPositionEventTypeDescriptorId = target.OpenStaffPositionEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEventTypeDescriptor source, IOpenStaffPositionEventTypeDescriptor target, Action<IOpenStaffPositionEventTypeDescriptor, IOpenStaffPositionEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionEventTypeDescriptorId = source.OpenStaffPositionEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: OpenStaffPositionReasonDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionReasonDescriptorMapper
    {
        public static bool SynchronizeTo(this IOpenStaffPositionReasonDescriptor source, IOpenStaffPositionReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionReasonDescriptorId != target.OpenStaffPositionReasonDescriptorId)
            {
                source.OpenStaffPositionReasonDescriptorId = target.OpenStaffPositionReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionReasonDescriptor source, IOpenStaffPositionReasonDescriptor target, Action<IOpenStaffPositionReasonDescriptor, IOpenStaffPositionReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionReasonDescriptorId = source.OpenStaffPositionReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: PerformanceEvaluation

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceEvaluationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluation source, IPerformanceEvaluation target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationGradeLevelsSupported)
            {
                isModified |=
                    source.PerformanceEvaluationGradeLevels.SynchronizeCollectionTo(
                        target.PerformanceEvaluationGradeLevels,
                        onChildAdded: child =>
                            {
                                child.PerformanceEvaluation = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsPerformanceEvaluationGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationProgramGatewaysSupported)
            {
                isModified |=
                    source.PerformanceEvaluationProgramGateways.SynchronizeCollectionTo(
                        target.PerformanceEvaluationProgramGateways,
                        onChildAdded: child =>
                            {
                                child.PerformanceEvaluation = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsPerformanceEvaluationProgramGatewayIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingLevelsSupported)
            {
                isModified |=
                    source.PerformanceEvaluationRatingLevels.SynchronizeCollectionTo(
                        target.PerformanceEvaluationRatingLevels,
                        onChildAdded: child =>
                            {
                                child.PerformanceEvaluation = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsPerformanceEvaluationRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluation source, IPerformanceEvaluation target, Action<IPerformanceEvaluation, IPerformanceEvaluation> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsPerformanceEvaluationGradeLevelsSupported)
            {
                targetSynchSupport.IsPerformanceEvaluationGradeLevelIncluded = sourceSynchSupport.IsPerformanceEvaluationGradeLevelIncluded;
                source.PerformanceEvaluationGradeLevels.MapCollectionTo(target.PerformanceEvaluationGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceEvaluationProgramGatewaysSupported)
            {
                targetSynchSupport.IsPerformanceEvaluationProgramGatewayIncluded = sourceSynchSupport.IsPerformanceEvaluationProgramGatewayIncluded;
                source.PerformanceEvaluationProgramGateways.MapCollectionTo(target.PerformanceEvaluationProgramGateways, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationProgramGatewaysSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceEvaluationRatingLevelsSupported)
            {
                targetSynchSupport.IsPerformanceEvaluationRatingLevelIncluded = sourceSynchSupport.IsPerformanceEvaluationRatingLevelIncluded;
                source.PerformanceEvaluationRatingLevels.MapCollectionTo(target.PerformanceEvaluationRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsPerformanceEvaluationGradeLevelsSupported { get; set; }
        bool IsPerformanceEvaluationProgramGatewaysSupported { get; set; }
        bool IsPerformanceEvaluationRatingLevelsSupported { get; set; }
        Func<IPerformanceEvaluationGradeLevel, bool> IsPerformanceEvaluationGradeLevelIncluded { get; set; }
        Func<IPerformanceEvaluationProgramGateway, bool> IsPerformanceEvaluationProgramGatewayIncluded { get; set; }
        Func<IPerformanceEvaluationRatingLevel, bool> IsPerformanceEvaluationRatingLevelIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationGradeLevelMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationGradeLevel source, IPerformanceEvaluationGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationGradeLevel source, IPerformanceEvaluationGradeLevel target, Action<IPerformanceEvaluationGradeLevel, IPerformanceEvaluationGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationGradeLevelSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationProgramGatewayMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationProgramGateway source, IPerformanceEvaluationProgramGateway target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramGatewayDescriptor != target.ProgramGatewayDescriptor)
            {
                source.ProgramGatewayDescriptor = target.ProgramGatewayDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationProgramGateway source, IPerformanceEvaluationProgramGateway target, Action<IPerformanceEvaluationProgramGateway, IPerformanceEvaluationProgramGateway> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingLevelMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingLevel source, IPerformanceEvaluationRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptor != target.EvaluationRatingLevelDescriptor)
            {
                source.EvaluationRatingLevelDescriptor = target.EvaluationRatingLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingLevel source, IPerformanceEvaluationRatingLevel target, Action<IPerformanceEvaluationRatingLevel, IPerformanceEvaluationRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
    }

}
// Aggregate: PerformanceEvaluationRating

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceEvaluationRatingAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRating source, IPerformanceEvaluationRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsActualDateSupported)
                && target.ActualDate != source.ActualDate)
            {
                target.ActualDate = source.ActualDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsActualDurationSupported)
                && target.ActualDuration != source.ActualDuration)
            {
                target.ActualDuration = source.ActualDuration;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsActualTimeSupported)
                && target.ActualTime != source.ActualTime)
            {
                target.ActualTime = source.ActualTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAnnouncedSupported)
                && target.Announced != source.Announced)
            {
                target.Announced = source.Announced;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCoteachingStyleObservedDescriptorSupported)
                && target.CoteachingStyleObservedDescriptor != source.CoteachingStyleObservedDescriptor)
            {
                target.CoteachingStyleObservedDescriptor = source.CoteachingStyleObservedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported)
                && target.PerformanceEvaluationRatingLevelDescriptor != source.PerformanceEvaluationRatingLevelDescriptor)
            {
                target.PerformanceEvaluationRatingLevelDescriptor = source.PerformanceEvaluationRatingLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScheduleDateSupported)
                && target.ScheduleDate != source.ScheduleDate)
            {
                target.ScheduleDate = source.ScheduleDate;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingResultsSupported)
            {
                isModified |=
                    source.PerformanceEvaluationRatingResults.SynchronizeCollectionTo(
                        target.PerformanceEvaluationRatingResults,
                        onChildAdded: child =>
                            {
                                child.PerformanceEvaluationRating = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsPerformanceEvaluationRatingResultIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingReviewersSupported)
            {
                isModified |=
                    source.PerformanceEvaluationRatingReviewers.SynchronizeCollectionTo(
                        target.PerformanceEvaluationRatingReviewers,
                        onChildAdded: child =>
                            {
                                child.PerformanceEvaluationRating = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsPerformanceEvaluationRatingReviewerIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRating source, IPerformanceEvaluationRating target, Action<IPerformanceEvaluationRating, IPerformanceEvaluationRating> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsActualDateSupported)
                target.ActualDate = source.ActualDate;
            else
                targetSynchSupport.IsActualDateSupported = false;

            if (sourceSynchSupport.IsActualDurationSupported)
                target.ActualDuration = source.ActualDuration;
            else
                targetSynchSupport.IsActualDurationSupported = false;

            if (sourceSynchSupport.IsActualTimeSupported)
                target.ActualTime = source.ActualTime;
            else
                targetSynchSupport.IsActualTimeSupported = false;

            if (sourceSynchSupport.IsAnnouncedSupported)
                target.Announced = source.Announced;
            else
                targetSynchSupport.IsAnnouncedSupported = false;

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsCoteachingStyleObservedDescriptorSupported)
                target.CoteachingStyleObservedDescriptor = source.CoteachingStyleObservedDescriptor;
            else
                targetSynchSupport.IsCoteachingStyleObservedDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported)
                target.PerformanceEvaluationRatingLevelDescriptor = source.PerformanceEvaluationRatingLevelDescriptor;
            else
                targetSynchSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsScheduleDateSupported)
                target.ScheduleDate = source.ScheduleDate;
            else
                targetSynchSupport.IsScheduleDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PerformanceEvaluationResourceId = source.PerformanceEvaluationResourceId;
                target.PerformanceEvaluationDiscriminator = source.PerformanceEvaluationDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsPerformanceEvaluationRatingResultsSupported)
            {
                targetSynchSupport.IsPerformanceEvaluationRatingResultIncluded = sourceSynchSupport.IsPerformanceEvaluationRatingResultIncluded;
                source.PerformanceEvaluationRatingResults.MapCollectionTo(target.PerformanceEvaluationRatingResults, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationRatingResultsSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceEvaluationRatingReviewersSupported)
            {
                targetSynchSupport.IsPerformanceEvaluationRatingReviewerIncluded = sourceSynchSupport.IsPerformanceEvaluationRatingReviewerIncluded;
                source.PerformanceEvaluationRatingReviewers.MapCollectionTo(target.PerformanceEvaluationRatingReviewers, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationRatingReviewersSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingSynchronizationSourceSupport 
    {
        bool IsActualDateSupported { get; set; }
        bool IsActualDurationSupported { get; set; }
        bool IsActualTimeSupported { get; set; }
        bool IsAnnouncedSupported { get; set; }
        bool IsCommentsSupported { get; set; }
        bool IsCoteachingStyleObservedDescriptorSupported { get; set; }
        bool IsPerformanceEvaluationRatingLevelDescriptorSupported { get; set; }
        bool IsPerformanceEvaluationRatingResultsSupported { get; set; }
        bool IsPerformanceEvaluationRatingReviewersSupported { get; set; }
        bool IsScheduleDateSupported { get; set; }
        Func<IPerformanceEvaluationRatingResult, bool> IsPerformanceEvaluationRatingResultIncluded { get; set; }
        Func<IPerformanceEvaluationRatingReviewer, bool> IsPerformanceEvaluationRatingReviewerIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingResultMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingResult source, IPerformanceEvaluationRatingResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Rating != target.Rating)
            {
                source.Rating = target.Rating;
            }
            if (source.RatingResultTitle != target.RatingResultTitle)
            {
                source.RatingResultTitle = target.RatingResultTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingResult source, IPerformanceEvaluationRatingResult target, Action<IPerformanceEvaluationRatingResult, IPerformanceEvaluationRatingResult> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Rating = source.Rating;
            target.RatingResultTitle = source.RatingResultTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingResultSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingReviewerMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingReviewer source, IPerformanceEvaluationRatingReviewer target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FirstName != target.FirstName)
            {
                source.FirstName = target.FirstName;
            }
            if (source.LastSurname != target.LastSurname)
            {
                source.LastSurname = target.LastSurname;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsReviewerPersonIdSupported)
                && target.ReviewerPersonId != source.ReviewerPersonId)
            {
                target.ReviewerPersonId = source.ReviewerPersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReviewerSourceSystemDescriptorSupported)
                && target.ReviewerSourceSystemDescriptor != source.ReviewerSourceSystemDescriptor)
            {
                target.ReviewerSourceSystemDescriptor = source.ReviewerSourceSystemDescriptor;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // PerformanceEvaluationRatingReviewerReceivedTraining
            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported)
            {
                if (source.PerformanceEvaluationRatingReviewerReceivedTraining == null)
                {
                    if (target.PerformanceEvaluationRatingReviewerReceivedTraining != null)
                    {
                        target.PerformanceEvaluationRatingReviewerReceivedTraining = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.PerformanceEvaluationRatingReviewerReceivedTraining == null)
                    {
                        var itemType = target.GetType().GetProperty("PerformanceEvaluationRatingReviewerReceivedTraining").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.PerformanceEvaluationRatingReviewerReceivedTraining = (IPerformanceEvaluationRatingReviewerReceivedTraining) newItem;
                    }

                    isModified |= source.PerformanceEvaluationRatingReviewerReceivedTraining.Synchronize(target.PerformanceEvaluationRatingReviewerReceivedTraining);
                }
            }

            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingReviewer source, IPerformanceEvaluationRatingReviewer target, Action<IPerformanceEvaluationRatingReviewer, IPerformanceEvaluationRatingReviewer> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FirstName = source.FirstName;
            target.LastSurname = source.LastSurname;

            // Copy non-PK properties

            if (sourceSynchSupport.IsReviewerPersonIdSupported)
                target.ReviewerPersonId = source.ReviewerPersonId;
            else
                targetSynchSupport.IsReviewerPersonIdSupported = false;

            if (sourceSynchSupport.IsReviewerSourceSystemDescriptorSupported)
                target.ReviewerSourceSystemDescriptor = source.ReviewerSourceSystemDescriptor;
            else
                targetSynchSupport.IsReviewerSourceSystemDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ReviewerPersonResourceId = source.ReviewerPersonResourceId;
                target.ReviewerPersonDiscriminator = source.ReviewerPersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // PerformanceEvaluationRatingReviewerReceivedTraining (Source)
            if (sourceSynchSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported)
            {
                var itemProperty = target.GetType().GetProperty("PerformanceEvaluationRatingReviewerReceivedTraining");

                if (itemProperty != null)
                {
                    if (source.PerformanceEvaluationRatingReviewerReceivedTraining == null)
                    {
                        target.PerformanceEvaluationRatingReviewerReceivedTraining = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetPerformanceEvaluationRatingReviewerReceivedTraining = Activator.CreateInstance(itemType);
                        (targetPerformanceEvaluationRatingReviewerReceivedTraining as IChildEntity)?.SetParent(target);
                        source.PerformanceEvaluationRatingReviewerReceivedTraining.Map(targetPerformanceEvaluationRatingReviewerReceivedTraining);

                        // Update the target reference appropriately
                        target.PerformanceEvaluationRatingReviewerReceivedTraining = (IPerformanceEvaluationRatingReviewerReceivedTraining) targetPerformanceEvaluationRatingReviewerReceivedTraining;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported = false;
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport 
    {
        bool IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported { get; set; }
        bool IsReviewerPersonIdSupported { get; set; }
        bool IsReviewerSourceSystemDescriptorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingReviewerReceivedTrainingMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingReviewerReceivedTraining source, IPerformanceEvaluationRatingReviewerReceivedTraining target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsInterRaterReliabilityScoreSupported)
                && target.InterRaterReliabilityScore != source.InterRaterReliabilityScore)
            {
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReceivedTrainingDateSupported)
                && target.ReceivedTrainingDate != source.ReceivedTrainingDate)
            {
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingReviewerReceivedTraining source, IPerformanceEvaluationRatingReviewerReceivedTraining target, Action<IPerformanceEvaluationRatingReviewerReceivedTraining, IPerformanceEvaluationRatingReviewerReceivedTraining> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsInterRaterReliabilityScoreSupported)
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
            else
                targetSynchSupport.IsInterRaterReliabilityScoreSupported = false;

            if (sourceSynchSupport.IsReceivedTrainingDateSupported)
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
            else
                targetSynchSupport.IsReceivedTrainingDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport 
    {
        bool IsInterRaterReliabilityScoreSupported { get; set; }
        bool IsReceivedTrainingDateSupported { get; set; }
    }

}
// Aggregate: PerformanceEvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceEvaluationRatingLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingLevelDescriptorMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingLevelDescriptor source, IPerformanceEvaluationRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceEvaluationRatingLevelDescriptorId != target.PerformanceEvaluationRatingLevelDescriptorId)
            {
                source.PerformanceEvaluationRatingLevelDescriptorId = target.PerformanceEvaluationRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingLevelDescriptor source, IPerformanceEvaluationRatingLevelDescriptor target, Action<IPerformanceEvaluationRatingLevelDescriptor, IPerformanceEvaluationRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceEvaluationRatingLevelDescriptorId = source.PerformanceEvaluationRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: PerformanceEvaluationTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceEvaluationTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationTypeDescriptor source, IPerformanceEvaluationTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceEvaluationTypeDescriptorId != target.PerformanceEvaluationTypeDescriptorId)
            {
                source.PerformanceEvaluationTypeDescriptorId = target.PerformanceEvaluationTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationTypeDescriptor source, IPerformanceEvaluationTypeDescriptor target, Action<IPerformanceEvaluationTypeDescriptor, IPerformanceEvaluationTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceEvaluationTypeDescriptorId = source.PerformanceEvaluationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: PostSecondaryInstitution

namespace EdFi.Ods.Entities.Common.TPDM //.PostSecondaryInstitutionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionExtensionMapper
    {
        public static bool SynchronizeTo(this IPostSecondaryInstitutionExtension source, IPostSecondaryInstitutionExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.PostSecondaryInstitution as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPostSecondaryInstitutionExtension source, IPostSecondaryInstitutionExtension target, Action<IPostSecondaryInstitutionExtension, IPostSecondaryInstitutionExtension> onMapped)
        {
            var sourceSynchSupport = source as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostSecondaryInstitutionExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }

}
// Aggregate: PreviousCareerDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PreviousCareerDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class PreviousCareerDescriptorMapper
    {
        public static bool SynchronizeTo(this IPreviousCareerDescriptor source, IPreviousCareerDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPreviousCareerDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PreviousCareerDescriptorId != target.PreviousCareerDescriptorId)
            {
                source.PreviousCareerDescriptorId = target.PreviousCareerDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPreviousCareerDescriptor source, IPreviousCareerDescriptor target, Action<IPreviousCareerDescriptor, IPreviousCareerDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPreviousCareerDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPreviousCareerDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PreviousCareerDescriptorId = source.PreviousCareerDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPreviousCareerDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: ProfessionalDevelopmentEvent

namespace EdFi.Ods.Entities.Common.TPDM //.ProfessionalDevelopmentEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProfessionalDevelopmentEventMapper
    {
        public static bool SynchronizeTo(this IProfessionalDevelopmentEvent source, IProfessionalDevelopmentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IProfessionalDevelopmentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.ProfessionalDevelopmentTitle != target.ProfessionalDevelopmentTitle)
            {
                source.ProfessionalDevelopmentTitle = target.ProfessionalDevelopmentTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMultipleSessionSupported)
                && target.MultipleSession != source.MultipleSession)
            {
                target.MultipleSession = source.MultipleSession;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported)
                && target.ProfessionalDevelopmentOfferedByDescriptor != source.ProfessionalDevelopmentOfferedByDescriptor)
            {
                target.ProfessionalDevelopmentOfferedByDescriptor = source.ProfessionalDevelopmentOfferedByDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfessionalDevelopmentReasonSupported)
                && target.ProfessionalDevelopmentReason != source.ProfessionalDevelopmentReason)
            {
                target.ProfessionalDevelopmentReason = source.ProfessionalDevelopmentReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRequiredSupported)
                && target.Required != source.Required)
            {
                target.Required = source.Required;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalHoursSupported)
                && target.TotalHours != source.TotalHours)
            {
                target.TotalHours = source.TotalHours;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProfessionalDevelopmentEvent source, IProfessionalDevelopmentEvent target, Action<IProfessionalDevelopmentEvent, IProfessionalDevelopmentEvent> onMapped)
        {
            var sourceSynchSupport = source as IProfessionalDevelopmentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IProfessionalDevelopmentEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.ProfessionalDevelopmentTitle = source.ProfessionalDevelopmentTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMultipleSessionSupported)
                target.MultipleSession = source.MultipleSession;
            else
                targetSynchSupport.IsMultipleSessionSupported = false;

            if (sourceSynchSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported)
                target.ProfessionalDevelopmentOfferedByDescriptor = source.ProfessionalDevelopmentOfferedByDescriptor;
            else
                targetSynchSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported = false;

            if (sourceSynchSupport.IsProfessionalDevelopmentReasonSupported)
                target.ProfessionalDevelopmentReason = source.ProfessionalDevelopmentReason;
            else
                targetSynchSupport.IsProfessionalDevelopmentReasonSupported = false;

            if (sourceSynchSupport.IsRequiredSupported)
                target.Required = source.Required;
            else
                targetSynchSupport.IsRequiredSupported = false;

            if (sourceSynchSupport.IsTotalHoursSupported)
                target.TotalHours = source.TotalHours;
            else
                targetSynchSupport.IsTotalHoursSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProfessionalDevelopmentEventSynchronizationSourceSupport 
    {
        bool IsMultipleSessionSupported { get; set; }
        bool IsProfessionalDevelopmentOfferedByDescriptorSupported { get; set; }
        bool IsProfessionalDevelopmentReasonSupported { get; set; }
        bool IsRequiredSupported { get; set; }
        bool IsTotalHoursSupported { get; set; }
    }

}
// Aggregate: ProfessionalDevelopmentEventAttendance

namespace EdFi.Ods.Entities.Common.TPDM //.ProfessionalDevelopmentEventAttendanceAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProfessionalDevelopmentEventAttendanceMapper
    {
        public static bool SynchronizeTo(this IProfessionalDevelopmentEventAttendance source, IProfessionalDevelopmentEventAttendance target)
        {
            bool isModified = false;

            var sourceSupport = source as IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceDate != target.AttendanceDate)
            {
                source.AttendanceDate = target.AttendanceDate;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.ProfessionalDevelopmentTitle != target.ProfessionalDevelopmentTitle)
            {
                source.ProfessionalDevelopmentTitle = target.ProfessionalDevelopmentTitle;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventCategoryDescriptorSupported)
                && target.AttendanceEventCategoryDescriptor != source.AttendanceEventCategoryDescriptor)
            {
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProfessionalDevelopmentEventAttendance source, IProfessionalDevelopmentEventAttendance target, Action<IProfessionalDevelopmentEventAttendance, IProfessionalDevelopmentEventAttendance> onMapped)
        {
            var sourceSynchSupport = source as IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;
            var targetSynchSupport = target as IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceDate = source.AttendanceDate;
            target.Namespace = source.Namespace;
            target.PersonId = source.PersonId;
            target.ProfessionalDevelopmentTitle = source.ProfessionalDevelopmentTitle;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttendanceEventCategoryDescriptorSupported)
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            else
                targetSynchSupport.IsAttendanceEventCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
                target.ProfessionalDevelopmentEventResourceId = source.ProfessionalDevelopmentEventResourceId;
                target.ProfessionalDevelopmentEventDiscriminator = source.ProfessionalDevelopmentEventDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport 
    {
        bool IsAttendanceEventCategoryDescriptorSupported { get; set; }
        bool IsAttendanceEventReasonSupported { get; set; }
    }

}
// Aggregate: ProfessionalDevelopmentOfferedByDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ProfessionalDevelopmentOfferedByDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProfessionalDevelopmentOfferedByDescriptorMapper
    {
        public static bool SynchronizeTo(this IProfessionalDevelopmentOfferedByDescriptor source, IProfessionalDevelopmentOfferedByDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProfessionalDevelopmentOfferedByDescriptorId != target.ProfessionalDevelopmentOfferedByDescriptorId)
            {
                source.ProfessionalDevelopmentOfferedByDescriptorId = target.ProfessionalDevelopmentOfferedByDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProfessionalDevelopmentOfferedByDescriptor source, IProfessionalDevelopmentOfferedByDescriptor target, Action<IProfessionalDevelopmentOfferedByDescriptor, IProfessionalDevelopmentOfferedByDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProfessionalDevelopmentOfferedByDescriptorId = source.ProfessionalDevelopmentOfferedByDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: ProgramGatewayDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ProgramGatewayDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class ProgramGatewayDescriptorMapper
    {
        public static bool SynchronizeTo(this IProgramGatewayDescriptor source, IProgramGatewayDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramGatewayDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramGatewayDescriptorId != target.ProgramGatewayDescriptorId)
            {
                source.ProgramGatewayDescriptorId = target.ProgramGatewayDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgramGatewayDescriptor source, IProgramGatewayDescriptor target, Action<IProgramGatewayDescriptor, IProgramGatewayDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgramGatewayDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramGatewayDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramGatewayDescriptorId = source.ProgramGatewayDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramGatewayDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: QuantitativeMeasure

namespace EdFi.Ods.Entities.Common.TPDM //.QuantitativeMeasureAggregate
{
    [ExcludeFromCodeCoverage]
    public static class QuantitativeMeasureMapper
    {
        public static bool SynchronizeTo(this IQuantitativeMeasure source, IQuantitativeMeasure target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuantitativeMeasureSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.QuantitativeMeasureIdentifier != target.QuantitativeMeasureIdentifier)
            {
                source.QuantitativeMeasureIdentifier = target.QuantitativeMeasureIdentifier;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsQuantitativeMeasureDatatypeDescriptorSupported)
                && target.QuantitativeMeasureDatatypeDescriptor != source.QuantitativeMeasureDatatypeDescriptor)
            {
                target.QuantitativeMeasureDatatypeDescriptor = source.QuantitativeMeasureDatatypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsQuantitativeMeasureTypeDescriptorSupported)
                && target.QuantitativeMeasureTypeDescriptor != source.QuantitativeMeasureTypeDescriptor)
            {
                target.QuantitativeMeasureTypeDescriptor = source.QuantitativeMeasureTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuantitativeMeasure source, IQuantitativeMeasure target, Action<IQuantitativeMeasure, IQuantitativeMeasure> onMapped)
        {
            var sourceSynchSupport = source as IQuantitativeMeasureSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuantitativeMeasureSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.QuantitativeMeasureIdentifier = source.QuantitativeMeasureIdentifier;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsQuantitativeMeasureDatatypeDescriptorSupported)
                target.QuantitativeMeasureDatatypeDescriptor = source.QuantitativeMeasureDatatypeDescriptor;
            else
                targetSynchSupport.IsQuantitativeMeasureDatatypeDescriptorSupported = false;

            if (sourceSynchSupport.IsQuantitativeMeasureTypeDescriptorSupported)
                target.QuantitativeMeasureTypeDescriptor = source.QuantitativeMeasureTypeDescriptor;
            else
                targetSynchSupport.IsQuantitativeMeasureTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuantitativeMeasureSynchronizationSourceSupport 
    {
        bool IsQuantitativeMeasureDatatypeDescriptorSupported { get; set; }
        bool IsQuantitativeMeasureTypeDescriptorSupported { get; set; }
    }

}
// Aggregate: QuantitativeMeasureDatatypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.QuantitativeMeasureDatatypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class QuantitativeMeasureDatatypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IQuantitativeMeasureDatatypeDescriptor source, IQuantitativeMeasureDatatypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.QuantitativeMeasureDatatypeDescriptorId != target.QuantitativeMeasureDatatypeDescriptorId)
            {
                source.QuantitativeMeasureDatatypeDescriptorId = target.QuantitativeMeasureDatatypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuantitativeMeasureDatatypeDescriptor source, IQuantitativeMeasureDatatypeDescriptor target, Action<IQuantitativeMeasureDatatypeDescriptor, IQuantitativeMeasureDatatypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.QuantitativeMeasureDatatypeDescriptorId = source.QuantitativeMeasureDatatypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: QuantitativeMeasureScore

namespace EdFi.Ods.Entities.Common.TPDM //.QuantitativeMeasureScoreAggregate
{
    [ExcludeFromCodeCoverage]
    public static class QuantitativeMeasureScoreMapper
    {
        public static bool SynchronizeTo(this IQuantitativeMeasureScore source, IQuantitativeMeasureScore target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuantitativeMeasureScoreSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.QuantitativeMeasureIdentifier != target.QuantitativeMeasureIdentifier)
            {
                source.QuantitativeMeasureIdentifier = target.QuantitativeMeasureIdentifier;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsScoreValueSupported)
                && target.ScoreValue != source.ScoreValue)
            {
                target.ScoreValue = source.ScoreValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStandardErrorSupported)
                && target.StandardError != source.StandardError)
            {
                target.StandardError = source.StandardError;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuantitativeMeasureScore source, IQuantitativeMeasureScore target, Action<IQuantitativeMeasureScore, IQuantitativeMeasureScore> onMapped)
        {
            var sourceSynchSupport = source as IQuantitativeMeasureScoreSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuantitativeMeasureScoreSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.QuantitativeMeasureIdentifier = source.QuantitativeMeasureIdentifier;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsScoreValueSupported)
                target.ScoreValue = source.ScoreValue;
            else
                targetSynchSupport.IsScoreValueSupported = false;

            if (sourceSynchSupport.IsStandardErrorSupported)
                target.StandardError = source.StandardError;
            else
                targetSynchSupport.IsStandardErrorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementRatingResourceId = source.EvaluationElementRatingResourceId;
                target.EvaluationElementRatingDiscriminator = source.EvaluationElementRatingDiscriminator;
                target.QuantitativeMeasureResourceId = source.QuantitativeMeasureResourceId;
                target.QuantitativeMeasureDiscriminator = source.QuantitativeMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuantitativeMeasureScoreSynchronizationSourceSupport 
    {
        bool IsScoreValueSupported { get; set; }
        bool IsStandardErrorSupported { get; set; }
    }

}
// Aggregate: QuantitativeMeasureTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.QuantitativeMeasureTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class QuantitativeMeasureTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IQuantitativeMeasureTypeDescriptor source, IQuantitativeMeasureTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.QuantitativeMeasureTypeDescriptorId != target.QuantitativeMeasureTypeDescriptorId)
            {
                source.QuantitativeMeasureTypeDescriptorId = target.QuantitativeMeasureTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuantitativeMeasureTypeDescriptor source, IQuantitativeMeasureTypeDescriptor target, Action<IQuantitativeMeasureTypeDescriptor, IQuantitativeMeasureTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.QuantitativeMeasureTypeDescriptorId = source.QuantitativeMeasureTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: RecruitmentEvent

namespace EdFi.Ods.Entities.Common.TPDM //.RecruitmentEventAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEvent source, IRecruitmentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.EventTitle != target.EventTitle)
            {
                source.EventTitle = target.EventTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEventDescriptionSupported)
                && target.EventDescription != source.EventDescription)
            {
                target.EventDescription = source.EventDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventLocationSupported)
                && target.EventLocation != source.EventLocation)
            {
                target.EventLocation = source.EventLocation;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecruitmentEventTypeDescriptorSupported)
                && target.RecruitmentEventTypeDescriptor != source.RecruitmentEventTypeDescriptor)
            {
                target.RecruitmentEventTypeDescriptor = source.RecruitmentEventTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEvent source, IRecruitmentEvent target, Action<IRecruitmentEvent, IRecruitmentEvent> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.EventTitle = source.EventTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEventDescriptionSupported)
                target.EventDescription = source.EventDescription;
            else
                targetSynchSupport.IsEventDescriptionSupported = false;

            if (sourceSynchSupport.IsEventLocationSupported)
                target.EventLocation = source.EventLocation;
            else
                targetSynchSupport.IsEventLocationSupported = false;

            if (sourceSynchSupport.IsRecruitmentEventTypeDescriptorSupported)
                target.RecruitmentEventTypeDescriptor = source.RecruitmentEventTypeDescriptor;
            else
                targetSynchSupport.IsRecruitmentEventTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventSynchronizationSourceSupport 
    {
        bool IsEventDescriptionSupported { get; set; }
        bool IsEventLocationSupported { get; set; }
        bool IsRecruitmentEventTypeDescriptorSupported { get; set; }
    }

}
// Aggregate: RecruitmentEventAttendance

namespace EdFi.Ods.Entities.Common.TPDM //.RecruitmentEventAttendanceAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendance source, IRecruitmentEventAttendance target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.EventTitle != target.EventTitle)
            {
                source.EventTitle = target.EventTitle;
            }
            if (source.RecruitmentEventAttendeeIdentifier != target.RecruitmentEventAttendeeIdentifier)
            {
                source.RecruitmentEventAttendeeIdentifier = target.RecruitmentEventAttendeeIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAppliedSupported)
                && target.Applied != source.Applied)
            {
                target.Applied = source.Applied;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsElectronicMailAddressSupported)
                && target.ElectronicMailAddress != source.ElectronicMailAddress)
            {
                target.ElectronicMailAddress = source.ElectronicMailAddress;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMetSupported)
                && target.Met != source.Met)
            {
                target.Met = source.Met;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNotesSupported)
                && target.Notes != source.Notes)
            {
                target.Notes = source.Notes;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPreScreeningRatingSupported)
                && target.PreScreeningRating != source.PreScreeningRating)
            {
                target.PreScreeningRating = source.PreScreeningRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecruitmentEventAttendeeTypeDescriptorSupported)
                && target.RecruitmentEventAttendeeTypeDescriptor != source.RecruitmentEventAttendeeTypeDescriptor)
            {
                target.RecruitmentEventAttendeeTypeDescriptor = source.RecruitmentEventAttendeeTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReferralSupported)
                && target.Referral != source.Referral)
            {
                target.Referral = source.Referral;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReferredBySupported)
                && target.ReferredBy != source.ReferredBy)
            {
                target.ReferredBy = source.ReferredBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSocialMediaNetworkNameSupported)
                && target.SocialMediaNetworkName != source.SocialMediaNetworkName)
            {
                target.SocialMediaNetworkName = source.SocialMediaNetworkName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSocialMediaUserNameSupported)
                && target.SocialMediaUserName != source.SocialMediaUserName)
            {
                target.SocialMediaUserName = source.SocialMediaUserName;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // RecruitmentEventAttendanceCurrentPosition
            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendanceCurrentPositionSupported)
            {
                if (source.RecruitmentEventAttendanceCurrentPosition == null)
                {
                    if (target.RecruitmentEventAttendanceCurrentPosition != null)
                    {
                        target.RecruitmentEventAttendanceCurrentPosition = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.RecruitmentEventAttendanceCurrentPosition == null)
                    {
                        var itemType = target.GetType().GetProperty("RecruitmentEventAttendanceCurrentPosition").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.RecruitmentEventAttendanceCurrentPosition = (IRecruitmentEventAttendanceCurrentPosition) newItem;
                    }

                    isModified |= source.RecruitmentEventAttendanceCurrentPosition.Synchronize(target.RecruitmentEventAttendanceCurrentPosition);
                }
            }
            // RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications
            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported)
            {
                if (source.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications == null)
                {
                    if (target.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications != null)
                    {
                        target.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications == null)
                    {
                        var itemType = target.GetType().GetProperty("RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications = (IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications) newItem;
                    }

                    isModified |= source.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications.Synchronize(target.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendanceDisabilitiesSupported)
            {
                isModified |=
                    source.RecruitmentEventAttendanceDisabilities.SynchronizeCollectionTo(
                        target.RecruitmentEventAttendanceDisabilities,
                        onChildAdded: child =>
                            {
                                child.RecruitmentEventAttendance = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsRecruitmentEventAttendanceDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentsSupported)
            {
                isModified |=
                    source.RecruitmentEventAttendancePersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.RecruitmentEventAttendancePersonalIdentificationDocuments,
                        onChildAdded: child =>
                            {
                                child.RecruitmentEventAttendance = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendanceRacesSupported)
            {
                isModified |=
                    source.RecruitmentEventAttendanceRaces.SynchronizeCollectionTo(
                        target.RecruitmentEventAttendanceRaces,
                        onChildAdded: child =>
                            {
                                child.RecruitmentEventAttendance = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsRecruitmentEventAttendanceRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendanceTelephonesSupported)
            {
                isModified |=
                    source.RecruitmentEventAttendanceTelephones.SynchronizeCollectionTo(
                        target.RecruitmentEventAttendanceTelephones,
                        onChildAdded: child =>
                            {
                                child.RecruitmentEventAttendance = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsRecruitmentEventAttendanceTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendanceTouchpointsSupported)
            {
                isModified |=
                    source.RecruitmentEventAttendanceTouchpoints.SynchronizeCollectionTo(
                        target.RecruitmentEventAttendanceTouchpoints,
                        onChildAdded: child =>
                            {
                                child.RecruitmentEventAttendance = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsRecruitmentEventAttendanceTouchpointIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendance source, IRecruitmentEventAttendance target, Action<IRecruitmentEventAttendance, IRecruitmentEventAttendance> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.EventTitle = source.EventTitle;
            target.RecruitmentEventAttendeeIdentifier = source.RecruitmentEventAttendeeIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAppliedSupported)
                target.Applied = source.Applied;
            else
                targetSynchSupport.IsAppliedSupported = false;

            if (sourceSynchSupport.IsElectronicMailAddressSupported)
                target.ElectronicMailAddress = source.ElectronicMailAddress;
            else
                targetSynchSupport.IsElectronicMailAddressSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMetSupported)
                target.Met = source.Met;
            else
                targetSynchSupport.IsMetSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsNotesSupported)
                target.Notes = source.Notes;
            else
                targetSynchSupport.IsNotesSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsPreScreeningRatingSupported)
                target.PreScreeningRating = source.PreScreeningRating;
            else
                targetSynchSupport.IsPreScreeningRatingSupported = false;

            if (sourceSynchSupport.IsRecruitmentEventAttendeeTypeDescriptorSupported)
                target.RecruitmentEventAttendeeTypeDescriptor = source.RecruitmentEventAttendeeTypeDescriptor;
            else
                targetSynchSupport.IsRecruitmentEventAttendeeTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsReferralSupported)
                target.Referral = source.Referral;
            else
                targetSynchSupport.IsReferralSupported = false;

            if (sourceSynchSupport.IsReferredBySupported)
                target.ReferredBy = source.ReferredBy;
            else
                targetSynchSupport.IsReferredBySupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsSocialMediaNetworkNameSupported)
                target.SocialMediaNetworkName = source.SocialMediaNetworkName;
            else
                targetSynchSupport.IsSocialMediaNetworkNameSupported = false;

            if (sourceSynchSupport.IsSocialMediaUserNameSupported)
                target.SocialMediaUserName = source.SocialMediaUserName;
            else
                targetSynchSupport.IsSocialMediaUserNameSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.RecruitmentEventResourceId = source.RecruitmentEventResourceId;
                target.RecruitmentEventDiscriminator = source.RecruitmentEventDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // RecruitmentEventAttendanceCurrentPosition (Source)
            if (sourceSynchSupport.IsRecruitmentEventAttendanceCurrentPositionSupported)
            {
                var itemProperty = target.GetType().GetProperty("RecruitmentEventAttendanceCurrentPosition");

                if (itemProperty != null)
                {
                    if (source.RecruitmentEventAttendanceCurrentPosition == null)
                    {
                        target.RecruitmentEventAttendanceCurrentPosition = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetRecruitmentEventAttendanceCurrentPosition = Activator.CreateInstance(itemType);
                        (targetRecruitmentEventAttendanceCurrentPosition as IChildEntity)?.SetParent(target);
                        source.RecruitmentEventAttendanceCurrentPosition.Map(targetRecruitmentEventAttendanceCurrentPosition);

                        // Update the target reference appropriately
                        target.RecruitmentEventAttendanceCurrentPosition = (IRecruitmentEventAttendanceCurrentPosition) targetRecruitmentEventAttendanceCurrentPosition;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendanceCurrentPositionSupported = false;
            }
            // RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications (Source)
            if (sourceSynchSupport.IsRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported)
            {
                var itemProperty = target.GetType().GetProperty("RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications");

                if (itemProperty != null)
                {
                    if (source.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications == null)
                    {
                        target.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications = Activator.CreateInstance(itemType);
                        (targetRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications as IChildEntity)?.SetParent(target);
                        source.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications.Map(targetRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications);

                        // Update the target reference appropriately
                        target.RecruitmentEventAttendanceRecruitmentEventAttendeeQualifications = (IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications) targetRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported = false;
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsRecruitmentEventAttendanceDisabilitiesSupported)
            {
                targetSynchSupport.IsRecruitmentEventAttendanceDisabilityIncluded = sourceSynchSupport.IsRecruitmentEventAttendanceDisabilityIncluded;
                source.RecruitmentEventAttendanceDisabilities.MapCollectionTo(target.RecruitmentEventAttendanceDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendanceDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentsSupported)
            {
                targetSynchSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentIncluded = sourceSynchSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentIncluded;
                source.RecruitmentEventAttendancePersonalIdentificationDocuments.MapCollectionTo(target.RecruitmentEventAttendancePersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendancePersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsRecruitmentEventAttendanceRacesSupported)
            {
                targetSynchSupport.IsRecruitmentEventAttendanceRaceIncluded = sourceSynchSupport.IsRecruitmentEventAttendanceRaceIncluded;
                source.RecruitmentEventAttendanceRaces.MapCollectionTo(target.RecruitmentEventAttendanceRaces, target);
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendanceRacesSupported = false;
            }

            if (sourceSynchSupport.IsRecruitmentEventAttendanceTelephonesSupported)
            {
                targetSynchSupport.IsRecruitmentEventAttendanceTelephoneIncluded = sourceSynchSupport.IsRecruitmentEventAttendanceTelephoneIncluded;
                source.RecruitmentEventAttendanceTelephones.MapCollectionTo(target.RecruitmentEventAttendanceTelephones, target);
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendanceTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsRecruitmentEventAttendanceTouchpointsSupported)
            {
                targetSynchSupport.IsRecruitmentEventAttendanceTouchpointIncluded = sourceSynchSupport.IsRecruitmentEventAttendanceTouchpointIncluded;
                source.RecruitmentEventAttendanceTouchpoints.MapCollectionTo(target.RecruitmentEventAttendanceTouchpoints, target);
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendanceTouchpointsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceSynchronizationSourceSupport 
    {
        bool IsAppliedSupported { get; set; }
        bool IsElectronicMailAddressSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMetSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsNotesSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsPreScreeningRatingSupported { get; set; }
        bool IsRecruitmentEventAttendanceCurrentPositionSupported { get; set; }
        bool IsRecruitmentEventAttendanceDisabilitiesSupported { get; set; }
        bool IsRecruitmentEventAttendancePersonalIdentificationDocumentsSupported { get; set; }
        bool IsRecruitmentEventAttendanceRacesSupported { get; set; }
        bool IsRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSupported { get; set; }
        bool IsRecruitmentEventAttendanceTelephonesSupported { get; set; }
        bool IsRecruitmentEventAttendanceTouchpointsSupported { get; set; }
        bool IsRecruitmentEventAttendeeTypeDescriptorSupported { get; set; }
        bool IsReferralSupported { get; set; }
        bool IsReferredBySupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsSocialMediaNetworkNameSupported { get; set; }
        bool IsSocialMediaUserNameSupported { get; set; }
        Func<IRecruitmentEventAttendanceDisability, bool> IsRecruitmentEventAttendanceDisabilityIncluded { get; set; }
        Func<IRecruitmentEventAttendancePersonalIdentificationDocument, bool> IsRecruitmentEventAttendancePersonalIdentificationDocumentIncluded { get; set; }
        Func<IRecruitmentEventAttendanceRace, bool> IsRecruitmentEventAttendanceRaceIncluded { get; set; }
        Func<IRecruitmentEventAttendanceTelephone, bool> IsRecruitmentEventAttendanceTelephoneIncluded { get; set; }
        Func<IRecruitmentEventAttendanceTouchpoint, bool> IsRecruitmentEventAttendanceTouchpointIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceCurrentPositionMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendanceCurrentPosition source, IRecruitmentEventAttendanceCurrentPosition target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocationSupported)
                && target.Location != source.Location)
            {
                target.Location = source.Location;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPositionTitleSupported)
                && target.PositionTitle != source.PositionTitle)
            {
                target.PositionTitle = source.PositionTitle;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported)
            {
                isModified |=
                    source.RecruitmentEventAttendanceCurrentPositionGradeLevels.SynchronizeCollectionTo(
                        target.RecruitmentEventAttendanceCurrentPositionGradeLevels,
                        onChildAdded: child =>
                            {
                                child.RecruitmentEventAttendanceCurrentPosition = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendanceCurrentPosition source, IRecruitmentEventAttendanceCurrentPosition target, Action<IRecruitmentEventAttendanceCurrentPosition, IRecruitmentEventAttendanceCurrentPosition> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsLocationSupported)
                target.Location = source.Location;
            else
                targetSynchSupport.IsLocationSupported = false;

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsPositionTitleSupported)
                target.PositionTitle = source.PositionTitle;
            else
                targetSynchSupport.IsPositionTitleSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported)
            {
                targetSynchSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded = sourceSynchSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded;
                source.RecruitmentEventAttendanceCurrentPositionGradeLevels.MapCollectionTo(target.RecruitmentEventAttendanceCurrentPositionGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceCurrentPositionSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsLocationSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsPositionTitleSupported { get; set; }
        bool IsRecruitmentEventAttendanceCurrentPositionGradeLevelsSupported { get; set; }
        Func<IRecruitmentEventAttendanceCurrentPositionGradeLevel, bool> IsRecruitmentEventAttendanceCurrentPositionGradeLevelIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceCurrentPositionGradeLevelMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendanceCurrentPositionGradeLevel source, IRecruitmentEventAttendanceCurrentPositionGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceCurrentPositionGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendanceCurrentPositionGradeLevel source, IRecruitmentEventAttendanceCurrentPositionGradeLevel target, Action<IRecruitmentEventAttendanceCurrentPositionGradeLevel, IRecruitmentEventAttendanceCurrentPositionGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceCurrentPositionGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceCurrentPositionGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceCurrentPositionGradeLevelSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceDisabilityMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendanceDisability source, IRecruitmentEventAttendanceDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsRecruitmentEventAttendanceDisabilityDesignationsSupported)
            {
                isModified |=
                    source.RecruitmentEventAttendanceDisabilityDesignations.SynchronizeCollectionTo(
                        target.RecruitmentEventAttendanceDisabilityDesignations,
                        onChildAdded: child =>
                            {
                                child.RecruitmentEventAttendanceDisability = target;
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsRecruitmentEventAttendanceDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendanceDisability source, IRecruitmentEventAttendanceDisability target, Action<IRecruitmentEventAttendanceDisability, IRecruitmentEventAttendanceDisability> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsRecruitmentEventAttendanceDisabilityDesignationsSupported)
            {
                targetSynchSupport.IsRecruitmentEventAttendanceDisabilityDesignationIncluded = sourceSynchSupport.IsRecruitmentEventAttendanceDisabilityDesignationIncluded;
                source.RecruitmentEventAttendanceDisabilityDesignations.MapCollectionTo(target.RecruitmentEventAttendanceDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsRecruitmentEventAttendanceDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceDisabilitySynchronizationSourceSupport 
    {
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        bool IsRecruitmentEventAttendanceDisabilityDesignationsSupported { get; set; }
        Func<IRecruitmentEventAttendanceDisabilityDesignation, bool> IsRecruitmentEventAttendanceDisabilityDesignationIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceDisabilityDesignationMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendanceDisabilityDesignation source, IRecruitmentEventAttendanceDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendanceDisabilityDesignation source, IRecruitmentEventAttendanceDisabilityDesignation target, Action<IRecruitmentEventAttendanceDisabilityDesignation, IRecruitmentEventAttendanceDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceDisabilityDesignationSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendancePersonalIdentificationDocumentMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendancePersonalIdentificationDocument source, IRecruitmentEventAttendancePersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendancePersonalIdentificationDocument source, IRecruitmentEventAttendancePersonalIdentificationDocument target, Action<IRecruitmentEventAttendancePersonalIdentificationDocument, IRecruitmentEventAttendancePersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendancePersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceRaceMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendanceRace source, IRecruitmentEventAttendanceRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendanceRace source, IRecruitmentEventAttendanceRace target, Action<IRecruitmentEventAttendanceRace, IRecruitmentEventAttendanceRace> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceRaceSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications source, IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCapacityToServeSupported)
                && target.CapacityToServe != source.CapacityToServe)
            {
                target.CapacityToServe = source.CapacityToServe;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEligibleSupported)
                && target.Eligible != source.Eligible)
            {
                target.Eligible = source.Eligible;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfServiceCurrentPlacementSupported)
                && target.YearsOfServiceCurrentPlacement != source.YearsOfServiceCurrentPlacement)
            {
                target.YearsOfServiceCurrentPlacement = source.YearsOfServiceCurrentPlacement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfServiceTotalSupported)
                && target.YearsOfServiceTotal != source.YearsOfServiceTotal)
            {
                target.YearsOfServiceTotal = source.YearsOfServiceTotal;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications source, IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications target, Action<IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications, IRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCapacityToServeSupported)
                target.CapacityToServe = source.CapacityToServe;
            else
                targetSynchSupport.IsCapacityToServeSupported = false;

            if (sourceSynchSupport.IsEligibleSupported)
                target.Eligible = source.Eligible;
            else
                targetSynchSupport.IsEligibleSupported = false;

            if (sourceSynchSupport.IsYearsOfServiceCurrentPlacementSupported)
                target.YearsOfServiceCurrentPlacement = source.YearsOfServiceCurrentPlacement;
            else
                targetSynchSupport.IsYearsOfServiceCurrentPlacementSupported = false;

            if (sourceSynchSupport.IsYearsOfServiceTotalSupported)
                target.YearsOfServiceTotal = source.YearsOfServiceTotal;
            else
                targetSynchSupport.IsYearsOfServiceTotalSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceRecruitmentEventAttendeeQualificationsSynchronizationSourceSupport 
    {
        bool IsCapacityToServeSupported { get; set; }
        bool IsEligibleSupported { get; set; }
        bool IsYearsOfServiceCurrentPlacementSupported { get; set; }
        bool IsYearsOfServiceTotalSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceTelephoneMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendanceTelephone source, IRecruitmentEventAttendanceTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendanceTelephone source, IRecruitmentEventAttendanceTelephone target, Action<IRecruitmentEventAttendanceTelephone, IRecruitmentEventAttendanceTelephone> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendanceTouchpointMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendanceTouchpoint source, IRecruitmentEventAttendanceTouchpoint target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendanceTouchpointSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TouchpointContent != target.TouchpointContent)
            {
                source.TouchpointContent = target.TouchpointContent;
            }
            if (source.TouchpointDate != target.TouchpointDate)
            {
                source.TouchpointDate = target.TouchpointDate;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendanceTouchpoint source, IRecruitmentEventAttendanceTouchpoint target, Action<IRecruitmentEventAttendanceTouchpoint, IRecruitmentEventAttendanceTouchpoint> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendanceTouchpointSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendanceTouchpointSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TouchpointContent = source.TouchpointContent;
            target.TouchpointDate = source.TouchpointDate;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendanceTouchpointSynchronizationSourceSupport 
    {
    }

}
// Aggregate: RecruitmentEventAttendeeTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.RecruitmentEventAttendeeTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventAttendeeTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventAttendeeTypeDescriptor source, IRecruitmentEventAttendeeTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecruitmentEventAttendeeTypeDescriptorId != target.RecruitmentEventAttendeeTypeDescriptorId)
            {
                source.RecruitmentEventAttendeeTypeDescriptorId = target.RecruitmentEventAttendeeTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventAttendeeTypeDescriptor source, IRecruitmentEventAttendeeTypeDescriptor target, Action<IRecruitmentEventAttendeeTypeDescriptor, IRecruitmentEventAttendeeTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RecruitmentEventAttendeeTypeDescriptorId = source.RecruitmentEventAttendeeTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventAttendeeTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: RecruitmentEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.RecruitmentEventTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this IRecruitmentEventTypeDescriptor source, IRecruitmentEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecruitmentEventTypeDescriptorId != target.RecruitmentEventTypeDescriptorId)
            {
                source.RecruitmentEventTypeDescriptorId = target.RecruitmentEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventTypeDescriptor source, IRecruitmentEventTypeDescriptor target, Action<IRecruitmentEventTypeDescriptor, IRecruitmentEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RecruitmentEventTypeDescriptorId = source.RecruitmentEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: RubricDimension

namespace EdFi.Ods.Entities.Common.TPDM //.RubricDimensionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RubricDimensionMapper
    {
        public static bool SynchronizeTo(this IRubricDimension source, IRubricDimension target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricDimensionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.RubricRating != target.RubricRating)
            {
                source.RubricRating = target.RubricRating;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCriterionDescriptionSupported)
                && target.CriterionDescription != source.CriterionDescription)
            {
                target.CriterionDescription = source.CriterionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDimensionOrderSupported)
                && target.DimensionOrder != source.DimensionOrder)
            {
                target.DimensionOrder = source.DimensionOrder;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRubricRatingLevelDescriptorSupported)
                && target.RubricRatingLevelDescriptor != source.RubricRatingLevelDescriptor)
            {
                target.RubricRatingLevelDescriptor = source.RubricRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricDimension source, IRubricDimension target, Action<IRubricDimension, IRubricDimension> onMapped)
        {
            var sourceSynchSupport = source as IRubricDimensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricDimensionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.RubricRating = source.RubricRating;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCriterionDescriptionSupported)
                target.CriterionDescription = source.CriterionDescription;
            else
                targetSynchSupport.IsCriterionDescriptionSupported = false;

            if (sourceSynchSupport.IsDimensionOrderSupported)
                target.DimensionOrder = source.DimensionOrder;
            else
                targetSynchSupport.IsDimensionOrderSupported = false;

            if (sourceSynchSupport.IsRubricRatingLevelDescriptorSupported)
                target.RubricRatingLevelDescriptor = source.RubricRatingLevelDescriptor;
            else
                targetSynchSupport.IsRubricRatingLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricDimensionSynchronizationSourceSupport 
    {
        bool IsCriterionDescriptionSupported { get; set; }
        bool IsDimensionOrderSupported { get; set; }
        bool IsRubricRatingLevelDescriptorSupported { get; set; }
    }

}
// Aggregate: RubricRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.RubricRatingLevelDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class RubricRatingLevelDescriptorMapper
    {
        public static bool SynchronizeTo(this IRubricRatingLevelDescriptor source, IRubricRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RubricRatingLevelDescriptorId != target.RubricRatingLevelDescriptorId)
            {
                source.RubricRatingLevelDescriptorId = target.RubricRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricRatingLevelDescriptor source, IRubricRatingLevelDescriptor target, Action<IRubricRatingLevelDescriptor, IRubricRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRubricRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RubricRatingLevelDescriptorId = source.RubricRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: SalaryTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.SalaryTypeDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SalaryTypeDescriptorMapper
    {
        public static bool SynchronizeTo(this ISalaryTypeDescriptor source, ISalaryTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISalaryTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SalaryTypeDescriptorId != target.SalaryTypeDescriptorId)
            {
                source.SalaryTypeDescriptorId = target.SalaryTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISalaryTypeDescriptor source, ISalaryTypeDescriptor target, Action<ISalaryTypeDescriptor, ISalaryTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISalaryTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISalaryTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SalaryTypeDescriptorId = source.SalaryTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISalaryTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: School

namespace EdFi.Ods.Entities.Common.TPDM //.SchoolAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SchoolExtensionMapper
    {
        public static bool SynchronizeTo(this ISchoolExtension source, ISchoolExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.School as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAccreditationStatusDescriptorSupported)
                && target.AccreditationStatusDescriptor != source.AccreditationStatusDescriptor)
            {
                target.AccreditationStatusDescriptor = source.AccreditationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImprovingSchoolSupported)
                && target.ImprovingSchool != source.ImprovingSchool)
            {
                target.ImprovingSchool = source.ImprovingSchool;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPostSecondaryInstitutionIdSupported)
                && target.PostSecondaryInstitutionId != source.PostSecondaryInstitutionId)
            {
                target.PostSecondaryInstitutionId = source.PostSecondaryInstitutionId;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolExtension source, ISchoolExtension target, Action<ISchoolExtension, ISchoolExtension> onMapped)
        {
            var sourceSynchSupport = source as ISchoolExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAccreditationStatusDescriptorSupported)
                target.AccreditationStatusDescriptor = source.AccreditationStatusDescriptor;
            else
                targetSynchSupport.IsAccreditationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsImprovingSchoolSupported)
                target.ImprovingSchool = source.ImprovingSchool;
            else
                targetSynchSupport.IsImprovingSchoolSupported = false;

            if (sourceSynchSupport.IsPostSecondaryInstitutionIdSupported)
                target.PostSecondaryInstitutionId = source.PostSecondaryInstitutionId;
            else
                targetSynchSupport.IsPostSecondaryInstitutionIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PostSecondaryInstitutionResourceId = source.PostSecondaryInstitutionResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolExtensionSynchronizationSourceSupport 
    {
        bool IsAccreditationStatusDescriptorSupported { get; set; }
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
        bool IsImprovingSchoolSupported { get; set; }
        bool IsPostSecondaryInstitutionIdSupported { get; set; }
    }

}
// Aggregate: Staff

namespace EdFi.Ods.Entities.Common.TPDM //.StaffAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffEducatorPreparationProgramMapper
    {
        public static bool SynchronizeTo(this IStaffEducatorPreparationProgram source, IStaffEducatorPreparationProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducatorPreparationProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducatorPreparationProgram source, IStaffEducatorPreparationProgram target, Action<IStaffEducatorPreparationProgram, IStaffEducatorPreparationProgram> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducatorPreparationProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducatorPreparationProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducatorPreparationProgramResourceId = source.EducatorPreparationProgramResourceId;
                target.EducatorPreparationProgramDiscriminator = source.EducatorPreparationProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducatorPreparationProgramSynchronizationSourceSupport 
    {
    }

    [ExcludeFromCodeCoverage]
    public static class StaffEducatorResearchMapper
    {
        public static bool SynchronizeTo(this IStaffEducatorResearch source, IStaffEducatorResearch target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducatorResearchSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceDateSupported)
                && target.ResearchExperienceDate != source.ResearchExperienceDate)
            {
                target.ResearchExperienceDate = source.ResearchExperienceDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceDescriptionSupported)
                && target.ResearchExperienceDescription != source.ResearchExperienceDescription)
            {
                target.ResearchExperienceDescription = source.ResearchExperienceDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceTitleSupported)
                && target.ResearchExperienceTitle != source.ResearchExperienceTitle)
            {
                target.ResearchExperienceTitle = source.ResearchExperienceTitle;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducatorResearch source, IStaffEducatorResearch target, Action<IStaffEducatorResearch, IStaffEducatorResearch> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducatorResearchSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducatorResearchSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsResearchExperienceDateSupported)
                target.ResearchExperienceDate = source.ResearchExperienceDate;
            else
                targetSynchSupport.IsResearchExperienceDateSupported = false;

            if (sourceSynchSupport.IsResearchExperienceDescriptionSupported)
                target.ResearchExperienceDescription = source.ResearchExperienceDescription;
            else
                targetSynchSupport.IsResearchExperienceDescriptionSupported = false;

            if (sourceSynchSupport.IsResearchExperienceTitleSupported)
                target.ResearchExperienceTitle = source.ResearchExperienceTitle;
            else
                targetSynchSupport.IsResearchExperienceTitleSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducatorResearchSynchronizationSourceSupport 
    {
        bool IsResearchExperienceDateSupported { get; set; }
        bool IsResearchExperienceDescriptionSupported { get; set; }
        bool IsResearchExperienceTitleSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffExtensionMapper
    {
        public static bool SynchronizeTo(this IStaffExtension source, IStaffExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Staff as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRequisitionNumberSupported)
                && target.RequisitionNumber != source.RequisitionNumber)
            {
                target.RequisitionNumber = source.RequisitionNumber;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // StaffEducatorResearch
            if (sourceSupport == null || sourceSupport.IsStaffEducatorResearchSupported)
            {
                if (source.StaffEducatorResearch == null)
                {
                    if (target.StaffEducatorResearch != null)
                    {
                        target.StaffEducatorResearch = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffEducatorResearch == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffEducatorResearch").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffEducatorResearch = (IStaffEducatorResearch) newItem;
                    }

                    isModified |= source.StaffEducatorResearch.Synchronize(target.StaffEducatorResearch);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffEducatorPreparationProgramsSupported)
            {
                isModified |=
                    source.StaffEducatorPreparationPrograms.SynchronizeCollectionTo(
                        target.StaffEducatorPreparationPrograms,
                        onChildAdded: child =>
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsStaffEducatorPreparationProgramIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported)
            {
                isModified |=
                    source.StaffHighlyQualifiedAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffHighlyQualifiedAcademicSubjects,
                        onChildAdded: child =>
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffExtension source, IStaffExtension target, Action<IStaffExtension, IStaffExtension> onMapped)
        {
            var sourceSynchSupport = source as IStaffExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsRequisitionNumberSupported)
                target.RequisitionNumber = source.RequisitionNumber;
            else
                targetSynchSupport.IsRequisitionNumberSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StaffEducatorResearch (Source)
            if (sourceSynchSupport.IsStaffEducatorResearchSupported)
            {
                var itemProperty = target.GetType().GetProperty("StaffEducatorResearch");

                if (itemProperty != null)
                {
                    if (source.StaffEducatorResearch == null)
                    {
                        target.StaffEducatorResearch = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffEducatorResearch = Activator.CreateInstance(itemType);
                        (targetStaffEducatorResearch as IChildEntity)?.SetParent(target.Staff);
                        source.StaffEducatorResearch.Map(targetStaffEducatorResearch);

                        // Update the target reference appropriately
                        target.StaffEducatorResearch = (IStaffEducatorResearch) targetStaffEducatorResearch;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStaffEducatorResearchSupported = false;
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffEducatorPreparationProgramsSupported)
            {
                targetSynchSupport.IsStaffEducatorPreparationProgramIncluded = sourceSynchSupport.IsStaffEducatorPreparationProgramIncluded;
                source.StaffEducatorPreparationPrograms.MapCollectionTo(target.StaffEducatorPreparationPrograms, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffEducatorPreparationProgramsSupported = false;
            }

            if (sourceSynchSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported)
            {
                targetSynchSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded = sourceSynchSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded;
                source.StaffHighlyQualifiedAcademicSubjects.MapCollectionTo(target.StaffHighlyQualifiedAcademicSubjects, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffExtensionSynchronizationSourceSupport 
    {
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsRequisitionNumberSupported { get; set; }
        bool IsStaffEducatorPreparationProgramsSupported { get; set; }
        bool IsStaffEducatorResearchSupported { get; set; }
        bool IsStaffHighlyQualifiedAcademicSubjectsSupported { get; set; }
        Func<IStaffEducatorPreparationProgram, bool> IsStaffEducatorPreparationProgramIncluded { get; set; }
        Func<IStaffHighlyQualifiedAcademicSubject, bool> IsStaffHighlyQualifiedAcademicSubjectIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffHighlyQualifiedAcademicSubjectMapper
    {
        public static bool SynchronizeTo(this IStaffHighlyQualifiedAcademicSubject source, IStaffHighlyQualifiedAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffHighlyQualifiedAcademicSubject source, IStaffHighlyQualifiedAcademicSubject target, Action<IStaffHighlyQualifiedAcademicSubject, IStaffHighlyQualifiedAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport 
    {
    }

}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEducationOrganizationAssignmentAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationAssignmentAssociationExtensionMapper
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationAssignmentAssociationExtension source, IStaffEducationOrganizationAssignmentAssociationExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StaffEducationOrganizationAssignmentAssociation as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported)
                && target.YearsOfExperienceAtCurrentEducationOrganization != source.YearsOfExperienceAtCurrentEducationOrganization)
            {
                target.YearsOfExperienceAtCurrentEducationOrganization = source.YearsOfExperienceAtCurrentEducationOrganization;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationAssignmentAssociationExtension source, IStaffEducationOrganizationAssignmentAssociationExtension target, Action<IStaffEducationOrganizationAssignmentAssociationExtension, IStaffEducationOrganizationAssignmentAssociationExtension> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported)
                target.YearsOfExperienceAtCurrentEducationOrganization = source.YearsOfExperienceAtCurrentEducationOrganization;
            else
                targetSynchSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport 
    {
        bool IsYearsOfExperienceAtCurrentEducationOrganizationSupported { get; set; }
    }

}
// Aggregate: StaffEducationOrganizationEmploymentAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEducationOrganizationEmploymentAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationEmploymentAssociationBackgroundCheckMapper
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationEmploymentAssociationBackgroundCheck source, IStaffEducationOrganizationEmploymentAssociationBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptor != target.BackgroundCheckTypeDescriptor)
            {
                source.BackgroundCheckTypeDescriptor = target.BackgroundCheckTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationEmploymentAssociationBackgroundCheck source, IStaffEducationOrganizationEmploymentAssociationBackgroundCheck target, Action<IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, IStaffEducationOrganizationEmploymentAssociationBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationEmploymentAssociationBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationEmploymentAssociationExtensionMapper
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationEmploymentAssociationExtension source, IStaffEducationOrganizationEmploymentAssociationExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StaffEducationOrganizationEmploymentAssociation as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsLengthOfContractDescriptorSupported)
                && target.LengthOfContractDescriptor != source.LengthOfContractDescriptor)
            {
                target.LengthOfContractDescriptor = source.LengthOfContractDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProbationCompleteDateSupported)
                && target.ProbationCompleteDate != source.ProbationCompleteDate)
            {
                target.ProbationCompleteDate = source.ProbationCompleteDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTenuredSupported)
                && target.Tenured != source.Tenured)
            {
                target.Tenured = source.Tenured;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTenureTrackSupported)
                && target.TenureTrack != source.TenureTrack)
            {
                target.TenureTrack = source.TenureTrack;
                isModified = true;
            }

            // ----------------------------------
            //   Synch One-to-one relationships
            // ----------------------------------
            // StaffEducationOrganizationEmploymentAssociationSalary
            if (sourceSupport == null || sourceSupport.IsStaffEducationOrganizationEmploymentAssociationSalarySupported)
            {
                if (source.StaffEducationOrganizationEmploymentAssociationSalary == null)
                {
                    if (target.StaffEducationOrganizationEmploymentAssociationSalary != null)
                    {
                        target.StaffEducationOrganizationEmploymentAssociationSalary = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffEducationOrganizationEmploymentAssociationSalary == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffEducationOrganizationEmploymentAssociationSalary").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffEducationOrganizationEmploymentAssociationSalary = (IStaffEducationOrganizationEmploymentAssociationSalary) newItem;
                    }

                    isModified |= source.StaffEducationOrganizationEmploymentAssociationSalary.Synchronize(target.StaffEducationOrganizationEmploymentAssociationSalary);
                }
            }

            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported)
            {
                isModified |=
                    source.StaffEducationOrganizationEmploymentAssociationBackgroundChecks.SynchronizeCollectionTo(
                        target.StaffEducationOrganizationEmploymentAssociationBackgroundChecks,
                        onChildAdded: child =>
                            {
                                child.StaffEducationOrganizationEmploymentAssociationExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.StaffEducationOrganizationEmploymentAssociation);
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffEducationOrganizationEmploymentAssociationSenioritiesSupported)
            {
                isModified |=
                    source.StaffEducationOrganizationEmploymentAssociationSeniorities.SynchronizeCollectionTo(
                        target.StaffEducationOrganizationEmploymentAssociationSeniorities,
                        onChildAdded: child =>
                            {
                                child.StaffEducationOrganizationEmploymentAssociationExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.StaffEducationOrganizationEmploymentAssociation);
                            },
                        includeItem: sourceSupport == null
                            ? null
                            : sourceSupport.IsStaffEducationOrganizationEmploymentAssociationSeniorityIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationEmploymentAssociationExtension source, IStaffEducationOrganizationEmploymentAssociationExtension target, Action<IStaffEducationOrganizationEmploymentAssociationExtension, IStaffEducationOrganizationEmploymentAssociationExtension> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsLengthOfContractDescriptorSupported)
                target.LengthOfContractDescriptor = source.LengthOfContractDescriptor;
            else
                targetSynchSupport.IsLengthOfContractDescriptorSupported = false;

            if (sourceSynchSupport.IsProbationCompleteDateSupported)
                target.ProbationCompleteDate = source.ProbationCompleteDate;
            else
                targetSynchSupport.IsProbationCompleteDateSupported = false;

            if (sourceSynchSupport.IsTenuredSupported)
                target.Tenured = source.Tenured;
            else
                targetSynchSupport.IsTenuredSupported = false;

            if (sourceSynchSupport.IsTenureTrackSupported)
                target.TenureTrack = source.TenureTrack;
            else
                targetSynchSupport.IsTenureTrackSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StaffEducationOrganizationEmploymentAssociationSalary (Source)
            if (sourceSynchSupport.IsStaffEducationOrganizationEmploymentAssociationSalarySupported)
            {
                var itemProperty = target.GetType().GetProperty("StaffEducationOrganizationEmploymentAssociationSalary");

                if (itemProperty != null)
                {
                    if (source.StaffEducationOrganizationEmploymentAssociationSalary == null)
                    {
                        target.StaffEducationOrganizationEmploymentAssociationSalary = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffEducationOrganizationEmploymentAssociationSalary = Activator.CreateInstance(itemType);
                        (targetStaffEducationOrganizationEmploymentAssociationSalary as IChildEntity)?.SetParent(target.StaffEducationOrganizationEmploymentAssociation);
                        source.StaffEducationOrganizationEmploymentAssociationSalary.Map(targetStaffEducationOrganizationEmploymentAssociationSalary);

                        // Update the target reference appropriately
                        target.StaffEducationOrganizationEmploymentAssociationSalary = (IStaffEducationOrganizationEmploymentAssociationSalary) targetStaffEducationOrganizationEmploymentAssociationSalary;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStaffEducationOrganizationEmploymentAssociationSalarySupported = false;
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported)
            {
                targetSynchSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded = sourceSynchSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded;
                source.StaffEducationOrganizationEmploymentAssociationBackgroundChecks.MapCollectionTo(target.StaffEducationOrganizationEmploymentAssociationBackgroundChecks, target.StaffEducationOrganizationEmploymentAssociation);
            }
            else
            {
                targetSynchSupport.IsStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported = false;
            }

            if (sourceSynchSupport.IsStaffEducationOrganizationEmploymentAssociationSenioritiesSupported)
            {
                targetSynchSupport.IsStaffEducationOrganizationEmploymentAssociationSeniorityIncluded = sourceSynchSupport.IsStaffEducationOrganizationEmploymentAssociationSeniorityIncluded;
                source.StaffEducationOrganizationEmploymentAssociationSeniorities.MapCollectionTo(target.StaffEducationOrganizationEmploymentAssociationSeniorities, target.StaffEducationOrganizationEmploymentAssociation);
            }
            else
            {
                targetSynchSupport.IsStaffEducationOrganizationEmploymentAssociationSenioritiesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationEmploymentAssociationExtensionSynchronizationSourceSupport 
    {
        bool IsLengthOfContractDescriptorSupported { get; set; }
        bool IsProbationCompleteDateSupported { get; set; }
        bool IsStaffEducationOrganizationEmploymentAssociationBackgroundChecksSupported { get; set; }
        bool IsStaffEducationOrganizationEmploymentAssociationSalarySupported { get; set; }
        bool IsStaffEducationOrganizationEmploymentAssociationSenioritiesSupported { get; set; }
        bool IsTenuredSupported { get; set; }
        bool IsTenureTrackSupported { get; set; }
        Func<IStaffEducationOrganizationEmploymentAssociationBackgroundCheck, bool> IsStaffEducationOrganizationEmploymentAssociationBackgroundCheckIncluded { get; set; }
        Func<IStaffEducationOrganizationEmploymentAssociationSeniority, bool> IsStaffEducationOrganizationEmploymentAssociationSeniorityIncluded { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationEmploymentAssociationSalaryMapper
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationEmploymentAssociationSalary source, IStaffEducationOrganizationEmploymentAssociationSalary target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSalaryAmountSupported)
                && target.SalaryAmount != source.SalaryAmount)
            {
                target.SalaryAmount = source.SalaryAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryMaxRangeSupported)
                && target.SalaryMaxRange != source.SalaryMaxRange)
            {
                target.SalaryMaxRange = source.SalaryMaxRange;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryMinRangeSupported)
                && target.SalaryMinRange != source.SalaryMinRange)
            {
                target.SalaryMinRange = source.SalaryMinRange;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryTypeDescriptorSupported)
                && target.SalaryTypeDescriptor != source.SalaryTypeDescriptor)
            {
                target.SalaryTypeDescriptor = source.SalaryTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationEmploymentAssociationSalary source, IStaffEducationOrganizationEmploymentAssociationSalary target, Action<IStaffEducationOrganizationEmploymentAssociationSalary, IStaffEducationOrganizationEmploymentAssociationSalary> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsSalaryAmountSupported)
                target.SalaryAmount = source.SalaryAmount;
            else
                targetSynchSupport.IsSalaryAmountSupported = false;

            if (sourceSynchSupport.IsSalaryMaxRangeSupported)
                target.SalaryMaxRange = source.SalaryMaxRange;
            else
                targetSynchSupport.IsSalaryMaxRangeSupported = false;

            if (sourceSynchSupport.IsSalaryMinRangeSupported)
                target.SalaryMinRange = source.SalaryMinRange;
            else
                targetSynchSupport.IsSalaryMinRangeSupported = false;

            if (sourceSynchSupport.IsSalaryTypeDescriptorSupported)
                target.SalaryTypeDescriptor = source.SalaryTypeDescriptor;
            else
                targetSynchSupport.IsSalaryTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationEmploymentAssociationSalarySynchronizationSourceSupport 
    {
        bool IsSalaryAmountSupported { get; set; }
        bool IsSalaryMaxRangeSupported { get; set; }
        bool IsSalaryMinRangeSupported { get; set; }
        bool IsSalaryTypeDescriptorSupported { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationEmploymentAssociationSeniorityMapper
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationEmploymentAssociationSeniority source, IStaffEducationOrganizationEmploymentAssociationSeniority target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationEmploymentAssociationSenioritySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialFieldDescriptor != target.CredentialFieldDescriptor)
            {
                source.CredentialFieldDescriptor = target.CredentialFieldDescriptor;
            }
            if (source.NameOfInstitution != target.NameOfInstitution)
            {
                source.NameOfInstitution = target.NameOfInstitution;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsYearsExperienceSupported)
                && target.YearsExperience != source.YearsExperience)
            {
                target.YearsExperience = source.YearsExperience;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationEmploymentAssociationSeniority source, IStaffEducationOrganizationEmploymentAssociationSeniority target, Action<IStaffEducationOrganizationEmploymentAssociationSeniority, IStaffEducationOrganizationEmploymentAssociationSeniority> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationEmploymentAssociationSenioritySynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationEmploymentAssociationSenioritySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;
            target.NameOfInstitution = source.NameOfInstitution;

            // Copy non-PK properties

            if (sourceSynchSupport.IsYearsExperienceSupported)
                target.YearsExperience = source.YearsExperience;
            else
                targetSynchSupport.IsYearsExperienceSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationEmploymentAssociationSenioritySynchronizationSourceSupport 
    {
        bool IsYearsExperienceSupported { get; set; }
    }

}
// Aggregate: StaffEducatorPreparationProgramAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEducatorPreparationProgramAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffEducatorPreparationProgramAssociationMapper
    {
        public static bool SynchronizeTo(this IStaffEducatorPreparationProgramAssociation source, IStaffEducatorPreparationProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCompleterSupported)
                && target.Completer != source.Completer)
            {
                target.Completer = source.Completer;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducatorPreparationProgramAssociation source, IStaffEducatorPreparationProgramAssociation target, Action<IStaffEducatorPreparationProgramAssociation, IStaffEducatorPreparationProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCompleterSupported)
                target.Completer = source.Completer;
            else
                targetSynchSupport.IsCompleterSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducatorPreparationProgramResourceId = source.EducatorPreparationProgramResourceId;
                target.EducatorPreparationProgramDiscriminator = source.EducatorPreparationProgramDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducatorPreparationProgramAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsCompleterSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }

}
// Aggregate: StaffToCandidateRelationshipDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.StaffToCandidateRelationshipDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StaffToCandidateRelationshipDescriptorMapper
    {
        public static bool SynchronizeTo(this IStaffToCandidateRelationshipDescriptor source, IStaffToCandidateRelationshipDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffToCandidateRelationshipDescriptorId != target.StaffToCandidateRelationshipDescriptorId)
            {
                source.StaffToCandidateRelationshipDescriptorId = target.StaffToCandidateRelationshipDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffToCandidateRelationshipDescriptor source, IStaffToCandidateRelationshipDescriptor target, Action<IStaffToCandidateRelationshipDescriptor, IStaffToCandidateRelationshipDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffToCandidateRelationshipDescriptorId = source.StaffToCandidateRelationshipDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffToCandidateRelationshipDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Entities.Common.TPDM //.StateEducationAgencyAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyExtensionMapper
    {
        public static bool SynchronizeTo(this IStateEducationAgencyExtension source, IStateEducationAgencyExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStateEducationAgencyExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StateEducationAgency as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStateEducationAgencyExtension source, IStateEducationAgencyExtension target, Action<IStateEducationAgencyExtension, IStateEducationAgencyExtension> onMapped)
        {
            var sourceSynchSupport = source as IStateEducationAgencyExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStateEducationAgencyExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStateEducationAgencyExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }

}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Entities.Common.TPDM //.StudentGradebookEntryAggregate
{
    [ExcludeFromCodeCoverage]
    public static class StudentGradebookEntryExtensionMapper
    {
        public static bool SynchronizeTo(this IStudentGradebookEntryExtension source, IStudentGradebookEntryExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentGradebookEntryExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StudentGradebookEntry as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssignmentPassedSupported)
                && target.AssignmentPassed != source.AssignmentPassed)
            {
                target.AssignmentPassed = source.AssignmentPassed;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateCompletedSupported)
                && target.DateCompleted != source.DateCompleted)
            {
                target.DateCompleted = source.DateCompleted;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStudentGradebookEntryExtension source, IStudentGradebookEntryExtension target, Action<IStudentGradebookEntryExtension, IStudentGradebookEntryExtension> onMapped)
        {
            var sourceSynchSupport = source as IStudentGradebookEntryExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentGradebookEntryExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssignmentPassedSupported)
                target.AssignmentPassed = source.AssignmentPassed;
            else
                targetSynchSupport.IsAssignmentPassedSupported = false;

            if (sourceSynchSupport.IsDateCompletedSupported)
                target.DateCompleted = source.DateCompleted;
            else
                targetSynchSupport.IsDateCompletedSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentGradebookEntryExtensionSynchronizationSourceSupport 
    {
        bool IsAssignmentPassedSupported { get; set; }
        bool IsDateCompletedSupported { get; set; }
    }

}
// Aggregate: SurveyResponse

namespace EdFi.Ods.Entities.Common.TPDM //.SurveyResponseAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseExtensionMapper
    {
        public static bool SynchronizeTo(this ISurveyResponseExtension source, ISurveyResponseExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyResponseExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.SurveyResponse as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsPersonIdSupported)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSourceSystemDescriptorSupported)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveyResponseExtension source, ISurveyResponseExtension target, Action<ISurveyResponseExtension, ISurveyResponseExtension> onMapped)
        {
            var sourceSynchSupport = source as ISurveyResponseExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyResponseExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsPersonIdSupported)
                target.PersonId = source.PersonId;
            else
                targetSynchSupport.IsPersonIdSupported = false;

            if (sourceSynchSupport.IsSourceSystemDescriptorSupported)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            else
                targetSynchSupport.IsSourceSystemDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyResponseExtensionSynchronizationSourceSupport 
    {
        bool IsPersonIdSupported { get; set; }
        bool IsSourceSystemDescriptorSupported { get; set; }
    }

}
// Aggregate: SurveyResponsePersonTargetAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.SurveyResponsePersonTargetAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveyResponsePersonTargetAssociationMapper
    {
        public static bool SynchronizeTo(this ISurveyResponsePersonTargetAssociation source, ISurveyResponsePersonTargetAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyResponsePersonTargetAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveyResponsePersonTargetAssociation source, ISurveyResponsePersonTargetAssociation target, Action<ISurveyResponsePersonTargetAssociation, ISurveyResponsePersonTargetAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveyResponsePersonTargetAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyResponsePersonTargetAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.PersonId = source.PersonId;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyResponsePersonTargetAssociationSynchronizationSourceSupport 
    {
    }

}
// Aggregate: SurveySection

namespace EdFi.Ods.Entities.Common.TPDM //.SurveySectionAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveySectionExtensionMapper
    {
        public static bool SynchronizeTo(this ISurveySectionExtension source, ISurveySectionExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.SurveySection as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationElementTitleSupported)
                && target.EvaluationElementTitle != source.EvaluationElementTitle)
            {
                target.EvaluationElementTitle = source.EvaluationElementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationObjectiveTitleSupported)
                && target.EvaluationObjectiveTitle != source.EvaluationObjectiveTitle)
            {
                target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationPeriodDescriptorSupported)
                && target.EvaluationPeriodDescriptor != source.EvaluationPeriodDescriptor)
            {
                target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationTitleSupported)
                && target.EvaluationTitle != source.EvaluationTitle)
            {
                target.EvaluationTitle = source.EvaluationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationTitleSupported)
                && target.PerformanceEvaluationTitle != source.PerformanceEvaluationTitle)
            {
                target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationTypeDescriptorSupported)
                && target.PerformanceEvaluationTypeDescriptor != source.PerformanceEvaluationTypeDescriptor)
            {
                target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveySectionExtension source, ISurveySectionExtension target, Action<ISurveySectionExtension, ISurveySectionExtension> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEvaluationElementTitleSupported)
                target.EvaluationElementTitle = source.EvaluationElementTitle;
            else
                targetSynchSupport.IsEvaluationElementTitleSupported = false;

            if (sourceSynchSupport.IsEvaluationObjectiveTitleSupported)
                target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            else
                targetSynchSupport.IsEvaluationObjectiveTitleSupported = false;

            if (sourceSynchSupport.IsEvaluationPeriodDescriptorSupported)
                target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            else
                targetSynchSupport.IsEvaluationPeriodDescriptorSupported = false;

            if (sourceSynchSupport.IsEvaluationTitleSupported)
                target.EvaluationTitle = source.EvaluationTitle;
            else
                targetSynchSupport.IsEvaluationTitleSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationTitleSupported)
                target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            else
                targetSynchSupport.IsPerformanceEvaluationTitleSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationTypeDescriptorSupported)
                target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            else
                targetSynchSupport.IsPerformanceEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionExtensionSynchronizationSourceSupport 
    {
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEvaluationElementTitleSupported { get; set; }
        bool IsEvaluationObjectiveTitleSupported { get; set; }
        bool IsEvaluationPeriodDescriptorSupported { get; set; }
        bool IsEvaluationTitleSupported { get; set; }
        bool IsPerformanceEvaluationTitleSupported { get; set; }
        bool IsPerformanceEvaluationTypeDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }

}
// Aggregate: SurveySectionAggregateResponse

namespace EdFi.Ods.Entities.Common.TPDM //.SurveySectionAggregateResponseAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveySectionAggregateResponseMapper
    {
        public static bool SynchronizeTo(this ISurveySectionAggregateResponse source, ISurveySectionAggregateResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionAggregateResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveySectionTitle != target.SurveySectionTitle)
            {
                source.SurveySectionTitle = target.SurveySectionTitle;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsScoreValueSupported)
                && target.ScoreValue != source.ScoreValue)
            {
                target.ScoreValue = source.ScoreValue;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveySectionAggregateResponse source, ISurveySectionAggregateResponse target, Action<ISurveySectionAggregateResponse, ISurveySectionAggregateResponse> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionAggregateResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionAggregateResponseSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.Namespace = source.Namespace;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsScoreValueSupported)
                target.ScoreValue = source.ScoreValue;
            else
                targetSynchSupport.IsScoreValueSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementRatingResourceId = source.EvaluationElementRatingResourceId;
                target.EvaluationElementRatingDiscriminator = source.EvaluationElementRatingDiscriminator;
                target.SurveySectionResourceId = source.SurveySectionResourceId;
                target.SurveySectionDiscriminator = source.SurveySectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionAggregateResponseSynchronizationSourceSupport 
    {
        bool IsScoreValueSupported { get; set; }
    }

}
// Aggregate: SurveySectionResponsePersonTargetAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.SurveySectionResponsePersonTargetAssociationAggregate
{
    [ExcludeFromCodeCoverage]
    public static class SurveySectionResponsePersonTargetAssociationMapper
    {
        public static bool SynchronizeTo(this ISurveySectionResponsePersonTargetAssociation source, ISurveySectionResponsePersonTargetAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionResponsePersonTargetAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }
            if (source.SurveySectionTitle != target.SurveySectionTitle)
            {
                source.SurveySectionTitle = target.SurveySectionTitle;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveySectionResponsePersonTargetAssociation source, ISurveySectionResponsePersonTargetAssociation target, Action<ISurveySectionResponsePersonTargetAssociation, ISurveySectionResponsePersonTargetAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionResponsePersonTargetAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionResponsePersonTargetAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.PersonId = source.PersonId;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
                target.SurveySectionResponseResourceId = source.SurveySectionResponseResourceId;
                target.SurveySectionResponseDiscriminator = source.SurveySectionResponseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionResponsePersonTargetAssociationSynchronizationSourceSupport 
    {
    }

}
// Aggregate: WithdrawReasonDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.WithdrawReasonDescriptorAggregate
{
    [ExcludeFromCodeCoverage]
    public static class WithdrawReasonDescriptorMapper
    {
        public static bool SynchronizeTo(this IWithdrawReasonDescriptor source, IWithdrawReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IWithdrawReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.WithdrawReasonDescriptorId != target.WithdrawReasonDescriptorId)
            {
                source.WithdrawReasonDescriptorId = target.WithdrawReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IWithdrawReasonDescriptor source, IWithdrawReasonDescriptor target, Action<IWithdrawReasonDescriptor, IWithdrawReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IWithdrawReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IWithdrawReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.WithdrawReasonDescriptorId = source.WithdrawReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IWithdrawReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }

}
