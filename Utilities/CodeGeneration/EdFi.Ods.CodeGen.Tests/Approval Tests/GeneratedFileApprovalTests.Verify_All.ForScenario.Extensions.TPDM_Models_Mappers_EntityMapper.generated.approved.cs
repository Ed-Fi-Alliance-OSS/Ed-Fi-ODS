using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using EdFi.Ods.Api.Dependencies;
using EdFi.Ods.Api.ETag;
using EdFi.Ods.Api.Extensions;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Constants;
using EdFi.Ods.Common.Conventions;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Entities.Common.EdFi;
// Aggregate: AccreditationStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.AccreditationStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AccreditationStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAccreditationStatusDescriptor source, IAccreditationStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAccreditationStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AccreditationStatusDescriptorId != target.AccreditationStatusDescriptorId)
            {
                source.AccreditationStatusDescriptorId = target.AccreditationStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAccreditationStatusDescriptor source, IAccreditationStatusDescriptor target, Action<IAccreditationStatusDescriptor, IAccreditationStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAccreditationStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAccreditationStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AccreditationStatusDescriptorId = source.AccreditationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAccreditationStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AidTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.AidTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AidTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IAidTypeDescriptor source, IAidTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IAidTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AidTypeDescriptorId != target.AidTypeDescriptorId)
            {
                source.AidTypeDescriptorId = target.AidTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAidTypeDescriptor source, IAidTypeDescriptor target, Action<IAidTypeDescriptor, IAidTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IAidTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IAidTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AidTypeDescriptorId = source.AidTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAidTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudent

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudent source, IAnonymizedStudent target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAtriskIndicatorSupported)
                && target.AtriskIndicator != source.AtriskIndicator)
            {
                target.AtriskIndicator = source.AtriskIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsELLEnrollmentSupported)
                && target.ELLEnrollment != source.ELLEnrollment)
            {
                target.ELLEnrollment = source.ELLEnrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsESLEnrollmentSupported)
                && target.ESLEnrollment != source.ESLEnrollment)
            {
                target.ESLEnrollment = source.ESLEnrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeLevelDescriptorSupported)
                && target.GradeLevelDescriptor != source.GradeLevelDescriptor)
            {
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMobilitySupported)
                && target.Mobility != source.Mobility)
            {
                target.Mobility = source.Mobility;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSection504EnrollmentSupported)
                && target.Section504Enrollment != source.Section504Enrollment)
            {
                target.Section504Enrollment = source.Section504Enrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSPEDEnrollmentSupported)
                && target.SPEDEnrollment != source.SPEDEnrollment)
            {
                target.SPEDEnrollment = source.SPEDEnrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTitleIEnrollmentSupported)
                && target.TitleIEnrollment != source.TitleIEnrollment)
            {
                target.TitleIEnrollment = source.TitleIEnrollment;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsValueTypeDescriptorSupported)
                && target.ValueTypeDescriptor != source.ValueTypeDescriptor)
            {
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentDisabilitiesSupported)
            {
                isModified |= 
                    source.AnonymizedStudentDisabilities.SynchronizeCollectionTo(
                        target.AnonymizedStudentDisabilities, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentLanguagesSupported)
            {
                isModified |= 
                    source.AnonymizedStudentLanguages.SynchronizeCollectionTo(
                        target.AnonymizedStudentLanguages, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentRacesSupported)
            {
                isModified |= 
                    source.AnonymizedStudentRaces.SynchronizeCollectionTo(
                        target.AnonymizedStudentRaces, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudent = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentRaceIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IAnonymizedStudent source, IAnonymizedStudent target, Action<IAnonymizedStudent, IAnonymizedStudent> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAtriskIndicatorSupported)
                target.AtriskIndicator = source.AtriskIndicator;
            else
                targetSynchSupport.IsAtriskIndicatorSupported = false;

            if (sourceSynchSupport.IsELLEnrollmentSupported)
                target.ELLEnrollment = source.ELLEnrollment;
            else
                targetSynchSupport.IsELLEnrollmentSupported = false;

            if (sourceSynchSupport.IsESLEnrollmentSupported)
                target.ESLEnrollment = source.ESLEnrollment;
            else
                targetSynchSupport.IsESLEnrollmentSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGradeLevelDescriptorSupported)
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            else
                targetSynchSupport.IsGradeLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsMobilitySupported)
                target.Mobility = source.Mobility;
            else
                targetSynchSupport.IsMobilitySupported = false;

            if (sourceSynchSupport.IsSection504EnrollmentSupported)
                target.Section504Enrollment = source.Section504Enrollment;
            else
                targetSynchSupport.IsSection504EnrollmentSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsSPEDEnrollmentSupported)
                target.SPEDEnrollment = source.SPEDEnrollment;
            else
                targetSynchSupport.IsSPEDEnrollmentSupported = false;

            if (sourceSynchSupport.IsTitleIEnrollmentSupported)
                target.TitleIEnrollment = source.TitleIEnrollment;
            else
                targetSynchSupport.IsTitleIEnrollmentSupported = false;

            if (sourceSynchSupport.IsValueTypeDescriptorSupported)
                target.ValueTypeDescriptor = source.ValueTypeDescriptor;
            else
                targetSynchSupport.IsValueTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAnonymizedStudentDisabilitiesSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentDisabilityIncluded = sourceSynchSupport.IsAnonymizedStudentDisabilityIncluded;
                source.AnonymizedStudentDisabilities.MapCollectionTo(target.AnonymizedStudentDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsAnonymizedStudentLanguagesSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentLanguageIncluded = sourceSynchSupport.IsAnonymizedStudentLanguageIncluded;
                source.AnonymizedStudentLanguages.MapCollectionTo(target.AnonymizedStudentLanguages, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsAnonymizedStudentRacesSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentRaceIncluded = sourceSynchSupport.IsAnonymizedStudentRaceIncluded;
                source.AnonymizedStudentRaces.MapCollectionTo(target.AnonymizedStudentRaces, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentRacesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentSynchronizationSourceSupport 
    {
        bool IsAnonymizedStudentDisabilitiesSupported { get; set; }
        bool IsAnonymizedStudentLanguagesSupported { get; set; }
        bool IsAnonymizedStudentRacesSupported { get; set; }
        bool IsAtriskIndicatorSupported { get; set; }
        bool IsELLEnrollmentSupported { get; set; }
        bool IsESLEnrollmentSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGradeLevelDescriptorSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsMobilitySupported { get; set; }
        bool IsSection504EnrollmentSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsSPEDEnrollmentSupported { get; set; }
        bool IsTitleIEnrollmentSupported { get; set; }
        bool IsValueTypeDescriptorSupported { get; set; }
        Func<IAnonymizedStudentDisability, bool> IsAnonymizedStudentDisabilityIncluded { get; set; }
        Func<IAnonymizedStudentLanguage, bool> IsAnonymizedStudentLanguageIncluded { get; set; }
        Func<IAnonymizedStudentRace, bool> IsAnonymizedStudentRaceIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentDisabilityMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentDisability source, IAnonymizedStudentDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.AnonymizedStudentDisabilityDesignations.SynchronizeCollectionTo(
                        target.AnonymizedStudentDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudentDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentDisability source, IAnonymizedStudentDisability target, Action<IAnonymizedStudentDisability, IAnonymizedStudentDisability> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAnonymizedStudentDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentDisabilityDesignationIncluded = sourceSynchSupport.IsAnonymizedStudentDisabilityDesignationIncluded;
                source.AnonymizedStudentDisabilityDesignations.MapCollectionTo(target.AnonymizedStudentDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentDisabilitySynchronizationSourceSupport 
    {
        bool IsAnonymizedStudentDisabilityDesignationsSupported { get; set; }
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        Func<IAnonymizedStudentDisabilityDesignation, bool> IsAnonymizedStudentDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentDisabilityDesignation source, IAnonymizedStudentDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentDisabilityDesignation source, IAnonymizedStudentDisabilityDesignation target, Action<IAnonymizedStudentDisabilityDesignation, IAnonymizedStudentDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentDisabilityDesignationSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentLanguageMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentLanguage source, IAnonymizedStudentLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentLanguageUsesSupported)
            {
                isModified |= 
                    source.AnonymizedStudentLanguageUses.SynchronizeCollectionTo(
                        target.AnonymizedStudentLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.AnonymizedStudentLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsAnonymizedStudentLanguageUseIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentLanguage source, IAnonymizedStudentLanguage target, Action<IAnonymizedStudentLanguage, IAnonymizedStudentLanguage> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsAnonymizedStudentLanguageUsesSupported)
            {    
                targetSynchSupport.IsAnonymizedStudentLanguageUseIncluded = sourceSynchSupport.IsAnonymizedStudentLanguageUseIncluded;
                source.AnonymizedStudentLanguageUses.MapCollectionTo(target.AnonymizedStudentLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentLanguageUsesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentLanguageSynchronizationSourceSupport 
    {
        bool IsAnonymizedStudentLanguageUsesSupported { get; set; }
        Func<IAnonymizedStudentLanguageUse, bool> IsAnonymizedStudentLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentLanguageUseMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentLanguageUse source, IAnonymizedStudentLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentLanguageUse source, IAnonymizedStudentLanguageUse target, Action<IAnonymizedStudentLanguageUse, IAnonymizedStudentLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentLanguageUseSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentRaceMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentRace source, IAnonymizedStudentRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentRace source, IAnonymizedStudentRace target, Action<IAnonymizedStudentRace, IAnonymizedStudentRace> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentRaceSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: AnonymizedStudentAcademicRecord

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAcademicRecordAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAcademicRecordMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAcademicRecord source, IAnonymizedStudentAcademicRecord target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAcademicRecordSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCumulativeGradePointAverageSupported)
                && target.CumulativeGradePointAverage != source.CumulativeGradePointAverage)
            {
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGPAMaxSupported)
                && target.GPAMax != source.GPAMax)
            {
                target.GPAMax = source.GPAMax;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionGradePointAverageSupported)
                && target.SessionGradePointAverage != source.SessionGradePointAverage)
            {
                target.SessionGradePointAverage = source.SessionGradePointAverage;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAcademicRecord source, IAnonymizedStudentAcademicRecord target, Action<IAnonymizedStudentAcademicRecord, IAnonymizedStudentAcademicRecord> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAcademicRecordSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAcademicRecordSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCumulativeGradePointAverageSupported)
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
            else
                targetSynchSupport.IsCumulativeGradePointAverageSupported = false;

            if (sourceSynchSupport.IsGPAMaxSupported)
                target.GPAMax = source.GPAMax;
            else
                targetSynchSupport.IsGPAMaxSupported = false;

            if (sourceSynchSupport.IsSessionGradePointAverageSupported)
                target.SessionGradePointAverage = source.SessionGradePointAverage;
            else
                targetSynchSupport.IsSessionGradePointAverageSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAcademicRecordSynchronizationSourceSupport 
    {
        bool IsCumulativeGradePointAverageSupported { get; set; }
        bool IsGPAMaxSupported { get; set; }
        bool IsSessionGradePointAverageSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentAssessment

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAssessmentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessment source, IAnonymizedStudentAssessment target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdministrationDate != target.AdministrationDate)
            {
                source.AdministrationDate = target.AdministrationDate;
            }
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentCategoryDescriptorSupported)
                && target.AssessmentCategoryDescriptor != source.AssessmentCategoryDescriptor)
            {
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAssessmentTitleSupported)
                && target.AssessmentTitle != source.AssessmentTitle)
            {
                target.AssessmentTitle = source.AssessmentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeLevelDescriptorSupported)
                && target.GradeLevelDescriptor != source.GradeLevelDescriptor)
            {
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // AnonymizedStudentAssessmentPerformanceLevel
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentAssessmentPerformanceLevelSupported)
            {
                if (source.AnonymizedStudentAssessmentPerformanceLevel == null)
                {
                    if (target.AnonymizedStudentAssessmentPerformanceLevel != null)
                    {
                        target.AnonymizedStudentAssessmentPerformanceLevel = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.AnonymizedStudentAssessmentPerformanceLevel == null)
                    {
                        var itemType = target.GetType().GetProperty("AnonymizedStudentAssessmentPerformanceLevel").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.AnonymizedStudentAssessmentPerformanceLevel = (IAnonymizedStudentAssessmentPerformanceLevel) newItem;
                    }

                    isModified |= source.AnonymizedStudentAssessmentPerformanceLevel.Synchronize(target.AnonymizedStudentAssessmentPerformanceLevel);
                }
            }
            // AnonymizedStudentAssessmentScoreResult
            if (sourceSupport == null || sourceSupport.IsAnonymizedStudentAssessmentScoreResultSupported)
            {
                if (source.AnonymizedStudentAssessmentScoreResult == null)
                {
                    if (target.AnonymizedStudentAssessmentScoreResult != null)
                    {
                        target.AnonymizedStudentAssessmentScoreResult = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.AnonymizedStudentAssessmentScoreResult == null)
                    {
                        var itemType = target.GetType().GetProperty("AnonymizedStudentAssessmentScoreResult").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.AnonymizedStudentAssessmentScoreResult = (IAnonymizedStudentAssessmentScoreResult) newItem;
                    }

                    isModified |= source.AnonymizedStudentAssessmentScoreResult.Synchronize(target.AnonymizedStudentAssessmentScoreResult);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessment source, IAnonymizedStudentAssessment target, Action<IAnonymizedStudentAssessment, IAnonymizedStudentAssessment> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrationDate = source.AdministrationDate;
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentCategoryDescriptorSupported)
                target.AssessmentCategoryDescriptor = source.AssessmentCategoryDescriptor;
            else
                targetSynchSupport.IsAssessmentCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAssessmentTitleSupported)
                target.AssessmentTitle = source.AssessmentTitle;
            else
                targetSynchSupport.IsAssessmentTitleSupported = false;

            if (sourceSynchSupport.IsGradeLevelDescriptorSupported)
                target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            else
                targetSynchSupport.IsGradeLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.TakenSchoolYearTypeResourceId = source.TakenSchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // AnonymizedStudentAssessmentPerformanceLevel (Source)
            if (sourceSynchSupport.IsAnonymizedStudentAssessmentPerformanceLevelSupported)
            {
                var itemProperty = target.GetType().GetProperty("AnonymizedStudentAssessmentPerformanceLevel");
                
                if (itemProperty != null)
                {                    
                    if (source.AnonymizedStudentAssessmentPerformanceLevel == null)
                    {
                        target.AnonymizedStudentAssessmentPerformanceLevel = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetAnonymizedStudentAssessmentPerformanceLevel = Activator.CreateInstance(itemType);
                        (targetAnonymizedStudentAssessmentPerformanceLevel as IChildEntity)?.SetParent(target);
                        source.AnonymizedStudentAssessmentPerformanceLevel.Map(targetAnonymizedStudentAssessmentPerformanceLevel);
                        
                        // Update the target reference appropriately
                        target.AnonymizedStudentAssessmentPerformanceLevel = (IAnonymizedStudentAssessmentPerformanceLevel) targetAnonymizedStudentAssessmentPerformanceLevel;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentAssessmentPerformanceLevelSupported = false; 
            }
            // AnonymizedStudentAssessmentScoreResult (Source)
            if (sourceSynchSupport.IsAnonymizedStudentAssessmentScoreResultSupported)
            {
                var itemProperty = target.GetType().GetProperty("AnonymizedStudentAssessmentScoreResult");
                
                if (itemProperty != null)
                {                    
                    if (source.AnonymizedStudentAssessmentScoreResult == null)
                    {
                        target.AnonymizedStudentAssessmentScoreResult = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetAnonymizedStudentAssessmentScoreResult = Activator.CreateInstance(itemType);
                        (targetAnonymizedStudentAssessmentScoreResult as IChildEntity)?.SetParent(target);
                        source.AnonymizedStudentAssessmentScoreResult.Map(targetAnonymizedStudentAssessmentScoreResult);
                        
                        // Update the target reference appropriately
                        target.AnonymizedStudentAssessmentScoreResult = (IAnonymizedStudentAssessmentScoreResult) targetAnonymizedStudentAssessmentScoreResult;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsAnonymizedStudentAssessmentScoreResultSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsAnonymizedStudentAssessmentPerformanceLevelSupported { get; set; }
        bool IsAnonymizedStudentAssessmentScoreResultSupported { get; set; }
        bool IsAssessmentCategoryDescriptorSupported { get; set; }
        bool IsAssessmentTitleSupported { get; set; }
        bool IsGradeLevelDescriptorSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentPerformanceLevelMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessmentPerformanceLevel source, IAnonymizedStudentAssessmentPerformanceLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentReportingMethodDescriptorSupported)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelDescriptorSupported)
                && target.PerformanceLevelDescriptor != source.PerformanceLevelDescriptor)
            {
                target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceLevelMetSupported)
                && target.PerformanceLevelMet != source.PerformanceLevelMet)
            {
                target.PerformanceLevelMet = source.PerformanceLevelMet;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessmentPerformanceLevel source, IAnonymizedStudentAssessmentPerformanceLevel target, Action<IAnonymizedStudentAssessmentPerformanceLevel, IAnonymizedStudentAssessmentPerformanceLevel> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentReportingMethodDescriptorSupported)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            else
                targetSynchSupport.IsAssessmentReportingMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelDescriptorSupported)
                target.PerformanceLevelDescriptor = source.PerformanceLevelDescriptor;
            else
                targetSynchSupport.IsPerformanceLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceLevelMetSupported)
                target.PerformanceLevelMet = source.PerformanceLevelMet;
            else
                targetSynchSupport.IsPerformanceLevelMetSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentPerformanceLevelSynchronizationSourceSupport 
    {
        bool IsAssessmentReportingMethodDescriptorSupported { get; set; }
        bool IsPerformanceLevelDescriptorSupported { get; set; }
        bool IsPerformanceLevelMetSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentScoreResultMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessmentScoreResult source, IAnonymizedStudentAssessmentScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssessmentReportingMethodDescriptorSupported)
                && target.AssessmentReportingMethodDescriptor != source.AssessmentReportingMethodDescriptor)
            {
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultSupported)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessmentScoreResult source, IAnonymizedStudentAssessmentScoreResult target, Action<IAnonymizedStudentAssessmentScoreResult, IAnonymizedStudentAssessmentScoreResult> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssessmentReportingMethodDescriptorSupported)
                target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;
            else
                targetSynchSupport.IsAssessmentReportingMethodDescriptorSupported = false;

            if (sourceSynchSupport.IsResultSupported)
                target.Result = source.Result;
            else
                targetSynchSupport.IsResultSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentScoreResultSynchronizationSourceSupport 
    {
        bool IsAssessmentReportingMethodDescriptorSupported { get; set; }
        bool IsResultSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentAssessmentCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAssessmentCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessmentCourseAssociation source, IAnonymizedStudentAssessmentCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdministrationDate != target.AdministrationDate)
            {
                source.AdministrationDate = target.AdministrationDate;
            }
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessmentCourseAssociation source, IAnonymizedStudentAssessmentCourseAssociation target, Action<IAnonymizedStudentAssessmentCourseAssociation, IAnonymizedStudentAssessmentCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrationDate = source.AdministrationDate;
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentAssessmentResourceId = source.AnonymizedStudentAssessmentResourceId;
                target.AnonymizedStudentAssessmentDiscriminator = source.AnonymizedStudentAssessmentDiscriminator;
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentCourseAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: AnonymizedStudentAssessmentSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentAssessmentSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentAssessmentSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentAssessmentSectionAssociation source, IAnonymizedStudentAssessmentSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdministrationDate != target.AdministrationDate)
            {
                source.AdministrationDate = target.AdministrationDate;
            }
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.AssessmentIdentifier != target.AssessmentIdentifier)
            {
                source.AssessmentIdentifier = target.AssessmentIdentifier;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.TakenSchoolYear != target.TakenSchoolYear)
            {
                source.TakenSchoolYear = target.TakenSchoolYear;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentAssessmentSectionAssociation source, IAnonymizedStudentAssessmentSectionAssociation target, Action<IAnonymizedStudentAssessmentSectionAssociation, IAnonymizedStudentAssessmentSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AdministrationDate = source.AdministrationDate;
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.AssessmentIdentifier = source.AssessmentIdentifier;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.TakenSchoolYear = source.TakenSchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentAssessmentResourceId = source.AnonymizedStudentAssessmentResourceId;
                target.AnonymizedStudentAssessmentDiscriminator = source.AnonymizedStudentAssessmentDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentAssessmentSectionAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: AnonymizedStudentCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentCourseAssociation source, IAnonymizedStudentCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentCourseAssociation source, IAnonymizedStudentCourseAssociation target, Action<IAnonymizedStudentCourseAssociation, IAnonymizedStudentCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.BeginDate = source.BeginDate;
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentCourseAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentCourseTranscript

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentCourseTranscriptAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentCourseTranscriptMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentCourseTranscript source, IAnonymizedStudentCourseTranscript target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCourseRepeatCodeDescriptorSupported)
                && target.CourseRepeatCodeDescriptor != source.CourseRepeatCodeDescriptor)
            {
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalLetterGradeEarnedSupported)
                && target.FinalLetterGradeEarned != source.FinalLetterGradeEarned)
            {
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalNumericGradeEarnedSupported)
                && target.FinalNumericGradeEarned != source.FinalNumericGradeEarned)
            {
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentCourseTranscript source, IAnonymizedStudentCourseTranscript target, Action<IAnonymizedStudentCourseTranscript, IAnonymizedStudentCourseTranscript> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCourseRepeatCodeDescriptorSupported)
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
            else
                targetSynchSupport.IsCourseRepeatCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            if (sourceSynchSupport.IsFinalLetterGradeEarnedSupported)
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
            else
                targetSynchSupport.IsFinalLetterGradeEarnedSupported = false;

            if (sourceSynchSupport.IsFinalNumericGradeEarnedSupported)
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
            else
                targetSynchSupport.IsFinalNumericGradeEarnedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentAcademicRecordResourceId = source.AnonymizedStudentAcademicRecordResourceId;
                target.AnonymizedStudentAcademicRecordDiscriminator = source.AnonymizedStudentAcademicRecordDiscriminator;
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentCourseTranscriptSynchronizationSourceSupport 
    {
        bool IsCourseRepeatCodeDescriptorSupported { get; set; }
        bool IsCourseTitleSupported { get; set; }
        bool IsFinalLetterGradeEarnedSupported { get; set; }
        bool IsFinalNumericGradeEarnedSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentEducationOrganizationAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentEducationOrganizationAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentEducationOrganizationAssociation source, IAnonymizedStudentEducationOrganizationAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentEducationOrganizationAssociation source, IAnonymizedStudentEducationOrganizationAssociation target, Action<IAnonymizedStudentEducationOrganizationAssociation, IAnonymizedStudentEducationOrganizationAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentEducationOrganizationAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: AnonymizedStudentSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.AnonymizedStudentSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AnonymizedStudentSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IAnonymizedStudentSectionAssociation source, IAnonymizedStudentSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IAnonymizedStudentSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AnonymizedStudentIdentifier != target.AnonymizedStudentIdentifier)
            {
                source.AnonymizedStudentIdentifier = target.AnonymizedStudentIdentifier;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FactsAsOfDate != target.FactsAsOfDate)
            {
                source.FactsAsOfDate = target.FactsAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAnonymizedStudentSectionAssociation source, IAnonymizedStudentSectionAssociation target, Action<IAnonymizedStudentSectionAssociation, IAnonymizedStudentSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IAnonymizedStudentSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IAnonymizedStudentSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AnonymizedStudentIdentifier = source.AnonymizedStudentIdentifier;
            target.BeginDate = source.BeginDate;
            target.FactsAsOfDate = source.FactsAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.AnonymizedStudentResourceId = source.AnonymizedStudentResourceId;
                target.AnonymizedStudentDiscriminator = source.AnonymizedStudentDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAnonymizedStudentSectionAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: Applicant

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicantAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicantMapper 
    {
        public static bool SynchronizeTo(this IApplicant source, IApplicant target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBirthDateSupported)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitizenshipStatusDescriptorSupported)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEconomicDisadvantagedSupported)
                && target.EconomicDisadvantaged != source.EconomicDisadvantaged)
            {
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstGenerationStudentSupported)
                && target.FirstGenerationStudent != source.FirstGenerationStudent)
            {
                target.FirstGenerationStudent = source.FirstGenerationStudent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLoginIdSupported)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonIdSupported)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSourceSystemDescriptorSupported)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherCandidateIdentifierSupported)
                && target.TeacherCandidateIdentifier != source.TeacherCandidateIdentifier)
            {
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantAddressesSupported)
            {
                isModified |= 
                    source.ApplicantAddresses.SynchronizeCollectionTo(
                        target.ApplicantAddresses, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantAidsSupported)
            {
                isModified |= 
                    source.ApplicantAids.SynchronizeCollectionTo(
                        target.ApplicantAids, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantAidIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantBackgroundChecksSupported)
            {
                isModified |= 
                    source.ApplicantBackgroundChecks.SynchronizeCollectionTo(
                        target.ApplicantBackgroundChecks, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantBackgroundCheckIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantCharacteristicsSupported)
            {
                isModified |= 
                    source.ApplicantCharacteristics.SynchronizeCollectionTo(
                        target.ApplicantCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantDisabilitiesSupported)
            {
                isModified |= 
                    source.ApplicantDisabilities.SynchronizeCollectionTo(
                        target.ApplicantDisabilities, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantElectronicMailsSupported)
            {
                isModified |= 
                    source.ApplicantElectronicMails.SynchronizeCollectionTo(
                        target.ApplicantElectronicMails, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.ApplicantIdentificationDocuments.SynchronizeCollectionTo(
                        target.ApplicantIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantInternationalAddressesSupported)
            {
                isModified |= 
                    source.ApplicantInternationalAddresses.SynchronizeCollectionTo(
                        target.ApplicantInternationalAddresses, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantLanguagesSupported)
            {
                isModified |= 
                    source.ApplicantLanguages.SynchronizeCollectionTo(
                        target.ApplicantLanguages, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantPersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.ApplicantPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.ApplicantPersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantPersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantRacesSupported)
            {
                isModified |= 
                    source.ApplicantRaces.SynchronizeCollectionTo(
                        target.ApplicantRaces, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantStaffIdentificationCodesSupported)
            {
                isModified |= 
                    source.ApplicantStaffIdentificationCodes.SynchronizeCollectionTo(
                        target.ApplicantStaffIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantStaffIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantTeacherPreparationProgramsSupported)
            {
                isModified |= 
                    source.ApplicantTeacherPreparationPrograms.SynchronizeCollectionTo(
                        target.ApplicantTeacherPreparationPrograms, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantTeacherPreparationProgramIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantTelephonesSupported)
            {
                isModified |= 
                    source.ApplicantTelephones.SynchronizeCollectionTo(
                        target.ApplicantTelephones, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicantVisasSupported)
            {
                isModified |= 
                    source.ApplicantVisas.SynchronizeCollectionTo(
                        target.ApplicantVisas, 
                        onChildAdded: child => 
                            {
                                child.Applicant = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantVisaIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicant source, IApplicant target, Action<IApplicant, IApplicant> onMapped)
        {
            var sourceSynchSupport = source as IApplicantSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBirthDateSupported)
                target.BirthDate = source.BirthDate;
            else
                targetSynchSupport.IsBirthDateSupported = false;

            if (sourceSynchSupport.IsCitizenshipStatusDescriptorSupported)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
            else
                targetSynchSupport.IsCitizenshipStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsEconomicDisadvantagedSupported)
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
            else
                targetSynchSupport.IsEconomicDisadvantagedSupported = false;

            if (sourceSynchSupport.IsFirstGenerationStudentSupported)
                target.FirstGenerationStudent = source.FirstGenerationStudent;
            else
                targetSynchSupport.IsFirstGenerationStudentSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsLoginIdSupported)
                target.LoginId = source.LoginId;
            else
                targetSynchSupport.IsLoginIdSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsPersonIdSupported)
                target.PersonId = source.PersonId;
            else
                targetSynchSupport.IsPersonIdSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsSourceSystemDescriptorSupported)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            else
                targetSynchSupport.IsSourceSystemDescriptorSupported = false;

            if (sourceSynchSupport.IsTeacherCandidateIdentifierSupported)
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            else
                targetSynchSupport.IsTeacherCandidateIdentifierSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantAddressesSupported)
            {    
                targetSynchSupport.IsApplicantAddressIncluded = sourceSynchSupport.IsApplicantAddressIncluded;
                source.ApplicantAddresses.MapCollectionTo(target.ApplicantAddresses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantAddressesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantAidsSupported)
            {    
                targetSynchSupport.IsApplicantAidIncluded = sourceSynchSupport.IsApplicantAidIncluded;
                source.ApplicantAids.MapCollectionTo(target.ApplicantAids, target);
            }
            else
            {
                targetSynchSupport.IsApplicantAidsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantBackgroundChecksSupported)
            {    
                targetSynchSupport.IsApplicantBackgroundCheckIncluded = sourceSynchSupport.IsApplicantBackgroundCheckIncluded;
                source.ApplicantBackgroundChecks.MapCollectionTo(target.ApplicantBackgroundChecks, target);
            }
            else
            {
                targetSynchSupport.IsApplicantBackgroundChecksSupported = false;
            }

            if (sourceSynchSupport.IsApplicantCharacteristicsSupported)
            {    
                targetSynchSupport.IsApplicantCharacteristicIncluded = sourceSynchSupport.IsApplicantCharacteristicIncluded;
                source.ApplicantCharacteristics.MapCollectionTo(target.ApplicantCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsApplicantCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantDisabilitiesSupported)
            {    
                targetSynchSupport.IsApplicantDisabilityIncluded = sourceSynchSupport.IsApplicantDisabilityIncluded;
                source.ApplicantDisabilities.MapCollectionTo(target.ApplicantDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsApplicantDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantElectronicMailsSupported)
            {    
                targetSynchSupport.IsApplicantElectronicMailIncluded = sourceSynchSupport.IsApplicantElectronicMailIncluded;
                source.ApplicantElectronicMails.MapCollectionTo(target.ApplicantElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsApplicantElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsApplicantIdentificationDocumentIncluded = sourceSynchSupport.IsApplicantIdentificationDocumentIncluded;
                source.ApplicantIdentificationDocuments.MapCollectionTo(target.ApplicantIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsApplicantIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantInternationalAddressesSupported)
            {    
                targetSynchSupport.IsApplicantInternationalAddressIncluded = sourceSynchSupport.IsApplicantInternationalAddressIncluded;
                source.ApplicantInternationalAddresses.MapCollectionTo(target.ApplicantInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantLanguagesSupported)
            {    
                targetSynchSupport.IsApplicantLanguageIncluded = sourceSynchSupport.IsApplicantLanguageIncluded;
                source.ApplicantLanguages.MapCollectionTo(target.ApplicantLanguages, target);
            }
            else
            {
                targetSynchSupport.IsApplicantLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantPersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsApplicantPersonalIdentificationDocumentIncluded = sourceSynchSupport.IsApplicantPersonalIdentificationDocumentIncluded;
                source.ApplicantPersonalIdentificationDocuments.MapCollectionTo(target.ApplicantPersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsApplicantPersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantRacesSupported)
            {    
                targetSynchSupport.IsApplicantRaceIncluded = sourceSynchSupport.IsApplicantRaceIncluded;
                source.ApplicantRaces.MapCollectionTo(target.ApplicantRaces, target);
            }
            else
            {
                targetSynchSupport.IsApplicantRacesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantStaffIdentificationCodesSupported)
            {    
                targetSynchSupport.IsApplicantStaffIdentificationCodeIncluded = sourceSynchSupport.IsApplicantStaffIdentificationCodeIncluded;
                source.ApplicantStaffIdentificationCodes.MapCollectionTo(target.ApplicantStaffIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsApplicantStaffIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantTeacherPreparationProgramsSupported)
            {    
                targetSynchSupport.IsApplicantTeacherPreparationProgramIncluded = sourceSynchSupport.IsApplicantTeacherPreparationProgramIncluded;
                source.ApplicantTeacherPreparationPrograms.MapCollectionTo(target.ApplicantTeacherPreparationPrograms, target);
            }
            else
            {
                targetSynchSupport.IsApplicantTeacherPreparationProgramsSupported = false;
            }

            if (sourceSynchSupport.IsApplicantTelephonesSupported)
            {    
                targetSynchSupport.IsApplicantTelephoneIncluded = sourceSynchSupport.IsApplicantTelephoneIncluded;
                source.ApplicantTelephones.MapCollectionTo(target.ApplicantTelephones, target);
            }
            else
            {
                targetSynchSupport.IsApplicantTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsApplicantVisasSupported)
            {    
                targetSynchSupport.IsApplicantVisaIncluded = sourceSynchSupport.IsApplicantVisaIncluded;
                source.ApplicantVisas.MapCollectionTo(target.ApplicantVisas, target);
            }
            else
            {
                targetSynchSupport.IsApplicantVisasSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantSynchronizationSourceSupport 
    {
        bool IsApplicantAddressesSupported { get; set; }
        bool IsApplicantAidsSupported { get; set; }
        bool IsApplicantBackgroundChecksSupported { get; set; }
        bool IsApplicantCharacteristicsSupported { get; set; }
        bool IsApplicantDisabilitiesSupported { get; set; }
        bool IsApplicantElectronicMailsSupported { get; set; }
        bool IsApplicantIdentificationDocumentsSupported { get; set; }
        bool IsApplicantInternationalAddressesSupported { get; set; }
        bool IsApplicantLanguagesSupported { get; set; }
        bool IsApplicantPersonalIdentificationDocumentsSupported { get; set; }
        bool IsApplicantRacesSupported { get; set; }
        bool IsApplicantStaffIdentificationCodesSupported { get; set; }
        bool IsApplicantTeacherPreparationProgramsSupported { get; set; }
        bool IsApplicantTelephonesSupported { get; set; }
        bool IsApplicantVisasSupported { get; set; }
        bool IsBirthDateSupported { get; set; }
        bool IsCitizenshipStatusDescriptorSupported { get; set; }
        bool IsEconomicDisadvantagedSupported { get; set; }
        bool IsFirstGenerationStudentSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsLoginIdSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsPersonIdSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsSourceSystemDescriptorSupported { get; set; }
        bool IsTeacherCandidateIdentifierSupported { get; set; }
        Func<IApplicantAddress, bool> IsApplicantAddressIncluded { get; set; }
        Func<IApplicantAid, bool> IsApplicantAidIncluded { get; set; }
        Func<IApplicantBackgroundCheck, bool> IsApplicantBackgroundCheckIncluded { get; set; }
        Func<IApplicantCharacteristic, bool> IsApplicantCharacteristicIncluded { get; set; }
        Func<IApplicantDisability, bool> IsApplicantDisabilityIncluded { get; set; }
        Func<IApplicantElectronicMail, bool> IsApplicantElectronicMailIncluded { get; set; }
        Func<IApplicantIdentificationDocument, bool> IsApplicantIdentificationDocumentIncluded { get; set; }
        Func<IApplicantInternationalAddress, bool> IsApplicantInternationalAddressIncluded { get; set; }
        Func<IApplicantLanguage, bool> IsApplicantLanguageIncluded { get; set; }
        Func<IApplicantPersonalIdentificationDocument, bool> IsApplicantPersonalIdentificationDocumentIncluded { get; set; }
        Func<IApplicantRace, bool> IsApplicantRaceIncluded { get; set; }
        Func<IApplicantStaffIdentificationCode, bool> IsApplicantStaffIdentificationCodeIncluded { get; set; }
        Func<IApplicantTeacherPreparationProgram, bool> IsApplicantTeacherPreparationProgramIncluded { get; set; }
        Func<IApplicantTelephone, bool> IsApplicantTelephoneIncluded { get; set; }
        Func<IApplicantVisa, bool> IsApplicantVisaIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantAddressMapper 
    {
        public static bool SynchronizeTo(this IApplicantAddress source, IApplicantAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantAddressPeriodsSupported)
            {
                isModified |= 
                    source.ApplicantAddressPeriods.SynchronizeCollectionTo(
                        target.ApplicantAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.ApplicantAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantAddressPeriodIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantAddress source, IApplicantAddress target, Action<IApplicantAddress, IApplicantAddress> onMapped)
        {
            var sourceSynchSupport = source as IApplicantAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantAddressPeriodsSupported)
            {    
                targetSynchSupport.IsApplicantAddressPeriodIncluded = sourceSynchSupport.IsApplicantAddressPeriodIncluded;
                source.ApplicantAddressPeriods.MapCollectionTo(target.ApplicantAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsApplicantAddressPeriodsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantAddressSynchronizationSourceSupport 
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsApplicantAddressPeriodsSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        Func<IApplicantAddressPeriod, bool> IsApplicantAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this IApplicantAddressPeriod source, IApplicantAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantAddressPeriod source, IApplicantAddressPeriod target, Action<IApplicantAddressPeriod, IApplicantAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as IApplicantAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantAddressPeriodSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantAidMapper 
    {
        public static bool SynchronizeTo(this IApplicantAid source, IApplicantAid target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantAidSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AidTypeDescriptor != target.AidTypeDescriptor)
            {
                source.AidTypeDescriptor = target.AidTypeDescriptor;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAidAmountSupported)
                && target.AidAmount != source.AidAmount)
            {
                target.AidAmount = source.AidAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidConditionDescriptionSupported)
                && target.AidConditionDescription != source.AidConditionDescription)
            {
                target.AidConditionDescription = source.AidConditionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPellGrantRecipientSupported)
                && target.PellGrantRecipient != source.PellGrantRecipient)
            {
                target.PellGrantRecipient = source.PellGrantRecipient;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantAid source, IApplicantAid target, Action<IApplicantAid, IApplicantAid> onMapped)
        {
            var sourceSynchSupport = source as IApplicantAidSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantAidSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AidTypeDescriptor = source.AidTypeDescriptor;
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAidAmountSupported)
                target.AidAmount = source.AidAmount;
            else
                targetSynchSupport.IsAidAmountSupported = false;

            if (sourceSynchSupport.IsAidConditionDescriptionSupported)
                target.AidConditionDescription = source.AidConditionDescription;
            else
                targetSynchSupport.IsAidConditionDescriptionSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsPellGrantRecipientSupported)
                target.PellGrantRecipient = source.PellGrantRecipient;
            else
                targetSynchSupport.IsPellGrantRecipientSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantAidSynchronizationSourceSupport 
    {
        bool IsAidAmountSupported { get; set; }
        bool IsAidConditionDescriptionSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsPellGrantRecipientSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantBackgroundCheckMapper 
    {
        public static bool SynchronizeTo(this IApplicantBackgroundCheck source, IApplicantBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptor != target.BackgroundCheckTypeDescriptor)
            {
                source.BackgroundCheckTypeDescriptor = target.BackgroundCheckTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantBackgroundCheck source, IApplicantBackgroundCheck target, Action<IApplicantBackgroundCheck, IApplicantBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as IApplicantBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantCharacteristicMapper 
    {
        public static bool SynchronizeTo(this IApplicantCharacteristic source, IApplicantCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentCharacteristicDescriptor != target.StudentCharacteristicDescriptor)
            {
                source.StudentCharacteristicDescriptor = target.StudentCharacteristicDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantCharacteristic source, IApplicantCharacteristic target, Action<IApplicantCharacteristic, IApplicantCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as IApplicantCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StudentCharacteristicDescriptor = source.StudentCharacteristicDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantCharacteristicSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantDisabilityMapper 
    {
        public static bool SynchronizeTo(this IApplicantDisability source, IApplicantDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.ApplicantDisabilityDesignations.SynchronizeCollectionTo(
                        target.ApplicantDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.ApplicantDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantDisability source, IApplicantDisability target, Action<IApplicantDisability, IApplicantDisability> onMapped)
        {
            var sourceSynchSupport = source as IApplicantDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsApplicantDisabilityDesignationIncluded = sourceSynchSupport.IsApplicantDisabilityDesignationIncluded;
                source.ApplicantDisabilityDesignations.MapCollectionTo(target.ApplicantDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsApplicantDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantDisabilitySynchronizationSourceSupport 
    {
        bool IsApplicantDisabilityDesignationsSupported { get; set; }
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        Func<IApplicantDisabilityDesignation, bool> IsApplicantDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this IApplicantDisabilityDesignation source, IApplicantDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantDisabilityDesignation source, IApplicantDisabilityDesignation target, Action<IApplicantDisabilityDesignation, IApplicantDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IApplicantDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantDisabilityDesignationSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantElectronicMailMapper 
    {
        public static bool SynchronizeTo(this IApplicantElectronicMail source, IApplicantElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantElectronicMail source, IApplicantElectronicMail target, Action<IApplicantElectronicMail, IApplicantElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as IApplicantElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantElectronicMailSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IApplicantIdentificationDocument source, IApplicantIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantIdentificationDocument source, IApplicantIdentificationDocument target, Action<IApplicantIdentificationDocument, IApplicantIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IApplicantIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantInternationalAddressMapper 
    {
        public static bool SynchronizeTo(this IApplicantInternationalAddress source, IApplicantInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantInternationalAddress source, IApplicantInternationalAddress target, Action<IApplicantInternationalAddress, IApplicantInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as IApplicantInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantInternationalAddressSynchronizationSourceSupport 
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantLanguageMapper 
    {
        public static bool SynchronizeTo(this IApplicantLanguage source, IApplicantLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicantLanguageUsesSupported)
            {
                isModified |= 
                    source.ApplicantLanguageUses.SynchronizeCollectionTo(
                        target.ApplicantLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.ApplicantLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicantLanguageUseIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplicantLanguage source, IApplicantLanguage target, Action<IApplicantLanguage, IApplicantLanguage> onMapped)
        {
            var sourceSynchSupport = source as IApplicantLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicantLanguageUsesSupported)
            {    
                targetSynchSupport.IsApplicantLanguageUseIncluded = sourceSynchSupport.IsApplicantLanguageUseIncluded;
                source.ApplicantLanguageUses.MapCollectionTo(target.ApplicantLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsApplicantLanguageUsesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantLanguageSynchronizationSourceSupport 
    {
        bool IsApplicantLanguageUsesSupported { get; set; }
        Func<IApplicantLanguageUse, bool> IsApplicantLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantLanguageUseMapper 
    {
        public static bool SynchronizeTo(this IApplicantLanguageUse source, IApplicantLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantLanguageUse source, IApplicantLanguageUse target, Action<IApplicantLanguageUse, IApplicantLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as IApplicantLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantLanguageUseSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantPersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IApplicantPersonalIdentificationDocument source, IApplicantPersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantPersonalIdentificationDocument source, IApplicantPersonalIdentificationDocument target, Action<IApplicantPersonalIdentificationDocument, IApplicantPersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantPersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantRaceMapper 
    {
        public static bool SynchronizeTo(this IApplicantRace source, IApplicantRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantRace source, IApplicantRace target, Action<IApplicantRace, IApplicantRace> onMapped)
        {
            var sourceSynchSupport = source as IApplicantRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantRaceSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantStaffIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this IApplicantStaffIdentificationCode source, IApplicantStaffIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantStaffIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffIdentificationSystemDescriptor != target.StaffIdentificationSystemDescriptor)
            {
                source.StaffIdentificationSystemDescriptor = target.StaffIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssigningOrganizationIdentificationCodeSupported)
                && target.AssigningOrganizationIdentificationCode != source.AssigningOrganizationIdentificationCode)
            {
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantStaffIdentificationCode source, IApplicantStaffIdentificationCode target, Action<IApplicantStaffIdentificationCode, IApplicantStaffIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as IApplicantStaffIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantStaffIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StaffIdentificationSystemDescriptor = source.StaffIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssigningOrganizationIdentificationCodeSupported)
                target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            else
                targetSynchSupport.IsAssigningOrganizationIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantStaffIdentificationCodeSynchronizationSourceSupport 
    {
        bool IsAssigningOrganizationIdentificationCodeSupported { get; set; }
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantTeacherPreparationProgramMapper 
    {
        public static bool SynchronizeTo(this IApplicantTeacherPreparationProgram source, IApplicantTeacherPreparationProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantTeacherPreparationProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherPreparationProgramName != target.TeacherPreparationProgramName)
            {
                source.TeacherPreparationProgramName = target.TeacherPreparationProgramName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGPASupported)
                && target.GPA != source.GPA)
            {
                target.GPA = source.GPA;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLevelOfDegreeAwardedDescriptorSupported)
                && target.LevelOfDegreeAwardedDescriptor != source.LevelOfDegreeAwardedDescriptor)
            {
                target.LevelOfDegreeAwardedDescriptor = source.LevelOfDegreeAwardedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMajorSpecializationSupported)
                && target.MajorSpecialization != source.MajorSpecialization)
            {
                target.MajorSpecialization = source.MajorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramIdentifierSupported)
                && target.TeacherPreparationProgramIdentifier != source.TeacherPreparationProgramIdentifier)
            {
                target.TeacherPreparationProgramIdentifier = source.TeacherPreparationProgramIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                && target.TeacherPreparationProgramTypeDescriptor != source.TeacherPreparationProgramTypeDescriptor)
            {
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantTeacherPreparationProgram source, IApplicantTeacherPreparationProgram target, Action<IApplicantTeacherPreparationProgram, IApplicantTeacherPreparationProgram> onMapped)
        {
            var sourceSynchSupport = source as IApplicantTeacherPreparationProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantTeacherPreparationProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TeacherPreparationProgramName = source.TeacherPreparationProgramName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGPASupported)
                target.GPA = source.GPA;
            else
                targetSynchSupport.IsGPASupported = false;

            if (sourceSynchSupport.IsLevelOfDegreeAwardedDescriptorSupported)
                target.LevelOfDegreeAwardedDescriptor = source.LevelOfDegreeAwardedDescriptor;
            else
                targetSynchSupport.IsLevelOfDegreeAwardedDescriptorSupported = false;

            if (sourceSynchSupport.IsMajorSpecializationSupported)
                target.MajorSpecialization = source.MajorSpecialization;
            else
                targetSynchSupport.IsMajorSpecializationSupported = false;

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramIdentifierSupported)
                target.TeacherPreparationProgramIdentifier = source.TeacherPreparationProgramIdentifier;
            else
                targetSynchSupport.IsTeacherPreparationProgramIdentifierSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
            else
                targetSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantTeacherPreparationProgramSynchronizationSourceSupport 
    {
        bool IsGPASupported { get; set; }
        bool IsLevelOfDegreeAwardedDescriptorSupported { get; set; }
        bool IsMajorSpecializationSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsTeacherPreparationProgramIdentifierSupported { get; set; }
        bool IsTeacherPreparationProgramTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantTelephoneMapper 
    {
        public static bool SynchronizeTo(this IApplicantTelephone source, IApplicantTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantTelephone source, IApplicantTelephone target, Action<IApplicantTelephone, IApplicantTelephone> onMapped)
        {
            var sourceSynchSupport = source as IApplicantTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicantVisaMapper 
    {
        public static bool SynchronizeTo(this IApplicantVisa source, IApplicantVisa target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantVisaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptor != target.VisaDescriptor)
            {
                source.VisaDescriptor = target.VisaDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantVisa source, IApplicantVisa target, Action<IApplicantVisa, IApplicantVisa> onMapped)
        {
            var sourceSynchSupport = source as IApplicantVisaSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantVisaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantVisaSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: ApplicantProspectAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicantProspectAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicantProspectAssociationMapper 
    {
        public static bool SynchronizeTo(this IApplicantProspectAssociation source, IApplicantProspectAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicantProspectAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProspectIdentifier != target.ProspectIdentifier)
            {
                source.ProspectIdentifier = target.ProspectIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicantProspectAssociation source, IApplicantProspectAssociation target, Action<IApplicantProspectAssociation, IApplicantProspectAssociation> onMapped)
        {
            var sourceSynchSupport = source as IApplicantProspectAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicantProspectAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProspectIdentifier = source.ProspectIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicantResourceId = source.ApplicantResourceId;
                target.ApplicantDiscriminator = source.ApplicantDiscriminator;
                target.ProspectResourceId = source.ProspectResourceId;
                target.ProspectDiscriminator = source.ProspectDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicantProspectAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: Application

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationMapper 
    {
        public static bool SynchronizeTo(this IApplication source, IApplication target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.ApplicationIdentifier != target.ApplicationIdentifier)
            {
                source.ApplicationIdentifier = target.ApplicationIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAcceptedDateSupported)
                && target.AcceptedDate != source.AcceptedDate)
            {
                target.AcceptedDate = source.AcceptedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationDateSupported)
                && target.ApplicationDate != source.ApplicationDate)
            {
                target.ApplicationDate = source.ApplicationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationSourceDescriptorSupported)
                && target.ApplicationSourceDescriptor != source.ApplicationSourceDescriptor)
            {
                target.ApplicationSourceDescriptor = source.ApplicationSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationStatusDescriptorSupported)
                && target.ApplicationStatusDescriptor != source.ApplicationStatusDescriptor)
            {
                target.ApplicationStatusDescriptor = source.ApplicationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCurrentEmployeeSupported)
                && target.CurrentEmployee != source.CurrentEmployee)
            {
                target.CurrentEmployee = source.CurrentEmployee;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstContactDateSupported)
                && target.FirstContactDate != source.FirstContactDate)
            {
                target.FirstContactDate = source.FirstContactDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighestCompletedLevelOfEducationDescriptorSupported)
                && target.HighestCompletedLevelOfEducationDescriptor != source.HighestCompletedLevelOfEducationDescriptor)
            {
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported)
                && target.HighlyQualifiedAcademicSubjectDescriptor != source.HighlyQualifiedAcademicSubjectDescriptor)
            {
                target.HighlyQualifiedAcademicSubjectDescriptor = source.HighlyQualifiedAcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighlyQualifiedTeacherSupported)
                && target.HighlyQualifiedTeacher != source.HighlyQualifiedTeacher)
            {
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighNeedsAcademicSubjectDescriptorSupported)
                && target.HighNeedsAcademicSubjectDescriptor != source.HighNeedsAcademicSubjectDescriptor)
            {
                target.HighNeedsAcademicSubjectDescriptor = source.HighNeedsAcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHireStatusDescriptorSupported)
                && target.HireStatusDescriptor != source.HireStatusDescriptor)
            {
                target.HireStatusDescriptor = source.HireStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHiringSourceDescriptorSupported)
                && target.HiringSourceDescriptor != source.HiringSourceDescriptor)
            {
                target.HiringSourceDescriptor = source.HiringSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWithdrawDateSupported)
                && target.WithdrawDate != source.WithdrawDate)
            {
                target.WithdrawDate = source.WithdrawDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWithdrawReasonDescriptorSupported)
                && target.WithdrawReasonDescriptor != source.WithdrawReasonDescriptor)
            {
                target.WithdrawReasonDescriptor = source.WithdrawReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfPriorProfessionalExperienceSupported)
                && target.YearsOfPriorProfessionalExperience != source.YearsOfPriorProfessionalExperience)
            {
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfPriorTeachingExperienceSupported)
                && target.YearsOfPriorTeachingExperience != source.YearsOfPriorTeachingExperience)
            {
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsApplicationGradePointAveragesSupported)
            {
                isModified |= 
                    source.ApplicationGradePointAverages.SynchronizeCollectionTo(
                        target.ApplicationGradePointAverages, 
                        onChildAdded: child => 
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicationGradePointAverageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicationOpenStaffPositionsSupported)
            {
                isModified |= 
                    source.ApplicationOpenStaffPositions.SynchronizeCollectionTo(
                        target.ApplicationOpenStaffPositions, 
                        onChildAdded: child => 
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicationOpenStaffPositionIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicationScoreResultsSupported)
            {
                isModified |= 
                    source.ApplicationScoreResults.SynchronizeCollectionTo(
                        target.ApplicationScoreResults, 
                        onChildAdded: child => 
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicationScoreResultIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsApplicationTermsSupported)
            {
                isModified |= 
                    source.ApplicationTerms.SynchronizeCollectionTo(
                        target.ApplicationTerms, 
                        onChildAdded: child => 
                            {
                                child.Application = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsApplicationTermIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IApplication source, IApplication target, Action<IApplication, IApplication> onMapped)
        {
            var sourceSynchSupport = source as IApplicationSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.ApplicationIdentifier = source.ApplicationIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsAcceptedDateSupported)
                target.AcceptedDate = source.AcceptedDate;
            else
                targetSynchSupport.IsAcceptedDateSupported = false;

            if (sourceSynchSupport.IsApplicationDateSupported)
                target.ApplicationDate = source.ApplicationDate;
            else
                targetSynchSupport.IsApplicationDateSupported = false;

            if (sourceSynchSupport.IsApplicationSourceDescriptorSupported)
                target.ApplicationSourceDescriptor = source.ApplicationSourceDescriptor;
            else
                targetSynchSupport.IsApplicationSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsApplicationStatusDescriptorSupported)
                target.ApplicationStatusDescriptor = source.ApplicationStatusDescriptor;
            else
                targetSynchSupport.IsApplicationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsCurrentEmployeeSupported)
                target.CurrentEmployee = source.CurrentEmployee;
            else
                targetSynchSupport.IsCurrentEmployeeSupported = false;

            if (sourceSynchSupport.IsFirstContactDateSupported)
                target.FirstContactDate = source.FirstContactDate;
            else
                targetSynchSupport.IsFirstContactDateSupported = false;

            if (sourceSynchSupport.IsHighestCompletedLevelOfEducationDescriptorSupported)
                target.HighestCompletedLevelOfEducationDescriptor = source.HighestCompletedLevelOfEducationDescriptor;
            else
                targetSynchSupport.IsHighestCompletedLevelOfEducationDescriptorSupported = false;

            if (sourceSynchSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported)
                target.HighlyQualifiedAcademicSubjectDescriptor = source.HighlyQualifiedAcademicSubjectDescriptor;
            else
                targetSynchSupport.IsHighlyQualifiedAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsHighlyQualifiedTeacherSupported)
                target.HighlyQualifiedTeacher = source.HighlyQualifiedTeacher;
            else
                targetSynchSupport.IsHighlyQualifiedTeacherSupported = false;

            if (sourceSynchSupport.IsHighNeedsAcademicSubjectDescriptorSupported)
                target.HighNeedsAcademicSubjectDescriptor = source.HighNeedsAcademicSubjectDescriptor;
            else
                targetSynchSupport.IsHighNeedsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsHireStatusDescriptorSupported)
                target.HireStatusDescriptor = source.HireStatusDescriptor;
            else
                targetSynchSupport.IsHireStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsHiringSourceDescriptorSupported)
                target.HiringSourceDescriptor = source.HiringSourceDescriptor;
            else
                targetSynchSupport.IsHiringSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsWithdrawDateSupported)
                target.WithdrawDate = source.WithdrawDate;
            else
                targetSynchSupport.IsWithdrawDateSupported = false;

            if (sourceSynchSupport.IsWithdrawReasonDescriptorSupported)
                target.WithdrawReasonDescriptor = source.WithdrawReasonDescriptor;
            else
                targetSynchSupport.IsWithdrawReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsYearsOfPriorProfessionalExperienceSupported)
                target.YearsOfPriorProfessionalExperience = source.YearsOfPriorProfessionalExperience;
            else
                targetSynchSupport.IsYearsOfPriorProfessionalExperienceSupported = false;

            if (sourceSynchSupport.IsYearsOfPriorTeachingExperienceSupported)
                target.YearsOfPriorTeachingExperience = source.YearsOfPriorTeachingExperience;
            else
                targetSynchSupport.IsYearsOfPriorTeachingExperienceSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicantResourceId = source.ApplicantResourceId;
                target.ApplicantDiscriminator = source.ApplicantDiscriminator;
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsApplicationGradePointAveragesSupported)
            {    
                targetSynchSupport.IsApplicationGradePointAverageIncluded = sourceSynchSupport.IsApplicationGradePointAverageIncluded;
                source.ApplicationGradePointAverages.MapCollectionTo(target.ApplicationGradePointAverages, target);
            }
            else
            {
                targetSynchSupport.IsApplicationGradePointAveragesSupported = false;
            }

            if (sourceSynchSupport.IsApplicationOpenStaffPositionsSupported)
            {    
                targetSynchSupport.IsApplicationOpenStaffPositionIncluded = sourceSynchSupport.IsApplicationOpenStaffPositionIncluded;
                source.ApplicationOpenStaffPositions.MapCollectionTo(target.ApplicationOpenStaffPositions, target);
            }
            else
            {
                targetSynchSupport.IsApplicationOpenStaffPositionsSupported = false;
            }

            if (sourceSynchSupport.IsApplicationScoreResultsSupported)
            {    
                targetSynchSupport.IsApplicationScoreResultIncluded = sourceSynchSupport.IsApplicationScoreResultIncluded;
                source.ApplicationScoreResults.MapCollectionTo(target.ApplicationScoreResults, target);
            }
            else
            {
                targetSynchSupport.IsApplicationScoreResultsSupported = false;
            }

            if (sourceSynchSupport.IsApplicationTermsSupported)
            {    
                targetSynchSupport.IsApplicationTermIncluded = sourceSynchSupport.IsApplicationTermIncluded;
                source.ApplicationTerms.MapCollectionTo(target.ApplicationTerms, target);
            }
            else
            {
                targetSynchSupport.IsApplicationTermsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsAcceptedDateSupported { get; set; }
        bool IsApplicationDateSupported { get; set; }
        bool IsApplicationGradePointAveragesSupported { get; set; }
        bool IsApplicationOpenStaffPositionsSupported { get; set; }
        bool IsApplicationScoreResultsSupported { get; set; }
        bool IsApplicationSourceDescriptorSupported { get; set; }
        bool IsApplicationStatusDescriptorSupported { get; set; }
        bool IsApplicationTermsSupported { get; set; }
        bool IsCurrentEmployeeSupported { get; set; }
        bool IsFirstContactDateSupported { get; set; }
        bool IsHighestCompletedLevelOfEducationDescriptorSupported { get; set; }
        bool IsHighlyQualifiedAcademicSubjectDescriptorSupported { get; set; }
        bool IsHighlyQualifiedTeacherSupported { get; set; }
        bool IsHighNeedsAcademicSubjectDescriptorSupported { get; set; }
        bool IsHireStatusDescriptorSupported { get; set; }
        bool IsHiringSourceDescriptorSupported { get; set; }
        bool IsWithdrawDateSupported { get; set; }
        bool IsWithdrawReasonDescriptorSupported { get; set; }
        bool IsYearsOfPriorProfessionalExperienceSupported { get; set; }
        bool IsYearsOfPriorTeachingExperienceSupported { get; set; }
        Func<IApplicationGradePointAverage, bool> IsApplicationGradePointAverageIncluded { get; set; }
        Func<IApplicationOpenStaffPosition, bool> IsApplicationOpenStaffPositionIncluded { get; set; }
        Func<IApplicationScoreResult, bool> IsApplicationScoreResultIncluded { get; set; }
        Func<IApplicationTerm, bool> IsApplicationTermIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicationGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this IApplicationGradePointAverage source, IApplicationGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradePointAverageTypeDescriptor != target.GradePointAverageTypeDescriptor)
            {
                source.GradePointAverageTypeDescriptor = target.GradePointAverageTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageValueSupported)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsCumulativeSupported)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxGradePointAverageValueSupported)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationGradePointAverage source, IApplicationGradePointAverage target, Action<IApplicationGradePointAverage, IApplicationGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as IApplicationGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageValueSupported)
                target.GradePointAverageValue = source.GradePointAverageValue;
            else
                targetSynchSupport.IsGradePointAverageValueSupported = false;

            if (sourceSynchSupport.IsIsCumulativeSupported)
                target.IsCumulative = source.IsCumulative;
            else
                targetSynchSupport.IsIsCumulativeSupported = false;

            if (sourceSynchSupport.IsMaxGradePointAverageValueSupported)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
            else
                targetSynchSupport.IsMaxGradePointAverageValueSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageValueSupported { get; set; }
        bool IsIsCumulativeSupported { get; set; }
        bool IsMaxGradePointAverageValueSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicationOpenStaffPositionMapper 
    {
        public static bool SynchronizeTo(this IApplicationOpenStaffPosition source, IApplicationOpenStaffPosition target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationOpenStaffPositionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationOpenStaffPosition source, IApplicationOpenStaffPosition target, Action<IApplicationOpenStaffPosition, IApplicationOpenStaffPosition> onMapped)
        {
            var sourceSynchSupport = source as IApplicationOpenStaffPositionSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationOpenStaffPositionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationOpenStaffPositionSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicationScoreResultMapper 
    {
        public static bool SynchronizeTo(this IApplicationScoreResult source, IApplicationScoreResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationScoreResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssessmentReportingMethodDescriptor != target.AssessmentReportingMethodDescriptor)
            {
                source.AssessmentReportingMethodDescriptor = target.AssessmentReportingMethodDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultSupported)
                && target.Result != source.Result)
            {
                target.Result = source.Result;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationScoreResult source, IApplicationScoreResult target, Action<IApplicationScoreResult, IApplicationScoreResult> onMapped)
        {
            var sourceSynchSupport = source as IApplicationScoreResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationScoreResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssessmentReportingMethodDescriptor = source.AssessmentReportingMethodDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultSupported)
                target.Result = source.Result;
            else
                targetSynchSupport.IsResultSupported = false;

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationScoreResultSynchronizationSourceSupport 
    {
        bool IsResultSupported { get; set; }
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ApplicationTermMapper 
    {
        public static bool SynchronizeTo(this IApplicationTerm source, IApplicationTerm target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationTermSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationTerm source, IApplicationTerm target, Action<IApplicationTerm, IApplicationTerm> onMapped)
        {
            var sourceSynchSupport = source as IApplicationTermSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationTermSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationTermSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: ApplicationEvent

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventMapper 
    {
        public static bool SynchronizeTo(this IApplicationEvent source, IApplicationEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.ApplicationEventTypeDescriptor != target.ApplicationEventTypeDescriptor)
            {
                source.ApplicationEventTypeDescriptor = target.ApplicationEventTypeDescriptor;
            }
            if (source.ApplicationIdentifier != target.ApplicationIdentifier)
            {
                source.ApplicationIdentifier = target.ApplicationIdentifier;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.SequenceNumber != target.SequenceNumber)
            {
                source.SequenceNumber = target.SequenceNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApplicationEvaluationScoreSupported)
                && target.ApplicationEvaluationScore != source.ApplicationEvaluationScore)
            {
                target.ApplicationEvaluationScore = source.ApplicationEvaluationScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsApplicationEventResultDescriptorSupported)
                && target.ApplicationEventResultDescriptor != source.ApplicationEventResultDescriptor)
            {
                target.ApplicationEventResultDescriptor = source.ApplicationEventResultDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventEndDateSupported)
                && target.EventEndDate != source.EventEndDate)
            {
                target.EventEndDate = source.EventEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEvent source, IApplicationEvent target, Action<IApplicationEvent, IApplicationEvent> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.ApplicationEventTypeDescriptor = source.ApplicationEventTypeDescriptor;
            target.ApplicationIdentifier = source.ApplicationIdentifier;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.SequenceNumber = source.SequenceNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApplicationEvaluationScoreSupported)
                target.ApplicationEvaluationScore = source.ApplicationEvaluationScore;
            else
                targetSynchSupport.IsApplicationEvaluationScoreSupported = false;

            if (sourceSynchSupport.IsApplicationEventResultDescriptorSupported)
                target.ApplicationEventResultDescriptor = source.ApplicationEventResultDescriptor;
            else
                targetSynchSupport.IsApplicationEventResultDescriptorSupported = false;

            if (sourceSynchSupport.IsEventEndDateSupported)
                target.EventEndDate = source.EventEndDate;
            else
                targetSynchSupport.IsEventEndDateSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicationResourceId = source.ApplicationResourceId;
                target.ApplicationDiscriminator = source.ApplicationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventSynchronizationSourceSupport 
    {
        bool IsApplicationEvaluationScoreSupported { get; set; }
        bool IsApplicationEventResultDescriptorSupported { get; set; }
        bool IsEventEndDateSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }
 
}
// Aggregate: ApplicationEventResultDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventResultDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventResultDescriptorMapper 
    {
        public static bool SynchronizeTo(this IApplicationEventResultDescriptor source, IApplicationEventResultDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventResultDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationEventResultDescriptorId != target.ApplicationEventResultDescriptorId)
            {
                source.ApplicationEventResultDescriptorId = target.ApplicationEventResultDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEventResultDescriptor source, IApplicationEventResultDescriptor target, Action<IApplicationEventResultDescriptor, IApplicationEventResultDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventResultDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventResultDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationEventResultDescriptorId = source.ApplicationEventResultDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventResultDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ApplicationEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IApplicationEventTypeDescriptor source, IApplicationEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationEventTypeDescriptorId != target.ApplicationEventTypeDescriptorId)
            {
                source.ApplicationEventTypeDescriptorId = target.ApplicationEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationEventTypeDescriptor source, IApplicationEventTypeDescriptor target, Action<IApplicationEventTypeDescriptor, IApplicationEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationEventTypeDescriptorId = source.ApplicationEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ApplicationSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationSourceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationSourceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IApplicationSourceDescriptor source, IApplicationSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationSourceDescriptorId != target.ApplicationSourceDescriptorId)
            {
                source.ApplicationSourceDescriptorId = target.ApplicationSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationSourceDescriptor source, IApplicationSourceDescriptor target, Action<IApplicationSourceDescriptor, IApplicationSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationSourceDescriptorId = source.ApplicationSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ApplicationStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ApplicationStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ApplicationStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IApplicationStatusDescriptor source, IApplicationStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IApplicationStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicationStatusDescriptorId != target.ApplicationStatusDescriptorId)
            {
                source.ApplicationStatusDescriptorId = target.ApplicationStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IApplicationStatusDescriptor source, IApplicationStatusDescriptor target, Action<IApplicationStatusDescriptor, IApplicationStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IApplicationStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IApplicationStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicationStatusDescriptorId = source.ApplicationStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IApplicationStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Assessment

namespace EdFi.Ods.Entities.Common.TPDM //.AssessmentAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class AssessmentExtensionMapper 
    {
        public static bool SynchronizeTo(this IAssessmentExtension source, IAssessmentExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IAssessmentExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Assessment as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IAssessmentExtension source, IAssessmentExtension target, Action<IAssessmentExtension, IAssessmentExtension> onMapped)
        {
            var sourceSynchSupport = source as IAssessmentExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IAssessmentExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IAssessmentExtensionSynchronizationSourceSupport 
    {
        bool IsProgramGatewayDescriptorSupported { get; set; }
    }
 
}
// Aggregate: BackgroundCheckStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.BackgroundCheckStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class BackgroundCheckStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IBackgroundCheckStatusDescriptor source, IBackgroundCheckStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckStatusDescriptorId != target.BackgroundCheckStatusDescriptorId)
            {
                source.BackgroundCheckStatusDescriptorId = target.BackgroundCheckStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IBackgroundCheckStatusDescriptor source, IBackgroundCheckStatusDescriptor target, Action<IBackgroundCheckStatusDescriptor, IBackgroundCheckStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IBackgroundCheckStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BackgroundCheckStatusDescriptorId = source.BackgroundCheckStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBackgroundCheckStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: BackgroundCheckTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.BackgroundCheckTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class BackgroundCheckTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IBackgroundCheckTypeDescriptor source, IBackgroundCheckTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptorId != target.BackgroundCheckTypeDescriptorId)
            {
                source.BackgroundCheckTypeDescriptorId = target.BackgroundCheckTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IBackgroundCheckTypeDescriptor source, IBackgroundCheckTypeDescriptor target, Action<IBackgroundCheckTypeDescriptor, IBackgroundCheckTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IBackgroundCheckTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptorId = source.BackgroundCheckTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IBackgroundCheckTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Certification

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationMapper 
    {
        public static bool SynchronizeTo(this ICertification source, ICertification target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationIdentifier != target.CertificationIdentifier)
            {
                source.CertificationIdentifier = target.CertificationIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCertificationFieldDescriptorSupported)
                && target.CertificationFieldDescriptor != source.CertificationFieldDescriptor)
            {
                target.CertificationFieldDescriptor = source.CertificationFieldDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationLevelDescriptorSupported)
                && target.CertificationLevelDescriptor != source.CertificationLevelDescriptor)
            {
                target.CertificationLevelDescriptor = source.CertificationLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationStandardDescriptorSupported)
                && target.CertificationStandardDescriptor != source.CertificationStandardDescriptor)
            {
                target.CertificationStandardDescriptor = source.CertificationStandardDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationTitleSupported)
                && target.CertificationTitle != source.CertificationTitle)
            {
                target.CertificationTitle = source.CertificationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducatorRoleDescriptorSupported)
                && target.EducatorRoleDescriptor != source.EducatorRoleDescriptor)
            {
                target.EducatorRoleDescriptor = source.EducatorRoleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveDateSupported)
                && target.EffectiveDate != source.EffectiveDate)
            {
                target.EffectiveDate = source.EffectiveDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInstructionalSettingDescriptorSupported)
                && target.InstructionalSettingDescriptor != source.InstructionalSettingDescriptor)
            {
                target.InstructionalSettingDescriptor = source.InstructionalSettingDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinimumDegreeDescriptorSupported)
                && target.MinimumDegreeDescriptor != source.MinimumDegreeDescriptor)
            {
                target.MinimumDegreeDescriptor = source.MinimumDegreeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPopulationServedDescriptorSupported)
                && target.PopulationServedDescriptor != source.PopulationServedDescriptor)
            {
                target.PopulationServedDescriptor = source.PopulationServedDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCertificationCertificationExamsSupported)
            {
                isModified |= 
                    source.CertificationCertificationExams.SynchronizeCollectionTo(
                        target.CertificationCertificationExams, 
                        onChildAdded: child => 
                            {
                                child.Certification = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCertificationCertificationExamIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCertificationGradeLevelsSupported)
            {
                isModified |= 
                    source.CertificationGradeLevels.SynchronizeCollectionTo(
                        target.CertificationGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.Certification = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCertificationGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsCertificationRoutesSupported)
            {
                isModified |= 
                    source.CertificationRoutes.SynchronizeCollectionTo(
                        target.CertificationRoutes, 
                        onChildAdded: child => 
                            {
                                child.Certification = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCertificationRouteIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICertification source, ICertification target, Action<ICertification, ICertification> onMapped)
        {
            var sourceSynchSupport = source as ICertificationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationIdentifier = source.CertificationIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCertificationFieldDescriptorSupported)
                target.CertificationFieldDescriptor = source.CertificationFieldDescriptor;
            else
                targetSynchSupport.IsCertificationFieldDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationLevelDescriptorSupported)
                target.CertificationLevelDescriptor = source.CertificationLevelDescriptor;
            else
                targetSynchSupport.IsCertificationLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationStandardDescriptorSupported)
                target.CertificationStandardDescriptor = source.CertificationStandardDescriptor;
            else
                targetSynchSupport.IsCertificationStandardDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationTitleSupported)
                target.CertificationTitle = source.CertificationTitle;
            else
                targetSynchSupport.IsCertificationTitleSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEducatorRoleDescriptorSupported)
                target.EducatorRoleDescriptor = source.EducatorRoleDescriptor;
            else
                targetSynchSupport.IsEducatorRoleDescriptorSupported = false;

            if (sourceSynchSupport.IsEffectiveDateSupported)
                target.EffectiveDate = source.EffectiveDate;
            else
                targetSynchSupport.IsEffectiveDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsInstructionalSettingDescriptorSupported)
                target.InstructionalSettingDescriptor = source.InstructionalSettingDescriptor;
            else
                targetSynchSupport.IsInstructionalSettingDescriptorSupported = false;

            if (sourceSynchSupport.IsMinimumDegreeDescriptorSupported)
                target.MinimumDegreeDescriptor = source.MinimumDegreeDescriptor;
            else
                targetSynchSupport.IsMinimumDegreeDescriptorSupported = false;

            if (sourceSynchSupport.IsPopulationServedDescriptorSupported)
                target.PopulationServedDescriptor = source.PopulationServedDescriptor;
            else
                targetSynchSupport.IsPopulationServedDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCertificationCertificationExamsSupported)
            {    
                targetSynchSupport.IsCertificationCertificationExamIncluded = sourceSynchSupport.IsCertificationCertificationExamIncluded;
                source.CertificationCertificationExams.MapCollectionTo(target.CertificationCertificationExams, target);
            }
            else
            {
                targetSynchSupport.IsCertificationCertificationExamsSupported = false;
            }

            if (sourceSynchSupport.IsCertificationGradeLevelsSupported)
            {    
                targetSynchSupport.IsCertificationGradeLevelIncluded = sourceSynchSupport.IsCertificationGradeLevelIncluded;
                source.CertificationGradeLevels.MapCollectionTo(target.CertificationGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsCertificationGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsCertificationRoutesSupported)
            {    
                targetSynchSupport.IsCertificationRouteIncluded = sourceSynchSupport.IsCertificationRouteIncluded;
                source.CertificationRoutes.MapCollectionTo(target.CertificationRoutes, target);
            }
            else
            {
                targetSynchSupport.IsCertificationRoutesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationSynchronizationSourceSupport 
    {
        bool IsCertificationCertificationExamsSupported { get; set; }
        bool IsCertificationFieldDescriptorSupported { get; set; }
        bool IsCertificationGradeLevelsSupported { get; set; }
        bool IsCertificationLevelDescriptorSupported { get; set; }
        bool IsCertificationRoutesSupported { get; set; }
        bool IsCertificationStandardDescriptorSupported { get; set; }
        bool IsCertificationTitleSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEducatorRoleDescriptorSupported { get; set; }
        bool IsEffectiveDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsInstructionalSettingDescriptorSupported { get; set; }
        bool IsMinimumDegreeDescriptorSupported { get; set; }
        bool IsPopulationServedDescriptorSupported { get; set; }
        Func<ICertificationCertificationExam, bool> IsCertificationCertificationExamIncluded { get; set; }
        Func<ICertificationGradeLevel, bool> IsCertificationGradeLevelIncluded { get; set; }
        Func<ICertificationRoute, bool> IsCertificationRouteIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CertificationCertificationExamMapper 
    {
        public static bool SynchronizeTo(this ICertificationCertificationExam source, ICertificationCertificationExam target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationCertificationExamSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamIdentifier != target.CertificationExamIdentifier)
            {
                source.CertificationExamIdentifier = target.CertificationExamIdentifier;
            }
            if (source.CertificationExamNamespace != target.CertificationExamNamespace)
            {
                source.CertificationExamNamespace = target.CertificationExamNamespace;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationCertificationExam source, ICertificationCertificationExam target, Action<ICertificationCertificationExam, ICertificationCertificationExam> onMapped)
        {
            var sourceSynchSupport = source as ICertificationCertificationExamSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationCertificationExamSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CertificationExamIdentifier = source.CertificationExamIdentifier;
            target.CertificationExamNamespace = source.CertificationExamNamespace;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CertificationExamResourceId = source.CertificationExamResourceId;
                target.CertificationExamDiscriminator = source.CertificationExamDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationCertificationExamSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CertificationGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ICertificationGradeLevel source, ICertificationGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationGradeLevel source, ICertificationGradeLevel target, Action<ICertificationGradeLevel, ICertificationGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ICertificationGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationGradeLevelSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class CertificationRouteMapper 
    {
        public static bool SynchronizeTo(this ICertificationRoute source, ICertificationRoute target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationRouteSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationRouteDescriptor != target.CertificationRouteDescriptor)
            {
                source.CertificationRouteDescriptor = target.CertificationRouteDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationRoute source, ICertificationRoute target, Action<ICertificationRoute, ICertificationRoute> onMapped)
        {
            var sourceSynchSupport = source as ICertificationRouteSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationRouteSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationRouteSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: CertificationExam

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationExamMapper 
    {
        public static bool SynchronizeTo(this ICertificationExam source, ICertificationExam target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamIdentifier != target.CertificationExamIdentifier)
            {
                source.CertificationExamIdentifier = target.CertificationExamIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCertificationExamTitleSupported)
                && target.CertificationExamTitle != source.CertificationExamTitle)
            {
                target.CertificationExamTitle = source.CertificationExamTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamTypeDescriptorSupported)
                && target.CertificationExamTypeDescriptor != source.CertificationExamTypeDescriptor)
            {
                target.CertificationExamTypeDescriptor = source.CertificationExamTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveDateSupported)
                && target.EffectiveDate != source.EffectiveDate)
            {
                target.EffectiveDate = source.EffectiveDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExam source, ICertificationExam target, Action<ICertificationExam, ICertificationExam> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamIdentifier = source.CertificationExamIdentifier;
            target.Namespace = source.Namespace;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCertificationExamTitleSupported)
                target.CertificationExamTitle = source.CertificationExamTitle;
            else
                targetSynchSupport.IsCertificationExamTitleSupported = false;

            if (sourceSynchSupport.IsCertificationExamTypeDescriptorSupported)
                target.CertificationExamTypeDescriptor = source.CertificationExamTypeDescriptor;
            else
                targetSynchSupport.IsCertificationExamTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEffectiveDateSupported)
                target.EffectiveDate = source.EffectiveDate;
            else
                targetSynchSupport.IsEffectiveDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamSynchronizationSourceSupport 
    {
        bool IsCertificationExamTitleSupported { get; set; }
        bool IsCertificationExamTypeDescriptorSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEffectiveDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: CertificationExamResult

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamResultAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationExamResultMapper 
    {
        public static bool SynchronizeTo(this ICertificationExamResult source, ICertificationExamResult target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamDate != target.CertificationExamDate)
            {
                source.CertificationExamDate = target.CertificationExamDate;
            }
            if (source.CertificationExamIdentifier != target.CertificationExamIdentifier)
            {
                source.CertificationExamIdentifier = target.CertificationExamIdentifier;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttemptNumberSupported)
                && target.AttemptNumber != source.AttemptNumber)
            {
                target.AttemptNumber = source.AttemptNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamPassIndicatorSupported)
                && target.CertificationExamPassIndicator != source.CertificationExamPassIndicator)
            {
                target.CertificationExamPassIndicator = source.CertificationExamPassIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamScoreSupported)
                && target.CertificationExamScore != source.CertificationExamScore)
            {
                target.CertificationExamScore = source.CertificationExamScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationExamStatusDescriptorSupported)
                && target.CertificationExamStatusDescriptor != source.CertificationExamStatusDescriptor)
            {
                target.CertificationExamStatusDescriptor = source.CertificationExamStatusDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExamResult source, ICertificationExamResult target, Action<ICertificationExamResult, ICertificationExamResult> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamResultSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamResultSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamDate = source.CertificationExamDate;
            target.CertificationExamIdentifier = source.CertificationExamIdentifier;
            target.Namespace = source.Namespace;
            target.PersonId = source.PersonId;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttemptNumberSupported)
                target.AttemptNumber = source.AttemptNumber;
            else
                targetSynchSupport.IsAttemptNumberSupported = false;

            if (sourceSynchSupport.IsCertificationExamPassIndicatorSupported)
                target.CertificationExamPassIndicator = source.CertificationExamPassIndicator;
            else
                targetSynchSupport.IsCertificationExamPassIndicatorSupported = false;

            if (sourceSynchSupport.IsCertificationExamScoreSupported)
                target.CertificationExamScore = source.CertificationExamScore;
            else
                targetSynchSupport.IsCertificationExamScoreSupported = false;

            if (sourceSynchSupport.IsCertificationExamStatusDescriptorSupported)
                target.CertificationExamStatusDescriptor = source.CertificationExamStatusDescriptor;
            else
                targetSynchSupport.IsCertificationExamStatusDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CertificationExamResourceId = source.CertificationExamResourceId;
                target.CertificationExamDiscriminator = source.CertificationExamDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamResultSynchronizationSourceSupport 
    {
        bool IsAttemptNumberSupported { get; set; }
        bool IsCertificationExamPassIndicatorSupported { get; set; }
        bool IsCertificationExamScoreSupported { get; set; }
        bool IsCertificationExamStatusDescriptorSupported { get; set; }
    }
 
}
// Aggregate: CertificationExamStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationExamStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICertificationExamStatusDescriptor source, ICertificationExamStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamStatusDescriptorId != target.CertificationExamStatusDescriptorId)
            {
                source.CertificationExamStatusDescriptorId = target.CertificationExamStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExamStatusDescriptor source, ICertificationExamStatusDescriptor target, Action<ICertificationExamStatusDescriptor, ICertificationExamStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamStatusDescriptorId = source.CertificationExamStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CertificationExamTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationExamTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationExamTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICertificationExamTypeDescriptor source, ICertificationExamTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationExamTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationExamTypeDescriptorId != target.CertificationExamTypeDescriptorId)
            {
                source.CertificationExamTypeDescriptorId = target.CertificationExamTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationExamTypeDescriptor source, ICertificationExamTypeDescriptor target, Action<ICertificationExamTypeDescriptor, ICertificationExamTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationExamTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationExamTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationExamTypeDescriptorId = source.CertificationExamTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationExamTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CertificationFieldDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationFieldDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationFieldDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICertificationFieldDescriptor source, ICertificationFieldDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationFieldDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationFieldDescriptorId != target.CertificationFieldDescriptorId)
            {
                source.CertificationFieldDescriptorId = target.CertificationFieldDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationFieldDescriptor source, ICertificationFieldDescriptor target, Action<ICertificationFieldDescriptor, ICertificationFieldDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationFieldDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationFieldDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationFieldDescriptorId = source.CertificationFieldDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationFieldDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CertificationLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICertificationLevelDescriptor source, ICertificationLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationLevelDescriptorId != target.CertificationLevelDescriptorId)
            {
                source.CertificationLevelDescriptorId = target.CertificationLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationLevelDescriptor source, ICertificationLevelDescriptor target, Action<ICertificationLevelDescriptor, ICertificationLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationLevelDescriptorId = source.CertificationLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CertificationRouteDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationRouteDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationRouteDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICertificationRouteDescriptor source, ICertificationRouteDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationRouteDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationRouteDescriptorId != target.CertificationRouteDescriptorId)
            {
                source.CertificationRouteDescriptorId = target.CertificationRouteDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationRouteDescriptor source, ICertificationRouteDescriptor target, Action<ICertificationRouteDescriptor, ICertificationRouteDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationRouteDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationRouteDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationRouteDescriptorId = source.CertificationRouteDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationRouteDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CertificationStandardDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CertificationStandardDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CertificationStandardDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICertificationStandardDescriptor source, ICertificationStandardDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICertificationStandardDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationStandardDescriptorId != target.CertificationStandardDescriptorId)
            {
                source.CertificationStandardDescriptorId = target.CertificationStandardDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICertificationStandardDescriptor source, ICertificationStandardDescriptor target, Action<ICertificationStandardDescriptor, ICertificationStandardDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICertificationStandardDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICertificationStandardDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CertificationStandardDescriptorId = source.CertificationStandardDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICertificationStandardDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CompleterAsStaffAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.CompleterAsStaffAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CompleterAsStaffAssociationMapper 
    {
        public static bool SynchronizeTo(this ICompleterAsStaffAssociation source, ICompleterAsStaffAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ICompleterAsStaffAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICompleterAsStaffAssociation source, ICompleterAsStaffAssociation target, Action<ICompleterAsStaffAssociation, ICompleterAsStaffAssociation> onMapped)
        {
            var sourceSynchSupport = source as ICompleterAsStaffAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ICompleterAsStaffAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICompleterAsStaffAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: CoteachingStyleObservedDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CoteachingStyleObservedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CoteachingStyleObservedDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICoteachingStyleObservedDescriptor source, ICoteachingStyleObservedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CoteachingStyleObservedDescriptorId != target.CoteachingStyleObservedDescriptorId)
            {
                source.CoteachingStyleObservedDescriptorId = target.CoteachingStyleObservedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICoteachingStyleObservedDescriptor source, ICoteachingStyleObservedDescriptor target, Action<ICoteachingStyleObservedDescriptor, ICoteachingStyleObservedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICoteachingStyleObservedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CoteachingStyleObservedDescriptorId = source.CoteachingStyleObservedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICoteachingStyleObservedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Credential

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CredentialExtensionMapper 
    {
        public static bool SynchronizeTo(this ICredentialExtension source, ICredentialExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Credential as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBoardCertificationIndicatorSupported)
                && target.BoardCertificationIndicator != source.BoardCertificationIndicator)
            {
                target.BoardCertificationIndicator = source.BoardCertificationIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationIdentifierSupported)
                && target.CertificationIdentifier != source.CertificationIdentifier)
            {
                target.CertificationIdentifier = source.CertificationIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationRouteDescriptorSupported)
                && target.CertificationRouteDescriptor != source.CertificationRouteDescriptor)
            {
                target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationTitleSupported)
                && target.CertificationTitle != source.CertificationTitle)
            {
                target.CertificationTitle = source.CertificationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCredentialStatusDateSupported)
                && target.CredentialStatusDate != source.CredentialStatusDate)
            {
                target.CredentialStatusDate = source.CredentialStatusDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCredentialStatusDescriptorSupported)
                && target.CredentialStatusDescriptor != source.CredentialStatusDescriptor)
            {
                target.CredentialStatusDescriptor = source.CredentialStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonIdSupported)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSourceSystemDescriptorSupported)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsCredentialStudentAcademicRecordsSupported)
            {
                isModified |= 
                    source.CredentialStudentAcademicRecords.SynchronizeCollectionTo(
                        target.CredentialStudentAcademicRecords, 
                        onChildAdded: child => 
                            {
                                child.CredentialExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Credential);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsCredentialStudentAcademicRecordIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ICredentialExtension source, ICredentialExtension target, Action<ICredentialExtension, ICredentialExtension> onMapped)
        {
            var sourceSynchSupport = source as ICredentialExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBoardCertificationIndicatorSupported)
                target.BoardCertificationIndicator = source.BoardCertificationIndicator;
            else
                targetSynchSupport.IsBoardCertificationIndicatorSupported = false;

            if (sourceSynchSupport.IsCertificationIdentifierSupported)
                target.CertificationIdentifier = source.CertificationIdentifier;
            else
                targetSynchSupport.IsCertificationIdentifierSupported = false;

            if (sourceSynchSupport.IsCertificationRouteDescriptorSupported)
                target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;
            else
                targetSynchSupport.IsCertificationRouteDescriptorSupported = false;

            if (sourceSynchSupport.IsCertificationTitleSupported)
                target.CertificationTitle = source.CertificationTitle;
            else
                targetSynchSupport.IsCertificationTitleSupported = false;

            if (sourceSynchSupport.IsCredentialStatusDateSupported)
                target.CredentialStatusDate = source.CredentialStatusDate;
            else
                targetSynchSupport.IsCredentialStatusDateSupported = false;

            if (sourceSynchSupport.IsCredentialStatusDescriptorSupported)
                target.CredentialStatusDescriptor = source.CredentialStatusDescriptor;
            else
                targetSynchSupport.IsCredentialStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPersonIdSupported)
                target.PersonId = source.PersonId;
            else
                targetSynchSupport.IsPersonIdSupported = false;

            if (sourceSynchSupport.IsSourceSystemDescriptorSupported)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            else
                targetSynchSupport.IsSourceSystemDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CertificationResourceId = source.CertificationResourceId;
                target.CertificationDiscriminator = source.CertificationDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsCredentialStudentAcademicRecordsSupported)
            {    
                targetSynchSupport.IsCredentialStudentAcademicRecordIncluded = sourceSynchSupport.IsCredentialStudentAcademicRecordIncluded;
                source.CredentialStudentAcademicRecords.MapCollectionTo(target.CredentialStudentAcademicRecords, target.Credential);
            }
            else
            {
                targetSynchSupport.IsCredentialStudentAcademicRecordsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialExtensionSynchronizationSourceSupport 
    {
        bool IsBoardCertificationIndicatorSupported { get; set; }
        bool IsCertificationIdentifierSupported { get; set; }
        bool IsCertificationRouteDescriptorSupported { get; set; }
        bool IsCertificationTitleSupported { get; set; }
        bool IsCredentialStatusDateSupported { get; set; }
        bool IsCredentialStatusDescriptorSupported { get; set; }
        bool IsCredentialStudentAcademicRecordsSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPersonIdSupported { get; set; }
        bool IsSourceSystemDescriptorSupported { get; set; }
        Func<ICredentialStudentAcademicRecord, bool> IsCredentialStudentAcademicRecordIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class CredentialStudentAcademicRecordMapper 
    {
        public static bool SynchronizeTo(this ICredentialStudentAcademicRecord source, ICredentialStudentAcademicRecord target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialStudentAcademicRecordSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialStudentAcademicRecord source, ICredentialStudentAcademicRecord target, Action<ICredentialStudentAcademicRecord, ICredentialStudentAcademicRecord> onMapped)
        {
            var sourceSynchSupport = source as ICredentialStudentAcademicRecordSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialStudentAcademicRecordSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.StudentUniqueId = source.StudentUniqueId;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentAcademicRecordResourceId = source.StudentAcademicRecordResourceId;
                target.StudentAcademicRecordDiscriminator = source.StudentAcademicRecordDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialStudentAcademicRecordSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: CredentialEvent

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CredentialEventMapper 
    {
        public static bool SynchronizeTo(this ICredentialEvent source, ICredentialEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialEventDate != target.CredentialEventDate)
            {
                source.CredentialEventDate = target.CredentialEventDate;
            }
            if (source.CredentialEventTypeDescriptor != target.CredentialEventTypeDescriptor)
            {
                source.CredentialEventTypeDescriptor = target.CredentialEventTypeDescriptor;
            }
            if (source.CredentialIdentifier != target.CredentialIdentifier)
            {
                source.CredentialIdentifier = target.CredentialIdentifier;
            }
            if (source.StateOfIssueStateAbbreviationDescriptor != target.StateOfIssueStateAbbreviationDescriptor)
            {
                source.StateOfIssueStateAbbreviationDescriptor = target.StateOfIssueStateAbbreviationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCredentialEventReasonSupported)
                && target.CredentialEventReason != source.CredentialEventReason)
            {
                target.CredentialEventReason = source.CredentialEventReason;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialEvent source, ICredentialEvent target, Action<ICredentialEvent, ICredentialEvent> onMapped)
        {
            var sourceSynchSupport = source as ICredentialEventSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialEventDate = source.CredentialEventDate;
            target.CredentialEventTypeDescriptor = source.CredentialEventTypeDescriptor;
            target.CredentialIdentifier = source.CredentialIdentifier;
            target.StateOfIssueStateAbbreviationDescriptor = source.StateOfIssueStateAbbreviationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCredentialEventReasonSupported)
                target.CredentialEventReason = source.CredentialEventReason;
            else
                targetSynchSupport.IsCredentialEventReasonSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CredentialResourceId = source.CredentialResourceId;
                target.CredentialDiscriminator = source.CredentialDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialEventSynchronizationSourceSupport 
    {
        bool IsCredentialEventReasonSupported { get; set; }
    }
 
}
// Aggregate: CredentialEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CredentialEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICredentialEventTypeDescriptor source, ICredentialEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialEventTypeDescriptorId != target.CredentialEventTypeDescriptorId)
            {
                source.CredentialEventTypeDescriptorId = target.CredentialEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialEventTypeDescriptor source, ICredentialEventTypeDescriptor target, Action<ICredentialEventTypeDescriptor, ICredentialEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICredentialEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialEventTypeDescriptorId = source.CredentialEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: CredentialStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.CredentialStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class CredentialStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ICredentialStatusDescriptor source, ICredentialStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ICredentialStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialStatusDescriptorId != target.CredentialStatusDescriptorId)
            {
                source.CredentialStatusDescriptorId = target.CredentialStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ICredentialStatusDescriptor source, ICredentialStatusDescriptor target, Action<ICredentialStatusDescriptor, ICredentialStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ICredentialStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ICredentialStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CredentialStatusDescriptorId = source.CredentialStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ICredentialStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: DegreeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.DegreeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class DegreeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IDegreeDescriptor source, IDegreeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IDegreeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DegreeDescriptorId != target.DegreeDescriptorId)
            {
                source.DegreeDescriptorId = target.DegreeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IDegreeDescriptor source, IDegreeDescriptor target, Action<IDegreeDescriptor, IDegreeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IDegreeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IDegreeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.DegreeDescriptorId = source.DegreeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IDegreeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EducatorRoleDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EducatorRoleDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EducatorRoleDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEducatorRoleDescriptor source, IEducatorRoleDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEducatorRoleDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducatorRoleDescriptorId != target.EducatorRoleDescriptorId)
            {
                source.EducatorRoleDescriptorId = target.EducatorRoleDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEducatorRoleDescriptor source, IEducatorRoleDescriptor target, Action<IEducatorRoleDescriptor, IEducatorRoleDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEducatorRoleDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEducatorRoleDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducatorRoleDescriptorId = source.EducatorRoleDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEducatorRoleDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EmploymentEvent

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentEventMapper 
    {
        public static bool SynchronizeTo(this IEmploymentEvent source, IEmploymentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EmploymentEventTypeDescriptor != target.EmploymentEventTypeDescriptor)
            {
                source.EmploymentEventTypeDescriptor = target.EmploymentEventTypeDescriptor;
            }
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEarlyHireSupported)
                && target.EarlyHire != source.EarlyHire)
            {
                target.EarlyHire = source.EarlyHire;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHireDateSupported)
                && target.HireDate != source.HireDate)
            {
                target.HireDate = source.HireDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInternalExternalHireDescriptorSupported)
                && target.InternalExternalHireDescriptor != source.InternalExternalHireDescriptor)
            {
                target.InternalExternalHireDescriptor = source.InternalExternalHireDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMutualConsentSupported)
                && target.MutualConsent != source.MutualConsent)
            {
                target.MutualConsent = source.MutualConsent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRestrictedChoiceSupported)
                && target.RestrictedChoice != source.RestrictedChoice)
            {
                target.RestrictedChoice = source.RestrictedChoice;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentEvent source, IEmploymentEvent target, Action<IEmploymentEvent, IEmploymentEvent> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EmploymentEventTypeDescriptor = source.EmploymentEventTypeDescriptor;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEarlyHireSupported)
                target.EarlyHire = source.EarlyHire;
            else
                targetSynchSupport.IsEarlyHireSupported = false;

            if (sourceSynchSupport.IsHireDateSupported)
                target.HireDate = source.HireDate;
            else
                targetSynchSupport.IsHireDateSupported = false;

            if (sourceSynchSupport.IsInternalExternalHireDescriptorSupported)
                target.InternalExternalHireDescriptor = source.InternalExternalHireDescriptor;
            else
                targetSynchSupport.IsInternalExternalHireDescriptorSupported = false;

            if (sourceSynchSupport.IsMutualConsentSupported)
                target.MutualConsent = source.MutualConsent;
            else
                targetSynchSupport.IsMutualConsentSupported = false;

            if (sourceSynchSupport.IsRestrictedChoiceSupported)
                target.RestrictedChoice = source.RestrictedChoice;
            else
                targetSynchSupport.IsRestrictedChoiceSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentEventSynchronizationSourceSupport 
    {
        bool IsEarlyHireSupported { get; set; }
        bool IsHireDateSupported { get; set; }
        bool IsInternalExternalHireDescriptorSupported { get; set; }
        bool IsMutualConsentSupported { get; set; }
        bool IsRestrictedChoiceSupported { get; set; }
    }
 
}
// Aggregate: EmploymentEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEmploymentEventTypeDescriptor source, IEmploymentEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EmploymentEventTypeDescriptorId != target.EmploymentEventTypeDescriptorId)
            {
                source.EmploymentEventTypeDescriptorId = target.EmploymentEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentEventTypeDescriptor source, IEmploymentEventTypeDescriptor target, Action<IEmploymentEventTypeDescriptor, IEmploymentEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EmploymentEventTypeDescriptorId = source.EmploymentEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EmploymentSeparationEvent

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentSeparationEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentSeparationEventMapper 
    {
        public static bool SynchronizeTo(this IEmploymentSeparationEvent source, IEmploymentSeparationEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentSeparationEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EmploymentSeparationDate != target.EmploymentSeparationDate)
            {
                source.EmploymentSeparationDate = target.EmploymentSeparationDate;
            }
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEmploymentSeparationEnteredDateSupported)
                && target.EmploymentSeparationEnteredDate != source.EmploymentSeparationEnteredDate)
            {
                target.EmploymentSeparationEnteredDate = source.EmploymentSeparationEnteredDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmploymentSeparationReasonDescriptorSupported)
                && target.EmploymentSeparationReasonDescriptor != source.EmploymentSeparationReasonDescriptor)
            {
                target.EmploymentSeparationReasonDescriptor = source.EmploymentSeparationReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEmploymentSeparationTypeDescriptorSupported)
                && target.EmploymentSeparationTypeDescriptor != source.EmploymentSeparationTypeDescriptor)
            {
                target.EmploymentSeparationTypeDescriptor = source.EmploymentSeparationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRemainingInDistrictSupported)
                && target.RemainingInDistrict != source.RemainingInDistrict)
            {
                target.RemainingInDistrict = source.RemainingInDistrict;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentSeparationEvent source, IEmploymentSeparationEvent target, Action<IEmploymentSeparationEvent, IEmploymentSeparationEvent> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentSeparationEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentSeparationEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EmploymentSeparationDate = source.EmploymentSeparationDate;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEmploymentSeparationEnteredDateSupported)
                target.EmploymentSeparationEnteredDate = source.EmploymentSeparationEnteredDate;
            else
                targetSynchSupport.IsEmploymentSeparationEnteredDateSupported = false;

            if (sourceSynchSupport.IsEmploymentSeparationReasonDescriptorSupported)
                target.EmploymentSeparationReasonDescriptor = source.EmploymentSeparationReasonDescriptor;
            else
                targetSynchSupport.IsEmploymentSeparationReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsEmploymentSeparationTypeDescriptorSupported)
                target.EmploymentSeparationTypeDescriptor = source.EmploymentSeparationTypeDescriptor;
            else
                targetSynchSupport.IsEmploymentSeparationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsRemainingInDistrictSupported)
                target.RemainingInDistrict = source.RemainingInDistrict;
            else
                targetSynchSupport.IsRemainingInDistrictSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentSeparationEventSynchronizationSourceSupport 
    {
        bool IsEmploymentSeparationEnteredDateSupported { get; set; }
        bool IsEmploymentSeparationReasonDescriptorSupported { get; set; }
        bool IsEmploymentSeparationTypeDescriptorSupported { get; set; }
        bool IsRemainingInDistrictSupported { get; set; }
    }
 
}
// Aggregate: EmploymentSeparationReasonDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentSeparationReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentSeparationReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEmploymentSeparationReasonDescriptor source, IEmploymentSeparationReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EmploymentSeparationReasonDescriptorId != target.EmploymentSeparationReasonDescriptorId)
            {
                source.EmploymentSeparationReasonDescriptorId = target.EmploymentSeparationReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentSeparationReasonDescriptor source, IEmploymentSeparationReasonDescriptor target, Action<IEmploymentSeparationReasonDescriptor, IEmploymentSeparationReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EmploymentSeparationReasonDescriptorId = source.EmploymentSeparationReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentSeparationReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EmploymentSeparationTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EmploymentSeparationTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EmploymentSeparationTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEmploymentSeparationTypeDescriptor source, IEmploymentSeparationTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EmploymentSeparationTypeDescriptorId != target.EmploymentSeparationTypeDescriptorId)
            {
                source.EmploymentSeparationTypeDescriptorId = target.EmploymentSeparationTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEmploymentSeparationTypeDescriptor source, IEmploymentSeparationTypeDescriptor target, Action<IEmploymentSeparationTypeDescriptor, IEmploymentSeparationTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EmploymentSeparationTypeDescriptorId = source.EmploymentSeparationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEmploymentSeparationTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EnglishLanguageExamDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EnglishLanguageExamDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EnglishLanguageExamDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEnglishLanguageExamDescriptor source, IEnglishLanguageExamDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EnglishLanguageExamDescriptorId != target.EnglishLanguageExamDescriptorId)
            {
                source.EnglishLanguageExamDescriptorId = target.EnglishLanguageExamDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEnglishLanguageExamDescriptor source, IEnglishLanguageExamDescriptor target, Action<IEnglishLanguageExamDescriptor, IEnglishLanguageExamDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEnglishLanguageExamDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EnglishLanguageExamDescriptorId = source.EnglishLanguageExamDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEnglishLanguageExamDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Evaluation

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationMapper 
    {
        public static bool SynchronizeTo(this IEvaluation source, IEvaluation target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluationTypeDescriptorSupported)
                && target.EvaluationTypeDescriptor != source.EvaluationTypeDescriptor)
            {
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsInterRaterReliabilityScoreSupported)
                && target.InterRaterReliabilityScore != source.InterRaterReliabilityScore)
            {
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationRatingLevelsSupported)
            {
                isModified |= 
                    source.EvaluationRatingLevels.SynchronizeCollectionTo(
                        target.EvaluationRatingLevels, 
                        onChildAdded: child => 
                            {
                                child.Evaluation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEvaluationRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluation source, IEvaluation target, Action<IEvaluation, IEvaluation> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluationTypeDescriptorSupported)
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
            else
                targetSynchSupport.IsEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsInterRaterReliabilityScoreSupported)
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
            else
                targetSynchSupport.IsInterRaterReliabilityScoreSupported = false;

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PerformanceEvaluationResourceId = source.PerformanceEvaluationResourceId;
                target.PerformanceEvaluationDiscriminator = source.PerformanceEvaluationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationRatingLevelsSupported)
            {    
                targetSynchSupport.IsEvaluationRatingLevelIncluded = sourceSynchSupport.IsEvaluationRatingLevelIncluded;
                source.EvaluationRatingLevels.MapCollectionTo(target.EvaluationRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationSynchronizationSourceSupport 
    {
        bool IsEvaluationRatingLevelsSupported { get; set; }
        bool IsEvaluationTypeDescriptorSupported { get; set; }
        bool IsInterRaterReliabilityScoreSupported { get; set; }
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        Func<IEvaluationRatingLevel, bool> IsEvaluationRatingLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingLevelMapper 
    {
        public static bool SynchronizeTo(this IEvaluationRatingLevel source, IEvaluationRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptor != target.EvaluationRatingLevelDescriptor)
            {
                source.EvaluationRatingLevelDescriptor = target.EvaluationRatingLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingLevel source, IEvaluationRatingLevel target, Action<IEvaluationRatingLevel, IEvaluationRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
    }
 
}
// Aggregate: EvaluationElement

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationElementAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationElementMapper 
    {
        public static bool SynchronizeTo(this IEvaluationElement source, IEvaluationElement target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluationTypeDescriptorSupported)
                && target.EvaluationTypeDescriptor != source.EvaluationTypeDescriptor)
            {
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSortOrderSupported)
                && target.SortOrder != source.SortOrder)
            {
                target.SortOrder = source.SortOrder;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationElementRatingLevelsSupported)
            {
                isModified |= 
                    source.EvaluationElementRatingLevels.SynchronizeCollectionTo(
                        target.EvaluationElementRatingLevels, 
                        onChildAdded: child => 
                            {
                                child.EvaluationElement = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEvaluationElementRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationElement source, IEvaluationElement target, Action<IEvaluationElement, IEvaluationElement> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluationTypeDescriptorSupported)
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
            else
                targetSynchSupport.IsEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            if (sourceSynchSupport.IsSortOrderSupported)
                target.SortOrder = source.SortOrder;
            else
                targetSynchSupport.IsSortOrderSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationObjectiveResourceId = source.EvaluationObjectiveResourceId;
                target.EvaluationObjectiveDiscriminator = source.EvaluationObjectiveDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationElementRatingLevelsSupported)
            {    
                targetSynchSupport.IsEvaluationElementRatingLevelIncluded = sourceSynchSupport.IsEvaluationElementRatingLevelIncluded;
                source.EvaluationElementRatingLevels.MapCollectionTo(target.EvaluationElementRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationElementRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementSynchronizationSourceSupport 
    {
        bool IsEvaluationElementRatingLevelsSupported { get; set; }
        bool IsEvaluationTypeDescriptorSupported { get; set; }
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        bool IsSortOrderSupported { get; set; }
        Func<IEvaluationElementRatingLevel, bool> IsEvaluationElementRatingLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EvaluationElementRatingLevelMapper 
    {
        public static bool SynchronizeTo(this IEvaluationElementRatingLevel source, IEvaluationElementRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptor != target.EvaluationRatingLevelDescriptor)
            {
                source.EvaluationRatingLevelDescriptor = target.EvaluationRatingLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationElementRatingLevel source, IEvaluationElementRatingLevel target, Action<IEvaluationElementRatingLevel, IEvaluationElementRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
    }
 
}
// Aggregate: EvaluationElementRating

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationElementRatingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationElementRatingMapper 
    {
        public static bool SynchronizeTo(this IEvaluationElementRating source, IEvaluationElementRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAreaOfRefinementSupported)
                && target.AreaOfRefinement != source.AreaOfRefinement)
            {
                target.AreaOfRefinement = source.AreaOfRefinement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAreaOfReinforcementSupported)
                && target.AreaOfReinforcement != source.AreaOfReinforcement)
            {
                target.AreaOfReinforcement = source.AreaOfReinforcement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationElementRatingLevelDescriptorSupported)
                && target.EvaluationElementRatingLevelDescriptor != source.EvaluationElementRatingLevelDescriptor)
            {
                target.EvaluationElementRatingLevelDescriptor = source.EvaluationElementRatingLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFeedbackSupported)
                && target.Feedback != source.Feedback)
            {
                target.Feedback = source.Feedback;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationElementRatingResultsSupported)
            {
                isModified |= 
                    source.EvaluationElementRatingResults.SynchronizeCollectionTo(
                        target.EvaluationElementRatingResults, 
                        onChildAdded: child => 
                            {
                                child.EvaluationElementRating = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEvaluationElementRatingResultIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationElementRating source, IEvaluationElementRating target, Action<IEvaluationElementRating, IEvaluationElementRating> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAreaOfRefinementSupported)
                target.AreaOfRefinement = source.AreaOfRefinement;
            else
                targetSynchSupport.IsAreaOfRefinementSupported = false;

            if (sourceSynchSupport.IsAreaOfReinforcementSupported)
                target.AreaOfReinforcement = source.AreaOfReinforcement;
            else
                targetSynchSupport.IsAreaOfReinforcementSupported = false;

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsEvaluationElementRatingLevelDescriptorSupported)
                target.EvaluationElementRatingLevelDescriptor = source.EvaluationElementRatingLevelDescriptor;
            else
                targetSynchSupport.IsEvaluationElementRatingLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsFeedbackSupported)
                target.Feedback = source.Feedback;
            else
                targetSynchSupport.IsFeedbackSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
                target.EvaluationObjectiveRatingResourceId = source.EvaluationObjectiveRatingResourceId;
                target.EvaluationObjectiveRatingDiscriminator = source.EvaluationObjectiveRatingDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationElementRatingResultsSupported)
            {    
                targetSynchSupport.IsEvaluationElementRatingResultIncluded = sourceSynchSupport.IsEvaluationElementRatingResultIncluded;
                source.EvaluationElementRatingResults.MapCollectionTo(target.EvaluationElementRatingResults, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationElementRatingResultsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementRatingSynchronizationSourceSupport 
    {
        bool IsAreaOfRefinementSupported { get; set; }
        bool IsAreaOfReinforcementSupported { get; set; }
        bool IsCommentsSupported { get; set; }
        bool IsEvaluationElementRatingLevelDescriptorSupported { get; set; }
        bool IsEvaluationElementRatingResultsSupported { get; set; }
        bool IsFeedbackSupported { get; set; }
        Func<IEvaluationElementRatingResult, bool> IsEvaluationElementRatingResultIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EvaluationElementRatingResultMapper 
    {
        public static bool SynchronizeTo(this IEvaluationElementRatingResult source, IEvaluationElementRatingResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementRatingResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Rating != target.Rating)
            {
                source.Rating = target.Rating;
            }
            if (source.RatingResultTitle != target.RatingResultTitle)
            {
                source.RatingResultTitle = target.RatingResultTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationElementRatingResult source, IEvaluationElementRatingResult target, Action<IEvaluationElementRatingResult, IEvaluationElementRatingResult> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementRatingResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementRatingResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Rating = source.Rating;
            target.RatingResultTitle = source.RatingResultTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementRatingResultSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: EvaluationElementRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationElementRatingLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationElementRatingLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEvaluationElementRatingLevelDescriptor source, IEvaluationElementRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationElementRatingLevelDescriptorId != target.EvaluationElementRatingLevelDescriptorId)
            {
                source.EvaluationElementRatingLevelDescriptorId = target.EvaluationElementRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationElementRatingLevelDescriptor source, IEvaluationElementRatingLevelDescriptor target, Action<IEvaluationElementRatingLevelDescriptor, IEvaluationElementRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationElementRatingLevelDescriptorId = source.EvaluationElementRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationElementRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EvaluationObjective

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationObjectiveAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationObjectiveMapper 
    {
        public static bool SynchronizeTo(this IEvaluationObjective source, IEvaluationObjective target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationObjectiveSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluationTypeDescriptorSupported)
                && target.EvaluationTypeDescriptor != source.EvaluationTypeDescriptor)
            {
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSortOrderSupported)
                && target.SortOrder != source.SortOrder)
            {
                target.SortOrder = source.SortOrder;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationObjectiveRatingLevelsSupported)
            {
                isModified |= 
                    source.EvaluationObjectiveRatingLevels.SynchronizeCollectionTo(
                        target.EvaluationObjectiveRatingLevels, 
                        onChildAdded: child => 
                            {
                                child.EvaluationObjective = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEvaluationObjectiveRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationObjective source, IEvaluationObjective target, Action<IEvaluationObjective, IEvaluationObjective> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationObjectiveSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationObjectiveSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluationTypeDescriptorSupported)
                target.EvaluationTypeDescriptor = source.EvaluationTypeDescriptor;
            else
                targetSynchSupport.IsEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            if (sourceSynchSupport.IsSortOrderSupported)
                target.SortOrder = source.SortOrder;
            else
                targetSynchSupport.IsSortOrderSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationResourceId = source.EvaluationResourceId;
                target.EvaluationDiscriminator = source.EvaluationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationObjectiveRatingLevelsSupported)
            {    
                targetSynchSupport.IsEvaluationObjectiveRatingLevelIncluded = sourceSynchSupport.IsEvaluationObjectiveRatingLevelIncluded;
                source.EvaluationObjectiveRatingLevels.MapCollectionTo(target.EvaluationObjectiveRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationObjectiveRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationObjectiveSynchronizationSourceSupport 
    {
        bool IsEvaluationObjectiveRatingLevelsSupported { get; set; }
        bool IsEvaluationTypeDescriptorSupported { get; set; }
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
        bool IsSortOrderSupported { get; set; }
        Func<IEvaluationObjectiveRatingLevel, bool> IsEvaluationObjectiveRatingLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EvaluationObjectiveRatingLevelMapper 
    {
        public static bool SynchronizeTo(this IEvaluationObjectiveRatingLevel source, IEvaluationObjectiveRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationObjectiveRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptor != target.EvaluationRatingLevelDescriptor)
            {
                source.EvaluationRatingLevelDescriptor = target.EvaluationRatingLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationObjectiveRatingLevel source, IEvaluationObjectiveRatingLevel target, Action<IEvaluationObjectiveRatingLevel, IEvaluationObjectiveRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationObjectiveRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationObjectiveRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationObjectiveRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
    }
 
}
// Aggregate: EvaluationObjectiveRating

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationObjectiveRatingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationObjectiveRatingMapper 
    {
        public static bool SynchronizeTo(this IEvaluationObjectiveRating source, IEvaluationObjectiveRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationObjectiveRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsObjectiveRatingLevelDescriptorSupported)
                && target.ObjectiveRatingLevelDescriptor != source.ObjectiveRatingLevelDescriptor)
            {
                target.ObjectiveRatingLevelDescriptor = source.ObjectiveRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationObjectiveRatingResultsSupported)
            {
                isModified |= 
                    source.EvaluationObjectiveRatingResults.SynchronizeCollectionTo(
                        target.EvaluationObjectiveRatingResults, 
                        onChildAdded: child => 
                            {
                                child.EvaluationObjectiveRating = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEvaluationObjectiveRatingResultIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationObjectiveRating source, IEvaluationObjectiveRating target, Action<IEvaluationObjectiveRating, IEvaluationObjectiveRating> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationObjectiveRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationObjectiveRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsObjectiveRatingLevelDescriptorSupported)
                target.ObjectiveRatingLevelDescriptor = source.ObjectiveRatingLevelDescriptor;
            else
                targetSynchSupport.IsObjectiveRatingLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationObjectiveResourceId = source.EvaluationObjectiveResourceId;
                target.EvaluationObjectiveDiscriminator = source.EvaluationObjectiveDiscriminator;
                target.EvaluationRatingResourceId = source.EvaluationRatingResourceId;
                target.EvaluationRatingDiscriminator = source.EvaluationRatingDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationObjectiveRatingResultsSupported)
            {    
                targetSynchSupport.IsEvaluationObjectiveRatingResultIncluded = sourceSynchSupport.IsEvaluationObjectiveRatingResultIncluded;
                source.EvaluationObjectiveRatingResults.MapCollectionTo(target.EvaluationObjectiveRatingResults, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationObjectiveRatingResultsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationObjectiveRatingSynchronizationSourceSupport 
    {
        bool IsCommentsSupported { get; set; }
        bool IsEvaluationObjectiveRatingResultsSupported { get; set; }
        bool IsObjectiveRatingLevelDescriptorSupported { get; set; }
        Func<IEvaluationObjectiveRatingResult, bool> IsEvaluationObjectiveRatingResultIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EvaluationObjectiveRatingResultMapper 
    {
        public static bool SynchronizeTo(this IEvaluationObjectiveRatingResult source, IEvaluationObjectiveRatingResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationObjectiveRatingResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Rating != target.Rating)
            {
                source.Rating = target.Rating;
            }
            if (source.RatingResultTitle != target.RatingResultTitle)
            {
                source.RatingResultTitle = target.RatingResultTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationObjectiveRatingResult source, IEvaluationObjectiveRatingResult target, Action<IEvaluationObjectiveRatingResult, IEvaluationObjectiveRatingResult> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationObjectiveRatingResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationObjectiveRatingResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Rating = source.Rating;
            target.RatingResultTitle = source.RatingResultTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationObjectiveRatingResultSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: EvaluationPeriodDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationPeriodDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationPeriodDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEvaluationPeriodDescriptor source, IEvaluationPeriodDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationPeriodDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationPeriodDescriptorId != target.EvaluationPeriodDescriptorId)
            {
                source.EvaluationPeriodDescriptorId = target.EvaluationPeriodDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationPeriodDescriptor source, IEvaluationPeriodDescriptor target, Action<IEvaluationPeriodDescriptor, IEvaluationPeriodDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationPeriodDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationPeriodDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationPeriodDescriptorId = source.EvaluationPeriodDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationPeriodDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EvaluationRating

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationRatingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingMapper 
    {
        public static bool SynchronizeTo(this IEvaluationRating source, IEvaluationRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEvaluationRatingLevelDescriptorSupported)
                && target.EvaluationRatingLevelDescriptor != source.EvaluationRatingLevelDescriptor)
            {
                target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocalCourseCodeSupported)
                && target.LocalCourseCode != source.LocalCourseCode)
            {
                target.LocalCourseCode = source.LocalCourseCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSectionIdentifierSupported)
                && target.SectionIdentifier != source.SectionIdentifier)
            {
                target.SectionIdentifier = source.SectionIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionNameSupported)
                && target.SessionName != source.SessionName)
            {
                target.SessionName = source.SessionName;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsEvaluationRatingResultsSupported)
            {
                isModified |= 
                    source.EvaluationRatingResults.SynchronizeCollectionTo(
                        target.EvaluationRatingResults, 
                        onChildAdded: child => 
                            {
                                child.EvaluationRating = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEvaluationRatingResultIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsEvaluationRatingReviewersSupported)
            {
                isModified |= 
                    source.EvaluationRatingReviewers.SynchronizeCollectionTo(
                        target.EvaluationRatingReviewers, 
                        onChildAdded: child => 
                            {
                                child.EvaluationRating = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsEvaluationRatingReviewerIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IEvaluationRating source, IEvaluationRating target, Action<IEvaluationRating, IEvaluationRating> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEvaluationRatingLevelDescriptorSupported)
                target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;
            else
                targetSynchSupport.IsEvaluationRatingLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsLocalCourseCodeSupported)
                target.LocalCourseCode = source.LocalCourseCode;
            else
                targetSynchSupport.IsLocalCourseCodeSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            if (sourceSynchSupport.IsSectionIdentifierSupported)
                target.SectionIdentifier = source.SectionIdentifier;
            else
                targetSynchSupport.IsSectionIdentifierSupported = false;

            if (sourceSynchSupport.IsSessionNameSupported)
                target.SessionName = source.SessionName;
            else
                targetSynchSupport.IsSessionNameSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationResourceId = source.EvaluationResourceId;
                target.EvaluationDiscriminator = source.EvaluationDiscriminator;
                target.PerformanceEvaluationRatingResourceId = source.PerformanceEvaluationRatingResourceId;
                target.PerformanceEvaluationRatingDiscriminator = source.PerformanceEvaluationRatingDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsEvaluationRatingResultsSupported)
            {    
                targetSynchSupport.IsEvaluationRatingResultIncluded = sourceSynchSupport.IsEvaluationRatingResultIncluded;
                source.EvaluationRatingResults.MapCollectionTo(target.EvaluationRatingResults, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationRatingResultsSupported = false;
            }

            if (sourceSynchSupport.IsEvaluationRatingReviewersSupported)
            {    
                targetSynchSupport.IsEvaluationRatingReviewerIncluded = sourceSynchSupport.IsEvaluationRatingReviewerIncluded;
                source.EvaluationRatingReviewers.MapCollectionTo(target.EvaluationRatingReviewers, target);
            }
            else
            {
                targetSynchSupport.IsEvaluationRatingReviewersSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingSynchronizationSourceSupport 
    {
        bool IsEvaluationRatingLevelDescriptorSupported { get; set; }
        bool IsEvaluationRatingResultsSupported { get; set; }
        bool IsEvaluationRatingReviewersSupported { get; set; }
        bool IsLocalCourseCodeSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsSectionIdentifierSupported { get; set; }
        bool IsSessionNameSupported { get; set; }
        Func<IEvaluationRatingResult, bool> IsEvaluationRatingResultIncluded { get; set; }
        Func<IEvaluationRatingReviewer, bool> IsEvaluationRatingReviewerIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingResultMapper 
    {
        public static bool SynchronizeTo(this IEvaluationRatingResult source, IEvaluationRatingResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Rating != target.Rating)
            {
                source.Rating = target.Rating;
            }
            if (source.RatingResultTitle != target.RatingResultTitle)
            {
                source.RatingResultTitle = target.RatingResultTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingResult source, IEvaluationRatingResult target, Action<IEvaluationRatingResult, IEvaluationRatingResult> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Rating = source.Rating;
            target.RatingResultTitle = source.RatingResultTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingResultSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingReviewerMapper 
    {
        public static bool SynchronizeTo(this IEvaluationRatingReviewer source, IEvaluationRatingReviewer target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingReviewerSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FirstName != target.FirstName)
            {
                source.FirstName = target.FirstName;
            }
            if (source.LastSurname != target.LastSurname)
            {
                source.LastSurname = target.LastSurname;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // EvaluationRatingReviewerReceivedTraining
            if (sourceSupport == null || sourceSupport.IsEvaluationRatingReviewerReceivedTrainingSupported)
            {
                if (source.EvaluationRatingReviewerReceivedTraining == null)
                {
                    if (target.EvaluationRatingReviewerReceivedTraining != null)
                    {
                        target.EvaluationRatingReviewerReceivedTraining = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.EvaluationRatingReviewerReceivedTraining == null)
                    {
                        var itemType = target.GetType().GetProperty("EvaluationRatingReviewerReceivedTraining").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.EvaluationRatingReviewerReceivedTraining = (IEvaluationRatingReviewerReceivedTraining) newItem;
                    }

                    isModified |= source.EvaluationRatingReviewerReceivedTraining.Synchronize(target.EvaluationRatingReviewerReceivedTraining);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingReviewer source, IEvaluationRatingReviewer target, Action<IEvaluationRatingReviewer, IEvaluationRatingReviewer> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingReviewerSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingReviewerSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FirstName = source.FirstName;
            target.LastSurname = source.LastSurname;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // EvaluationRatingReviewerReceivedTraining (Source)
            if (sourceSynchSupport.IsEvaluationRatingReviewerReceivedTrainingSupported)
            {
                var itemProperty = target.GetType().GetProperty("EvaluationRatingReviewerReceivedTraining");
                
                if (itemProperty != null)
                {                    
                    if (source.EvaluationRatingReviewerReceivedTraining == null)
                    {
                        target.EvaluationRatingReviewerReceivedTraining = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetEvaluationRatingReviewerReceivedTraining = Activator.CreateInstance(itemType);
                        (targetEvaluationRatingReviewerReceivedTraining as IChildEntity)?.SetParent(target);
                        source.EvaluationRatingReviewerReceivedTraining.Map(targetEvaluationRatingReviewerReceivedTraining);
                        
                        // Update the target reference appropriately
                        target.EvaluationRatingReviewerReceivedTraining = (IEvaluationRatingReviewerReceivedTraining) targetEvaluationRatingReviewerReceivedTraining;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsEvaluationRatingReviewerReceivedTrainingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingReviewerSynchronizationSourceSupport 
    {
        bool IsEvaluationRatingReviewerReceivedTrainingSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingReviewerReceivedTrainingMapper 
    {
        public static bool SynchronizeTo(this IEvaluationRatingReviewerReceivedTraining source, IEvaluationRatingReviewerReceivedTraining target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsInterRaterReliabilityScoreSupported)
                && target.InterRaterReliabilityScore != source.InterRaterReliabilityScore)
            {
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReceivedTrainingDateSupported)
                && target.ReceivedTrainingDate != source.ReceivedTrainingDate)
            {
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingReviewerReceivedTraining source, IEvaluationRatingReviewerReceivedTraining target, Action<IEvaluationRatingReviewerReceivedTraining, IEvaluationRatingReviewerReceivedTraining> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsInterRaterReliabilityScoreSupported)
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
            else
                targetSynchSupport.IsInterRaterReliabilityScoreSupported = false;

            if (sourceSynchSupport.IsReceivedTrainingDateSupported)
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
            else
                targetSynchSupport.IsReceivedTrainingDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport 
    {
        bool IsInterRaterReliabilityScoreSupported { get; set; }
        bool IsReceivedTrainingDateSupported { get; set; }
    }
 
}
// Aggregate: EvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationRatingLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationRatingLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEvaluationRatingLevelDescriptor source, IEvaluationRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptorId != target.EvaluationRatingLevelDescriptorId)
            {
                source.EvaluationRatingLevelDescriptorId = target.EvaluationRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationRatingLevelDescriptor source, IEvaluationRatingLevelDescriptor target, Action<IEvaluationRatingLevelDescriptor, IEvaluationRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptorId = source.EvaluationRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: EvaluationTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.EvaluationTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class EvaluationTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IEvaluationTypeDescriptor source, IEvaluationTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationTypeDescriptorId != target.EvaluationTypeDescriptorId)
            {
                source.EvaluationTypeDescriptorId = target.EvaluationTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IEvaluationTypeDescriptor source, IEvaluationTypeDescriptor target, Action<IEvaluationTypeDescriptor, IEvaluationTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IEvaluationTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EvaluationTypeDescriptorId = source.EvaluationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IEvaluationTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: FederalLocaleCodeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FederalLocaleCodeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FederalLocaleCodeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IFederalLocaleCodeDescriptor source, IFederalLocaleCodeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FederalLocaleCodeDescriptorId != target.FederalLocaleCodeDescriptorId)
            {
                source.FederalLocaleCodeDescriptorId = target.FederalLocaleCodeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFederalLocaleCodeDescriptor source, IFederalLocaleCodeDescriptor target, Action<IFederalLocaleCodeDescriptor, IFederalLocaleCodeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFederalLocaleCodeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FederalLocaleCodeDescriptorId = source.FederalLocaleCodeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFederalLocaleCodeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: FieldworkExperience

namespace EdFi.Ods.Entities.Common.TPDM //.FieldworkExperienceAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FieldworkExperienceMapper 
    {
        public static bool SynchronizeTo(this IFieldworkExperience source, IFieldworkExperience target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkExperienceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FieldworkIdentifier != target.FieldworkIdentifier)
            {
                source.FieldworkIdentifier = target.FieldworkIdentifier;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFieldworkTypeDescriptorSupported)
                && target.FieldworkTypeDescriptor != source.FieldworkTypeDescriptor)
            {
                target.FieldworkTypeDescriptor = source.FieldworkTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHoursCompletedSupported)
                && target.HoursCompleted != source.HoursCompleted)
            {
                target.HoursCompleted = source.HoursCompleted;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // FieldworkExperienceCoteaching
            if (sourceSupport == null || sourceSupport.IsFieldworkExperienceCoteachingSupported)
            {
                if (source.FieldworkExperienceCoteaching == null)
                {
                    if (target.FieldworkExperienceCoteaching != null)
                    {
                        target.FieldworkExperienceCoteaching = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.FieldworkExperienceCoteaching == null)
                    {
                        var itemType = target.GetType().GetProperty("FieldworkExperienceCoteaching").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.FieldworkExperienceCoteaching = (IFieldworkExperienceCoteaching) newItem;
                    }

                    isModified |= source.FieldworkExperienceCoteaching.Synchronize(target.FieldworkExperienceCoteaching);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsFieldworkExperienceSchoolsSupported)
            {
                isModified |= 
                    source.FieldworkExperienceSchools.SynchronizeCollectionTo(
                        target.FieldworkExperienceSchools, 
                        onChildAdded: child => 
                            {
                                child.FieldworkExperience = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsFieldworkExperienceSchoolIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IFieldworkExperience source, IFieldworkExperience target, Action<IFieldworkExperience, IFieldworkExperience> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkExperienceSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkExperienceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FieldworkIdentifier = source.FieldworkIdentifier;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsFieldworkTypeDescriptorSupported)
                target.FieldworkTypeDescriptor = source.FieldworkTypeDescriptor;
            else
                targetSynchSupport.IsFieldworkTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsHoursCompletedSupported)
                target.HoursCompleted = source.HoursCompleted;
            else
                targetSynchSupport.IsHoursCompletedSupported = false;

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // FieldworkExperienceCoteaching (Source)
            if (sourceSynchSupport.IsFieldworkExperienceCoteachingSupported)
            {
                var itemProperty = target.GetType().GetProperty("FieldworkExperienceCoteaching");
                
                if (itemProperty != null)
                {                    
                    if (source.FieldworkExperienceCoteaching == null)
                    {
                        target.FieldworkExperienceCoteaching = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetFieldworkExperienceCoteaching = Activator.CreateInstance(itemType);
                        (targetFieldworkExperienceCoteaching as IChildEntity)?.SetParent(target);
                        source.FieldworkExperienceCoteaching.Map(targetFieldworkExperienceCoteaching);
                        
                        // Update the target reference appropriately
                        target.FieldworkExperienceCoteaching = (IFieldworkExperienceCoteaching) targetFieldworkExperienceCoteaching;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsFieldworkExperienceCoteachingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsFieldworkExperienceSchoolsSupported)
            {    
                targetSynchSupport.IsFieldworkExperienceSchoolIncluded = sourceSynchSupport.IsFieldworkExperienceSchoolIncluded;
                source.FieldworkExperienceSchools.MapCollectionTo(target.FieldworkExperienceSchools, target);
            }
            else
            {
                targetSynchSupport.IsFieldworkExperienceSchoolsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkExperienceSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsFieldworkExperienceCoteachingSupported { get; set; }
        bool IsFieldworkExperienceSchoolsSupported { get; set; }
        bool IsFieldworkTypeDescriptorSupported { get; set; }
        bool IsHoursCompletedSupported { get; set; }
        bool IsProgramGatewayDescriptorSupported { get; set; }
        Func<IFieldworkExperienceSchool, bool> IsFieldworkExperienceSchoolIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class FieldworkExperienceCoteachingMapper 
    {
        public static bool SynchronizeTo(this IFieldworkExperienceCoteaching source, IFieldworkExperienceCoteaching target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkExperienceCoteachingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCoteachingBeginDateSupported)
                && target.CoteachingBeginDate != source.CoteachingBeginDate)
            {
                target.CoteachingBeginDate = source.CoteachingBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCoteachingEndDateSupported)
                && target.CoteachingEndDate != source.CoteachingEndDate)
            {
                target.CoteachingEndDate = source.CoteachingEndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkExperienceCoteaching source, IFieldworkExperienceCoteaching target, Action<IFieldworkExperienceCoteaching, IFieldworkExperienceCoteaching> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkExperienceCoteachingSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkExperienceCoteachingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCoteachingBeginDateSupported)
                target.CoteachingBeginDate = source.CoteachingBeginDate;
            else
                targetSynchSupport.IsCoteachingBeginDateSupported = false;

            if (sourceSynchSupport.IsCoteachingEndDateSupported)
                target.CoteachingEndDate = source.CoteachingEndDate;
            else
                targetSynchSupport.IsCoteachingEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkExperienceCoteachingSynchronizationSourceSupport 
    {
        bool IsCoteachingBeginDateSupported { get; set; }
        bool IsCoteachingEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class FieldworkExperienceSchoolMapper 
    {
        public static bool SynchronizeTo(this IFieldworkExperienceSchool source, IFieldworkExperienceSchool target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkExperienceSchoolSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkExperienceSchool source, IFieldworkExperienceSchool target, Action<IFieldworkExperienceSchool, IFieldworkExperienceSchool> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkExperienceSchoolSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkExperienceSchoolSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.SchoolId = source.SchoolId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkExperienceSchoolSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: FieldworkExperienceSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.FieldworkExperienceSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FieldworkExperienceSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IFieldworkExperienceSectionAssociation source, IFieldworkExperienceSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkExperienceSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.FieldworkIdentifier != target.FieldworkIdentifier)
            {
                source.FieldworkIdentifier = target.FieldworkIdentifier;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StudentUniqueId != target.StudentUniqueId)
            {
                source.StudentUniqueId = target.StudentUniqueId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkExperienceSectionAssociation source, IFieldworkExperienceSectionAssociation target, Action<IFieldworkExperienceSectionAssociation, IFieldworkExperienceSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkExperienceSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkExperienceSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.FieldworkIdentifier = source.FieldworkIdentifier;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StudentUniqueId = source.StudentUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.FieldworkExperienceResourceId = source.FieldworkExperienceResourceId;
                target.FieldworkExperienceDiscriminator = source.FieldworkExperienceDiscriminator;
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkExperienceSectionAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: FieldworkTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FieldworkTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FieldworkTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IFieldworkTypeDescriptor source, IFieldworkTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFieldworkTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FieldworkTypeDescriptorId != target.FieldworkTypeDescriptorId)
            {
                source.FieldworkTypeDescriptorId = target.FieldworkTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFieldworkTypeDescriptor source, IFieldworkTypeDescriptor target, Action<IFieldworkTypeDescriptor, IFieldworkTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFieldworkTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFieldworkTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FieldworkTypeDescriptorId = source.FieldworkTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFieldworkTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: FundingSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.FundingSourceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class FundingSourceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IFundingSourceDescriptor source, IFundingSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IFundingSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FundingSourceDescriptorId != target.FundingSourceDescriptorId)
            {
                source.FundingSourceDescriptorId = target.FundingSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IFundingSourceDescriptor source, IFundingSourceDescriptor target, Action<IFundingSourceDescriptor, IFundingSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IFundingSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IFundingSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FundingSourceDescriptorId = source.FundingSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IFundingSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GenderDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.GenderDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GenderDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGenderDescriptor source, IGenderDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGenderDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GenderDescriptorId != target.GenderDescriptorId)
            {
                source.GenderDescriptorId = target.GenderDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGenderDescriptor source, IGenderDescriptor target, Action<IGenderDescriptor, IGenderDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGenderDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGenderDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GenderDescriptorId = source.GenderDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGenderDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Goal

namespace EdFi.Ods.Entities.Common.TPDM //.GoalAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GoalMapper 
    {
        public static bool SynchronizeTo(this IGoal source, IGoal target)
        {
            bool isModified = false;

            var sourceSupport = source as IGoalSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssignmentDate != target.AssignmentDate)
            {
                source.AssignmentDate = target.AssignmentDate;
            }
            if (source.GoalTitle != target.GoalTitle)
            {
                source.GoalTitle = target.GoalTitle;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCompletedDateSupported)
                && target.CompletedDate != source.CompletedDate)
            {
                target.CompletedDate = source.CompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCompletedIndicatorSupported)
                && target.CompletedIndicator != source.CompletedIndicator)
            {
                target.CompletedIndicator = source.CompletedIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDueDateSupported)
                && target.DueDate != source.DueDate)
            {
                target.DueDate = source.DueDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationElementTitleSupported)
                && target.EvaluationElementTitle != source.EvaluationElementTitle)
            {
                target.EvaluationElementTitle = source.EvaluationElementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationObjectiveTitleSupported)
                && target.EvaluationObjectiveTitle != source.EvaluationObjectiveTitle)
            {
                target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationPeriodDescriptorSupported)
                && target.EvaluationPeriodDescriptor != source.EvaluationPeriodDescriptor)
            {
                target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationTitleSupported)
                && target.EvaluationTitle != source.EvaluationTitle)
            {
                target.EvaluationTitle = source.EvaluationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGoalDescriptionSupported)
                && target.GoalDescription != source.GoalDescription)
            {
                target.GoalDescription = source.GoalDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGoalTypeDescriptorSupported)
                && target.GoalTypeDescriptor != source.GoalTypeDescriptor)
            {
                target.GoalTypeDescriptor = source.GoalTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationTitleSupported)
                && target.PerformanceEvaluationTitle != source.PerformanceEvaluationTitle)
            {
                target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationTypeDescriptorSupported)
                && target.PerformanceEvaluationTypeDescriptor != source.PerformanceEvaluationTypeDescriptor)
            {
                target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGoal source, IGoal target, Action<IGoal, IGoal> onMapped)
        {
            var sourceSynchSupport = source as IGoalSynchronizationSourceSupport;
            var targetSynchSupport = target as IGoalSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AssignmentDate = source.AssignmentDate;
            target.GoalTitle = source.GoalTitle;
            target.PersonId = source.PersonId;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsCompletedDateSupported)
                target.CompletedDate = source.CompletedDate;
            else
                targetSynchSupport.IsCompletedDateSupported = false;

            if (sourceSynchSupport.IsCompletedIndicatorSupported)
                target.CompletedIndicator = source.CompletedIndicator;
            else
                targetSynchSupport.IsCompletedIndicatorSupported = false;

            if (sourceSynchSupport.IsDueDateSupported)
                target.DueDate = source.DueDate;
            else
                targetSynchSupport.IsDueDateSupported = false;

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEvaluationElementTitleSupported)
                target.EvaluationElementTitle = source.EvaluationElementTitle;
            else
                targetSynchSupport.IsEvaluationElementTitleSupported = false;

            if (sourceSynchSupport.IsEvaluationObjectiveTitleSupported)
                target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            else
                targetSynchSupport.IsEvaluationObjectiveTitleSupported = false;

            if (sourceSynchSupport.IsEvaluationPeriodDescriptorSupported)
                target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            else
                targetSynchSupport.IsEvaluationPeriodDescriptorSupported = false;

            if (sourceSynchSupport.IsEvaluationTitleSupported)
                target.EvaluationTitle = source.EvaluationTitle;
            else
                targetSynchSupport.IsEvaluationTitleSupported = false;

            if (sourceSynchSupport.IsGoalDescriptionSupported)
                target.GoalDescription = source.GoalDescription;
            else
                targetSynchSupport.IsGoalDescriptionSupported = false;

            if (sourceSynchSupport.IsGoalTypeDescriptorSupported)
                target.GoalTypeDescriptor = source.GoalTypeDescriptor;
            else
                targetSynchSupport.IsGoalTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationTitleSupported)
                target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            else
                targetSynchSupport.IsPerformanceEvaluationTitleSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationTypeDescriptorSupported)
                target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            else
                targetSynchSupport.IsPerformanceEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGoalSynchronizationSourceSupport 
    {
        bool IsCommentsSupported { get; set; }
        bool IsCompletedDateSupported { get; set; }
        bool IsCompletedIndicatorSupported { get; set; }
        bool IsDueDateSupported { get; set; }
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEvaluationElementTitleSupported { get; set; }
        bool IsEvaluationObjectiveTitleSupported { get; set; }
        bool IsEvaluationPeriodDescriptorSupported { get; set; }
        bool IsEvaluationTitleSupported { get; set; }
        bool IsGoalDescriptionSupported { get; set; }
        bool IsGoalTypeDescriptorSupported { get; set; }
        bool IsPerformanceEvaluationTitleSupported { get; set; }
        bool IsPerformanceEvaluationTypeDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }
 
}
// Aggregate: GoalTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.GoalTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GoalTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IGoalTypeDescriptor source, IGoalTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IGoalTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GoalTypeDescriptorId != target.GoalTypeDescriptorId)
            {
                source.GoalTypeDescriptorId = target.GoalTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGoalTypeDescriptor source, IGoalTypeDescriptor target, Action<IGoalTypeDescriptor, IGoalTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IGoalTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IGoalTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.GoalTypeDescriptorId = source.GoalTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGoalTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: GraduationPlan

namespace EdFi.Ods.Entities.Common.TPDM //.GraduationPlanAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanExtensionMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanExtension source, IGraduationPlanExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.GraduationPlan as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsGraduationPlanRequiredCertificationsSupported)
            {
                isModified |= 
                    source.GraduationPlanRequiredCertifications.SynchronizeCollectionTo(
                        target.GraduationPlanRequiredCertifications, 
                        onChildAdded: child => 
                            {
                                child.GraduationPlanExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.GraduationPlan);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsGraduationPlanRequiredCertificationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IGraduationPlanExtension source, IGraduationPlanExtension target, Action<IGraduationPlanExtension, IGraduationPlanExtension> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsGraduationPlanRequiredCertificationsSupported)
            {    
                targetSynchSupport.IsGraduationPlanRequiredCertificationIncluded = sourceSynchSupport.IsGraduationPlanRequiredCertificationIncluded;
                source.GraduationPlanRequiredCertifications.MapCollectionTo(target.GraduationPlanRequiredCertifications, target.GraduationPlan);
            }
            else
            {
                targetSynchSupport.IsGraduationPlanRequiredCertificationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanExtensionSynchronizationSourceSupport 
    {
        bool IsGraduationPlanRequiredCertificationsSupported { get; set; }
        Func<IGraduationPlanRequiredCertification, bool> IsGraduationPlanRequiredCertificationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class GraduationPlanRequiredCertificationMapper 
    {
        public static bool SynchronizeTo(this IGraduationPlanRequiredCertification source, IGraduationPlanRequiredCertification target)
        {
            bool isModified = false;

            var sourceSupport = source as IGraduationPlanRequiredCertificationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CertificationTitle != target.CertificationTitle)
            {
                source.CertificationTitle = target.CertificationTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCertificationIdentifierSupported)
                && target.CertificationIdentifier != source.CertificationIdentifier)
            {
                target.CertificationIdentifier = source.CertificationIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCertificationRouteDescriptorSupported)
                && target.CertificationRouteDescriptor != source.CertificationRouteDescriptor)
            {
                target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IGraduationPlanRequiredCertification source, IGraduationPlanRequiredCertification target, Action<IGraduationPlanRequiredCertification, IGraduationPlanRequiredCertification> onMapped)
        {
            var sourceSynchSupport = source as IGraduationPlanRequiredCertificationSynchronizationSourceSupport;
            var targetSynchSupport = target as IGraduationPlanRequiredCertificationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CertificationTitle = source.CertificationTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCertificationIdentifierSupported)
                target.CertificationIdentifier = source.CertificationIdentifier;
            else
                targetSynchSupport.IsCertificationIdentifierSupported = false;

            if (sourceSynchSupport.IsCertificationRouteDescriptorSupported)
                target.CertificationRouteDescriptor = source.CertificationRouteDescriptor;
            else
                targetSynchSupport.IsCertificationRouteDescriptorSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CertificationResourceId = source.CertificationResourceId;
                target.CertificationDiscriminator = source.CertificationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IGraduationPlanRequiredCertificationSynchronizationSourceSupport 
    {
        bool IsCertificationIdentifierSupported { get; set; }
        bool IsCertificationRouteDescriptorSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
    }
 
}
// Aggregate: HireStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.HireStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class HireStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IHireStatusDescriptor source, IHireStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IHireStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HireStatusDescriptorId != target.HireStatusDescriptorId)
            {
                source.HireStatusDescriptorId = target.HireStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IHireStatusDescriptor source, IHireStatusDescriptor target, Action<IHireStatusDescriptor, IHireStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IHireStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IHireStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HireStatusDescriptorId = source.HireStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IHireStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: HiringSourceDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.HiringSourceDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class HiringSourceDescriptorMapper 
    {
        public static bool SynchronizeTo(this IHiringSourceDescriptor source, IHiringSourceDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IHiringSourceDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.HiringSourceDescriptorId != target.HiringSourceDescriptorId)
            {
                source.HiringSourceDescriptorId = target.HiringSourceDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IHiringSourceDescriptor source, IHiringSourceDescriptor target, Action<IHiringSourceDescriptor, IHiringSourceDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IHiringSourceDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IHiringSourceDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.HiringSourceDescriptorId = source.HiringSourceDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IHiringSourceDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: InstructionalSettingDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.InstructionalSettingDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InstructionalSettingDescriptorMapper 
    {
        public static bool SynchronizeTo(this IInstructionalSettingDescriptor source, IInstructionalSettingDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInstructionalSettingDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InstructionalSettingDescriptorId != target.InstructionalSettingDescriptorId)
            {
                source.InstructionalSettingDescriptorId = target.InstructionalSettingDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInstructionalSettingDescriptor source, IInstructionalSettingDescriptor target, Action<IInstructionalSettingDescriptor, IInstructionalSettingDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInstructionalSettingDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInstructionalSettingDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InstructionalSettingDescriptorId = source.InstructionalSettingDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInstructionalSettingDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: InternalExternalHireDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.InternalExternalHireDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class InternalExternalHireDescriptorMapper 
    {
        public static bool SynchronizeTo(this IInternalExternalHireDescriptor source, IInternalExternalHireDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IInternalExternalHireDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.InternalExternalHireDescriptorId != target.InternalExternalHireDescriptorId)
            {
                source.InternalExternalHireDescriptorId = target.InternalExternalHireDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IInternalExternalHireDescriptor source, IInternalExternalHireDescriptor target, Action<IInternalExternalHireDescriptor, IInternalExternalHireDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IInternalExternalHireDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IInternalExternalHireDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.InternalExternalHireDescriptorId = source.InternalExternalHireDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IInternalExternalHireDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LevelOfDegreeAwardedDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.LevelOfDegreeAwardedDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LevelOfDegreeAwardedDescriptorMapper 
    {
        public static bool SynchronizeTo(this ILevelOfDegreeAwardedDescriptor source, ILevelOfDegreeAwardedDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LevelOfDegreeAwardedDescriptorId != target.LevelOfDegreeAwardedDescriptorId)
            {
                source.LevelOfDegreeAwardedDescriptorId = target.LevelOfDegreeAwardedDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILevelOfDegreeAwardedDescriptor source, ILevelOfDegreeAwardedDescriptor target, Action<ILevelOfDegreeAwardedDescriptor, ILevelOfDegreeAwardedDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.LevelOfDegreeAwardedDescriptorId = source.LevelOfDegreeAwardedDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILevelOfDegreeAwardedDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: LocalEducationAgency

namespace EdFi.Ods.Entities.Common.TPDM //.LocalEducationAgencyAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class LocalEducationAgencyExtensionMapper 
    {
        public static bool SynchronizeTo(this ILocalEducationAgencyExtension source, ILocalEducationAgencyExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ILocalEducationAgencyExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.LocalEducationAgency as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ILocalEducationAgencyExtension source, ILocalEducationAgencyExtension target, Action<ILocalEducationAgencyExtension, ILocalEducationAgencyExtension> onMapped)
        {
            var sourceSynchSupport = source as ILocalEducationAgencyExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ILocalEducationAgencyExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ILocalEducationAgencyExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: ObjectiveRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ObjectiveRatingLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ObjectiveRatingLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IObjectiveRatingLevelDescriptor source, IObjectiveRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IObjectiveRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ObjectiveRatingLevelDescriptorId != target.ObjectiveRatingLevelDescriptorId)
            {
                source.ObjectiveRatingLevelDescriptorId = target.ObjectiveRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IObjectiveRatingLevelDescriptor source, IObjectiveRatingLevelDescriptor target, Action<IObjectiveRatingLevelDescriptor, IObjectiveRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IObjectiveRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IObjectiveRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ObjectiveRatingLevelDescriptorId = source.ObjectiveRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IObjectiveRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPosition

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionExtensionMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionExtension source, IOpenStaffPositionExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.OpenStaffPosition as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFullTimeEquivalencySupported)
                && target.FullTimeEquivalency != source.FullTimeEquivalency)
            {
                target.FullTimeEquivalency = source.FullTimeEquivalency;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFundingSourceDescriptorSupported)
                && target.FundingSourceDescriptor != source.FundingSourceDescriptor)
            {
                target.FundingSourceDescriptor = source.FundingSourceDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHighNeedAcademicSubjectSupported)
                && target.HighNeedAcademicSubject != source.HighNeedAcademicSubject)
            {
                target.HighNeedAcademicSubject = source.HighNeedAcademicSubject;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsActiveSupported)
                && target.IsActive != source.IsActive)
            {
                target.IsActive = source.IsActive;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxSalarySupported)
                && target.MaxSalary != source.MaxSalary)
            {
                target.MaxSalary = source.MaxSalary;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinSalarySupported)
                && target.MinSalary != source.MinSalary)
            {
                target.MinSalary = source.MinSalary;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOpenStaffPositionReasonDescriptorSupported)
                && target.OpenStaffPositionReasonDescriptor != source.OpenStaffPositionReasonDescriptor)
            {
                target.OpenStaffPositionReasonDescriptor = source.OpenStaffPositionReasonDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPositionControlNumberSupported)
                && target.PositionControlNumber != source.PositionControlNumber)
            {
                target.PositionControlNumber = source.PositionControlNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalBudgetedSupported)
                && target.TotalBudgeted != source.TotalBudgeted)
            {
                target.TotalBudgeted = source.TotalBudgeted;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionExtension source, IOpenStaffPositionExtension target, Action<IOpenStaffPositionExtension, IOpenStaffPositionExtension> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFullTimeEquivalencySupported)
                target.FullTimeEquivalency = source.FullTimeEquivalency;
            else
                targetSynchSupport.IsFullTimeEquivalencySupported = false;

            if (sourceSynchSupport.IsFundingSourceDescriptorSupported)
                target.FundingSourceDescriptor = source.FundingSourceDescriptor;
            else
                targetSynchSupport.IsFundingSourceDescriptorSupported = false;

            if (sourceSynchSupport.IsHighNeedAcademicSubjectSupported)
                target.HighNeedAcademicSubject = source.HighNeedAcademicSubject;
            else
                targetSynchSupport.IsHighNeedAcademicSubjectSupported = false;

            if (sourceSynchSupport.IsIsActiveSupported)
                target.IsActive = source.IsActive;
            else
                targetSynchSupport.IsIsActiveSupported = false;

            if (sourceSynchSupport.IsMaxSalarySupported)
                target.MaxSalary = source.MaxSalary;
            else
                targetSynchSupport.IsMaxSalarySupported = false;

            if (sourceSynchSupport.IsMinSalarySupported)
                target.MinSalary = source.MinSalary;
            else
                targetSynchSupport.IsMinSalarySupported = false;

            if (sourceSynchSupport.IsOpenStaffPositionReasonDescriptorSupported)
                target.OpenStaffPositionReasonDescriptor = source.OpenStaffPositionReasonDescriptor;
            else
                targetSynchSupport.IsOpenStaffPositionReasonDescriptorSupported = false;

            if (sourceSynchSupport.IsPositionControlNumberSupported)
                target.PositionControlNumber = source.PositionControlNumber;
            else
                targetSynchSupport.IsPositionControlNumberSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            if (sourceSynchSupport.IsTotalBudgetedSupported)
                target.TotalBudgeted = source.TotalBudgeted;
            else
                targetSynchSupport.IsTotalBudgetedSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionExtensionSynchronizationSourceSupport 
    {
        bool IsFullTimeEquivalencySupported { get; set; }
        bool IsFundingSourceDescriptorSupported { get; set; }
        bool IsHighNeedAcademicSubjectSupported { get; set; }
        bool IsIsActiveSupported { get; set; }
        bool IsMaxSalarySupported { get; set; }
        bool IsMinSalarySupported { get; set; }
        bool IsOpenStaffPositionReasonDescriptorSupported { get; set; }
        bool IsPositionControlNumberSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
        bool IsTotalBudgetedSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPositionEvent

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEvent source, IOpenStaffPositionEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.OpenStaffPositionEventTypeDescriptor != target.OpenStaffPositionEventTypeDescriptor)
            {
                source.OpenStaffPositionEventTypeDescriptor = target.OpenStaffPositionEventTypeDescriptor;
            }
            if (source.RequisitionNumber != target.RequisitionNumber)
            {
                source.RequisitionNumber = target.RequisitionNumber;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsOpenStaffPositionEventStatusDescriptorSupported)
                && target.OpenStaffPositionEventStatusDescriptor != source.OpenStaffPositionEventStatusDescriptor)
            {
                target.OpenStaffPositionEventStatusDescriptor = source.OpenStaffPositionEventStatusDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEvent source, IOpenStaffPositionEvent target, Action<IOpenStaffPositionEvent, IOpenStaffPositionEvent> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EventDate = source.EventDate;
            target.OpenStaffPositionEventTypeDescriptor = source.OpenStaffPositionEventTypeDescriptor;
            target.RequisitionNumber = source.RequisitionNumber;

            // Copy non-PK properties

            if (sourceSynchSupport.IsOpenStaffPositionEventStatusDescriptorSupported)
                target.OpenStaffPositionEventStatusDescriptor = source.OpenStaffPositionEventStatusDescriptor;
            else
                targetSynchSupport.IsOpenStaffPositionEventStatusDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.OpenStaffPositionResourceId = source.OpenStaffPositionResourceId;
                target.OpenStaffPositionDiscriminator = source.OpenStaffPositionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventSynchronizationSourceSupport 
    {
        bool IsOpenStaffPositionEventStatusDescriptorSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPositionEventStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEventStatusDescriptor source, IOpenStaffPositionEventStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionEventStatusDescriptorId != target.OpenStaffPositionEventStatusDescriptorId)
            {
                source.OpenStaffPositionEventStatusDescriptorId = target.OpenStaffPositionEventStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEventStatusDescriptor source, IOpenStaffPositionEventStatusDescriptor target, Action<IOpenStaffPositionEventStatusDescriptor, IOpenStaffPositionEventStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionEventStatusDescriptorId = source.OpenStaffPositionEventStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPositionEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionEventTypeDescriptor source, IOpenStaffPositionEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionEventTypeDescriptorId != target.OpenStaffPositionEventTypeDescriptorId)
            {
                source.OpenStaffPositionEventTypeDescriptorId = target.OpenStaffPositionEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionEventTypeDescriptor source, IOpenStaffPositionEventTypeDescriptor target, Action<IOpenStaffPositionEventTypeDescriptor, IOpenStaffPositionEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionEventTypeDescriptorId = source.OpenStaffPositionEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: OpenStaffPositionReasonDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.OpenStaffPositionReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class OpenStaffPositionReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IOpenStaffPositionReasonDescriptor source, IOpenStaffPositionReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OpenStaffPositionReasonDescriptorId != target.OpenStaffPositionReasonDescriptorId)
            {
                source.OpenStaffPositionReasonDescriptorId = target.OpenStaffPositionReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IOpenStaffPositionReasonDescriptor source, IOpenStaffPositionReasonDescriptor target, Action<IOpenStaffPositionReasonDescriptor, IOpenStaffPositionReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.OpenStaffPositionReasonDescriptorId = source.OpenStaffPositionReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IOpenStaffPositionReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PerformanceEvaluation

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceEvaluationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluation source, IPerformanceEvaluation target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationGradeLevelsSupported)
            {
                isModified |= 
                    source.PerformanceEvaluationGradeLevels.SynchronizeCollectionTo(
                        target.PerformanceEvaluationGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.PerformanceEvaluation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceEvaluationGradeLevelIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationProgramGatewaysSupported)
            {
                isModified |= 
                    source.PerformanceEvaluationProgramGateways.SynchronizeCollectionTo(
                        target.PerformanceEvaluationProgramGateways, 
                        onChildAdded: child => 
                            {
                                child.PerformanceEvaluation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceEvaluationProgramGatewayIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingLevelsSupported)
            {
                isModified |= 
                    source.PerformanceEvaluationRatingLevels.SynchronizeCollectionTo(
                        target.PerformanceEvaluationRatingLevels, 
                        onChildAdded: child => 
                            {
                                child.PerformanceEvaluation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceEvaluationRatingLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluation source, IPerformanceEvaluation target, Action<IPerformanceEvaluation, IPerformanceEvaluation> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsPerformanceEvaluationGradeLevelsSupported)
            {    
                targetSynchSupport.IsPerformanceEvaluationGradeLevelIncluded = sourceSynchSupport.IsPerformanceEvaluationGradeLevelIncluded;
                source.PerformanceEvaluationGradeLevels.MapCollectionTo(target.PerformanceEvaluationGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationGradeLevelsSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceEvaluationProgramGatewaysSupported)
            {    
                targetSynchSupport.IsPerformanceEvaluationProgramGatewayIncluded = sourceSynchSupport.IsPerformanceEvaluationProgramGatewayIncluded;
                source.PerformanceEvaluationProgramGateways.MapCollectionTo(target.PerformanceEvaluationProgramGateways, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationProgramGatewaysSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceEvaluationRatingLevelsSupported)
            {    
                targetSynchSupport.IsPerformanceEvaluationRatingLevelIncluded = sourceSynchSupport.IsPerformanceEvaluationRatingLevelIncluded;
                source.PerformanceEvaluationRatingLevels.MapCollectionTo(target.PerformanceEvaluationRatingLevels, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationRatingLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsPerformanceEvaluationGradeLevelsSupported { get; set; }
        bool IsPerformanceEvaluationProgramGatewaysSupported { get; set; }
        bool IsPerformanceEvaluationRatingLevelsSupported { get; set; }
        Func<IPerformanceEvaluationGradeLevel, bool> IsPerformanceEvaluationGradeLevelIncluded { get; set; }
        Func<IPerformanceEvaluationProgramGateway, bool> IsPerformanceEvaluationProgramGatewayIncluded { get; set; }
        Func<IPerformanceEvaluationRatingLevel, bool> IsPerformanceEvaluationRatingLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationGradeLevel source, IPerformanceEvaluationGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationGradeLevel source, IPerformanceEvaluationGradeLevel target, Action<IPerformanceEvaluationGradeLevel, IPerformanceEvaluationGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationGradeLevelSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationProgramGatewayMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationProgramGateway source, IPerformanceEvaluationProgramGateway target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramGatewayDescriptor != target.ProgramGatewayDescriptor)
            {
                source.ProgramGatewayDescriptor = target.ProgramGatewayDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationProgramGateway source, IPerformanceEvaluationProgramGateway target, Action<IPerformanceEvaluationProgramGateway, IPerformanceEvaluationProgramGateway> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationProgramGatewaySynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingLevelMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingLevel source, IPerformanceEvaluationRatingLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EvaluationRatingLevelDescriptor != target.EvaluationRatingLevelDescriptor)
            {
                source.EvaluationRatingLevelDescriptor = target.EvaluationRatingLevelDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMaxRatingSupported)
                && target.MaxRating != source.MaxRating)
            {
                target.MaxRating = source.MaxRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinRatingSupported)
                && target.MinRating != source.MinRating)
            {
                target.MinRating = source.MinRating;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingLevel source, IPerformanceEvaluationRatingLevel target, Action<IPerformanceEvaluationRatingLevel, IPerformanceEvaluationRatingLevel> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EvaluationRatingLevelDescriptor = source.EvaluationRatingLevelDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMaxRatingSupported)
                target.MaxRating = source.MaxRating;
            else
                targetSynchSupport.IsMaxRatingSupported = false;

            if (sourceSynchSupport.IsMinRatingSupported)
                target.MinRating = source.MinRating;
            else
                targetSynchSupport.IsMinRatingSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingLevelSynchronizationSourceSupport 
    {
        bool IsMaxRatingSupported { get; set; }
        bool IsMinRatingSupported { get; set; }
    }
 
}
// Aggregate: PerformanceEvaluationRating

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceEvaluationRatingAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRating source, IPerformanceEvaluationRating target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsActualDateSupported)
                && target.ActualDate != source.ActualDate)
            {
                target.ActualDate = source.ActualDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsActualDurationSupported)
                && target.ActualDuration != source.ActualDuration)
            {
                target.ActualDuration = source.ActualDuration;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsActualTimeSupported)
                && target.ActualTime != source.ActualTime)
            {
                target.ActualTime = source.ActualTime;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAnnouncedSupported)
                && target.Announced != source.Announced)
            {
                target.Announced = source.Announced;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCommentsSupported)
                && target.Comments != source.Comments)
            {
                target.Comments = source.Comments;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCoteachingStyleObservedDescriptorSupported)
                && target.CoteachingStyleObservedDescriptor != source.CoteachingStyleObservedDescriptor)
            {
                target.CoteachingStyleObservedDescriptor = source.CoteachingStyleObservedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported)
                && target.PerformanceEvaluationRatingLevelDescriptor != source.PerformanceEvaluationRatingLevelDescriptor)
            {
                target.PerformanceEvaluationRatingLevelDescriptor = source.PerformanceEvaluationRatingLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsScheduleDateSupported)
                && target.ScheduleDate != source.ScheduleDate)
            {
                target.ScheduleDate = source.ScheduleDate;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingResultsSupported)
            {
                isModified |= 
                    source.PerformanceEvaluationRatingResults.SynchronizeCollectionTo(
                        target.PerformanceEvaluationRatingResults, 
                        onChildAdded: child => 
                            {
                                child.PerformanceEvaluationRating = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceEvaluationRatingResultIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingReviewersSupported)
            {
                isModified |= 
                    source.PerformanceEvaluationRatingReviewers.SynchronizeCollectionTo(
                        target.PerformanceEvaluationRatingReviewers, 
                        onChildAdded: child => 
                            {
                                child.PerformanceEvaluationRating = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsPerformanceEvaluationRatingReviewerIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRating source, IPerformanceEvaluationRating target, Action<IPerformanceEvaluationRating, IPerformanceEvaluationRating> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsActualDateSupported)
                target.ActualDate = source.ActualDate;
            else
                targetSynchSupport.IsActualDateSupported = false;

            if (sourceSynchSupport.IsActualDurationSupported)
                target.ActualDuration = source.ActualDuration;
            else
                targetSynchSupport.IsActualDurationSupported = false;

            if (sourceSynchSupport.IsActualTimeSupported)
                target.ActualTime = source.ActualTime;
            else
                targetSynchSupport.IsActualTimeSupported = false;

            if (sourceSynchSupport.IsAnnouncedSupported)
                target.Announced = source.Announced;
            else
                targetSynchSupport.IsAnnouncedSupported = false;

            if (sourceSynchSupport.IsCommentsSupported)
                target.Comments = source.Comments;
            else
                targetSynchSupport.IsCommentsSupported = false;

            if (sourceSynchSupport.IsCoteachingStyleObservedDescriptorSupported)
                target.CoteachingStyleObservedDescriptor = source.CoteachingStyleObservedDescriptor;
            else
                targetSynchSupport.IsCoteachingStyleObservedDescriptorSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported)
                target.PerformanceEvaluationRatingLevelDescriptor = source.PerformanceEvaluationRatingLevelDescriptor;
            else
                targetSynchSupport.IsPerformanceEvaluationRatingLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsScheduleDateSupported)
                target.ScheduleDate = source.ScheduleDate;
            else
                targetSynchSupport.IsScheduleDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PerformanceEvaluationResourceId = source.PerformanceEvaluationResourceId;
                target.PerformanceEvaluationDiscriminator = source.PerformanceEvaluationDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsPerformanceEvaluationRatingResultsSupported)
            {    
                targetSynchSupport.IsPerformanceEvaluationRatingResultIncluded = sourceSynchSupport.IsPerformanceEvaluationRatingResultIncluded;
                source.PerformanceEvaluationRatingResults.MapCollectionTo(target.PerformanceEvaluationRatingResults, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationRatingResultsSupported = false;
            }

            if (sourceSynchSupport.IsPerformanceEvaluationRatingReviewersSupported)
            {    
                targetSynchSupport.IsPerformanceEvaluationRatingReviewerIncluded = sourceSynchSupport.IsPerformanceEvaluationRatingReviewerIncluded;
                source.PerformanceEvaluationRatingReviewers.MapCollectionTo(target.PerformanceEvaluationRatingReviewers, target);
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationRatingReviewersSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingSynchronizationSourceSupport 
    {
        bool IsActualDateSupported { get; set; }
        bool IsActualDurationSupported { get; set; }
        bool IsActualTimeSupported { get; set; }
        bool IsAnnouncedSupported { get; set; }
        bool IsCommentsSupported { get; set; }
        bool IsCoteachingStyleObservedDescriptorSupported { get; set; }
        bool IsPerformanceEvaluationRatingLevelDescriptorSupported { get; set; }
        bool IsPerformanceEvaluationRatingResultsSupported { get; set; }
        bool IsPerformanceEvaluationRatingReviewersSupported { get; set; }
        bool IsScheduleDateSupported { get; set; }
        Func<IPerformanceEvaluationRatingResult, bool> IsPerformanceEvaluationRatingResultIncluded { get; set; }
        Func<IPerformanceEvaluationRatingReviewer, bool> IsPerformanceEvaluationRatingReviewerIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingResultMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingResult source, IPerformanceEvaluationRatingResult target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingResultSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Rating != target.Rating)
            {
                source.Rating = target.Rating;
            }
            if (source.RatingResultTitle != target.RatingResultTitle)
            {
                source.RatingResultTitle = target.RatingResultTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingResult source, IPerformanceEvaluationRatingResult target, Action<IPerformanceEvaluationRatingResult, IPerformanceEvaluationRatingResult> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingResultSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingResultSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.Rating = source.Rating;
            target.RatingResultTitle = source.RatingResultTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingResultSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingReviewerMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingReviewer source, IPerformanceEvaluationRatingReviewer target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FirstName != target.FirstName)
            {
                source.FirstName = target.FirstName;
            }
            if (source.LastSurname != target.LastSurname)
            {
                source.LastSurname = target.LastSurname;
            }

            // Copy non-PK properties

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // PerformanceEvaluationRatingReviewerReceivedTraining
            if (sourceSupport == null || sourceSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported)
            {
                if (source.PerformanceEvaluationRatingReviewerReceivedTraining == null)
                {
                    if (target.PerformanceEvaluationRatingReviewerReceivedTraining != null)
                    {
                        target.PerformanceEvaluationRatingReviewerReceivedTraining = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.PerformanceEvaluationRatingReviewerReceivedTraining == null)
                    {
                        var itemType = target.GetType().GetProperty("PerformanceEvaluationRatingReviewerReceivedTraining").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.PerformanceEvaluationRatingReviewerReceivedTraining = (IPerformanceEvaluationRatingReviewerReceivedTraining) newItem;
                    }

                    isModified |= source.PerformanceEvaluationRatingReviewerReceivedTraining.Synchronize(target.PerformanceEvaluationRatingReviewerReceivedTraining);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingReviewer source, IPerformanceEvaluationRatingReviewer target, Action<IPerformanceEvaluationRatingReviewer, IPerformanceEvaluationRatingReviewer> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.FirstName = source.FirstName;
            target.LastSurname = source.LastSurname;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // PerformanceEvaluationRatingReviewerReceivedTraining (Source)
            if (sourceSynchSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported)
            {
                var itemProperty = target.GetType().GetProperty("PerformanceEvaluationRatingReviewerReceivedTraining");
                
                if (itemProperty != null)
                {                    
                    if (source.PerformanceEvaluationRatingReviewerReceivedTraining == null)
                    {
                        target.PerformanceEvaluationRatingReviewerReceivedTraining = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetPerformanceEvaluationRatingReviewerReceivedTraining = Activator.CreateInstance(itemType);
                        (targetPerformanceEvaluationRatingReviewerReceivedTraining as IChildEntity)?.SetParent(target);
                        source.PerformanceEvaluationRatingReviewerReceivedTraining.Map(targetPerformanceEvaluationRatingReviewerReceivedTraining);
                        
                        // Update the target reference appropriately
                        target.PerformanceEvaluationRatingReviewerReceivedTraining = (IPerformanceEvaluationRatingReviewerReceivedTraining) targetPerformanceEvaluationRatingReviewerReceivedTraining;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingReviewerSynchronizationSourceSupport 
    {
        bool IsPerformanceEvaluationRatingReviewerReceivedTrainingSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingReviewerReceivedTrainingMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingReviewerReceivedTraining source, IPerformanceEvaluationRatingReviewerReceivedTraining target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsInterRaterReliabilityScoreSupported)
                && target.InterRaterReliabilityScore != source.InterRaterReliabilityScore)
            {
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReceivedTrainingDateSupported)
                && target.ReceivedTrainingDate != source.ReceivedTrainingDate)
            {
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingReviewerReceivedTraining source, IPerformanceEvaluationRatingReviewerReceivedTraining target, Action<IPerformanceEvaluationRatingReviewerReceivedTraining, IPerformanceEvaluationRatingReviewerReceivedTraining> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsInterRaterReliabilityScoreSupported)
                target.InterRaterReliabilityScore = source.InterRaterReliabilityScore;
            else
                targetSynchSupport.IsInterRaterReliabilityScoreSupported = false;

            if (sourceSynchSupport.IsReceivedTrainingDateSupported)
                target.ReceivedTrainingDate = source.ReceivedTrainingDate;
            else
                targetSynchSupport.IsReceivedTrainingDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingReviewerReceivedTrainingSynchronizationSourceSupport 
    {
        bool IsInterRaterReliabilityScoreSupported { get; set; }
        bool IsReceivedTrainingDateSupported { get; set; }
    }
 
}
// Aggregate: PerformanceEvaluationRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceEvaluationRatingLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationRatingLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationRatingLevelDescriptor source, IPerformanceEvaluationRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceEvaluationRatingLevelDescriptorId != target.PerformanceEvaluationRatingLevelDescriptorId)
            {
                source.PerformanceEvaluationRatingLevelDescriptorId = target.PerformanceEvaluationRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationRatingLevelDescriptor source, IPerformanceEvaluationRatingLevelDescriptor target, Action<IPerformanceEvaluationRatingLevelDescriptor, IPerformanceEvaluationRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceEvaluationRatingLevelDescriptorId = source.PerformanceEvaluationRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PerformanceEvaluationTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PerformanceEvaluationTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PerformanceEvaluationTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPerformanceEvaluationTypeDescriptor source, IPerformanceEvaluationTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PerformanceEvaluationTypeDescriptorId != target.PerformanceEvaluationTypeDescriptorId)
            {
                source.PerformanceEvaluationTypeDescriptorId = target.PerformanceEvaluationTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPerformanceEvaluationTypeDescriptor source, IPerformanceEvaluationTypeDescriptor target, Action<IPerformanceEvaluationTypeDescriptor, IPerformanceEvaluationTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PerformanceEvaluationTypeDescriptorId = source.PerformanceEvaluationTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPerformanceEvaluationTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: PostSecondaryInstitution

namespace EdFi.Ods.Entities.Common.TPDM //.PostSecondaryInstitutionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PostSecondaryInstitutionExtensionMapper 
    {
        public static bool SynchronizeTo(this IPostSecondaryInstitutionExtension source, IPostSecondaryInstitutionExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.PostSecondaryInstitution as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPostSecondaryInstitutionExtension source, IPostSecondaryInstitutionExtension target, Action<IPostSecondaryInstitutionExtension, IPostSecondaryInstitutionExtension> onMapped)
        {
            var sourceSynchSupport = source as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IPostSecondaryInstitutionExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPostSecondaryInstitutionExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: PreviousCareerDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.PreviousCareerDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class PreviousCareerDescriptorMapper 
    {
        public static bool SynchronizeTo(this IPreviousCareerDescriptor source, IPreviousCareerDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IPreviousCareerDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.PreviousCareerDescriptorId != target.PreviousCareerDescriptorId)
            {
                source.PreviousCareerDescriptorId = target.PreviousCareerDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IPreviousCareerDescriptor source, IPreviousCareerDescriptor target, Action<IPreviousCareerDescriptor, IPreviousCareerDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IPreviousCareerDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IPreviousCareerDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.PreviousCareerDescriptorId = source.PreviousCareerDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IPreviousCareerDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProfessionalDevelopmentEvent

namespace EdFi.Ods.Entities.Common.TPDM //.ProfessionalDevelopmentEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProfessionalDevelopmentEventMapper 
    {
        public static bool SynchronizeTo(this IProfessionalDevelopmentEvent source, IProfessionalDevelopmentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IProfessionalDevelopmentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.ProfessionalDevelopmentTitle != target.ProfessionalDevelopmentTitle)
            {
                source.ProfessionalDevelopmentTitle = target.ProfessionalDevelopmentTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMultipleSessionSupported)
                && target.MultipleSession != source.MultipleSession)
            {
                target.MultipleSession = source.MultipleSession;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported)
                && target.ProfessionalDevelopmentOfferedByDescriptor != source.ProfessionalDevelopmentOfferedByDescriptor)
            {
                target.ProfessionalDevelopmentOfferedByDescriptor = source.ProfessionalDevelopmentOfferedByDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfessionalDevelopmentReasonSupported)
                && target.ProfessionalDevelopmentReason != source.ProfessionalDevelopmentReason)
            {
                target.ProfessionalDevelopmentReason = source.ProfessionalDevelopmentReason;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRequiredSupported)
                && target.Required != source.Required)
            {
                target.Required = source.Required;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalHoursSupported)
                && target.TotalHours != source.TotalHours)
            {
                target.TotalHours = source.TotalHours;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProfessionalDevelopmentEvent source, IProfessionalDevelopmentEvent target, Action<IProfessionalDevelopmentEvent, IProfessionalDevelopmentEvent> onMapped)
        {
            var sourceSynchSupport = source as IProfessionalDevelopmentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IProfessionalDevelopmentEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.ProfessionalDevelopmentTitle = source.ProfessionalDevelopmentTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMultipleSessionSupported)
                target.MultipleSession = source.MultipleSession;
            else
                targetSynchSupport.IsMultipleSessionSupported = false;

            if (sourceSynchSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported)
                target.ProfessionalDevelopmentOfferedByDescriptor = source.ProfessionalDevelopmentOfferedByDescriptor;
            else
                targetSynchSupport.IsProfessionalDevelopmentOfferedByDescriptorSupported = false;

            if (sourceSynchSupport.IsProfessionalDevelopmentReasonSupported)
                target.ProfessionalDevelopmentReason = source.ProfessionalDevelopmentReason;
            else
                targetSynchSupport.IsProfessionalDevelopmentReasonSupported = false;

            if (sourceSynchSupport.IsRequiredSupported)
                target.Required = source.Required;
            else
                targetSynchSupport.IsRequiredSupported = false;

            if (sourceSynchSupport.IsTotalHoursSupported)
                target.TotalHours = source.TotalHours;
            else
                targetSynchSupport.IsTotalHoursSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProfessionalDevelopmentEventSynchronizationSourceSupport 
    {
        bool IsMultipleSessionSupported { get; set; }
        bool IsProfessionalDevelopmentOfferedByDescriptorSupported { get; set; }
        bool IsProfessionalDevelopmentReasonSupported { get; set; }
        bool IsRequiredSupported { get; set; }
        bool IsTotalHoursSupported { get; set; }
    }
 
}
// Aggregate: ProfessionalDevelopmentEventAttendance

namespace EdFi.Ods.Entities.Common.TPDM //.ProfessionalDevelopmentEventAttendanceAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProfessionalDevelopmentEventAttendanceMapper 
    {
        public static bool SynchronizeTo(this IProfessionalDevelopmentEventAttendance source, IProfessionalDevelopmentEventAttendance target)
        {
            bool isModified = false;

            var sourceSupport = source as IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AttendanceDate != target.AttendanceDate)
            {
                source.AttendanceDate = target.AttendanceDate;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.ProfessionalDevelopmentTitle != target.ProfessionalDevelopmentTitle)
            {
                source.ProfessionalDevelopmentTitle = target.ProfessionalDevelopmentTitle;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventCategoryDescriptorSupported)
                && target.AttendanceEventCategoryDescriptor != source.AttendanceEventCategoryDescriptor)
            {
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttendanceEventReasonSupported)
                && target.AttendanceEventReason != source.AttendanceEventReason)
            {
                target.AttendanceEventReason = source.AttendanceEventReason;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProfessionalDevelopmentEventAttendance source, IProfessionalDevelopmentEventAttendance target, Action<IProfessionalDevelopmentEventAttendance, IProfessionalDevelopmentEventAttendance> onMapped)
        {
            var sourceSynchSupport = source as IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;
            var targetSynchSupport = target as IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.AttendanceDate = source.AttendanceDate;
            target.Namespace = source.Namespace;
            target.PersonId = source.PersonId;
            target.ProfessionalDevelopmentTitle = source.ProfessionalDevelopmentTitle;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAttendanceEventCategoryDescriptorSupported)
                target.AttendanceEventCategoryDescriptor = source.AttendanceEventCategoryDescriptor;
            else
                targetSynchSupport.IsAttendanceEventCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAttendanceEventReasonSupported)
                target.AttendanceEventReason = source.AttendanceEventReason;
            else
                targetSynchSupport.IsAttendanceEventReasonSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
                target.ProfessionalDevelopmentEventResourceId = source.ProfessionalDevelopmentEventResourceId;
                target.ProfessionalDevelopmentEventDiscriminator = source.ProfessionalDevelopmentEventDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProfessionalDevelopmentEventAttendanceSynchronizationSourceSupport 
    {
        bool IsAttendanceEventCategoryDescriptorSupported { get; set; }
        bool IsAttendanceEventReasonSupported { get; set; }
    }
 
}
// Aggregate: ProfessionalDevelopmentOfferedByDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ProfessionalDevelopmentOfferedByDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProfessionalDevelopmentOfferedByDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProfessionalDevelopmentOfferedByDescriptor source, IProfessionalDevelopmentOfferedByDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProfessionalDevelopmentOfferedByDescriptorId != target.ProfessionalDevelopmentOfferedByDescriptorId)
            {
                source.ProfessionalDevelopmentOfferedByDescriptorId = target.ProfessionalDevelopmentOfferedByDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProfessionalDevelopmentOfferedByDescriptor source, IProfessionalDevelopmentOfferedByDescriptor target, Action<IProfessionalDevelopmentOfferedByDescriptor, IProfessionalDevelopmentOfferedByDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProfessionalDevelopmentOfferedByDescriptorId = source.ProfessionalDevelopmentOfferedByDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProfessionalDevelopmentOfferedByDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: ProgramGatewayDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ProgramGatewayDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProgramGatewayDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProgramGatewayDescriptor source, IProgramGatewayDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProgramGatewayDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProgramGatewayDescriptorId != target.ProgramGatewayDescriptorId)
            {
                source.ProgramGatewayDescriptorId = target.ProgramGatewayDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProgramGatewayDescriptor source, IProgramGatewayDescriptor target, Action<IProgramGatewayDescriptor, IProgramGatewayDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProgramGatewayDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProgramGatewayDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProgramGatewayDescriptorId = source.ProgramGatewayDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProgramGatewayDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Prospect

namespace EdFi.Ods.Entities.Common.TPDM //.ProspectAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProspectMapper 
    {
        public static bool SynchronizeTo(this IProspect source, IProspect target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProspectIdentifier != target.ProspectIdentifier)
            {
                source.ProspectIdentifier = target.ProspectIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAppliedSupported)
                && target.Applied != source.Applied)
            {
                target.Applied = source.Applied;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEconomicDisadvantagedSupported)
                && target.EconomicDisadvantaged != source.EconomicDisadvantaged)
            {
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsElectronicMailAddressSupported)
                && target.ElectronicMailAddress != source.ElectronicMailAddress)
            {
                target.ElectronicMailAddress = source.ElectronicMailAddress;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstGenerationStudentSupported)
                && target.FirstGenerationStudent != source.FirstGenerationStudent)
            {
                target.FirstGenerationStudent = source.FirstGenerationStudent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMetSupported)
                && target.Met != source.Met)
            {
                target.Met = source.Met;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNotesSupported)
                && target.Notes != source.Notes)
            {
                target.Notes = source.Notes;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonIdSupported)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPreScreeningRatingSupported)
                && target.PreScreeningRating != source.PreScreeningRating)
            {
                target.PreScreeningRating = source.PreScreeningRating;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProspectTypeDescriptorSupported)
                && target.ProspectTypeDescriptor != source.ProspectTypeDescriptor)
            {
                target.ProspectTypeDescriptor = source.ProspectTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReferralSupported)
                && target.Referral != source.Referral)
            {
                target.Referral = source.Referral;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReferredBySupported)
                && target.ReferredBy != source.ReferredBy)
            {
                target.ReferredBy = source.ReferredBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSocialMediaNetworkNameSupported)
                && target.SocialMediaNetworkName != source.SocialMediaNetworkName)
            {
                target.SocialMediaNetworkName = source.SocialMediaNetworkName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSocialMediaUserNameSupported)
                && target.SocialMediaUserName != source.SocialMediaUserName)
            {
                target.SocialMediaUserName = source.SocialMediaUserName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSourceSystemDescriptorSupported)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherCandidateIdentifierSupported)
                && target.TeacherCandidateIdentifier != source.TeacherCandidateIdentifier)
            {
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // ProspectAid
            if (sourceSupport == null || sourceSupport.IsProspectAidSupported)
            {
                if (source.ProspectAid == null)
                {
                    if (target.ProspectAid != null)
                    {
                        target.ProspectAid = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.ProspectAid == null)
                    {
                        var itemType = target.GetType().GetProperty("ProspectAid").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.ProspectAid = (IProspectAid) newItem;
                    }

                    isModified |= source.ProspectAid.Synchronize(target.ProspectAid);
                }
            }
            // ProspectCurrentPosition
            if (sourceSupport == null || sourceSupport.IsProspectCurrentPositionSupported)
            {
                if (source.ProspectCurrentPosition == null)
                {
                    if (target.ProspectCurrentPosition != null)
                    {
                        target.ProspectCurrentPosition = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.ProspectCurrentPosition == null)
                    {
                        var itemType = target.GetType().GetProperty("ProspectCurrentPosition").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.ProspectCurrentPosition = (IProspectCurrentPosition) newItem;
                    }

                    isModified |= source.ProspectCurrentPosition.Synchronize(target.ProspectCurrentPosition);
                }
            }
            // ProspectQualifications
            if (sourceSupport == null || sourceSupport.IsProspectQualificationsSupported)
            {
                if (source.ProspectQualifications == null)
                {
                    if (target.ProspectQualifications != null)
                    {
                        target.ProspectQualifications = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.ProspectQualifications == null)
                    {
                        var itemType = target.GetType().GetProperty("ProspectQualifications").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.ProspectQualifications = (IProspectQualifications) newItem;
                    }

                    isModified |= source.ProspectQualifications.Synchronize(target.ProspectQualifications);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsProspectDisabilitiesSupported)
            {
                isModified |= 
                    source.ProspectDisabilities.SynchronizeCollectionTo(
                        target.ProspectDisabilities, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectPersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.ProspectPersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.ProspectPersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectPersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectRacesSupported)
            {
                isModified |= 
                    source.ProspectRaces.SynchronizeCollectionTo(
                        target.ProspectRaces, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectRecruitmentEventsSupported)
            {
                isModified |= 
                    source.ProspectRecruitmentEvents.SynchronizeCollectionTo(
                        target.ProspectRecruitmentEvents, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectRecruitmentEventIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectTelephonesSupported)
            {
                isModified |= 
                    source.ProspectTelephones.SynchronizeCollectionTo(
                        target.ProspectTelephones, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsProspectTouchpointsSupported)
            {
                isModified |= 
                    source.ProspectTouchpoints.SynchronizeCollectionTo(
                        target.ProspectTouchpoints, 
                        onChildAdded: child => 
                            {
                                child.Prospect = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectTouchpointIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IProspect source, IProspect target, Action<IProspect, IProspect> onMapped)
        {
            var sourceSynchSupport = source as IProspectSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProspectIdentifier = source.ProspectIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAppliedSupported)
                target.Applied = source.Applied;
            else
                targetSynchSupport.IsAppliedSupported = false;

            if (sourceSynchSupport.IsEconomicDisadvantagedSupported)
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
            else
                targetSynchSupport.IsEconomicDisadvantagedSupported = false;

            if (sourceSynchSupport.IsElectronicMailAddressSupported)
                target.ElectronicMailAddress = source.ElectronicMailAddress;
            else
                targetSynchSupport.IsElectronicMailAddressSupported = false;

            if (sourceSynchSupport.IsFirstGenerationStudentSupported)
                target.FirstGenerationStudent = source.FirstGenerationStudent;
            else
                targetSynchSupport.IsFirstGenerationStudentSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMetSupported)
                target.Met = source.Met;
            else
                targetSynchSupport.IsMetSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsNotesSupported)
                target.Notes = source.Notes;
            else
                targetSynchSupport.IsNotesSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsPersonIdSupported)
                target.PersonId = source.PersonId;
            else
                targetSynchSupport.IsPersonIdSupported = false;

            if (sourceSynchSupport.IsPreScreeningRatingSupported)
                target.PreScreeningRating = source.PreScreeningRating;
            else
                targetSynchSupport.IsPreScreeningRatingSupported = false;

            if (sourceSynchSupport.IsProspectTypeDescriptorSupported)
                target.ProspectTypeDescriptor = source.ProspectTypeDescriptor;
            else
                targetSynchSupport.IsProspectTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsReferralSupported)
                target.Referral = source.Referral;
            else
                targetSynchSupport.IsReferralSupported = false;

            if (sourceSynchSupport.IsReferredBySupported)
                target.ReferredBy = source.ReferredBy;
            else
                targetSynchSupport.IsReferredBySupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsSocialMediaNetworkNameSupported)
                target.SocialMediaNetworkName = source.SocialMediaNetworkName;
            else
                targetSynchSupport.IsSocialMediaNetworkNameSupported = false;

            if (sourceSynchSupport.IsSocialMediaUserNameSupported)
                target.SocialMediaUserName = source.SocialMediaUserName;
            else
                targetSynchSupport.IsSocialMediaUserNameSupported = false;

            if (sourceSynchSupport.IsSourceSystemDescriptorSupported)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            else
                targetSynchSupport.IsSourceSystemDescriptorSupported = false;

            if (sourceSynchSupport.IsTeacherCandidateIdentifierSupported)
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            else
                targetSynchSupport.IsTeacherCandidateIdentifierSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // ProspectAid (Source)
            if (sourceSynchSupport.IsProspectAidSupported)
            {
                var itemProperty = target.GetType().GetProperty("ProspectAid");
                
                if (itemProperty != null)
                {                    
                    if (source.ProspectAid == null)
                    {
                        target.ProspectAid = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetProspectAid = Activator.CreateInstance(itemType);
                        (targetProspectAid as IChildEntity)?.SetParent(target);
                        source.ProspectAid.Map(targetProspectAid);
                        
                        // Update the target reference appropriately
                        target.ProspectAid = (IProspectAid) targetProspectAid;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsProspectAidSupported = false; 
            }
            // ProspectCurrentPosition (Source)
            if (sourceSynchSupport.IsProspectCurrentPositionSupported)
            {
                var itemProperty = target.GetType().GetProperty("ProspectCurrentPosition");
                
                if (itemProperty != null)
                {                    
                    if (source.ProspectCurrentPosition == null)
                    {
                        target.ProspectCurrentPosition = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetProspectCurrentPosition = Activator.CreateInstance(itemType);
                        (targetProspectCurrentPosition as IChildEntity)?.SetParent(target);
                        source.ProspectCurrentPosition.Map(targetProspectCurrentPosition);
                        
                        // Update the target reference appropriately
                        target.ProspectCurrentPosition = (IProspectCurrentPosition) targetProspectCurrentPosition;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsProspectCurrentPositionSupported = false; 
            }
            // ProspectQualifications (Source)
            if (sourceSynchSupport.IsProspectQualificationsSupported)
            {
                var itemProperty = target.GetType().GetProperty("ProspectQualifications");
                
                if (itemProperty != null)
                {                    
                    if (source.ProspectQualifications == null)
                    {
                        target.ProspectQualifications = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetProspectQualifications = Activator.CreateInstance(itemType);
                        (targetProspectQualifications as IChildEntity)?.SetParent(target);
                        source.ProspectQualifications.Map(targetProspectQualifications);
                        
                        // Update the target reference appropriately
                        target.ProspectQualifications = (IProspectQualifications) targetProspectQualifications;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsProspectQualificationsSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsProspectDisabilitiesSupported)
            {    
                targetSynchSupport.IsProspectDisabilityIncluded = sourceSynchSupport.IsProspectDisabilityIncluded;
                source.ProspectDisabilities.MapCollectionTo(target.ProspectDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsProspectDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsProspectPersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsProspectPersonalIdentificationDocumentIncluded = sourceSynchSupport.IsProspectPersonalIdentificationDocumentIncluded;
                source.ProspectPersonalIdentificationDocuments.MapCollectionTo(target.ProspectPersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsProspectPersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsProspectRacesSupported)
            {    
                targetSynchSupport.IsProspectRaceIncluded = sourceSynchSupport.IsProspectRaceIncluded;
                source.ProspectRaces.MapCollectionTo(target.ProspectRaces, target);
            }
            else
            {
                targetSynchSupport.IsProspectRacesSupported = false;
            }

            if (sourceSynchSupport.IsProspectRecruitmentEventsSupported)
            {    
                targetSynchSupport.IsProspectRecruitmentEventIncluded = sourceSynchSupport.IsProspectRecruitmentEventIncluded;
                source.ProspectRecruitmentEvents.MapCollectionTo(target.ProspectRecruitmentEvents, target);
            }
            else
            {
                targetSynchSupport.IsProspectRecruitmentEventsSupported = false;
            }

            if (sourceSynchSupport.IsProspectTelephonesSupported)
            {    
                targetSynchSupport.IsProspectTelephoneIncluded = sourceSynchSupport.IsProspectTelephoneIncluded;
                source.ProspectTelephones.MapCollectionTo(target.ProspectTelephones, target);
            }
            else
            {
                targetSynchSupport.IsProspectTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsProspectTouchpointsSupported)
            {    
                targetSynchSupport.IsProspectTouchpointIncluded = sourceSynchSupport.IsProspectTouchpointIncluded;
                source.ProspectTouchpoints.MapCollectionTo(target.ProspectTouchpoints, target);
            }
            else
            {
                targetSynchSupport.IsProspectTouchpointsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectSynchronizationSourceSupport 
    {
        bool IsAppliedSupported { get; set; }
        bool IsEconomicDisadvantagedSupported { get; set; }
        bool IsElectronicMailAddressSupported { get; set; }
        bool IsFirstGenerationStudentSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMetSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsNotesSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsPersonIdSupported { get; set; }
        bool IsPreScreeningRatingSupported { get; set; }
        bool IsProspectAidSupported { get; set; }
        bool IsProspectCurrentPositionSupported { get; set; }
        bool IsProspectDisabilitiesSupported { get; set; }
        bool IsProspectPersonalIdentificationDocumentsSupported { get; set; }
        bool IsProspectQualificationsSupported { get; set; }
        bool IsProspectRacesSupported { get; set; }
        bool IsProspectRecruitmentEventsSupported { get; set; }
        bool IsProspectTelephonesSupported { get; set; }
        bool IsProspectTouchpointsSupported { get; set; }
        bool IsProspectTypeDescriptorSupported { get; set; }
        bool IsReferralSupported { get; set; }
        bool IsReferredBySupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsSocialMediaNetworkNameSupported { get; set; }
        bool IsSocialMediaUserNameSupported { get; set; }
        bool IsSourceSystemDescriptorSupported { get; set; }
        bool IsTeacherCandidateIdentifierSupported { get; set; }
        Func<IProspectDisability, bool> IsProspectDisabilityIncluded { get; set; }
        Func<IProspectPersonalIdentificationDocument, bool> IsProspectPersonalIdentificationDocumentIncluded { get; set; }
        Func<IProspectRace, bool> IsProspectRaceIncluded { get; set; }
        Func<IProspectRecruitmentEvent, bool> IsProspectRecruitmentEventIncluded { get; set; }
        Func<IProspectTelephone, bool> IsProspectTelephoneIncluded { get; set; }
        Func<IProspectTouchpoint, bool> IsProspectTouchpointIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectAidMapper 
    {
        public static bool SynchronizeTo(this IProspectAid source, IProspectAid target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectAidSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAidAmountSupported)
                && target.AidAmount != source.AidAmount)
            {
                target.AidAmount = source.AidAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidConditionDescriptionSupported)
                && target.AidConditionDescription != source.AidConditionDescription)
            {
                target.AidConditionDescription = source.AidConditionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidTypeDescriptorSupported)
                && target.AidTypeDescriptor != source.AidTypeDescriptor)
            {
                target.AidTypeDescriptor = source.AidTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPellGrantRecipientSupported)
                && target.PellGrantRecipient != source.PellGrantRecipient)
            {
                target.PellGrantRecipient = source.PellGrantRecipient;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectAid source, IProspectAid target, Action<IProspectAid, IProspectAid> onMapped)
        {
            var sourceSynchSupport = source as IProspectAidSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectAidSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAidAmountSupported)
                target.AidAmount = source.AidAmount;
            else
                targetSynchSupport.IsAidAmountSupported = false;

            if (sourceSynchSupport.IsAidConditionDescriptionSupported)
                target.AidConditionDescription = source.AidConditionDescription;
            else
                targetSynchSupport.IsAidConditionDescriptionSupported = false;

            if (sourceSynchSupport.IsAidTypeDescriptorSupported)
                target.AidTypeDescriptor = source.AidTypeDescriptor;
            else
                targetSynchSupport.IsAidTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsPellGrantRecipientSupported)
                target.PellGrantRecipient = source.PellGrantRecipient;
            else
                targetSynchSupport.IsPellGrantRecipientSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectAidSynchronizationSourceSupport 
    {
        bool IsAidAmountSupported { get; set; }
        bool IsAidConditionDescriptionSupported { get; set; }
        bool IsAidTypeDescriptorSupported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsPellGrantRecipientSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectCurrentPositionMapper 
    {
        public static bool SynchronizeTo(this IProspectCurrentPosition source, IProspectCurrentPosition target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectCurrentPositionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAcademicSubjectDescriptorSupported)
                && target.AcademicSubjectDescriptor != source.AcademicSubjectDescriptor)
            {
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocationSupported)
                && target.Location != source.Location)
            {
                target.Location = source.Location;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPositionTitleSupported)
                && target.PositionTitle != source.PositionTitle)
            {
                target.PositionTitle = source.PositionTitle;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsProspectCurrentPositionGradeLevelsSupported)
            {
                isModified |= 
                    source.ProspectCurrentPositionGradeLevels.SynchronizeCollectionTo(
                        target.ProspectCurrentPositionGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.ProspectCurrentPosition = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectCurrentPositionGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IProspectCurrentPosition source, IProspectCurrentPosition target, Action<IProspectCurrentPosition, IProspectCurrentPosition> onMapped)
        {
            var sourceSynchSupport = source as IProspectCurrentPositionSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectCurrentPositionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAcademicSubjectDescriptorSupported)
                target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            else
                targetSynchSupport.IsAcademicSubjectDescriptorSupported = false;

            if (sourceSynchSupport.IsLocationSupported)
                target.Location = source.Location;
            else
                targetSynchSupport.IsLocationSupported = false;

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsPositionTitleSupported)
                target.PositionTitle = source.PositionTitle;
            else
                targetSynchSupport.IsPositionTitleSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsProspectCurrentPositionGradeLevelsSupported)
            {    
                targetSynchSupport.IsProspectCurrentPositionGradeLevelIncluded = sourceSynchSupport.IsProspectCurrentPositionGradeLevelIncluded;
                source.ProspectCurrentPositionGradeLevels.MapCollectionTo(target.ProspectCurrentPositionGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsProspectCurrentPositionGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectCurrentPositionSynchronizationSourceSupport 
    {
        bool IsAcademicSubjectDescriptorSupported { get; set; }
        bool IsLocationSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsPositionTitleSupported { get; set; }
        bool IsProspectCurrentPositionGradeLevelsSupported { get; set; }
        Func<IProspectCurrentPositionGradeLevel, bool> IsProspectCurrentPositionGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectCurrentPositionGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IProspectCurrentPositionGradeLevel source, IProspectCurrentPositionGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectCurrentPositionGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectCurrentPositionGradeLevel source, IProspectCurrentPositionGradeLevel target, Action<IProspectCurrentPositionGradeLevel, IProspectCurrentPositionGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IProspectCurrentPositionGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectCurrentPositionGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectCurrentPositionGradeLevelSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectDisabilityMapper 
    {
        public static bool SynchronizeTo(this IProspectDisability source, IProspectDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsProspectDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.ProspectDisabilityDesignations.SynchronizeCollectionTo(
                        target.ProspectDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.ProspectDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsProspectDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IProspectDisability source, IProspectDisability target, Action<IProspectDisability, IProspectDisability> onMapped)
        {
            var sourceSynchSupport = source as IProspectDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsProspectDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsProspectDisabilityDesignationIncluded = sourceSynchSupport.IsProspectDisabilityDesignationIncluded;
                source.ProspectDisabilityDesignations.MapCollectionTo(target.ProspectDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsProspectDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectDisabilitySynchronizationSourceSupport 
    {
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        bool IsProspectDisabilityDesignationsSupported { get; set; }
        Func<IProspectDisabilityDesignation, bool> IsProspectDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this IProspectDisabilityDesignation source, IProspectDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectDisabilityDesignation source, IProspectDisabilityDesignation target, Action<IProspectDisabilityDesignation, IProspectDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as IProspectDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectDisabilityDesignationSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectPersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this IProspectPersonalIdentificationDocument source, IProspectPersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectPersonalIdentificationDocument source, IProspectPersonalIdentificationDocument target, Action<IProspectPersonalIdentificationDocument, IProspectPersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as IProspectPersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectPersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectPersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectQualificationsMapper 
    {
        public static bool SynchronizeTo(this IProspectQualifications source, IProspectQualifications target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectQualificationsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCapacityToServeSupported)
                && target.CapacityToServe != source.CapacityToServe)
            {
                target.CapacityToServe = source.CapacityToServe;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEligibleSupported)
                && target.Eligible != source.Eligible)
            {
                target.Eligible = source.Eligible;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfServiceCurrentPlacementSupported)
                && target.YearsOfServiceCurrentPlacement != source.YearsOfServiceCurrentPlacement)
            {
                target.YearsOfServiceCurrentPlacement = source.YearsOfServiceCurrentPlacement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsYearsOfServiceTotalSupported)
                && target.YearsOfServiceTotal != source.YearsOfServiceTotal)
            {
                target.YearsOfServiceTotal = source.YearsOfServiceTotal;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectQualifications source, IProspectQualifications target, Action<IProspectQualifications, IProspectQualifications> onMapped)
        {
            var sourceSynchSupport = source as IProspectQualificationsSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectQualificationsSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsCapacityToServeSupported)
                target.CapacityToServe = source.CapacityToServe;
            else
                targetSynchSupport.IsCapacityToServeSupported = false;

            if (sourceSynchSupport.IsEligibleSupported)
                target.Eligible = source.Eligible;
            else
                targetSynchSupport.IsEligibleSupported = false;

            if (sourceSynchSupport.IsYearsOfServiceCurrentPlacementSupported)
                target.YearsOfServiceCurrentPlacement = source.YearsOfServiceCurrentPlacement;
            else
                targetSynchSupport.IsYearsOfServiceCurrentPlacementSupported = false;

            if (sourceSynchSupport.IsYearsOfServiceTotalSupported)
                target.YearsOfServiceTotal = source.YearsOfServiceTotal;
            else
                targetSynchSupport.IsYearsOfServiceTotalSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectQualificationsSynchronizationSourceSupport 
    {
        bool IsCapacityToServeSupported { get; set; }
        bool IsEligibleSupported { get; set; }
        bool IsYearsOfServiceCurrentPlacementSupported { get; set; }
        bool IsYearsOfServiceTotalSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectRaceMapper 
    {
        public static bool SynchronizeTo(this IProspectRace source, IProspectRace target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectRace source, IProspectRace target, Action<IProspectRace, IProspectRace> onMapped)
        {
            var sourceSynchSupport = source as IProspectRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectRaceSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectRecruitmentEventMapper 
    {
        public static bool SynchronizeTo(this IProspectRecruitmentEvent source, IProspectRecruitmentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectRecruitmentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.EventTitle != target.EventTitle)
            {
                source.EventTitle = target.EventTitle;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectRecruitmentEvent source, IProspectRecruitmentEvent target, Action<IProspectRecruitmentEvent, IProspectRecruitmentEvent> onMapped)
        {
            var sourceSynchSupport = source as IProspectRecruitmentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectRecruitmentEventSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.EventDate = source.EventDate;
            target.EventTitle = source.EventTitle;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.RecruitmentEventResourceId = source.RecruitmentEventResourceId;
                target.RecruitmentEventDiscriminator = source.RecruitmentEventDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectRecruitmentEventSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectTelephoneMapper 
    {
        public static bool SynchronizeTo(this IProspectTelephone source, IProspectTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectTelephone source, IProspectTelephone target, Action<IProspectTelephone, IProspectTelephone> onMapped)
        {
            var sourceSynchSupport = source as IProspectTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class ProspectTouchpointMapper 
    {
        public static bool SynchronizeTo(this IProspectTouchpoint source, IProspectTouchpoint target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectTouchpointSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TouchpointContent != target.TouchpointContent)
            {
                source.TouchpointContent = target.TouchpointContent;
            }
            if (source.TouchpointDate != target.TouchpointDate)
            {
                source.TouchpointDate = target.TouchpointDate;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectTouchpoint source, IProspectTouchpoint target, Action<IProspectTouchpoint, IProspectTouchpoint> onMapped)
        {
            var sourceSynchSupport = source as IProspectTouchpointSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectTouchpointSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TouchpointContent = source.TouchpointContent;
            target.TouchpointDate = source.TouchpointDate;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectTouchpointSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: ProspectTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ProspectTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ProspectTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IProspectTypeDescriptor source, IProspectTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IProspectTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ProspectTypeDescriptorId != target.ProspectTypeDescriptorId)
            {
                source.ProspectTypeDescriptorId = target.ProspectTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IProspectTypeDescriptor source, IProspectTypeDescriptor target, Action<IProspectTypeDescriptor, IProspectTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IProspectTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IProspectTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ProspectTypeDescriptorId = source.ProspectTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IProspectTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: QuantitativeMeasure

namespace EdFi.Ods.Entities.Common.TPDM //.QuantitativeMeasureAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class QuantitativeMeasureMapper 
    {
        public static bool SynchronizeTo(this IQuantitativeMeasure source, IQuantitativeMeasure target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuantitativeMeasureSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.QuantitativeMeasureIdentifier != target.QuantitativeMeasureIdentifier)
            {
                source.QuantitativeMeasureIdentifier = target.QuantitativeMeasureIdentifier;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsQuantitativeMeasureDatatypeDescriptorSupported)
                && target.QuantitativeMeasureDatatypeDescriptor != source.QuantitativeMeasureDatatypeDescriptor)
            {
                target.QuantitativeMeasureDatatypeDescriptor = source.QuantitativeMeasureDatatypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsQuantitativeMeasureTypeDescriptorSupported)
                && target.QuantitativeMeasureTypeDescriptor != source.QuantitativeMeasureTypeDescriptor)
            {
                target.QuantitativeMeasureTypeDescriptor = source.QuantitativeMeasureTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuantitativeMeasure source, IQuantitativeMeasure target, Action<IQuantitativeMeasure, IQuantitativeMeasure> onMapped)
        {
            var sourceSynchSupport = source as IQuantitativeMeasureSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuantitativeMeasureSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.QuantitativeMeasureIdentifier = source.QuantitativeMeasureIdentifier;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsQuantitativeMeasureDatatypeDescriptorSupported)
                target.QuantitativeMeasureDatatypeDescriptor = source.QuantitativeMeasureDatatypeDescriptor;
            else
                targetSynchSupport.IsQuantitativeMeasureDatatypeDescriptorSupported = false;

            if (sourceSynchSupport.IsQuantitativeMeasureTypeDescriptorSupported)
                target.QuantitativeMeasureTypeDescriptor = source.QuantitativeMeasureTypeDescriptor;
            else
                targetSynchSupport.IsQuantitativeMeasureTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuantitativeMeasureSynchronizationSourceSupport 
    {
        bool IsQuantitativeMeasureDatatypeDescriptorSupported { get; set; }
        bool IsQuantitativeMeasureTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: QuantitativeMeasureDatatypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.QuantitativeMeasureDatatypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class QuantitativeMeasureDatatypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IQuantitativeMeasureDatatypeDescriptor source, IQuantitativeMeasureDatatypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.QuantitativeMeasureDatatypeDescriptorId != target.QuantitativeMeasureDatatypeDescriptorId)
            {
                source.QuantitativeMeasureDatatypeDescriptorId = target.QuantitativeMeasureDatatypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuantitativeMeasureDatatypeDescriptor source, IQuantitativeMeasureDatatypeDescriptor target, Action<IQuantitativeMeasureDatatypeDescriptor, IQuantitativeMeasureDatatypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.QuantitativeMeasureDatatypeDescriptorId = source.QuantitativeMeasureDatatypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuantitativeMeasureDatatypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: QuantitativeMeasureScore

namespace EdFi.Ods.Entities.Common.TPDM //.QuantitativeMeasureScoreAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class QuantitativeMeasureScoreMapper 
    {
        public static bool SynchronizeTo(this IQuantitativeMeasureScore source, IQuantitativeMeasureScore target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuantitativeMeasureScoreSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.QuantitativeMeasureIdentifier != target.QuantitativeMeasureIdentifier)
            {
                source.QuantitativeMeasureIdentifier = target.QuantitativeMeasureIdentifier;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsScoreValueSupported)
                && target.ScoreValue != source.ScoreValue)
            {
                target.ScoreValue = source.ScoreValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStandardErrorSupported)
                && target.StandardError != source.StandardError)
            {
                target.StandardError = source.StandardError;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuantitativeMeasureScore source, IQuantitativeMeasureScore target, Action<IQuantitativeMeasureScore, IQuantitativeMeasureScore> onMapped)
        {
            var sourceSynchSupport = source as IQuantitativeMeasureScoreSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuantitativeMeasureScoreSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.QuantitativeMeasureIdentifier = source.QuantitativeMeasureIdentifier;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsScoreValueSupported)
                target.ScoreValue = source.ScoreValue;
            else
                targetSynchSupport.IsScoreValueSupported = false;

            if (sourceSynchSupport.IsStandardErrorSupported)
                target.StandardError = source.StandardError;
            else
                targetSynchSupport.IsStandardErrorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementRatingResourceId = source.EvaluationElementRatingResourceId;
                target.EvaluationElementRatingDiscriminator = source.EvaluationElementRatingDiscriminator;
                target.QuantitativeMeasureResourceId = source.QuantitativeMeasureResourceId;
                target.QuantitativeMeasureDiscriminator = source.QuantitativeMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuantitativeMeasureScoreSynchronizationSourceSupport 
    {
        bool IsScoreValueSupported { get; set; }
        bool IsStandardErrorSupported { get; set; }
    }
 
}
// Aggregate: QuantitativeMeasureTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.QuantitativeMeasureTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class QuantitativeMeasureTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IQuantitativeMeasureTypeDescriptor source, IQuantitativeMeasureTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.QuantitativeMeasureTypeDescriptorId != target.QuantitativeMeasureTypeDescriptorId)
            {
                source.QuantitativeMeasureTypeDescriptorId = target.QuantitativeMeasureTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IQuantitativeMeasureTypeDescriptor source, IQuantitativeMeasureTypeDescriptor target, Action<IQuantitativeMeasureTypeDescriptor, IQuantitativeMeasureTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.QuantitativeMeasureTypeDescriptorId = source.QuantitativeMeasureTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IQuantitativeMeasureTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RecruitmentEvent

namespace EdFi.Ods.Entities.Common.TPDM //.RecruitmentEventAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventMapper 
    {
        public static bool SynchronizeTo(this IRecruitmentEvent source, IRecruitmentEvent target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EventDate != target.EventDate)
            {
                source.EventDate = target.EventDate;
            }
            if (source.EventTitle != target.EventTitle)
            {
                source.EventTitle = target.EventTitle;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEventDescriptionSupported)
                && target.EventDescription != source.EventDescription)
            {
                target.EventDescription = source.EventDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEventLocationSupported)
                && target.EventLocation != source.EventLocation)
            {
                target.EventLocation = source.EventLocation;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecruitmentEventTypeDescriptorSupported)
                && target.RecruitmentEventTypeDescriptor != source.RecruitmentEventTypeDescriptor)
            {
                target.RecruitmentEventTypeDescriptor = source.RecruitmentEventTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEvent source, IRecruitmentEvent target, Action<IRecruitmentEvent, IRecruitmentEvent> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EventDate = source.EventDate;
            target.EventTitle = source.EventTitle;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEventDescriptionSupported)
                target.EventDescription = source.EventDescription;
            else
                targetSynchSupport.IsEventDescriptionSupported = false;

            if (sourceSynchSupport.IsEventLocationSupported)
                target.EventLocation = source.EventLocation;
            else
                targetSynchSupport.IsEventLocationSupported = false;

            if (sourceSynchSupport.IsRecruitmentEventTypeDescriptorSupported)
                target.RecruitmentEventTypeDescriptor = source.RecruitmentEventTypeDescriptor;
            else
                targetSynchSupport.IsRecruitmentEventTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventSynchronizationSourceSupport 
    {
        bool IsEventDescriptionSupported { get; set; }
        bool IsEventLocationSupported { get; set; }
        bool IsRecruitmentEventTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: RecruitmentEventTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.RecruitmentEventTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RecruitmentEventTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRecruitmentEventTypeDescriptor source, IRecruitmentEventTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecruitmentEventTypeDescriptorId != target.RecruitmentEventTypeDescriptorId)
            {
                source.RecruitmentEventTypeDescriptorId = target.RecruitmentEventTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRecruitmentEventTypeDescriptor source, IRecruitmentEventTypeDescriptor target, Action<IRecruitmentEventTypeDescriptor, IRecruitmentEventTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRecruitmentEventTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RecruitmentEventTypeDescriptorId = source.RecruitmentEventTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRecruitmentEventTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: RubricDimension

namespace EdFi.Ods.Entities.Common.TPDM //.RubricDimensionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RubricDimensionMapper 
    {
        public static bool SynchronizeTo(this IRubricDimension source, IRubricDimension target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricDimensionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.RubricRating != target.RubricRating)
            {
                source.RubricRating = target.RubricRating;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCriterionDescriptionSupported)
                && target.CriterionDescription != source.CriterionDescription)
            {
                target.CriterionDescription = source.CriterionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDimensionOrderSupported)
                && target.DimensionOrder != source.DimensionOrder)
            {
                target.DimensionOrder = source.DimensionOrder;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRubricRatingLevelDescriptorSupported)
                && target.RubricRatingLevelDescriptor != source.RubricRatingLevelDescriptor)
            {
                target.RubricRatingLevelDescriptor = source.RubricRatingLevelDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricDimension source, IRubricDimension target, Action<IRubricDimension, IRubricDimension> onMapped)
        {
            var sourceSynchSupport = source as IRubricDimensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricDimensionSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.RubricRating = source.RubricRating;
            target.SchoolYear = source.SchoolYear;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCriterionDescriptionSupported)
                target.CriterionDescription = source.CriterionDescription;
            else
                targetSynchSupport.IsCriterionDescriptionSupported = false;

            if (sourceSynchSupport.IsDimensionOrderSupported)
                target.DimensionOrder = source.DimensionOrder;
            else
                targetSynchSupport.IsDimensionOrderSupported = false;

            if (sourceSynchSupport.IsRubricRatingLevelDescriptorSupported)
                target.RubricRatingLevelDescriptor = source.RubricRatingLevelDescriptor;
            else
                targetSynchSupport.IsRubricRatingLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricDimensionSynchronizationSourceSupport 
    {
        bool IsCriterionDescriptionSupported { get; set; }
        bool IsDimensionOrderSupported { get; set; }
        bool IsRubricRatingLevelDescriptorSupported { get; set; }
    }
 
}
// Aggregate: RubricRatingLevelDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.RubricRatingLevelDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class RubricRatingLevelDescriptorMapper 
    {
        public static bool SynchronizeTo(this IRubricRatingLevelDescriptor source, IRubricRatingLevelDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IRubricRatingLevelDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RubricRatingLevelDescriptorId != target.RubricRatingLevelDescriptorId)
            {
                source.RubricRatingLevelDescriptorId = target.RubricRatingLevelDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IRubricRatingLevelDescriptor source, IRubricRatingLevelDescriptor target, Action<IRubricRatingLevelDescriptor, IRubricRatingLevelDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IRubricRatingLevelDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IRubricRatingLevelDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.RubricRatingLevelDescriptorId = source.RubricRatingLevelDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IRubricRatingLevelDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SalaryTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.SalaryTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SalaryTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISalaryTypeDescriptor source, ISalaryTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISalaryTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SalaryTypeDescriptorId != target.SalaryTypeDescriptorId)
            {
                source.SalaryTypeDescriptorId = target.SalaryTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISalaryTypeDescriptor source, ISalaryTypeDescriptor target, Action<ISalaryTypeDescriptor, ISalaryTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISalaryTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISalaryTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SalaryTypeDescriptorId = source.SalaryTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISalaryTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: School

namespace EdFi.Ods.Entities.Common.TPDM //.SchoolAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolExtensionMapper 
    {
        public static bool SynchronizeTo(this ISchoolExtension source, ISchoolExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.School as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImprovingSchoolSupported)
                && target.ImprovingSchool != source.ImprovingSchool)
            {
                target.ImprovingSchool = source.ImprovingSchool;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolStatusDescriptorSupported)
                && target.SchoolStatusDescriptor != source.SchoolStatusDescriptor)
            {
                target.SchoolStatusDescriptor = source.SchoolStatusDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolExtension source, ISchoolExtension target, Action<ISchoolExtension, ISchoolExtension> onMapped)
        {
            var sourceSynchSupport = source as ISchoolExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsImprovingSchoolSupported)
                target.ImprovingSchool = source.ImprovingSchool;
            else
                targetSynchSupport.IsImprovingSchoolSupported = false;

            if (sourceSynchSupport.IsSchoolStatusDescriptorSupported)
                target.SchoolStatusDescriptor = source.SchoolStatusDescriptor;
            else
                targetSynchSupport.IsSchoolStatusDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
        bool IsImprovingSchoolSupported { get; set; }
        bool IsSchoolStatusDescriptorSupported { get; set; }
    }
 
}
// Aggregate: SchoolStatusDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.SchoolStatusDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SchoolStatusDescriptorMapper 
    {
        public static bool SynchronizeTo(this ISchoolStatusDescriptor source, ISchoolStatusDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ISchoolStatusDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.SchoolStatusDescriptorId != target.SchoolStatusDescriptorId)
            {
                source.SchoolStatusDescriptorId = target.SchoolStatusDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISchoolStatusDescriptor source, ISchoolStatusDescriptor target, Action<ISchoolStatusDescriptor, ISchoolStatusDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ISchoolStatusDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ISchoolStatusDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.SchoolStatusDescriptorId = source.SchoolStatusDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISchoolStatusDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: Staff

namespace EdFi.Ods.Entities.Common.TPDM //.StaffAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffBackgroundCheckMapper 
    {
        public static bool SynchronizeTo(this IStaffBackgroundCheck source, IStaffBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BackgroundCheckTypeDescriptor != target.BackgroundCheckTypeDescriptor)
            {
                source.BackgroundCheckTypeDescriptor = target.BackgroundCheckTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffBackgroundCheck source, IStaffBackgroundCheck target, Action<IStaffBackgroundCheck, IStaffBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as IStaffBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffExtensionMapper 
    {
        public static bool SynchronizeTo(this IStaffExtension source, IStaffExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.Staff as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProbationCompleteDateSupported)
                && target.ProbationCompleteDate != source.ProbationCompleteDate)
            {
                target.ProbationCompleteDate = source.ProbationCompleteDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTenuredSupported)
                && target.Tenured != source.Tenured)
            {
                target.Tenured = source.Tenured;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTenureTrackSupported)
                && target.TenureTrack != source.TenureTrack)
            {
                target.TenureTrack = source.TenureTrack;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // StaffSalary
            if (sourceSupport == null || sourceSupport.IsStaffSalarySupported)
            {
                if (source.StaffSalary == null)
                {
                    if (target.StaffSalary != null)
                    {
                        target.StaffSalary = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffSalary == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffSalary").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffSalary = (IStaffSalary) newItem;
                    }

                    isModified |= source.StaffSalary.Synchronize(target.StaffSalary);
                }
            }
            // StaffTeacherEducatorResearch
            if (sourceSupport == null || sourceSupport.IsStaffTeacherEducatorResearchSupported)
            {
                if (source.StaffTeacherEducatorResearch == null)
                {
                    if (target.StaffTeacherEducatorResearch != null)
                    {
                        target.StaffTeacherEducatorResearch = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.StaffTeacherEducatorResearch == null)
                    {
                        var itemType = target.GetType().GetProperty("StaffTeacherEducatorResearch").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.StaffTeacherEducatorResearch = (IStaffTeacherEducatorResearch) newItem;
                    }

                    isModified |= source.StaffTeacherEducatorResearch.Synchronize(target.StaffTeacherEducatorResearch);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffBackgroundChecksSupported)
            {
                isModified |= 
                    source.StaffBackgroundChecks.SynchronizeCollectionTo(
                        target.StaffBackgroundChecks, 
                        onChildAdded: child => 
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffBackgroundCheckIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported)
            {
                isModified |= 
                    source.StaffHighlyQualifiedAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffHighlyQualifiedAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffSenioritiesSupported)
            {
                isModified |= 
                    source.StaffSeniorities.SynchronizeCollectionTo(
                        target.StaffSeniorities, 
                        onChildAdded: child => 
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffSeniorityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffTeacherPreparationProgramsSupported)
            {
                isModified |= 
                    source.StaffTeacherPreparationPrograms.SynchronizeCollectionTo(
                        target.StaffTeacherPreparationPrograms, 
                        onChildAdded: child => 
                            {
                                child.StaffExtension = target;

                                // Extension class "children" need to reference the Ed-Fi Standard entity as the parent
                                (child as IChildEntity)?.SetParent(target.Staff);
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffTeacherPreparationProgramIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffExtension source, IStaffExtension target, Action<IStaffExtension, IStaffExtension> onMapped)
        {
            var sourceSynchSupport = source as IStaffExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsProbationCompleteDateSupported)
                target.ProbationCompleteDate = source.ProbationCompleteDate;
            else
                targetSynchSupport.IsProbationCompleteDateSupported = false;

            if (sourceSynchSupport.IsTenuredSupported)
                target.Tenured = source.Tenured;
            else
                targetSynchSupport.IsTenuredSupported = false;

            if (sourceSynchSupport.IsTenureTrackSupported)
                target.TenureTrack = source.TenureTrack;
            else
                targetSynchSupport.IsTenureTrackSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // StaffSalary (Source)
            if (sourceSynchSupport.IsStaffSalarySupported)
            {
                var itemProperty = target.GetType().GetProperty("StaffSalary");
                
                if (itemProperty != null)
                {                    
                    if (source.StaffSalary == null)
                    {
                        target.StaffSalary = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffSalary = Activator.CreateInstance(itemType);
                        (targetStaffSalary as IChildEntity)?.SetParent(target.Staff);
                        source.StaffSalary.Map(targetStaffSalary);
                        
                        // Update the target reference appropriately
                        target.StaffSalary = (IStaffSalary) targetStaffSalary;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStaffSalarySupported = false; 
            }
            // StaffTeacherEducatorResearch (Source)
            if (sourceSynchSupport.IsStaffTeacherEducatorResearchSupported)
            {
                var itemProperty = target.GetType().GetProperty("StaffTeacherEducatorResearch");
                
                if (itemProperty != null)
                {                    
                    if (source.StaffTeacherEducatorResearch == null)
                    {
                        target.StaffTeacherEducatorResearch = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetStaffTeacherEducatorResearch = Activator.CreateInstance(itemType);
                        (targetStaffTeacherEducatorResearch as IChildEntity)?.SetParent(target.Staff);
                        source.StaffTeacherEducatorResearch.Map(targetStaffTeacherEducatorResearch);
                        
                        // Update the target reference appropriately
                        target.StaffTeacherEducatorResearch = (IStaffTeacherEducatorResearch) targetStaffTeacherEducatorResearch;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsStaffTeacherEducatorResearchSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffBackgroundChecksSupported)
            {    
                targetSynchSupport.IsStaffBackgroundCheckIncluded = sourceSynchSupport.IsStaffBackgroundCheckIncluded;
                source.StaffBackgroundChecks.MapCollectionTo(target.StaffBackgroundChecks, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffBackgroundChecksSupported = false;
            }

            if (sourceSynchSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded = sourceSynchSupport.IsStaffHighlyQualifiedAcademicSubjectIncluded;
                source.StaffHighlyQualifiedAcademicSubjects.MapCollectionTo(target.StaffHighlyQualifiedAcademicSubjects, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffHighlyQualifiedAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsStaffSenioritiesSupported)
            {    
                targetSynchSupport.IsStaffSeniorityIncluded = sourceSynchSupport.IsStaffSeniorityIncluded;
                source.StaffSeniorities.MapCollectionTo(target.StaffSeniorities, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffSenioritiesSupported = false;
            }

            if (sourceSynchSupport.IsStaffTeacherPreparationProgramsSupported)
            {    
                targetSynchSupport.IsStaffTeacherPreparationProgramIncluded = sourceSynchSupport.IsStaffTeacherPreparationProgramIncluded;
                source.StaffTeacherPreparationPrograms.MapCollectionTo(target.StaffTeacherPreparationPrograms, target.Staff);
            }
            else
            {
                targetSynchSupport.IsStaffTeacherPreparationProgramsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffExtensionSynchronizationSourceSupport 
    {
        bool IsGenderDescriptorSupported { get; set; }
        bool IsProbationCompleteDateSupported { get; set; }
        bool IsStaffBackgroundChecksSupported { get; set; }
        bool IsStaffHighlyQualifiedAcademicSubjectsSupported { get; set; }
        bool IsStaffSalarySupported { get; set; }
        bool IsStaffSenioritiesSupported { get; set; }
        bool IsStaffTeacherEducatorResearchSupported { get; set; }
        bool IsStaffTeacherPreparationProgramsSupported { get; set; }
        bool IsTenuredSupported { get; set; }
        bool IsTenureTrackSupported { get; set; }
        Func<IStaffBackgroundCheck, bool> IsStaffBackgroundCheckIncluded { get; set; }
        Func<IStaffHighlyQualifiedAcademicSubject, bool> IsStaffHighlyQualifiedAcademicSubjectIncluded { get; set; }
        Func<IStaffSeniority, bool> IsStaffSeniorityIncluded { get; set; }
        Func<IStaffTeacherPreparationProgram, bool> IsStaffTeacherPreparationProgramIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffHighlyQualifiedAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IStaffHighlyQualifiedAcademicSubject source, IStaffHighlyQualifiedAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffHighlyQualifiedAcademicSubject source, IStaffHighlyQualifiedAcademicSubject target, Action<IStaffHighlyQualifiedAcademicSubject, IStaffHighlyQualifiedAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffHighlyQualifiedAcademicSubjectSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffSalaryMapper 
    {
        public static bool SynchronizeTo(this IStaffSalary source, IStaffSalary target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSalarySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsSalaryAmountSupported)
                && target.SalaryAmount != source.SalaryAmount)
            {
                target.SalaryAmount = source.SalaryAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryMaxRangeSupported)
                && target.SalaryMaxRange != source.SalaryMaxRange)
            {
                target.SalaryMaxRange = source.SalaryMaxRange;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryMinRangeSupported)
                && target.SalaryMinRange != source.SalaryMinRange)
            {
                target.SalaryMinRange = source.SalaryMinRange;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSalaryTypeDescriptorSupported)
                && target.SalaryTypeDescriptor != source.SalaryTypeDescriptor)
            {
                target.SalaryTypeDescriptor = source.SalaryTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffSalary source, IStaffSalary target, Action<IStaffSalary, IStaffSalary> onMapped)
        {
            var sourceSynchSupport = source as IStaffSalarySynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSalarySynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsSalaryAmountSupported)
                target.SalaryAmount = source.SalaryAmount;
            else
                targetSynchSupport.IsSalaryAmountSupported = false;

            if (sourceSynchSupport.IsSalaryMaxRangeSupported)
                target.SalaryMaxRange = source.SalaryMaxRange;
            else
                targetSynchSupport.IsSalaryMaxRangeSupported = false;

            if (sourceSynchSupport.IsSalaryMinRangeSupported)
                target.SalaryMinRange = source.SalaryMinRange;
            else
                targetSynchSupport.IsSalaryMinRangeSupported = false;

            if (sourceSynchSupport.IsSalaryTypeDescriptorSupported)
                target.SalaryTypeDescriptor = source.SalaryTypeDescriptor;
            else
                targetSynchSupport.IsSalaryTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSalarySynchronizationSourceSupport 
    {
        bool IsSalaryAmountSupported { get; set; }
        bool IsSalaryMaxRangeSupported { get; set; }
        bool IsSalaryMinRangeSupported { get; set; }
        bool IsSalaryTypeDescriptorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffSeniorityMapper 
    {
        public static bool SynchronizeTo(this IStaffSeniority source, IStaffSeniority target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffSenioritySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CredentialFieldDescriptor != target.CredentialFieldDescriptor)
            {
                source.CredentialFieldDescriptor = target.CredentialFieldDescriptor;
            }
            if (source.NameOfInstitution != target.NameOfInstitution)
            {
                source.NameOfInstitution = target.NameOfInstitution;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsYearsExperienceSupported)
                && target.YearsExperience != source.YearsExperience)
            {
                target.YearsExperience = source.YearsExperience;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffSeniority source, IStaffSeniority target, Action<IStaffSeniority, IStaffSeniority> onMapped)
        {
            var sourceSynchSupport = source as IStaffSenioritySynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffSenioritySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CredentialFieldDescriptor = source.CredentialFieldDescriptor;
            target.NameOfInstitution = source.NameOfInstitution;

            // Copy non-PK properties

            if (sourceSynchSupport.IsYearsExperienceSupported)
                target.YearsExperience = source.YearsExperience;
            else
                targetSynchSupport.IsYearsExperienceSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffSenioritySynchronizationSourceSupport 
    {
        bool IsYearsExperienceSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherEducatorResearchMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherEducatorResearch source, IStaffTeacherEducatorResearch target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherEducatorResearchSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceDateSupported)
                && target.ResearchExperienceDate != source.ResearchExperienceDate)
            {
                target.ResearchExperienceDate = source.ResearchExperienceDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceDescriptionSupported)
                && target.ResearchExperienceDescription != source.ResearchExperienceDescription)
            {
                target.ResearchExperienceDescription = source.ResearchExperienceDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsResearchExperienceTitleSupported)
                && target.ResearchExperienceTitle != source.ResearchExperienceTitle)
            {
                target.ResearchExperienceTitle = source.ResearchExperienceTitle;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherEducatorResearch source, IStaffTeacherEducatorResearch target, Action<IStaffTeacherEducatorResearch, IStaffTeacherEducatorResearch> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherEducatorResearchSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherEducatorResearchSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsResearchExperienceDateSupported)
                target.ResearchExperienceDate = source.ResearchExperienceDate;
            else
                targetSynchSupport.IsResearchExperienceDateSupported = false;

            if (sourceSynchSupport.IsResearchExperienceDescriptionSupported)
                target.ResearchExperienceDescription = source.ResearchExperienceDescription;
            else
                targetSynchSupport.IsResearchExperienceDescriptionSupported = false;

            if (sourceSynchSupport.IsResearchExperienceTitleSupported)
                target.ResearchExperienceTitle = source.ResearchExperienceTitle;
            else
                targetSynchSupport.IsResearchExperienceTitleSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherEducatorResearchSynchronizationSourceSupport 
    {
        bool IsResearchExperienceDateSupported { get; set; }
        bool IsResearchExperienceDescriptionSupported { get; set; }
        bool IsResearchExperienceTitleSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProgramMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProgram source, IStaffTeacherPreparationProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherPreparationProgramName != target.TeacherPreparationProgramName)
            {
                source.TeacherPreparationProgramName = target.TeacherPreparationProgramName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGPASupported)
                && target.GPA != source.GPA)
            {
                target.GPA = source.GPA;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLevelOfDegreeAwardedDescriptorSupported)
                && target.LevelOfDegreeAwardedDescriptor != source.LevelOfDegreeAwardedDescriptor)
            {
                target.LevelOfDegreeAwardedDescriptor = source.LevelOfDegreeAwardedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMajorSpecializationSupported)
                && target.MajorSpecialization != source.MajorSpecialization)
            {
                target.MajorSpecialization = source.MajorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramIdentifierSupported)
                && target.TeacherPreparationProgramIdentifier != source.TeacherPreparationProgramIdentifier)
            {
                target.TeacherPreparationProgramIdentifier = source.TeacherPreparationProgramIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                && target.TeacherPreparationProgramTypeDescriptor != source.TeacherPreparationProgramTypeDescriptor)
            {
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProgram source, IStaffTeacherPreparationProgram target, Action<IStaffTeacherPreparationProgram, IStaffTeacherPreparationProgram> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProgramSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TeacherPreparationProgramName = source.TeacherPreparationProgramName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGPASupported)
                target.GPA = source.GPA;
            else
                targetSynchSupport.IsGPASupported = false;

            if (sourceSynchSupport.IsLevelOfDegreeAwardedDescriptorSupported)
                target.LevelOfDegreeAwardedDescriptor = source.LevelOfDegreeAwardedDescriptor;
            else
                targetSynchSupport.IsLevelOfDegreeAwardedDescriptorSupported = false;

            if (sourceSynchSupport.IsMajorSpecializationSupported)
                target.MajorSpecialization = source.MajorSpecialization;
            else
                targetSynchSupport.IsMajorSpecializationSupported = false;

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramIdentifierSupported)
                target.TeacherPreparationProgramIdentifier = source.TeacherPreparationProgramIdentifier;
            else
                targetSynchSupport.IsTeacherPreparationProgramIdentifierSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
            else
                targetSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProgramSynchronizationSourceSupport 
    {
        bool IsGPASupported { get; set; }
        bool IsLevelOfDegreeAwardedDescriptorSupported { get; set; }
        bool IsMajorSpecializationSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsTeacherPreparationProgramIdentifierSupported { get; set; }
        bool IsTeacherPreparationProgramTypeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StaffApplicantAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffApplicantAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffApplicantAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffApplicantAssociation source, IStaffApplicantAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffApplicantAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ApplicantIdentifier != target.ApplicantIdentifier)
            {
                source.ApplicantIdentifier = target.ApplicantIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffApplicantAssociation source, IStaffApplicantAssociation target, Action<IStaffApplicantAssociation, IStaffApplicantAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffApplicantAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffApplicantAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ApplicantIdentifier = source.ApplicantIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicantResourceId = source.ApplicantResourceId;
                target.ApplicantDiscriminator = source.ApplicantDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffApplicantAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffEducationOrganizationAssignmentAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffEducationOrganizationAssignmentAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffEducationOrganizationAssignmentAssociationExtensionMapper 
    {
        public static bool SynchronizeTo(this IStaffEducationOrganizationAssignmentAssociationExtension source, IStaffEducationOrganizationAssignmentAssociationExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StaffEducationOrganizationAssignmentAssociation as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported)
                && target.YearsOfExperienceAtCurrentEducationOrganization != source.YearsOfExperienceAtCurrentEducationOrganization)
            {
                target.YearsOfExperienceAtCurrentEducationOrganization = source.YearsOfExperienceAtCurrentEducationOrganization;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffEducationOrganizationAssignmentAssociationExtension source, IStaffEducationOrganizationAssignmentAssociationExtension target, Action<IStaffEducationOrganizationAssignmentAssociationExtension, IStaffEducationOrganizationAssignmentAssociationExtension> onMapped)
        {
            var sourceSynchSupport = source as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported)
                target.YearsOfExperienceAtCurrentEducationOrganization = source.YearsOfExperienceAtCurrentEducationOrganization;
            else
                targetSynchSupport.IsYearsOfExperienceAtCurrentEducationOrganizationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffEducationOrganizationAssignmentAssociationExtensionSynchronizationSourceSupport 
    {
        bool IsYearsOfExperienceAtCurrentEducationOrganizationSupported { get; set; }
    }
 
}
// Aggregate: StaffProspectAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffProspectAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffProspectAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffProspectAssociation source, IStaffProspectAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffProspectAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProspectIdentifier != target.ProspectIdentifier)
            {
                source.ProspectIdentifier = target.ProspectIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffProspectAssociation source, IStaffProspectAssociation target, Action<IStaffProspectAssociation, IStaffProspectAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffProspectAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffProspectAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProspectIdentifier = source.ProspectIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ProspectResourceId = source.ProspectResourceId;
                target.ProspectDiscriminator = source.ProspectDiscriminator;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffProspectAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffStudentGrowthMeasure

namespace EdFi.Ods.Entities.Common.TPDM //.StaffStudentGrowthMeasureAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasure source, IStaffStudentGrowthMeasure target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffStudentGrowthMeasureIdentifier != target.StaffStudentGrowthMeasureIdentifier)
            {
                source.StaffStudentGrowthMeasureIdentifier = target.StaffStudentGrowthMeasureIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStandardErrorSupported)
                && target.StandardError != source.StandardError)
            {
                target.StandardError = source.StandardError;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthActualScoreSupported)
                && target.StudentGrowthActualScore != source.StudentGrowthActualScore)
            {
                target.StudentGrowthActualScore = source.StudentGrowthActualScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthMeasureDateSupported)
                && target.StudentGrowthMeasureDate != source.StudentGrowthMeasureDate)
            {
                target.StudentGrowthMeasureDate = source.StudentGrowthMeasureDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthMetSupported)
                && target.StudentGrowthMet != source.StudentGrowthMet)
            {
                target.StudentGrowthMet = source.StudentGrowthMet;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthNCountSupported)
                && target.StudentGrowthNCount != source.StudentGrowthNCount)
            {
                target.StudentGrowthNCount = source.StudentGrowthNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthTargetScoreSupported)
                && target.StudentGrowthTargetScore != source.StudentGrowthTargetScore)
            {
                target.StudentGrowthTargetScore = source.StudentGrowthTargetScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthTypeDescriptorSupported)
                && target.StudentGrowthTypeDescriptor != source.StudentGrowthTypeDescriptor)
            {
                target.StudentGrowthTypeDescriptor = source.StudentGrowthTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffStudentGrowthMeasureAcademicSubjectsSupported)
            {
                isModified |= 
                    source.StaffStudentGrowthMeasureAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffStudentGrowthMeasureAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.StaffStudentGrowthMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffStudentGrowthMeasureAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffStudentGrowthMeasureGradeLevelsSupported)
            {
                isModified |= 
                    source.StaffStudentGrowthMeasureGradeLevels.SynchronizeCollectionTo(
                        target.StaffStudentGrowthMeasureGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.StaffStudentGrowthMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffStudentGrowthMeasureGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasure source, IStaffStudentGrowthMeasure target, Action<IStaffStudentGrowthMeasure, IStaffStudentGrowthMeasure> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.StaffStudentGrowthMeasureIdentifier = source.StaffStudentGrowthMeasureIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsStandardErrorSupported)
                target.StandardError = source.StandardError;
            else
                targetSynchSupport.IsStandardErrorSupported = false;

            if (sourceSynchSupport.IsStudentGrowthActualScoreSupported)
                target.StudentGrowthActualScore = source.StudentGrowthActualScore;
            else
                targetSynchSupport.IsStudentGrowthActualScoreSupported = false;

            if (sourceSynchSupport.IsStudentGrowthMeasureDateSupported)
                target.StudentGrowthMeasureDate = source.StudentGrowthMeasureDate;
            else
                targetSynchSupport.IsStudentGrowthMeasureDateSupported = false;

            if (sourceSynchSupport.IsStudentGrowthMetSupported)
                target.StudentGrowthMet = source.StudentGrowthMet;
            else
                targetSynchSupport.IsStudentGrowthMetSupported = false;

            if (sourceSynchSupport.IsStudentGrowthNCountSupported)
                target.StudentGrowthNCount = source.StudentGrowthNCount;
            else
                targetSynchSupport.IsStudentGrowthNCountSupported = false;

            if (sourceSynchSupport.IsStudentGrowthTargetScoreSupported)
                target.StudentGrowthTargetScore = source.StudentGrowthTargetScore;
            else
                targetSynchSupport.IsStudentGrowthTargetScoreSupported = false;

            if (sourceSynchSupport.IsStudentGrowthTypeDescriptorSupported)
                target.StudentGrowthTypeDescriptor = source.StudentGrowthTypeDescriptor;
            else
                targetSynchSupport.IsStudentGrowthTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffStudentGrowthMeasureAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsStaffStudentGrowthMeasureAcademicSubjectIncluded = sourceSynchSupport.IsStaffStudentGrowthMeasureAcademicSubjectIncluded;
                source.StaffStudentGrowthMeasureAcademicSubjects.MapCollectionTo(target.StaffStudentGrowthMeasureAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsStaffStudentGrowthMeasureAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsStaffStudentGrowthMeasureGradeLevelsSupported)
            {    
                targetSynchSupport.IsStaffStudentGrowthMeasureGradeLevelIncluded = sourceSynchSupport.IsStaffStudentGrowthMeasureGradeLevelIncluded;
                source.StaffStudentGrowthMeasureGradeLevels.MapCollectionTo(target.StaffStudentGrowthMeasureGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsStaffStudentGrowthMeasureGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
        bool IsStaffStudentGrowthMeasureAcademicSubjectsSupported { get; set; }
        bool IsStaffStudentGrowthMeasureGradeLevelsSupported { get; set; }
        bool IsStandardErrorSupported { get; set; }
        bool IsStudentGrowthActualScoreSupported { get; set; }
        bool IsStudentGrowthMeasureDateSupported { get; set; }
        bool IsStudentGrowthMetSupported { get; set; }
        bool IsStudentGrowthNCountSupported { get; set; }
        bool IsStudentGrowthTargetScoreSupported { get; set; }
        bool IsStudentGrowthTypeDescriptorSupported { get; set; }
        Func<IStaffStudentGrowthMeasureAcademicSubject, bool> IsStaffStudentGrowthMeasureAcademicSubjectIncluded { get; set; }
        Func<IStaffStudentGrowthMeasureGradeLevel, bool> IsStaffStudentGrowthMeasureGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureAcademicSubject source, IStaffStudentGrowthMeasureAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureAcademicSubject source, IStaffStudentGrowthMeasureAcademicSubject target, Action<IStaffStudentGrowthMeasureAcademicSubject, IStaffStudentGrowthMeasureAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureGradeLevel source, IStaffStudentGrowthMeasureGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureGradeLevel source, IStaffStudentGrowthMeasureGradeLevel target, Action<IStaffStudentGrowthMeasureGradeLevel, IStaffStudentGrowthMeasureGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffStudentGrowthMeasureCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffStudentGrowthMeasureCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureCourseAssociation source, IStaffStudentGrowthMeasureCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffStudentGrowthMeasureIdentifier != target.StaffStudentGrowthMeasureIdentifier)
            {
                source.StaffStudentGrowthMeasureIdentifier = target.StaffStudentGrowthMeasureIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureCourseAssociation source, IStaffStudentGrowthMeasureCourseAssociation target, Action<IStaffStudentGrowthMeasureCourseAssociation, IStaffStudentGrowthMeasureCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.StaffStudentGrowthMeasureIdentifier = source.StaffStudentGrowthMeasureIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.StaffStudentGrowthMeasureResourceId = source.StaffStudentGrowthMeasureResourceId;
                target.StaffStudentGrowthMeasureDiscriminator = source.StaffStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: StaffStudentGrowthMeasureEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffStudentGrowthMeasureEducationOrganizationAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureEducationOrganizationAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureEducationOrganizationAssociation source, IStaffStudentGrowthMeasureEducationOrganizationAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.StaffStudentGrowthMeasureIdentifier != target.StaffStudentGrowthMeasureIdentifier)
            {
                source.StaffStudentGrowthMeasureIdentifier = target.StaffStudentGrowthMeasureIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureEducationOrganizationAssociation source, IStaffStudentGrowthMeasureEducationOrganizationAssociation target, Action<IStaffStudentGrowthMeasureEducationOrganizationAssociation, IStaffStudentGrowthMeasureEducationOrganizationAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.StaffStudentGrowthMeasureIdentifier = source.StaffStudentGrowthMeasureIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.StaffStudentGrowthMeasureResourceId = source.StaffStudentGrowthMeasureResourceId;
                target.StaffStudentGrowthMeasureDiscriminator = source.StaffStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: StaffStudentGrowthMeasureSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffStudentGrowthMeasureSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffStudentGrowthMeasureSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffStudentGrowthMeasureSectionAssociation source, IStaffStudentGrowthMeasureSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.StaffStudentGrowthMeasureIdentifier != target.StaffStudentGrowthMeasureIdentifier)
            {
                source.StaffStudentGrowthMeasureIdentifier = target.StaffStudentGrowthMeasureIdentifier;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffStudentGrowthMeasureSectionAssociation source, IStaffStudentGrowthMeasureSectionAssociation target, Action<IStaffStudentGrowthMeasureSectionAssociation, IStaffStudentGrowthMeasureSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.StaffStudentGrowthMeasureIdentifier = source.StaffStudentGrowthMeasureIdentifier;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.StaffStudentGrowthMeasureResourceId = source.StaffStudentGrowthMeasureResourceId;
                target.StaffStudentGrowthMeasureDiscriminator = source.StaffStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: StaffTeacherPreparationProviderAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffTeacherPreparationProviderAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProviderAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProviderAssociation source, IStaffTeacherPreparationProviderAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }
            if (source.TeacherPreparationProviderId != target.TeacherPreparationProviderId)
            {
                source.TeacherPreparationProviderId = target.TeacherPreparationProviderId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsProgramAssignmentDescriptorSupported)
                && target.ProgramAssignmentDescriptor != source.ProgramAssignmentDescriptor)
            {
                target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported)
            {
                isModified |= 
                    source.StaffTeacherPreparationProviderAssociationAcademicSubjects.SynchronizeCollectionTo(
                        target.StaffTeacherPreparationProviderAssociationAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.StaffTeacherPreparationProviderAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported)
            {
                isModified |= 
                    source.StaffTeacherPreparationProviderAssociationGradeLevels.SynchronizeCollectionTo(
                        target.StaffTeacherPreparationProviderAssociationGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.StaffTeacherPreparationProviderAssociation = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProviderAssociation source, IStaffTeacherPreparationProviderAssociation target, Action<IStaffTeacherPreparationProviderAssociation, IStaffTeacherPreparationProviderAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;
            target.TeacherPreparationProviderId = source.TeacherPreparationProviderId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsProgramAssignmentDescriptorSupported)
                target.ProgramAssignmentDescriptor = source.ProgramAssignmentDescriptor;
            else
                targetSynchSupport.IsProgramAssignmentDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherPreparationProviderResourceId = source.TeacherPreparationProviderResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded = sourceSynchSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded;
                source.StaffTeacherPreparationProviderAssociationAcademicSubjects.MapCollectionTo(target.StaffTeacherPreparationProviderAssociationAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported)
            {    
                targetSynchSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded = sourceSynchSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded;
                source.StaffTeacherPreparationProviderAssociationGradeLevels.MapCollectionTo(target.StaffTeacherPreparationProviderAssociationGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProviderAssociationSynchronizationSourceSupport 
    {
        bool IsProgramAssignmentDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsStaffTeacherPreparationProviderAssociationAcademicSubjectsSupported { get; set; }
        bool IsStaffTeacherPreparationProviderAssociationGradeLevelsSupported { get; set; }
        Func<IStaffTeacherPreparationProviderAssociationAcademicSubject, bool> IsStaffTeacherPreparationProviderAssociationAcademicSubjectIncluded { get; set; }
        Func<IStaffTeacherPreparationProviderAssociationGradeLevel, bool> IsStaffTeacherPreparationProviderAssociationGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProviderAssociationAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProviderAssociationAcademicSubject source, IStaffTeacherPreparationProviderAssociationAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProviderAssociationAcademicSubject source, IStaffTeacherPreparationProviderAssociationAcademicSubject target, Action<IStaffTeacherPreparationProviderAssociationAcademicSubject, IStaffTeacherPreparationProviderAssociationAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProviderAssociationAcademicSubjectSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProviderAssociationGradeLevelMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProviderAssociationGradeLevel source, IStaffTeacherPreparationProviderAssociationGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProviderAssociationGradeLevel source, IStaffTeacherPreparationProviderAssociationGradeLevel target, Action<IStaffTeacherPreparationProviderAssociationGradeLevel, IStaffTeacherPreparationProviderAssociationGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProviderAssociationGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: StaffTeacherPreparationProviderProgramAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.StaffTeacherPreparationProviderProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StaffTeacherPreparationProviderProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this IStaffTeacherPreparationProviderProgramAssociation source, IStaffTeacherPreparationProviderProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentRecordAccessSupported)
                && target.StudentRecordAccess != source.StudentRecordAccess)
            {
                target.StudentRecordAccess = source.StudentRecordAccess;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStaffTeacherPreparationProviderProgramAssociation source, IStaffTeacherPreparationProviderProgramAssociation target, Action<IStaffTeacherPreparationProviderProgramAssociation, IStaffTeacherPreparationProviderProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.StaffUniqueId = source.StaffUniqueId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsStudentRecordAccessSupported)
                target.StudentRecordAccess = source.StudentRecordAccess;
            else
                targetSynchSupport.IsStudentRecordAccessSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherPreparationProviderProgramResourceId = source.TeacherPreparationProviderProgramResourceId;
                target.TeacherPreparationProviderProgramDiscriminator = source.TeacherPreparationProviderProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStaffTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsStudentRecordAccessSupported { get; set; }
    }
 
}
// Aggregate: StateEducationAgency

namespace EdFi.Ods.Entities.Common.TPDM //.StateEducationAgencyAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StateEducationAgencyExtensionMapper 
    {
        public static bool SynchronizeTo(this IStateEducationAgencyExtension source, IStateEducationAgencyExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStateEducationAgencyExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StateEducationAgency as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStateEducationAgencyExtension source, IStateEducationAgencyExtension target, Action<IStateEducationAgencyExtension, IStateEducationAgencyExtension> onMapped)
        {
            var sourceSynchSupport = source as IStateEducationAgencyExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStateEducationAgencyExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStateEducationAgencyExtensionSynchronizationSourceSupport 
    {
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
    }
 
}
// Aggregate: StudentGradebookEntry

namespace EdFi.Ods.Entities.Common.TPDM //.StudentGradebookEntryAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentGradebookEntryExtensionMapper 
    {
        public static bool SynchronizeTo(this IStudentGradebookEntryExtension source, IStudentGradebookEntryExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentGradebookEntryExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.StudentGradebookEntry as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAssignmentPassedSupported)
                && target.AssignmentPassed != source.AssignmentPassed)
            {
                target.AssignmentPassed = source.AssignmentPassed;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateCompletedSupported)
                && target.DateCompleted != source.DateCompleted)
            {
                target.DateCompleted = source.DateCompleted;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStudentGradebookEntryExtension source, IStudentGradebookEntryExtension target, Action<IStudentGradebookEntryExtension, IStudentGradebookEntryExtension> onMapped)
        {
            var sourceSynchSupport = source as IStudentGradebookEntryExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentGradebookEntryExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsAssignmentPassedSupported)
                target.AssignmentPassed = source.AssignmentPassed;
            else
                targetSynchSupport.IsAssignmentPassedSupported = false;

            if (sourceSynchSupport.IsDateCompletedSupported)
                target.DateCompleted = source.DateCompleted;
            else
                targetSynchSupport.IsDateCompletedSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentGradebookEntryExtensionSynchronizationSourceSupport 
    {
        bool IsAssignmentPassedSupported { get; set; }
        bool IsDateCompletedSupported { get; set; }
    }
 
}
// Aggregate: StudentGrowthTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.StudentGrowthTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class StudentGrowthTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IStudentGrowthTypeDescriptor source, IStudentGrowthTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IStudentGrowthTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentGrowthTypeDescriptorId != target.StudentGrowthTypeDescriptorId)
            {
                source.StudentGrowthTypeDescriptorId = target.StudentGrowthTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IStudentGrowthTypeDescriptor source, IStudentGrowthTypeDescriptor target, Action<IStudentGrowthTypeDescriptor, IStudentGrowthTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IStudentGrowthTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IStudentGrowthTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StudentGrowthTypeDescriptorId = source.StudentGrowthTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IStudentGrowthTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: SurveyResponse

namespace EdFi.Ods.Entities.Common.TPDM //.SurveyResponseAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseExtensionMapper 
    {
        public static bool SynchronizeTo(this ISurveyResponseExtension source, ISurveyResponseExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyResponseExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.SurveyResponse as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApplicantIdentifierSupported)
                && target.ApplicantIdentifier != source.ApplicantIdentifier)
            {
                target.ApplicantIdentifier = source.ApplicantIdentifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherCandidateIdentifierSupported)
                && target.TeacherCandidateIdentifier != source.TeacherCandidateIdentifier)
            {
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveyResponseExtension source, ISurveyResponseExtension target, Action<ISurveyResponseExtension, ISurveyResponseExtension> onMapped)
        {
            var sourceSynchSupport = source as ISurveyResponseExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyResponseExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsApplicantIdentifierSupported)
                target.ApplicantIdentifier = source.ApplicantIdentifier;
            else
                targetSynchSupport.IsApplicantIdentifierSupported = false;

            if (sourceSynchSupport.IsTeacherCandidateIdentifierSupported)
                target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            else
                targetSynchSupport.IsTeacherCandidateIdentifierSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ApplicantResourceId = source.ApplicantResourceId;
                target.ApplicantDiscriminator = source.ApplicantDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyResponseExtensionSynchronizationSourceSupport 
    {
        bool IsApplicantIdentifierSupported { get; set; }
        bool IsTeacherCandidateIdentifierSupported { get; set; }
    }
 
}
// Aggregate: SurveyResponseTeacherCandidateTargetAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.SurveyResponseTeacherCandidateTargetAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveyResponseTeacherCandidateTargetAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveyResponseTeacherCandidateTargetAssociation source, ISurveyResponseTeacherCandidateTargetAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveyResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveyResponseTeacherCandidateTargetAssociation source, ISurveyResponseTeacherCandidateTargetAssociation target, Action<ISurveyResponseTeacherCandidateTargetAssociation, ISurveyResponseTeacherCandidateTargetAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveyResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveyResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveyResponseResourceId = source.SurveyResponseResourceId;
                target.SurveyResponseDiscriminator = source.SurveyResponseDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveyResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: SurveySection

namespace EdFi.Ods.Entities.Common.TPDM //.SurveySectionAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveySectionExtensionMapper 
    {
        public static bool SynchronizeTo(this ISurveySectionExtension source, ISurveySectionExtension target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionExtensionSynchronizationSourceSupport;

            var sourceExtensionSupport = source.SurveySection as IExtensionsSynchronizationSourceSupport;

            if (!sourceExtensionSupport.IsExtensionAvailable("TPDM"))
                return false;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEducationOrganizationIdSupported)
                && target.EducationOrganizationId != source.EducationOrganizationId)
            {
                target.EducationOrganizationId = source.EducationOrganizationId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationElementTitleSupported)
                && target.EvaluationElementTitle != source.EvaluationElementTitle)
            {
                target.EvaluationElementTitle = source.EvaluationElementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationObjectiveTitleSupported)
                && target.EvaluationObjectiveTitle != source.EvaluationObjectiveTitle)
            {
                target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationPeriodDescriptorSupported)
                && target.EvaluationPeriodDescriptor != source.EvaluationPeriodDescriptor)
            {
                target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvaluationTitleSupported)
                && target.EvaluationTitle != source.EvaluationTitle)
            {
                target.EvaluationTitle = source.EvaluationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationTitleSupported)
                && target.PerformanceEvaluationTitle != source.PerformanceEvaluationTitle)
            {
                target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPerformanceEvaluationTypeDescriptorSupported)
                && target.PerformanceEvaluationTypeDescriptor != source.PerformanceEvaluationTypeDescriptor)
            {
                target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTermDescriptorSupported)
                && target.TermDescriptor != source.TermDescriptor)
            {
                target.TermDescriptor = source.TermDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveySectionExtension source, ISurveySectionExtension target, Action<ISurveySectionExtension, ISurveySectionExtension> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionExtensionSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionExtensionSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsEducationOrganizationIdSupported)
                target.EducationOrganizationId = source.EducationOrganizationId;
            else
                targetSynchSupport.IsEducationOrganizationIdSupported = false;

            if (sourceSynchSupport.IsEvaluationElementTitleSupported)
                target.EvaluationElementTitle = source.EvaluationElementTitle;
            else
                targetSynchSupport.IsEvaluationElementTitleSupported = false;

            if (sourceSynchSupport.IsEvaluationObjectiveTitleSupported)
                target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            else
                targetSynchSupport.IsEvaluationObjectiveTitleSupported = false;

            if (sourceSynchSupport.IsEvaluationPeriodDescriptorSupported)
                target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            else
                targetSynchSupport.IsEvaluationPeriodDescriptorSupported = false;

            if (sourceSynchSupport.IsEvaluationTitleSupported)
                target.EvaluationTitle = source.EvaluationTitle;
            else
                targetSynchSupport.IsEvaluationTitleSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationTitleSupported)
                target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            else
                targetSynchSupport.IsPerformanceEvaluationTitleSupported = false;

            if (sourceSynchSupport.IsPerformanceEvaluationTypeDescriptorSupported)
                target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            else
                targetSynchSupport.IsPerformanceEvaluationTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            if (sourceSynchSupport.IsTermDescriptorSupported)
                target.TermDescriptor = source.TermDescriptor;
            else
                targetSynchSupport.IsTermDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementResourceId = source.EvaluationElementResourceId;
                target.EvaluationElementDiscriminator = source.EvaluationElementDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionExtensionSynchronizationSourceSupport 
    {
        bool IsEducationOrganizationIdSupported { get; set; }
        bool IsEvaluationElementTitleSupported { get; set; }
        bool IsEvaluationObjectiveTitleSupported { get; set; }
        bool IsEvaluationPeriodDescriptorSupported { get; set; }
        bool IsEvaluationTitleSupported { get; set; }
        bool IsPerformanceEvaluationTitleSupported { get; set; }
        bool IsPerformanceEvaluationTypeDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
        bool IsTermDescriptorSupported { get; set; }
    }
 
}
// Aggregate: SurveySectionAggregateResponse

namespace EdFi.Ods.Entities.Common.TPDM //.SurveySectionAggregateResponseAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveySectionAggregateResponseMapper 
    {
        public static bool SynchronizeTo(this ISurveySectionAggregateResponse source, ISurveySectionAggregateResponse target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionAggregateResponseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.EvaluationDate != target.EvaluationDate)
            {
                source.EvaluationDate = target.EvaluationDate;
            }
            if (source.EvaluationElementTitle != target.EvaluationElementTitle)
            {
                source.EvaluationElementTitle = target.EvaluationElementTitle;
            }
            if (source.EvaluationObjectiveTitle != target.EvaluationObjectiveTitle)
            {
                source.EvaluationObjectiveTitle = target.EvaluationObjectiveTitle;
            }
            if (source.EvaluationPeriodDescriptor != target.EvaluationPeriodDescriptor)
            {
                source.EvaluationPeriodDescriptor = target.EvaluationPeriodDescriptor;
            }
            if (source.EvaluationTitle != target.EvaluationTitle)
            {
                source.EvaluationTitle = target.EvaluationTitle;
            }
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.PerformanceEvaluationTitle != target.PerformanceEvaluationTitle)
            {
                source.PerformanceEvaluationTitle = target.PerformanceEvaluationTitle;
            }
            if (source.PerformanceEvaluationTypeDescriptor != target.PerformanceEvaluationTypeDescriptor)
            {
                source.PerformanceEvaluationTypeDescriptor = target.PerformanceEvaluationTypeDescriptor;
            }
            if (source.PersonId != target.PersonId)
            {
                source.PersonId = target.PersonId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SourceSystemDescriptor != target.SourceSystemDescriptor)
            {
                source.SourceSystemDescriptor = target.SourceSystemDescriptor;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveySectionTitle != target.SurveySectionTitle)
            {
                source.SurveySectionTitle = target.SurveySectionTitle;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsScoreValueSupported)
                && target.ScoreValue != source.ScoreValue)
            {
                target.ScoreValue = source.ScoreValue;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveySectionAggregateResponse source, ISurveySectionAggregateResponse target, Action<ISurveySectionAggregateResponse, ISurveySectionAggregateResponse> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionAggregateResponseSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionAggregateResponseSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.EvaluationDate = source.EvaluationDate;
            target.EvaluationElementTitle = source.EvaluationElementTitle;
            target.EvaluationObjectiveTitle = source.EvaluationObjectiveTitle;
            target.EvaluationPeriodDescriptor = source.EvaluationPeriodDescriptor;
            target.EvaluationTitle = source.EvaluationTitle;
            target.Namespace = source.Namespace;
            target.PerformanceEvaluationTitle = source.PerformanceEvaluationTitle;
            target.PerformanceEvaluationTypeDescriptor = source.PerformanceEvaluationTypeDescriptor;
            target.PersonId = source.PersonId;
            target.SchoolYear = source.SchoolYear;
            target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsScoreValueSupported)
                target.ScoreValue = source.ScoreValue;
            else
                targetSynchSupport.IsScoreValueSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EvaluationElementRatingResourceId = source.EvaluationElementRatingResourceId;
                target.EvaluationElementRatingDiscriminator = source.EvaluationElementRatingDiscriminator;
                target.SurveySectionResourceId = source.SurveySectionResourceId;
                target.SurveySectionDiscriminator = source.SurveySectionDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionAggregateResponseSynchronizationSourceSupport 
    {
        bool IsScoreValueSupported { get; set; }
    }
 
}
// Aggregate: SurveySectionResponseTeacherCandidateTargetAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.SurveySectionResponseTeacherCandidateTargetAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class SurveySectionResponseTeacherCandidateTargetAssociationMapper 
    {
        public static bool SynchronizeTo(this ISurveySectionResponseTeacherCandidateTargetAssociation source, ISurveySectionResponseTeacherCandidateTargetAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ISurveySectionResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.Namespace != target.Namespace)
            {
                source.Namespace = target.Namespace;
            }
            if (source.SurveyIdentifier != target.SurveyIdentifier)
            {
                source.SurveyIdentifier = target.SurveyIdentifier;
            }
            if (source.SurveyResponseIdentifier != target.SurveyResponseIdentifier)
            {
                source.SurveyResponseIdentifier = target.SurveyResponseIdentifier;
            }
            if (source.SurveySectionTitle != target.SurveySectionTitle)
            {
                source.SurveySectionTitle = target.SurveySectionTitle;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ISurveySectionResponseTeacherCandidateTargetAssociation source, ISurveySectionResponseTeacherCandidateTargetAssociation target, Action<ISurveySectionResponseTeacherCandidateTargetAssociation, ISurveySectionResponseTeacherCandidateTargetAssociation> onMapped)
        {
            var sourceSynchSupport = source as ISurveySectionResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ISurveySectionResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.Namespace = source.Namespace;
            target.SurveyIdentifier = source.SurveyIdentifier;
            target.SurveyResponseIdentifier = source.SurveyResponseIdentifier;
            target.SurveySectionTitle = source.SurveySectionTitle;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SurveySectionResponseResourceId = source.SurveySectionResponseResourceId;
                target.SurveySectionResponseDiscriminator = source.SurveySectionResponseDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ISurveySectionResponseTeacherCandidateTargetAssociationSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TeacherCandidate

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidate source, ITeacherCandidate target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBirthCitySupported)
                && target.BirthCity != source.BirthCity)
            {
                target.BirthCity = source.BirthCity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthCountryDescriptorSupported)
                && target.BirthCountryDescriptor != source.BirthCountryDescriptor)
            {
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthDateSupported)
                && target.BirthDate != source.BirthDate)
            {
                target.BirthDate = source.BirthDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthInternationalProvinceSupported)
                && target.BirthInternationalProvince != source.BirthInternationalProvince)
            {
                target.BirthInternationalProvince = source.BirthInternationalProvince;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthSexDescriptorSupported)
                && target.BirthSexDescriptor != source.BirthSexDescriptor)
            {
                target.BirthSexDescriptor = source.BirthSexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBirthStateAbbreviationDescriptorSupported)
                && target.BirthStateAbbreviationDescriptor != source.BirthStateAbbreviationDescriptor)
            {
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCitizenshipStatusDescriptorSupported)
                && target.CitizenshipStatusDescriptor != source.CitizenshipStatusDescriptor)
            {
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDateEnteredUSSupported)
                && target.DateEnteredUS != source.DateEnteredUS)
            {
                target.DateEnteredUS = source.DateEnteredUS;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisplacementStatusSupported)
                && target.DisplacementStatus != source.DisplacementStatus)
            {
                target.DisplacementStatus = source.DisplacementStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEconomicDisadvantagedSupported)
                && target.EconomicDisadvantaged != source.EconomicDisadvantaged)
            {
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEnglishLanguageExamDescriptorSupported)
                && target.EnglishLanguageExamDescriptor != source.EnglishLanguageExamDescriptor)
            {
                target.EnglishLanguageExamDescriptor = source.EnglishLanguageExamDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstGenerationStudentSupported)
                && target.FirstGenerationStudent != source.FirstGenerationStudent)
            {
                target.FirstGenerationStudent = source.FirstGenerationStudent;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenderDescriptorSupported)
                && target.GenderDescriptor != source.GenderDescriptor)
            {
                target.GenderDescriptor = source.GenderDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHispanicLatinoEthnicitySupported)
                && target.HispanicLatinoEthnicity != source.HispanicLatinoEthnicity)
            {
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLimitedEnglishProficiencyDescriptorSupported)
                && target.LimitedEnglishProficiencyDescriptor != source.LimitedEnglishProficiencyDescriptor)
            {
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLoginIdSupported)
                && target.LoginId != source.LoginId)
            {
                target.LoginId = source.LoginId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaidenNameSupported)
                && target.MaidenName != source.MaidenName)
            {
                target.MaidenName = source.MaidenName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMultipleBirthStatusSupported)
                && target.MultipleBirthStatus != source.MultipleBirthStatus)
            {
                target.MultipleBirthStatus = source.MultipleBirthStatus;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOldEthnicityDescriptorSupported)
                && target.OldEthnicityDescriptor != source.OldEthnicityDescriptor)
            {
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonIdSupported)
                && target.PersonId != source.PersonId)
            {
                target.PersonId = source.PersonId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPreviousCareerDescriptorSupported)
                && target.PreviousCareerDescriptor != source.PreviousCareerDescriptor)
            {
                target.PreviousCareerDescriptor = source.PreviousCareerDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProfileThumbnailSupported)
                && target.ProfileThumbnail != source.ProfileThumbnail)
            {
                target.ProfileThumbnail = source.ProfileThumbnail;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramCompleteSupported)
                && target.ProgramComplete != source.ProgramComplete)
            {
                target.ProgramComplete = source.ProgramComplete;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSexDescriptorSupported)
                && target.SexDescriptor != source.SexDescriptor)
            {
                target.SexDescriptor = source.SexDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSourceSystemDescriptorSupported)
                && target.SourceSystemDescriptor != source.SourceSystemDescriptor)
            {
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentUniqueIdSupported)
                && target.StudentUniqueId != source.StudentUniqueId)
            {
                target.StudentUniqueId = source.StudentUniqueId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTuitionCostSupported)
                && target.TuitionCost != source.TuitionCost)
            {
                target.TuitionCost = source.TuitionCost;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // TeacherCandidateBackgroundCheck
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateBackgroundCheckSupported)
            {
                if (source.TeacherCandidateBackgroundCheck == null)
                {
                    if (target.TeacherCandidateBackgroundCheck != null)
                    {
                        target.TeacherCandidateBackgroundCheck = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.TeacherCandidateBackgroundCheck == null)
                    {
                        var itemType = target.GetType().GetProperty("TeacherCandidateBackgroundCheck").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.TeacherCandidateBackgroundCheck = (ITeacherCandidateBackgroundCheck) newItem;
                    }

                    isModified |= source.TeacherCandidateBackgroundCheck.Synchronize(target.TeacherCandidateBackgroundCheck);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAddressesSupported)
            {
                isModified |= 
                    source.TeacherCandidateAddresses.SynchronizeCollectionTo(
                        target.TeacherCandidateAddresses, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAidsSupported)
            {
                isModified |= 
                    source.TeacherCandidateAids.SynchronizeCollectionTo(
                        target.TeacherCandidateAids, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAidIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateCharacteristicsSupported)
            {
                isModified |= 
                    source.TeacherCandidateCharacteristics.SynchronizeCollectionTo(
                        target.TeacherCandidateCharacteristics, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateCharacteristicIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateCohortYearsSupported)
            {
                isModified |= 
                    source.TeacherCandidateCohortYears.SynchronizeCollectionTo(
                        target.TeacherCandidateCohortYears, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateCohortYearIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateDegreeSpecializationsSupported)
            {
                isModified |= 
                    source.TeacherCandidateDegreeSpecializations.SynchronizeCollectionTo(
                        target.TeacherCandidateDegreeSpecializations, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateDegreeSpecializationIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateDisabilitiesSupported)
            {
                isModified |= 
                    source.TeacherCandidateDisabilities.SynchronizeCollectionTo(
                        target.TeacherCandidateDisabilities, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateDisabilityIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateElectronicMailsSupported)
            {
                isModified |= 
                    source.TeacherCandidateElectronicMails.SynchronizeCollectionTo(
                        target.TeacherCandidateElectronicMails, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateElectronicMailIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateIdentificationCodesSupported)
            {
                isModified |= 
                    source.TeacherCandidateIdentificationCodes.SynchronizeCollectionTo(
                        target.TeacherCandidateIdentificationCodes, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateIdentificationCodeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.TeacherCandidateIdentificationDocuments.SynchronizeCollectionTo(
                        target.TeacherCandidateIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateIndicatorsSupported)
            {
                isModified |= 
                    source.TeacherCandidateIndicators.SynchronizeCollectionTo(
                        target.TeacherCandidateIndicators, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateIndicatorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateInternationalAddressesSupported)
            {
                isModified |= 
                    source.TeacherCandidateInternationalAddresses.SynchronizeCollectionTo(
                        target.TeacherCandidateInternationalAddresses, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateInternationalAddressIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateLanguagesSupported)
            {
                isModified |= 
                    source.TeacherCandidateLanguages.SynchronizeCollectionTo(
                        target.TeacherCandidateLanguages, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateLanguageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateOtherNamesSupported)
            {
                isModified |= 
                    source.TeacherCandidateOtherNames.SynchronizeCollectionTo(
                        target.TeacherCandidateOtherNames, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateOtherNameIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidatePersonalIdentificationDocumentsSupported)
            {
                isModified |= 
                    source.TeacherCandidatePersonalIdentificationDocuments.SynchronizeCollectionTo(
                        target.TeacherCandidatePersonalIdentificationDocuments, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidatePersonalIdentificationDocumentIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateRacesSupported)
            {
                isModified |= 
                    source.TeacherCandidateRaces.SynchronizeCollectionTo(
                        target.TeacherCandidateRaces, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateRaceIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateTelephonesSupported)
            {
                isModified |= 
                    source.TeacherCandidateTelephones.SynchronizeCollectionTo(
                        target.TeacherCandidateTelephones, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateTelephoneIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateTPPProgramDegreesSupported)
            {
                isModified |= 
                    source.TeacherCandidateTPPProgramDegrees.SynchronizeCollectionTo(
                        target.TeacherCandidateTPPProgramDegrees, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateTPPProgramDegreeIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateVisasSupported)
            {
                isModified |= 
                    source.TeacherCandidateVisas.SynchronizeCollectionTo(
                        target.TeacherCandidateVisas, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidate = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateVisaIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidate source, ITeacherCandidate target, Action<ITeacherCandidate, ITeacherCandidate> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBirthCitySupported)
                target.BirthCity = source.BirthCity;
            else
                targetSynchSupport.IsBirthCitySupported = false;

            if (sourceSynchSupport.IsBirthCountryDescriptorSupported)
                target.BirthCountryDescriptor = source.BirthCountryDescriptor;
            else
                targetSynchSupport.IsBirthCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsBirthDateSupported)
                target.BirthDate = source.BirthDate;
            else
                targetSynchSupport.IsBirthDateSupported = false;

            if (sourceSynchSupport.IsBirthInternationalProvinceSupported)
                target.BirthInternationalProvince = source.BirthInternationalProvince;
            else
                targetSynchSupport.IsBirthInternationalProvinceSupported = false;

            if (sourceSynchSupport.IsBirthSexDescriptorSupported)
                target.BirthSexDescriptor = source.BirthSexDescriptor;
            else
                targetSynchSupport.IsBirthSexDescriptorSupported = false;

            if (sourceSynchSupport.IsBirthStateAbbreviationDescriptorSupported)
                target.BirthStateAbbreviationDescriptor = source.BirthStateAbbreviationDescriptor;
            else
                targetSynchSupport.IsBirthStateAbbreviationDescriptorSupported = false;

            if (sourceSynchSupport.IsCitizenshipStatusDescriptorSupported)
                target.CitizenshipStatusDescriptor = source.CitizenshipStatusDescriptor;
            else
                targetSynchSupport.IsCitizenshipStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsDateEnteredUSSupported)
                target.DateEnteredUS = source.DateEnteredUS;
            else
                targetSynchSupport.IsDateEnteredUSSupported = false;

            if (sourceSynchSupport.IsDisplacementStatusSupported)
                target.DisplacementStatus = source.DisplacementStatus;
            else
                targetSynchSupport.IsDisplacementStatusSupported = false;

            if (sourceSynchSupport.IsEconomicDisadvantagedSupported)
                target.EconomicDisadvantaged = source.EconomicDisadvantaged;
            else
                targetSynchSupport.IsEconomicDisadvantagedSupported = false;

            if (sourceSynchSupport.IsEnglishLanguageExamDescriptorSupported)
                target.EnglishLanguageExamDescriptor = source.EnglishLanguageExamDescriptor;
            else
                targetSynchSupport.IsEnglishLanguageExamDescriptorSupported = false;

            if (sourceSynchSupport.IsFirstGenerationStudentSupported)
                target.FirstGenerationStudent = source.FirstGenerationStudent;
            else
                targetSynchSupport.IsFirstGenerationStudentSupported = false;

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenderDescriptorSupported)
                target.GenderDescriptor = source.GenderDescriptor;
            else
                targetSynchSupport.IsGenderDescriptorSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsHispanicLatinoEthnicitySupported)
                target.HispanicLatinoEthnicity = source.HispanicLatinoEthnicity;
            else
                targetSynchSupport.IsHispanicLatinoEthnicitySupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsLimitedEnglishProficiencyDescriptorSupported)
                target.LimitedEnglishProficiencyDescriptor = source.LimitedEnglishProficiencyDescriptor;
            else
                targetSynchSupport.IsLimitedEnglishProficiencyDescriptorSupported = false;

            if (sourceSynchSupport.IsLoginIdSupported)
                target.LoginId = source.LoginId;
            else
                targetSynchSupport.IsLoginIdSupported = false;

            if (sourceSynchSupport.IsMaidenNameSupported)
                target.MaidenName = source.MaidenName;
            else
                targetSynchSupport.IsMaidenNameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsMultipleBirthStatusSupported)
                target.MultipleBirthStatus = source.MultipleBirthStatus;
            else
                targetSynchSupport.IsMultipleBirthStatusSupported = false;

            if (sourceSynchSupport.IsOldEthnicityDescriptorSupported)
                target.OldEthnicityDescriptor = source.OldEthnicityDescriptor;
            else
                targetSynchSupport.IsOldEthnicityDescriptorSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            if (sourceSynchSupport.IsPersonIdSupported)
                target.PersonId = source.PersonId;
            else
                targetSynchSupport.IsPersonIdSupported = false;

            if (sourceSynchSupport.IsPreviousCareerDescriptorSupported)
                target.PreviousCareerDescriptor = source.PreviousCareerDescriptor;
            else
                targetSynchSupport.IsPreviousCareerDescriptorSupported = false;

            if (sourceSynchSupport.IsProfileThumbnailSupported)
                target.ProfileThumbnail = source.ProfileThumbnail;
            else
                targetSynchSupport.IsProfileThumbnailSupported = false;

            if (sourceSynchSupport.IsProgramCompleteSupported)
                target.ProgramComplete = source.ProgramComplete;
            else
                targetSynchSupport.IsProgramCompleteSupported = false;

            if (sourceSynchSupport.IsSexDescriptorSupported)
                target.SexDescriptor = source.SexDescriptor;
            else
                targetSynchSupport.IsSexDescriptorSupported = false;

            if (sourceSynchSupport.IsSourceSystemDescriptorSupported)
                target.SourceSystemDescriptor = source.SourceSystemDescriptor;
            else
                targetSynchSupport.IsSourceSystemDescriptorSupported = false;

            if (sourceSynchSupport.IsStudentUniqueIdSupported)
                target.StudentUniqueId = source.StudentUniqueId;
            else
                targetSynchSupport.IsStudentUniqueIdSupported = false;

            if (sourceSynchSupport.IsTuitionCostSupported)
                target.TuitionCost = source.TuitionCost;
            else
                targetSynchSupport.IsTuitionCostSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.PersonResourceId = source.PersonResourceId;
                target.PersonDiscriminator = source.PersonDiscriminator;
                target.StudentResourceId = source.StudentResourceId;
                target.StudentDiscriminator = source.StudentDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // TeacherCandidateBackgroundCheck (Source)
            if (sourceSynchSupport.IsTeacherCandidateBackgroundCheckSupported)
            {
                var itemProperty = target.GetType().GetProperty("TeacherCandidateBackgroundCheck");
                
                if (itemProperty != null)
                {                    
                    if (source.TeacherCandidateBackgroundCheck == null)
                    {
                        target.TeacherCandidateBackgroundCheck = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetTeacherCandidateBackgroundCheck = Activator.CreateInstance(itemType);
                        (targetTeacherCandidateBackgroundCheck as IChildEntity)?.SetParent(target);
                        source.TeacherCandidateBackgroundCheck.Map(targetTeacherCandidateBackgroundCheck);
                        
                        // Update the target reference appropriately
                        target.TeacherCandidateBackgroundCheck = (ITeacherCandidateBackgroundCheck) targetTeacherCandidateBackgroundCheck;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateBackgroundCheckSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateAddressesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAddressIncluded = sourceSynchSupport.IsTeacherCandidateAddressIncluded;
                source.TeacherCandidateAddresses.MapCollectionTo(target.TeacherCandidateAddresses, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAddressesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateAidsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAidIncluded = sourceSynchSupport.IsTeacherCandidateAidIncluded;
                source.TeacherCandidateAids.MapCollectionTo(target.TeacherCandidateAids, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAidsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateCharacteristicsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateCharacteristicIncluded = sourceSynchSupport.IsTeacherCandidateCharacteristicIncluded;
                source.TeacherCandidateCharacteristics.MapCollectionTo(target.TeacherCandidateCharacteristics, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateCharacteristicsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateCohortYearsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateCohortYearIncluded = sourceSynchSupport.IsTeacherCandidateCohortYearIncluded;
                source.TeacherCandidateCohortYears.MapCollectionTo(target.TeacherCandidateCohortYears, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateCohortYearsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateDegreeSpecializationsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateDegreeSpecializationIncluded = sourceSynchSupport.IsTeacherCandidateDegreeSpecializationIncluded;
                source.TeacherCandidateDegreeSpecializations.MapCollectionTo(target.TeacherCandidateDegreeSpecializations, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateDegreeSpecializationsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateDisabilitiesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateDisabilityIncluded = sourceSynchSupport.IsTeacherCandidateDisabilityIncluded;
                source.TeacherCandidateDisabilities.MapCollectionTo(target.TeacherCandidateDisabilities, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateDisabilitiesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateElectronicMailsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateElectronicMailIncluded = sourceSynchSupport.IsTeacherCandidateElectronicMailIncluded;
                source.TeacherCandidateElectronicMails.MapCollectionTo(target.TeacherCandidateElectronicMails, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateElectronicMailsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateIdentificationCodesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateIdentificationCodeIncluded = sourceSynchSupport.IsTeacherCandidateIdentificationCodeIncluded;
                source.TeacherCandidateIdentificationCodes.MapCollectionTo(target.TeacherCandidateIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateIdentificationDocumentIncluded = sourceSynchSupport.IsTeacherCandidateIdentificationDocumentIncluded;
                source.TeacherCandidateIdentificationDocuments.MapCollectionTo(target.TeacherCandidateIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateIndicatorsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateIndicatorIncluded = sourceSynchSupport.IsTeacherCandidateIndicatorIncluded;
                source.TeacherCandidateIndicators.MapCollectionTo(target.TeacherCandidateIndicators, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateIndicatorsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateInternationalAddressesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateInternationalAddressIncluded = sourceSynchSupport.IsTeacherCandidateInternationalAddressIncluded;
                source.TeacherCandidateInternationalAddresses.MapCollectionTo(target.TeacherCandidateInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateInternationalAddressesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateLanguagesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateLanguageIncluded = sourceSynchSupport.IsTeacherCandidateLanguageIncluded;
                source.TeacherCandidateLanguages.MapCollectionTo(target.TeacherCandidateLanguages, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateLanguagesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateOtherNamesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateOtherNameIncluded = sourceSynchSupport.IsTeacherCandidateOtherNameIncluded;
                source.TeacherCandidateOtherNames.MapCollectionTo(target.TeacherCandidateOtherNames, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateOtherNamesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidatePersonalIdentificationDocumentsSupported)
            {    
                targetSynchSupport.IsTeacherCandidatePersonalIdentificationDocumentIncluded = sourceSynchSupport.IsTeacherCandidatePersonalIdentificationDocumentIncluded;
                source.TeacherCandidatePersonalIdentificationDocuments.MapCollectionTo(target.TeacherCandidatePersonalIdentificationDocuments, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidatePersonalIdentificationDocumentsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateRacesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateRaceIncluded = sourceSynchSupport.IsTeacherCandidateRaceIncluded;
                source.TeacherCandidateRaces.MapCollectionTo(target.TeacherCandidateRaces, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateRacesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateTelephonesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateTelephoneIncluded = sourceSynchSupport.IsTeacherCandidateTelephoneIncluded;
                source.TeacherCandidateTelephones.MapCollectionTo(target.TeacherCandidateTelephones, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateTPPProgramDegreesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateTPPProgramDegreeIncluded = sourceSynchSupport.IsTeacherCandidateTPPProgramDegreeIncluded;
                source.TeacherCandidateTPPProgramDegrees.MapCollectionTo(target.TeacherCandidateTPPProgramDegrees, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateTPPProgramDegreesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateVisasSupported)
            {    
                targetSynchSupport.IsTeacherCandidateVisaIncluded = sourceSynchSupport.IsTeacherCandidateVisaIncluded;
                source.TeacherCandidateVisas.MapCollectionTo(target.TeacherCandidateVisas, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateVisasSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateSynchronizationSourceSupport 
    {
        bool IsBirthCitySupported { get; set; }
        bool IsBirthCountryDescriptorSupported { get; set; }
        bool IsBirthDateSupported { get; set; }
        bool IsBirthInternationalProvinceSupported { get; set; }
        bool IsBirthSexDescriptorSupported { get; set; }
        bool IsBirthStateAbbreviationDescriptorSupported { get; set; }
        bool IsCitizenshipStatusDescriptorSupported { get; set; }
        bool IsDateEnteredUSSupported { get; set; }
        bool IsDisplacementStatusSupported { get; set; }
        bool IsEconomicDisadvantagedSupported { get; set; }
        bool IsEnglishLanguageExamDescriptorSupported { get; set; }
        bool IsFirstGenerationStudentSupported { get; set; }
        bool IsFirstNameSupported { get; set; }
        bool IsGenderDescriptorSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsHispanicLatinoEthnicitySupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsLimitedEnglishProficiencyDescriptorSupported { get; set; }
        bool IsLoginIdSupported { get; set; }
        bool IsMaidenNameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsMultipleBirthStatusSupported { get; set; }
        bool IsOldEthnicityDescriptorSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
        bool IsPersonIdSupported { get; set; }
        bool IsPreviousCareerDescriptorSupported { get; set; }
        bool IsProfileThumbnailSupported { get; set; }
        bool IsProgramCompleteSupported { get; set; }
        bool IsSexDescriptorSupported { get; set; }
        bool IsSourceSystemDescriptorSupported { get; set; }
        bool IsStudentUniqueIdSupported { get; set; }
        bool IsTeacherCandidateAddressesSupported { get; set; }
        bool IsTeacherCandidateAidsSupported { get; set; }
        bool IsTeacherCandidateBackgroundCheckSupported { get; set; }
        bool IsTeacherCandidateCharacteristicsSupported { get; set; }
        bool IsTeacherCandidateCohortYearsSupported { get; set; }
        bool IsTeacherCandidateDegreeSpecializationsSupported { get; set; }
        bool IsTeacherCandidateDisabilitiesSupported { get; set; }
        bool IsTeacherCandidateElectronicMailsSupported { get; set; }
        bool IsTeacherCandidateIdentificationCodesSupported { get; set; }
        bool IsTeacherCandidateIdentificationDocumentsSupported { get; set; }
        bool IsTeacherCandidateIndicatorsSupported { get; set; }
        bool IsTeacherCandidateInternationalAddressesSupported { get; set; }
        bool IsTeacherCandidateLanguagesSupported { get; set; }
        bool IsTeacherCandidateOtherNamesSupported { get; set; }
        bool IsTeacherCandidatePersonalIdentificationDocumentsSupported { get; set; }
        bool IsTeacherCandidateRacesSupported { get; set; }
        bool IsTeacherCandidateTelephonesSupported { get; set; }
        bool IsTeacherCandidateTPPProgramDegreesSupported { get; set; }
        bool IsTeacherCandidateVisasSupported { get; set; }
        bool IsTuitionCostSupported { get; set; }
        Func<ITeacherCandidateAddress, bool> IsTeacherCandidateAddressIncluded { get; set; }
        Func<ITeacherCandidateAid, bool> IsTeacherCandidateAidIncluded { get; set; }
        Func<ITeacherCandidateCharacteristic, bool> IsTeacherCandidateCharacteristicIncluded { get; set; }
        Func<ITeacherCandidateCohortYear, bool> IsTeacherCandidateCohortYearIncluded { get; set; }
        Func<ITeacherCandidateDegreeSpecialization, bool> IsTeacherCandidateDegreeSpecializationIncluded { get; set; }
        Func<ITeacherCandidateDisability, bool> IsTeacherCandidateDisabilityIncluded { get; set; }
        Func<ITeacherCandidateElectronicMail, bool> IsTeacherCandidateElectronicMailIncluded { get; set; }
        Func<ITeacherCandidateIdentificationCode, bool> IsTeacherCandidateIdentificationCodeIncluded { get; set; }
        Func<ITeacherCandidateIdentificationDocument, bool> IsTeacherCandidateIdentificationDocumentIncluded { get; set; }
        Func<ITeacherCandidateIndicator, bool> IsTeacherCandidateIndicatorIncluded { get; set; }
        Func<ITeacherCandidateInternationalAddress, bool> IsTeacherCandidateInternationalAddressIncluded { get; set; }
        Func<ITeacherCandidateLanguage, bool> IsTeacherCandidateLanguageIncluded { get; set; }
        Func<ITeacherCandidateOtherName, bool> IsTeacherCandidateOtherNameIncluded { get; set; }
        Func<ITeacherCandidatePersonalIdentificationDocument, bool> IsTeacherCandidatePersonalIdentificationDocumentIncluded { get; set; }
        Func<ITeacherCandidateRace, bool> IsTeacherCandidateRaceIncluded { get; set; }
        Func<ITeacherCandidateTelephone, bool> IsTeacherCandidateTelephoneIncluded { get; set; }
        Func<ITeacherCandidateTPPProgramDegree, bool> IsTeacherCandidateTPPProgramDegreeIncluded { get; set; }
        Func<ITeacherCandidateVisa, bool> IsTeacherCandidateVisaIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAddressMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAddress source, ITeacherCandidateAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }
            if (source.City != target.City)
            {
                source.City = target.City;
            }
            if (source.PostalCode != target.PostalCode)
            {
                source.PostalCode = target.PostalCode;
            }
            if (source.StateAbbreviationDescriptor != target.StateAbbreviationDescriptor)
            {
                source.StateAbbreviationDescriptor = target.StateAbbreviationDescriptor;
            }
            if (source.StreetNumberName != target.StreetNumberName)
            {
                source.StreetNumberName = target.StreetNumberName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsApartmentRoomSuiteNumberSupported)
                && target.ApartmentRoomSuiteNumber != source.ApartmentRoomSuiteNumber)
            {
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBuildingSiteNumberSupported)
                && target.BuildingSiteNumber != source.BuildingSiteNumber)
            {
                target.BuildingSiteNumber = source.BuildingSiteNumber;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCongressionalDistrictSupported)
                && target.CongressionalDistrict != source.CongressionalDistrict)
            {
                target.CongressionalDistrict = source.CongressionalDistrict;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountyFIPSCodeSupported)
                && target.CountyFIPSCode != source.CountyFIPSCode)
            {
                target.CountyFIPSCode = source.CountyFIPSCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLocaleDescriptorSupported)
                && target.LocaleDescriptor != source.LocaleDescriptor)
            {
                target.LocaleDescriptor = source.LocaleDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNameOfCountySupported)
                && target.NameOfCounty != source.NameOfCounty)
            {
                target.NameOfCounty = source.NameOfCounty;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAddressPeriodsSupported)
            {
                isModified |= 
                    source.TeacherCandidateAddressPeriods.SynchronizeCollectionTo(
                        target.TeacherCandidateAddressPeriods, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAddress = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAddressPeriodIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAddress source, ITeacherCandidateAddress target, Action<ITeacherCandidateAddress, ITeacherCandidateAddress> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;
            target.City = source.City;
            target.PostalCode = source.PostalCode;
            target.StateAbbreviationDescriptor = source.StateAbbreviationDescriptor;
            target.StreetNumberName = source.StreetNumberName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsApartmentRoomSuiteNumberSupported)
                target.ApartmentRoomSuiteNumber = source.ApartmentRoomSuiteNumber;
            else
                targetSynchSupport.IsApartmentRoomSuiteNumberSupported = false;

            if (sourceSynchSupport.IsBuildingSiteNumberSupported)
                target.BuildingSiteNumber = source.BuildingSiteNumber;
            else
                targetSynchSupport.IsBuildingSiteNumberSupported = false;

            if (sourceSynchSupport.IsCongressionalDistrictSupported)
                target.CongressionalDistrict = source.CongressionalDistrict;
            else
                targetSynchSupport.IsCongressionalDistrictSupported = false;

            if (sourceSynchSupport.IsCountyFIPSCodeSupported)
                target.CountyFIPSCode = source.CountyFIPSCode;
            else
                targetSynchSupport.IsCountyFIPSCodeSupported = false;

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLocaleDescriptorSupported)
                target.LocaleDescriptor = source.LocaleDescriptor;
            else
                targetSynchSupport.IsLocaleDescriptorSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            if (sourceSynchSupport.IsNameOfCountySupported)
                target.NameOfCounty = source.NameOfCounty;
            else
                targetSynchSupport.IsNameOfCountySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateAddressPeriodsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAddressPeriodIncluded = sourceSynchSupport.IsTeacherCandidateAddressPeriodIncluded;
                source.TeacherCandidateAddressPeriods.MapCollectionTo(target.TeacherCandidateAddressPeriods, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAddressPeriodsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAddressSynchronizationSourceSupport 
    {
        bool IsApartmentRoomSuiteNumberSupported { get; set; }
        bool IsBuildingSiteNumberSupported { get; set; }
        bool IsCongressionalDistrictSupported { get; set; }
        bool IsCountyFIPSCodeSupported { get; set; }
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLocaleDescriptorSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
        bool IsNameOfCountySupported { get; set; }
        bool IsTeacherCandidateAddressPeriodsSupported { get; set; }
        Func<ITeacherCandidateAddressPeriod, bool> IsTeacherCandidateAddressPeriodIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAddressPeriodMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAddressPeriod source, ITeacherCandidateAddressPeriod target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAddressPeriodSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAddressPeriod source, ITeacherCandidateAddressPeriod target, Action<ITeacherCandidateAddressPeriod, ITeacherCandidateAddressPeriod> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAddressPeriodSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAddressPeriodSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAddressPeriodSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAidMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAid source, ITeacherCandidateAid target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAidSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AidTypeDescriptor != target.AidTypeDescriptor)
            {
                source.AidTypeDescriptor = target.AidTypeDescriptor;
            }
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAidAmountSupported)
                && target.AidAmount != source.AidAmount)
            {
                target.AidAmount = source.AidAmount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAidConditionDescriptionSupported)
                && target.AidConditionDescription != source.AidConditionDescription)
            {
                target.AidConditionDescription = source.AidConditionDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPellGrantRecipientSupported)
                && target.PellGrantRecipient != source.PellGrantRecipient)
            {
                target.PellGrantRecipient = source.PellGrantRecipient;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAid source, ITeacherCandidateAid target, Action<ITeacherCandidateAid, ITeacherCandidateAid> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAidSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAidSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AidTypeDescriptor = source.AidTypeDescriptor;
            target.BeginDate = source.BeginDate;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAidAmountSupported)
                target.AidAmount = source.AidAmount;
            else
                targetSynchSupport.IsAidAmountSupported = false;

            if (sourceSynchSupport.IsAidConditionDescriptionSupported)
                target.AidConditionDescription = source.AidConditionDescription;
            else
                targetSynchSupport.IsAidConditionDescriptionSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsPellGrantRecipientSupported)
                target.PellGrantRecipient = source.PellGrantRecipient;
            else
                targetSynchSupport.IsPellGrantRecipientSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAidSynchronizationSourceSupport 
    {
        bool IsAidAmountSupported { get; set; }
        bool IsAidConditionDescriptionSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsPellGrantRecipientSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateBackgroundCheckMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateBackgroundCheck source, ITeacherCandidateBackgroundCheck target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateBackgroundCheckSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckCompletedDateSupported)
                && target.BackgroundCheckCompletedDate != source.BackgroundCheckCompletedDate)
            {
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckRequestedDateSupported)
                && target.BackgroundCheckRequestedDate != source.BackgroundCheckRequestedDate)
            {
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckStatusDescriptorSupported)
                && target.BackgroundCheckStatusDescriptor != source.BackgroundCheckStatusDescriptor)
            {
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBackgroundCheckTypeDescriptorSupported)
                && target.BackgroundCheckTypeDescriptor != source.BackgroundCheckTypeDescriptor)
            {
                target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFingerprintSupported)
                && target.Fingerprint != source.Fingerprint)
            {
                target.Fingerprint = source.Fingerprint;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateBackgroundCheck source, ITeacherCandidateBackgroundCheck target, Action<ITeacherCandidateBackgroundCheck, ITeacherCandidateBackgroundCheck> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateBackgroundCheckSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateBackgroundCheckSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsBackgroundCheckCompletedDateSupported)
                target.BackgroundCheckCompletedDate = source.BackgroundCheckCompletedDate;
            else
                targetSynchSupport.IsBackgroundCheckCompletedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckRequestedDateSupported)
                target.BackgroundCheckRequestedDate = source.BackgroundCheckRequestedDate;
            else
                targetSynchSupport.IsBackgroundCheckRequestedDateSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckStatusDescriptorSupported)
                target.BackgroundCheckStatusDescriptor = source.BackgroundCheckStatusDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsBackgroundCheckTypeDescriptorSupported)
                target.BackgroundCheckTypeDescriptor = source.BackgroundCheckTypeDescriptor;
            else
                targetSynchSupport.IsBackgroundCheckTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsFingerprintSupported)
                target.Fingerprint = source.Fingerprint;
            else
                targetSynchSupport.IsFingerprintSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateBackgroundCheckSynchronizationSourceSupport 
    {
        bool IsBackgroundCheckCompletedDateSupported { get; set; }
        bool IsBackgroundCheckRequestedDateSupported { get; set; }
        bool IsBackgroundCheckStatusDescriptorSupported { get; set; }
        bool IsBackgroundCheckTypeDescriptorSupported { get; set; }
        bool IsFingerprintSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCharacteristicMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCharacteristic source, ITeacherCandidateCharacteristic target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCharacteristicSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StudentCharacteristicDescriptor != target.StudentCharacteristicDescriptor)
            {
                source.StudentCharacteristicDescriptor = target.StudentCharacteristicDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCharacteristic source, ITeacherCandidateCharacteristic target, Action<ITeacherCandidateCharacteristic, ITeacherCandidateCharacteristic> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCharacteristicSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCharacteristicSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.StudentCharacteristicDescriptor = source.StudentCharacteristicDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCharacteristicSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCohortYearMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCohortYear source, ITeacherCandidateCohortYear target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCohortYearSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CohortYearTypeDescriptor != target.CohortYearTypeDescriptor)
            {
                source.CohortYearTypeDescriptor = target.CohortYearTypeDescriptor;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCohortYear source, ITeacherCandidateCohortYear target, Action<ITeacherCandidateCohortYear, ITeacherCandidateCohortYear> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCohortYearSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCohortYearSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.CohortYearTypeDescriptor = source.CohortYearTypeDescriptor;
            target.SchoolYear = source.SchoolYear;

            // Copy non-PK properties

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCohortYearSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateDegreeSpecializationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateDegreeSpecialization source, ITeacherCandidateDegreeSpecialization target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.MajorSpecialization != target.MajorSpecialization)
            {
                source.MajorSpecialization = target.MajorSpecialization;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinorSpecializationSupported)
                && target.MinorSpecialization != source.MinorSpecialization)
            {
                target.MinorSpecialization = source.MinorSpecialization;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateDegreeSpecialization source, ITeacherCandidateDegreeSpecialization target, Action<ITeacherCandidateDegreeSpecialization, ITeacherCandidateDegreeSpecialization> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.MajorSpecialization = source.MajorSpecialization;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsMinorSpecializationSupported)
                target.MinorSpecialization = source.MinorSpecialization;
            else
                targetSynchSupport.IsMinorSpecializationSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateDegreeSpecializationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsMinorSpecializationSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateDisabilityMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateDisability source, ITeacherCandidateDisability target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateDisabilitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDescriptor != target.DisabilityDescriptor)
            {
                source.DisabilityDescriptor = target.DisabilityDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                && target.DisabilityDeterminationSourceTypeDescriptor != source.DisabilityDeterminationSourceTypeDescriptor)
            {
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDisabilityDiagnosisSupported)
                && target.DisabilityDiagnosis != source.DisabilityDiagnosis)
            {
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfDisabilitySupported)
                && target.OrderOfDisability != source.OrderOfDisability)
            {
                target.OrderOfDisability = source.OrderOfDisability;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateDisabilityDesignationsSupported)
            {
                isModified |= 
                    source.TeacherCandidateDisabilityDesignations.SynchronizeCollectionTo(
                        target.TeacherCandidateDisabilityDesignations, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateDisability = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateDisabilityDesignationIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateDisability source, ITeacherCandidateDisability target, Action<ITeacherCandidateDisability, ITeacherCandidateDisability> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateDisabilitySynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateDisabilitySynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDescriptor = source.DisabilityDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported)
                target.DisabilityDeterminationSourceTypeDescriptor = source.DisabilityDeterminationSourceTypeDescriptor;
            else
                targetSynchSupport.IsDisabilityDeterminationSourceTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsDisabilityDiagnosisSupported)
                target.DisabilityDiagnosis = source.DisabilityDiagnosis;
            else
                targetSynchSupport.IsDisabilityDiagnosisSupported = false;

            if (sourceSynchSupport.IsOrderOfDisabilitySupported)
                target.OrderOfDisability = source.OrderOfDisability;
            else
                targetSynchSupport.IsOrderOfDisabilitySupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateDisabilityDesignationsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateDisabilityDesignationIncluded = sourceSynchSupport.IsTeacherCandidateDisabilityDesignationIncluded;
                source.TeacherCandidateDisabilityDesignations.MapCollectionTo(target.TeacherCandidateDisabilityDesignations, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateDisabilityDesignationsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateDisabilitySynchronizationSourceSupport 
    {
        bool IsDisabilityDeterminationSourceTypeDescriptorSupported { get; set; }
        bool IsDisabilityDiagnosisSupported { get; set; }
        bool IsOrderOfDisabilitySupported { get; set; }
        bool IsTeacherCandidateDisabilityDesignationsSupported { get; set; }
        Func<ITeacherCandidateDisabilityDesignation, bool> IsTeacherCandidateDisabilityDesignationIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateDisabilityDesignationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateDisabilityDesignation source, ITeacherCandidateDisabilityDesignation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DisabilityDesignationDescriptor != target.DisabilityDesignationDescriptor)
            {
                source.DisabilityDesignationDescriptor = target.DisabilityDesignationDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateDisabilityDesignation source, ITeacherCandidateDisabilityDesignation target, Action<ITeacherCandidateDisabilityDesignation, ITeacherCandidateDisabilityDesignation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DisabilityDesignationDescriptor = source.DisabilityDesignationDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateDisabilityDesignationSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateElectronicMailMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateElectronicMail source, ITeacherCandidateElectronicMail target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateElectronicMailSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ElectronicMailAddress != target.ElectronicMailAddress)
            {
                source.ElectronicMailAddress = target.ElectronicMailAddress;
            }
            if (source.ElectronicMailTypeDescriptor != target.ElectronicMailTypeDescriptor)
            {
                source.ElectronicMailTypeDescriptor = target.ElectronicMailTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPrimaryEmailAddressIndicatorSupported)
                && target.PrimaryEmailAddressIndicator != source.PrimaryEmailAddressIndicator)
            {
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateElectronicMail source, ITeacherCandidateElectronicMail target, Action<ITeacherCandidateElectronicMail, ITeacherCandidateElectronicMail> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateElectronicMailSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateElectronicMailSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.ElectronicMailAddress = source.ElectronicMailAddress;
            target.ElectronicMailTypeDescriptor = source.ElectronicMailTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsPrimaryEmailAddressIndicatorSupported)
                target.PrimaryEmailAddressIndicator = source.PrimaryEmailAddressIndicator;
            else
                targetSynchSupport.IsPrimaryEmailAddressIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateElectronicMailSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsPrimaryEmailAddressIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateIdentificationCodeMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateIdentificationCode source, ITeacherCandidateIdentificationCode target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateIdentificationCodeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AssigningOrganizationIdentificationCode != target.AssigningOrganizationIdentificationCode)
            {
                source.AssigningOrganizationIdentificationCode = target.AssigningOrganizationIdentificationCode;
            }
            if (source.StudentIdentificationSystemDescriptor != target.StudentIdentificationSystemDescriptor)
            {
                source.StudentIdentificationSystemDescriptor = target.StudentIdentificationSystemDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsIdentificationCodeSupported)
                && target.IdentificationCode != source.IdentificationCode)
            {
                target.IdentificationCode = source.IdentificationCode;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateIdentificationCode source, ITeacherCandidateIdentificationCode target, Action<ITeacherCandidateIdentificationCode, ITeacherCandidateIdentificationCode> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateIdentificationCodeSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateIdentificationCodeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AssigningOrganizationIdentificationCode = source.AssigningOrganizationIdentificationCode;
            target.StudentIdentificationSystemDescriptor = source.StudentIdentificationSystemDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsIdentificationCodeSupported)
                target.IdentificationCode = source.IdentificationCode;
            else
                targetSynchSupport.IsIdentificationCodeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateIdentificationCodeSynchronizationSourceSupport 
    {
        bool IsIdentificationCodeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateIdentificationDocument source, ITeacherCandidateIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateIdentificationDocument source, ITeacherCandidateIdentificationDocument target, Action<ITeacherCandidateIdentificationDocument, ITeacherCandidateIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateIndicatorMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateIndicator source, ITeacherCandidateIndicator target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateIndicatorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IndicatorName != target.IndicatorName)
            {
                source.IndicatorName = target.IndicatorName;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDesignatedBySupported)
                && target.DesignatedBy != source.DesignatedBy)
            {
                target.DesignatedBy = source.DesignatedBy;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorSupported)
                && target.Indicator != source.Indicator)
            {
                target.Indicator = source.Indicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIndicatorGroupSupported)
                && target.IndicatorGroup != source.IndicatorGroup)
            {
                target.IndicatorGroup = source.IndicatorGroup;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateIndicator source, ITeacherCandidateIndicator target, Action<ITeacherCandidateIndicator, ITeacherCandidateIndicator> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateIndicatorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateIndicatorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IndicatorName = source.IndicatorName;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsDesignatedBySupported)
                target.DesignatedBy = source.DesignatedBy;
            else
                targetSynchSupport.IsDesignatedBySupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsIndicatorSupported)
                target.Indicator = source.Indicator;
            else
                targetSynchSupport.IsIndicatorSupported = false;

            if (sourceSynchSupport.IsIndicatorGroupSupported)
                target.IndicatorGroup = source.IndicatorGroup;
            else
                targetSynchSupport.IsIndicatorGroupSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateIndicatorSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsDesignatedBySupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsIndicatorSupported { get; set; }
        bool IsIndicatorGroupSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateInternationalAddressMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateInternationalAddress source, ITeacherCandidateInternationalAddress target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateInternationalAddressSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AddressTypeDescriptor != target.AddressTypeDescriptor)
            {
                source.AddressTypeDescriptor = target.AddressTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAddressLine1Supported)
                && target.AddressLine1 != source.AddressLine1)
            {
                target.AddressLine1 = source.AddressLine1;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine2Supported)
                && target.AddressLine2 != source.AddressLine2)
            {
                target.AddressLine2 = source.AddressLine2;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine3Supported)
                && target.AddressLine3 != source.AddressLine3)
            {
                target.AddressLine3 = source.AddressLine3;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAddressLine4Supported)
                && target.AddressLine4 != source.AddressLine4)
            {
                target.AddressLine4 = source.AddressLine4;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCountryDescriptorSupported)
                && target.CountryDescriptor != source.CountryDescriptor)
            {
                target.CountryDescriptor = source.CountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLatitudeSupported)
                && target.Latitude != source.Latitude)
            {
                target.Latitude = source.Latitude;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLongitudeSupported)
                && target.Longitude != source.Longitude)
            {
                target.Longitude = source.Longitude;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateInternationalAddress source, ITeacherCandidateInternationalAddress target, Action<ITeacherCandidateInternationalAddress, ITeacherCandidateInternationalAddress> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateInternationalAddressSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateInternationalAddressSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AddressTypeDescriptor = source.AddressTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAddressLine1Supported)
                target.AddressLine1 = source.AddressLine1;
            else
                targetSynchSupport.IsAddressLine1Supported = false;

            if (sourceSynchSupport.IsAddressLine2Supported)
                target.AddressLine2 = source.AddressLine2;
            else
                targetSynchSupport.IsAddressLine2Supported = false;

            if (sourceSynchSupport.IsAddressLine3Supported)
                target.AddressLine3 = source.AddressLine3;
            else
                targetSynchSupport.IsAddressLine3Supported = false;

            if (sourceSynchSupport.IsAddressLine4Supported)
                target.AddressLine4 = source.AddressLine4;
            else
                targetSynchSupport.IsAddressLine4Supported = false;

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsCountryDescriptorSupported)
                target.CountryDescriptor = source.CountryDescriptor;
            else
                targetSynchSupport.IsCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsLatitudeSupported)
                target.Latitude = source.Latitude;
            else
                targetSynchSupport.IsLatitudeSupported = false;

            if (sourceSynchSupport.IsLongitudeSupported)
                target.Longitude = source.Longitude;
            else
                targetSynchSupport.IsLongitudeSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateInternationalAddressSynchronizationSourceSupport 
    {
        bool IsAddressLine1Supported { get; set; }
        bool IsAddressLine2Supported { get; set; }
        bool IsAddressLine3Supported { get; set; }
        bool IsAddressLine4Supported { get; set; }
        bool IsBeginDateSupported { get; set; }
        bool IsCountryDescriptorSupported { get; set; }
        bool IsEndDateSupported { get; set; }
        bool IsLatitudeSupported { get; set; }
        bool IsLongitudeSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateLanguageMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateLanguage source, ITeacherCandidateLanguage target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateLanguageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageDescriptor != target.LanguageDescriptor)
            {
                source.LanguageDescriptor = target.LanguageDescriptor;
            }

            // Copy non-PK properties


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateLanguageUsesSupported)
            {
                isModified |= 
                    source.TeacherCandidateLanguageUses.SynchronizeCollectionTo(
                        target.TeacherCandidateLanguageUses, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateLanguage = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateLanguageUseIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateLanguage source, ITeacherCandidateLanguage target, Action<ITeacherCandidateLanguage, ITeacherCandidateLanguage> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateLanguageSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateLanguageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageDescriptor = source.LanguageDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateLanguageUsesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateLanguageUseIncluded = sourceSynchSupport.IsTeacherCandidateLanguageUseIncluded;
                source.TeacherCandidateLanguageUses.MapCollectionTo(target.TeacherCandidateLanguageUses, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateLanguageUsesSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateLanguageSynchronizationSourceSupport 
    {
        bool IsTeacherCandidateLanguageUsesSupported { get; set; }
        Func<ITeacherCandidateLanguageUse, bool> IsTeacherCandidateLanguageUseIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateLanguageUseMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateLanguageUse source, ITeacherCandidateLanguageUse target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateLanguageUseSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.LanguageUseDescriptor != target.LanguageUseDescriptor)
            {
                source.LanguageUseDescriptor = target.LanguageUseDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateLanguageUse source, ITeacherCandidateLanguageUse target, Action<ITeacherCandidateLanguageUse, ITeacherCandidateLanguageUse> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateLanguageUseSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateLanguageUseSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.LanguageUseDescriptor = source.LanguageUseDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateLanguageUseSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateOtherNameMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateOtherName source, ITeacherCandidateOtherName target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateOtherNameSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.OtherNameTypeDescriptor != target.OtherNameTypeDescriptor)
            {
                source.OtherNameTypeDescriptor = target.OtherNameTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFirstNameSupported)
                && target.FirstName != source.FirstName)
            {
                target.FirstName = source.FirstName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGenerationCodeSuffixSupported)
                && target.GenerationCodeSuffix != source.GenerationCodeSuffix)
            {
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsLastSurnameSupported)
                && target.LastSurname != source.LastSurname)
            {
                target.LastSurname = source.LastSurname;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMiddleNameSupported)
                && target.MiddleName != source.MiddleName)
            {
                target.MiddleName = source.MiddleName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPersonalTitlePrefixSupported)
                && target.PersonalTitlePrefix != source.PersonalTitlePrefix)
            {
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateOtherName source, ITeacherCandidateOtherName target, Action<ITeacherCandidateOtherName, ITeacherCandidateOtherName> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateOtherNameSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateOtherNameSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.OtherNameTypeDescriptor = source.OtherNameTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFirstNameSupported)
                target.FirstName = source.FirstName;
            else
                targetSynchSupport.IsFirstNameSupported = false;

            if (sourceSynchSupport.IsGenerationCodeSuffixSupported)
                target.GenerationCodeSuffix = source.GenerationCodeSuffix;
            else
                targetSynchSupport.IsGenerationCodeSuffixSupported = false;

            if (sourceSynchSupport.IsLastSurnameSupported)
                target.LastSurname = source.LastSurname;
            else
                targetSynchSupport.IsLastSurnameSupported = false;

            if (sourceSynchSupport.IsMiddleNameSupported)
                target.MiddleName = source.MiddleName;
            else
                targetSynchSupport.IsMiddleNameSupported = false;

            if (sourceSynchSupport.IsPersonalTitlePrefixSupported)
                target.PersonalTitlePrefix = source.PersonalTitlePrefix;
            else
                targetSynchSupport.IsPersonalTitlePrefixSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateOtherNameSynchronizationSourceSupport 
    {
        bool IsFirstNameSupported { get; set; }
        bool IsGenerationCodeSuffixSupported { get; set; }
        bool IsLastSurnameSupported { get; set; }
        bool IsMiddleNameSupported { get; set; }
        bool IsPersonalTitlePrefixSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidatePersonalIdentificationDocumentMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidatePersonalIdentificationDocument source, ITeacherCandidatePersonalIdentificationDocument target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.IdentificationDocumentUseDescriptor != target.IdentificationDocumentUseDescriptor)
            {
                source.IdentificationDocumentUseDescriptor = target.IdentificationDocumentUseDescriptor;
            }
            if (source.PersonalInformationVerificationDescriptor != target.PersonalInformationVerificationDescriptor)
            {
                source.PersonalInformationVerificationDescriptor = target.PersonalInformationVerificationDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDocumentExpirationDateSupported)
                && target.DocumentExpirationDate != source.DocumentExpirationDate)
            {
                target.DocumentExpirationDate = source.DocumentExpirationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDocumentTitleSupported)
                && target.DocumentTitle != source.DocumentTitle)
            {
                target.DocumentTitle = source.DocumentTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerCountryDescriptorSupported)
                && target.IssuerCountryDescriptor != source.IssuerCountryDescriptor)
            {
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerDocumentIdentificationCodeSupported)
                && target.IssuerDocumentIdentificationCode != source.IssuerDocumentIdentificationCode)
            {
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidatePersonalIdentificationDocument source, ITeacherCandidatePersonalIdentificationDocument target, Action<ITeacherCandidatePersonalIdentificationDocument, ITeacherCandidatePersonalIdentificationDocument> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.IdentificationDocumentUseDescriptor = source.IdentificationDocumentUseDescriptor;
            target.PersonalInformationVerificationDescriptor = source.PersonalInformationVerificationDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDocumentExpirationDateSupported)
                target.DocumentExpirationDate = source.DocumentExpirationDate;
            else
                targetSynchSupport.IsDocumentExpirationDateSupported = false;

            if (sourceSynchSupport.IsDocumentTitleSupported)
                target.DocumentTitle = source.DocumentTitle;
            else
                targetSynchSupport.IsDocumentTitleSupported = false;

            if (sourceSynchSupport.IsIssuerCountryDescriptorSupported)
                target.IssuerCountryDescriptor = source.IssuerCountryDescriptor;
            else
                targetSynchSupport.IsIssuerCountryDescriptorSupported = false;

            if (sourceSynchSupport.IsIssuerDocumentIdentificationCodeSupported)
                target.IssuerDocumentIdentificationCode = source.IssuerDocumentIdentificationCode;
            else
                targetSynchSupport.IsIssuerDocumentIdentificationCodeSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidatePersonalIdentificationDocumentSynchronizationSourceSupport 
    {
        bool IsDocumentExpirationDateSupported { get; set; }
        bool IsDocumentTitleSupported { get; set; }
        bool IsIssuerCountryDescriptorSupported { get; set; }
        bool IsIssuerDocumentIdentificationCodeSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateRaceMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateRace source, ITeacherCandidateRace target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateRaceSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RaceDescriptor != target.RaceDescriptor)
            {
                source.RaceDescriptor = target.RaceDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateRace source, ITeacherCandidateRace target, Action<ITeacherCandidateRace, ITeacherCandidateRace> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateRaceSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateRaceSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RaceDescriptor = source.RaceDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateRaceSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateTelephoneMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateTelephone source, ITeacherCandidateTelephone target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateTelephoneSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TelephoneNumber != target.TelephoneNumber)
            {
                source.TelephoneNumber = target.TelephoneNumber;
            }
            if (source.TelephoneNumberTypeDescriptor != target.TelephoneNumberTypeDescriptor)
            {
                source.TelephoneNumberTypeDescriptor = target.TelephoneNumberTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsDoNotPublishIndicatorSupported)
                && target.DoNotPublishIndicator != source.DoNotPublishIndicator)
            {
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOrderOfPrioritySupported)
                && target.OrderOfPriority != source.OrderOfPriority)
            {
                target.OrderOfPriority = source.OrderOfPriority;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTextMessageCapabilityIndicatorSupported)
                && target.TextMessageCapabilityIndicator != source.TextMessageCapabilityIndicator)
            {
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateTelephone source, ITeacherCandidateTelephone target, Action<ITeacherCandidateTelephone, ITeacherCandidateTelephone> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateTelephoneSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateTelephoneSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.TelephoneNumber = source.TelephoneNumber;
            target.TelephoneNumberTypeDescriptor = source.TelephoneNumberTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsDoNotPublishIndicatorSupported)
                target.DoNotPublishIndicator = source.DoNotPublishIndicator;
            else
                targetSynchSupport.IsDoNotPublishIndicatorSupported = false;

            if (sourceSynchSupport.IsOrderOfPrioritySupported)
                target.OrderOfPriority = source.OrderOfPriority;
            else
                targetSynchSupport.IsOrderOfPrioritySupported = false;

            if (sourceSynchSupport.IsTextMessageCapabilityIndicatorSupported)
                target.TextMessageCapabilityIndicator = source.TextMessageCapabilityIndicator;
            else
                targetSynchSupport.IsTextMessageCapabilityIndicatorSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateTelephoneSynchronizationSourceSupport 
    {
        bool IsDoNotPublishIndicatorSupported { get; set; }
        bool IsOrderOfPrioritySupported { get; set; }
        bool IsTextMessageCapabilityIndicatorSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateTPPProgramDegreeMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateTPPProgramDegree source, ITeacherCandidateTPPProgramDegree target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }
            if (source.TPPDegreeTypeDescriptor != target.TPPDegreeTypeDescriptor)
            {
                source.TPPDegreeTypeDescriptor = target.TPPDegreeTypeDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateTPPProgramDegree source, ITeacherCandidateTPPProgramDegree target, Action<ITeacherCandidateTPPProgramDegree, ITeacherCandidateTPPProgramDegree> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;
            target.TPPDegreeTypeDescriptor = source.TPPDegreeTypeDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateTPPProgramDegreeSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateVisaMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateVisa source, ITeacherCandidateVisa target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateVisaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.VisaDescriptor != target.VisaDescriptor)
            {
                source.VisaDescriptor = target.VisaDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateVisa source, ITeacherCandidateVisa target, Action<ITeacherCandidateVisa, ITeacherCandidateVisa> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateVisaSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateVisaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.VisaDescriptor = source.VisaDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateVisaSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TeacherCandidateAcademicRecord

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateAcademicRecordAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecord source, ITeacherCandidateAcademicRecord target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsContentGradePointAverageSupported)
                && target.ContentGradePointAverage != source.ContentGradePointAverage)
            {
                target.ContentGradePointAverage = source.ContentGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsContentGradePointEarnedSupported)
                && target.ContentGradePointEarned != source.ContentGradePointEarned)
            {
                target.ContentGradePointEarned = source.ContentGradePointEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditConversionSupported)
                && target.CumulativeAttemptedCreditConversion != source.CumulativeAttemptedCreditConversion)
            {
                target.CumulativeAttemptedCreditConversion = source.CumulativeAttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditsSupported)
                && target.CumulativeAttemptedCredits != source.CumulativeAttemptedCredits)
            {
                target.CumulativeAttemptedCredits = source.CumulativeAttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported)
                && target.CumulativeAttemptedCreditTypeDescriptor != source.CumulativeAttemptedCreditTypeDescriptor)
            {
                target.CumulativeAttemptedCreditTypeDescriptor = source.CumulativeAttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditConversionSupported)
                && target.CumulativeEarnedCreditConversion != source.CumulativeEarnedCreditConversion)
            {
                target.CumulativeEarnedCreditConversion = source.CumulativeEarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditsSupported)
                && target.CumulativeEarnedCredits != source.CumulativeEarnedCredits)
            {
                target.CumulativeEarnedCredits = source.CumulativeEarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeEarnedCreditTypeDescriptorSupported)
                && target.CumulativeEarnedCreditTypeDescriptor != source.CumulativeEarnedCreditTypeDescriptor)
            {
                target.CumulativeEarnedCreditTypeDescriptor = source.CumulativeEarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeGradePointAverageSupported)
                && target.CumulativeGradePointAverage != source.CumulativeGradePointAverage)
            {
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCumulativeGradePointsEarnedSupported)
                && target.CumulativeGradePointsEarned != source.CumulativeGradePointsEarned)
            {
                target.CumulativeGradePointsEarned = source.CumulativeGradePointsEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsGradeValueQualifierSupported)
                && target.GradeValueQualifier != source.GradeValueQualifier)
            {
                target.GradeValueQualifier = source.GradeValueQualifier;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramGatewayDescriptorSupported)
                && target.ProgramGatewayDescriptor != source.ProgramGatewayDescriptor)
            {
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProjectedGraduationDateSupported)
                && target.ProjectedGraduationDate != source.ProjectedGraduationDate)
            {
                target.ProjectedGraduationDate = source.ProjectedGraduationDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditConversionSupported)
                && target.SessionAttemptedCreditConversion != source.SessionAttemptedCreditConversion)
            {
                target.SessionAttemptedCreditConversion = source.SessionAttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditsSupported)
                && target.SessionAttemptedCredits != source.SessionAttemptedCredits)
            {
                target.SessionAttemptedCredits = source.SessionAttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionAttemptedCreditTypeDescriptorSupported)
                && target.SessionAttemptedCreditTypeDescriptor != source.SessionAttemptedCreditTypeDescriptor)
            {
                target.SessionAttemptedCreditTypeDescriptor = source.SessionAttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditConversionSupported)
                && target.SessionEarnedCreditConversion != source.SessionEarnedCreditConversion)
            {
                target.SessionEarnedCreditConversion = source.SessionEarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditsSupported)
                && target.SessionEarnedCredits != source.SessionEarnedCredits)
            {
                target.SessionEarnedCredits = source.SessionEarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionEarnedCreditTypeDescriptorSupported)
                && target.SessionEarnedCreditTypeDescriptor != source.SessionEarnedCreditTypeDescriptor)
            {
                target.SessionEarnedCreditTypeDescriptor = source.SessionEarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionGradePointAverageSupported)
                && target.SessionGradePointAverage != source.SessionGradePointAverage)
            {
                target.SessionGradePointAverage = source.SessionGradePointAverage;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSessionGradePointsEarnedSupported)
                && target.SessionGradePointsEarned != source.SessionGradePointsEarned)
            {
                target.SessionGradePointsEarned = source.SessionGradePointsEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTPPDegreeTypeDescriptorSupported)
                && target.TPPDegreeTypeDescriptor != source.TPPDegreeTypeDescriptor)
            {
                target.TPPDegreeTypeDescriptor = source.TPPDegreeTypeDescriptor;
                isModified = true;
            }

            // ----------------------------------            
            //   Synch One-to-one relationships
            // ----------------------------------            
            // TeacherCandidateAcademicRecordClassRanking
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordClassRankingSupported)
            {
                if (source.TeacherCandidateAcademicRecordClassRanking == null)
                {
                    if (target.TeacherCandidateAcademicRecordClassRanking != null)
                    {
                        target.TeacherCandidateAcademicRecordClassRanking = null;
                        isModified = true;
                    }
                }
                else
                {
                    if (target.TeacherCandidateAcademicRecordClassRanking == null)
                    {
                        var itemType = target.GetType().GetProperty("TeacherCandidateAcademicRecordClassRanking").PropertyType;
                        var newItem = Activator.CreateInstance(itemType);
                        target.TeacherCandidateAcademicRecordClassRanking = (ITeacherCandidateAcademicRecordClassRanking) newItem;
                    }

                    isModified |= source.TeacherCandidateAcademicRecordClassRanking.Synchronize(target.TeacherCandidateAcademicRecordClassRanking);
                }
            }
            
            // -------------------------------------------------------------

            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordAcademicHonorsSupported)
            {
                isModified |= 
                    source.TeacherCandidateAcademicRecordAcademicHonors.SynchronizeCollectionTo(
                        target.TeacherCandidateAcademicRecordAcademicHonors, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAcademicRecordAcademicHonorIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordDiplomasSupported)
            {
                isModified |= 
                    source.TeacherCandidateAcademicRecordDiplomas.SynchronizeCollectionTo(
                        target.TeacherCandidateAcademicRecordDiplomas, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAcademicRecordDiplomaIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordGradePointAveragesSupported)
            {
                isModified |= 
                    source.TeacherCandidateAcademicRecordGradePointAverages.SynchronizeCollectionTo(
                        target.TeacherCandidateAcademicRecordGradePointAverages, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAcademicRecordGradePointAverageIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateAcademicRecordRecognitionsSupported)
            {
                isModified |= 
                    source.TeacherCandidateAcademicRecordRecognitions.SynchronizeCollectionTo(
                        target.TeacherCandidateAcademicRecordRecognitions, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateAcademicRecord = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateAcademicRecordRecognitionIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecord source, ITeacherCandidateAcademicRecord target, Action<ITeacherCandidateAcademicRecord, ITeacherCandidateAcademicRecord> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsContentGradePointAverageSupported)
                target.ContentGradePointAverage = source.ContentGradePointAverage;
            else
                targetSynchSupport.IsContentGradePointAverageSupported = false;

            if (sourceSynchSupport.IsContentGradePointEarnedSupported)
                target.ContentGradePointEarned = source.ContentGradePointEarned;
            else
                targetSynchSupport.IsContentGradePointEarnedSupported = false;

            if (sourceSynchSupport.IsCumulativeAttemptedCreditConversionSupported)
                target.CumulativeAttemptedCreditConversion = source.CumulativeAttemptedCreditConversion;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsCumulativeAttemptedCreditsSupported)
                target.CumulativeAttemptedCredits = source.CumulativeAttemptedCredits;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported)
                target.CumulativeAttemptedCreditTypeDescriptor = source.CumulativeAttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsCumulativeAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditConversionSupported)
                target.CumulativeEarnedCreditConversion = source.CumulativeEarnedCreditConversion;
            else
                targetSynchSupport.IsCumulativeEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditsSupported)
                target.CumulativeEarnedCredits = source.CumulativeEarnedCredits;
            else
                targetSynchSupport.IsCumulativeEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsCumulativeEarnedCreditTypeDescriptorSupported)
                target.CumulativeEarnedCreditTypeDescriptor = source.CumulativeEarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsCumulativeEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCumulativeGradePointAverageSupported)
                target.CumulativeGradePointAverage = source.CumulativeGradePointAverage;
            else
                targetSynchSupport.IsCumulativeGradePointAverageSupported = false;

            if (sourceSynchSupport.IsCumulativeGradePointsEarnedSupported)
                target.CumulativeGradePointsEarned = source.CumulativeGradePointsEarned;
            else
                targetSynchSupport.IsCumulativeGradePointsEarnedSupported = false;

            if (sourceSynchSupport.IsGradeValueQualifierSupported)
                target.GradeValueQualifier = source.GradeValueQualifier;
            else
                targetSynchSupport.IsGradeValueQualifierSupported = false;

            if (sourceSynchSupport.IsProgramGatewayDescriptorSupported)
                target.ProgramGatewayDescriptor = source.ProgramGatewayDescriptor;
            else
                targetSynchSupport.IsProgramGatewayDescriptorSupported = false;

            if (sourceSynchSupport.IsProjectedGraduationDateSupported)
                target.ProjectedGraduationDate = source.ProjectedGraduationDate;
            else
                targetSynchSupport.IsProjectedGraduationDateSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditConversionSupported)
                target.SessionAttemptedCreditConversion = source.SessionAttemptedCreditConversion;
            else
                targetSynchSupport.IsSessionAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditsSupported)
                target.SessionAttemptedCredits = source.SessionAttemptedCredits;
            else
                targetSynchSupport.IsSessionAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsSessionAttemptedCreditTypeDescriptorSupported)
                target.SessionAttemptedCreditTypeDescriptor = source.SessionAttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsSessionAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditConversionSupported)
                target.SessionEarnedCreditConversion = source.SessionEarnedCreditConversion;
            else
                targetSynchSupport.IsSessionEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditsSupported)
                target.SessionEarnedCredits = source.SessionEarnedCredits;
            else
                targetSynchSupport.IsSessionEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsSessionEarnedCreditTypeDescriptorSupported)
                target.SessionEarnedCreditTypeDescriptor = source.SessionEarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsSessionEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSessionGradePointAverageSupported)
                target.SessionGradePointAverage = source.SessionGradePointAverage;
            else
                targetSynchSupport.IsSessionGradePointAverageSupported = false;

            if (sourceSynchSupport.IsSessionGradePointsEarnedSupported)
                target.SessionGradePointsEarned = source.SessionGradePointsEarned;
            else
                targetSynchSupport.IsSessionGradePointsEarnedSupported = false;

            if (sourceSynchSupport.IsTPPDegreeTypeDescriptorSupported)
                target.TPPDegreeTypeDescriptor = source.TPPDegreeTypeDescriptor;
            else
                targetSynchSupport.IsTPPDegreeTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------
            // TeacherCandidateAcademicRecordClassRanking (Source)
            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordClassRankingSupported)
            {
                var itemProperty = target.GetType().GetProperty("TeacherCandidateAcademicRecordClassRanking");
                
                if (itemProperty != null)
                {                    
                    if (source.TeacherCandidateAcademicRecordClassRanking == null)
                    {
                        target.TeacherCandidateAcademicRecordClassRanking = null;
                    }
                    else
                    {
                        var itemType = itemProperty.PropertyType;
                        object targetTeacherCandidateAcademicRecordClassRanking = Activator.CreateInstance(itemType);
                        (targetTeacherCandidateAcademicRecordClassRanking as IChildEntity)?.SetParent(target);
                        source.TeacherCandidateAcademicRecordClassRanking.Map(targetTeacherCandidateAcademicRecordClassRanking);
                        
                        // Update the target reference appropriately
                        target.TeacherCandidateAcademicRecordClassRanking = (ITeacherCandidateAcademicRecordClassRanking) targetTeacherCandidateAcademicRecordClassRanking;
                    }
                }
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordClassRankingSupported = false; 
            }
            // -------------------------------------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordAcademicHonorsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAcademicRecordAcademicHonorIncluded = sourceSynchSupport.IsTeacherCandidateAcademicRecordAcademicHonorIncluded;
                source.TeacherCandidateAcademicRecordAcademicHonors.MapCollectionTo(target.TeacherCandidateAcademicRecordAcademicHonors, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordAcademicHonorsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordDiplomasSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAcademicRecordDiplomaIncluded = sourceSynchSupport.IsTeacherCandidateAcademicRecordDiplomaIncluded;
                source.TeacherCandidateAcademicRecordDiplomas.MapCollectionTo(target.TeacherCandidateAcademicRecordDiplomas, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordDiplomasSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordGradePointAveragesSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAcademicRecordGradePointAverageIncluded = sourceSynchSupport.IsTeacherCandidateAcademicRecordGradePointAverageIncluded;
                source.TeacherCandidateAcademicRecordGradePointAverages.MapCollectionTo(target.TeacherCandidateAcademicRecordGradePointAverages, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordGradePointAveragesSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateAcademicRecordRecognitionsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateAcademicRecordRecognitionIncluded = sourceSynchSupport.IsTeacherCandidateAcademicRecordRecognitionIncluded;
                source.TeacherCandidateAcademicRecordRecognitions.MapCollectionTo(target.TeacherCandidateAcademicRecordRecognitions, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateAcademicRecordRecognitionsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordSynchronizationSourceSupport 
    {
        bool IsContentGradePointAverageSupported { get; set; }
        bool IsContentGradePointEarnedSupported { get; set; }
        bool IsCumulativeAttemptedCreditConversionSupported { get; set; }
        bool IsCumulativeAttemptedCreditsSupported { get; set; }
        bool IsCumulativeAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsCumulativeEarnedCreditConversionSupported { get; set; }
        bool IsCumulativeEarnedCreditsSupported { get; set; }
        bool IsCumulativeEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsCumulativeGradePointAverageSupported { get; set; }
        bool IsCumulativeGradePointsEarnedSupported { get; set; }
        bool IsGradeValueQualifierSupported { get; set; }
        bool IsProgramGatewayDescriptorSupported { get; set; }
        bool IsProjectedGraduationDateSupported { get; set; }
        bool IsSessionAttemptedCreditConversionSupported { get; set; }
        bool IsSessionAttemptedCreditsSupported { get; set; }
        bool IsSessionAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsSessionEarnedCreditConversionSupported { get; set; }
        bool IsSessionEarnedCreditsSupported { get; set; }
        bool IsSessionEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsSessionGradePointAverageSupported { get; set; }
        bool IsSessionGradePointsEarnedSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordAcademicHonorsSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordClassRankingSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordDiplomasSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordGradePointAveragesSupported { get; set; }
        bool IsTeacherCandidateAcademicRecordRecognitionsSupported { get; set; }
        bool IsTPPDegreeTypeDescriptorSupported { get; set; }
        Func<ITeacherCandidateAcademicRecordAcademicHonor, bool> IsTeacherCandidateAcademicRecordAcademicHonorIncluded { get; set; }
        Func<ITeacherCandidateAcademicRecordDiploma, bool> IsTeacherCandidateAcademicRecordDiplomaIncluded { get; set; }
        Func<ITeacherCandidateAcademicRecordGradePointAverage, bool> IsTeacherCandidateAcademicRecordGradePointAverageIncluded { get; set; }
        Func<ITeacherCandidateAcademicRecordRecognition, bool> IsTeacherCandidateAcademicRecordRecognitionIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordAcademicHonorMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordAcademicHonor source, ITeacherCandidateAcademicRecordAcademicHonor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicHonorCategoryDescriptor != target.AcademicHonorCategoryDescriptor)
            {
                source.AcademicHonorCategoryDescriptor = target.AcademicHonorCategoryDescriptor;
            }
            if (source.HonorDescription != target.HonorDescription)
            {
                source.HonorDescription = target.HonorDescription;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHonorAwardDateSupported)
                && target.HonorAwardDate != source.HonorAwardDate)
            {
                target.HonorAwardDate = source.HonorAwardDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsHonorAwardExpiresDateSupported)
                && target.HonorAwardExpiresDate != source.HonorAwardExpiresDate)
            {
                target.HonorAwardExpiresDate = source.HonorAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordAcademicHonor source, ITeacherCandidateAcademicRecordAcademicHonor target, Action<ITeacherCandidateAcademicRecordAcademicHonor, ITeacherCandidateAcademicRecordAcademicHonor> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicHonorCategoryDescriptor = source.AcademicHonorCategoryDescriptor;
            target.HonorDescription = source.HonorDescription;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsHonorAwardDateSupported)
                target.HonorAwardDate = source.HonorAwardDate;
            else
                targetSynchSupport.IsHonorAwardDateSupported = false;

            if (sourceSynchSupport.IsHonorAwardExpiresDateSupported)
                target.HonorAwardExpiresDate = source.HonorAwardExpiresDate;
            else
                targetSynchSupport.IsHonorAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordAcademicHonorSynchronizationSourceSupport 
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsHonorAwardDateSupported { get; set; }
        bool IsHonorAwardExpiresDateSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordClassRankingMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordClassRanking source, ITeacherCandidateAcademicRecordClassRanking target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsClassRankSupported)
                && target.ClassRank != source.ClassRank)
            {
                target.ClassRank = source.ClassRank;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsClassRankingDateSupported)
                && target.ClassRankingDate != source.ClassRankingDate)
            {
                target.ClassRankingDate = source.ClassRankingDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPercentageRankingSupported)
                && target.PercentageRanking != source.PercentageRanking)
            {
                target.PercentageRanking = source.PercentageRanking;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTotalNumberInClassSupported)
                && target.TotalNumberInClass != source.TotalNumberInClass)
            {
                target.TotalNumberInClass = source.TotalNumberInClass;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordClassRanking source, ITeacherCandidateAcademicRecordClassRanking target, Action<ITeacherCandidateAcademicRecordClassRanking, ITeacherCandidateAcademicRecordClassRanking> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport;

            // Copy contextual primary key values

            // Copy non-PK properties

            if (sourceSynchSupport.IsClassRankSupported)
                target.ClassRank = source.ClassRank;
            else
                targetSynchSupport.IsClassRankSupported = false;

            if (sourceSynchSupport.IsClassRankingDateSupported)
                target.ClassRankingDate = source.ClassRankingDate;
            else
                targetSynchSupport.IsClassRankingDateSupported = false;

            if (sourceSynchSupport.IsPercentageRankingSupported)
                target.PercentageRanking = source.PercentageRanking;
            else
                targetSynchSupport.IsPercentageRankingSupported = false;

            if (sourceSynchSupport.IsTotalNumberInClassSupported)
                target.TotalNumberInClass = source.TotalNumberInClass;
            else
                targetSynchSupport.IsTotalNumberInClassSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordClassRankingSynchronizationSourceSupport 
    {
        bool IsClassRankSupported { get; set; }
        bool IsClassRankingDateSupported { get; set; }
        bool IsPercentageRankingSupported { get; set; }
        bool IsTotalNumberInClassSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordDiplomaMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordDiploma source, ITeacherCandidateAcademicRecordDiploma target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.DiplomaAwardDate != target.DiplomaAwardDate)
            {
                source.DiplomaAwardDate = target.DiplomaAwardDate;
            }
            if (source.DiplomaTypeDescriptor != target.DiplomaTypeDescriptor)
            {
                source.DiplomaTypeDescriptor = target.DiplomaTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCTECompleterSupported)
                && target.CTECompleter != source.CTECompleter)
            {
                target.CTECompleter = source.CTECompleter;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaAwardExpiresDateSupported)
                && target.DiplomaAwardExpiresDate != source.DiplomaAwardExpiresDate)
            {
                target.DiplomaAwardExpiresDate = source.DiplomaAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaDescriptionSupported)
                && target.DiplomaDescription != source.DiplomaDescription)
            {
                target.DiplomaDescription = source.DiplomaDescription;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDiplomaLevelDescriptorSupported)
                && target.DiplomaLevelDescriptor != source.DiplomaLevelDescriptor)
            {
                target.DiplomaLevelDescriptor = source.DiplomaLevelDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordDiploma source, ITeacherCandidateAcademicRecordDiploma target, Action<ITeacherCandidateAcademicRecordDiploma, ITeacherCandidateAcademicRecordDiploma> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.DiplomaAwardDate = source.DiplomaAwardDate;
            target.DiplomaTypeDescriptor = source.DiplomaTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsCTECompleterSupported)
                target.CTECompleter = source.CTECompleter;
            else
                targetSynchSupport.IsCTECompleterSupported = false;

            if (sourceSynchSupport.IsDiplomaAwardExpiresDateSupported)
                target.DiplomaAwardExpiresDate = source.DiplomaAwardExpiresDate;
            else
                targetSynchSupport.IsDiplomaAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsDiplomaDescriptionSupported)
                target.DiplomaDescription = source.DiplomaDescription;
            else
                targetSynchSupport.IsDiplomaDescriptionSupported = false;

            if (sourceSynchSupport.IsDiplomaLevelDescriptorSupported)
                target.DiplomaLevelDescriptor = source.DiplomaLevelDescriptor;
            else
                targetSynchSupport.IsDiplomaLevelDescriptorSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordDiplomaSynchronizationSourceSupport 
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsCTECompleterSupported { get; set; }
        bool IsDiplomaAwardExpiresDateSupported { get; set; }
        bool IsDiplomaDescriptionSupported { get; set; }
        bool IsDiplomaLevelDescriptorSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordGradePointAverageMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordGradePointAverage source, ITeacherCandidateAcademicRecordGradePointAverage target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradePointAverageTypeDescriptor != target.GradePointAverageTypeDescriptor)
            {
                source.GradePointAverageTypeDescriptor = target.GradePointAverageTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsGradePointAverageValueSupported)
                && target.GradePointAverageValue != source.GradePointAverageValue)
            {
                target.GradePointAverageValue = source.GradePointAverageValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIsCumulativeSupported)
                && target.IsCumulative != source.IsCumulative)
            {
                target.IsCumulative = source.IsCumulative;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMaxGradePointAverageValueSupported)
                && target.MaxGradePointAverageValue != source.MaxGradePointAverageValue)
            {
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordGradePointAverage source, ITeacherCandidateAcademicRecordGradePointAverage target, Action<ITeacherCandidateAcademicRecordGradePointAverage, ITeacherCandidateAcademicRecordGradePointAverage> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradePointAverageTypeDescriptor = source.GradePointAverageTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsGradePointAverageValueSupported)
                target.GradePointAverageValue = source.GradePointAverageValue;
            else
                targetSynchSupport.IsGradePointAverageValueSupported = false;

            if (sourceSynchSupport.IsIsCumulativeSupported)
                target.IsCumulative = source.IsCumulative;
            else
                targetSynchSupport.IsIsCumulativeSupported = false;

            if (sourceSynchSupport.IsMaxGradePointAverageValueSupported)
                target.MaxGradePointAverageValue = source.MaxGradePointAverageValue;
            else
                targetSynchSupport.IsMaxGradePointAverageValueSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordGradePointAverageSynchronizationSourceSupport 
    {
        bool IsGradePointAverageValueSupported { get; set; }
        bool IsIsCumulativeSupported { get; set; }
        bool IsMaxGradePointAverageValueSupported { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateAcademicRecordRecognitionMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateAcademicRecordRecognition source, ITeacherCandidateAcademicRecordRecognition target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.RecognitionTypeDescriptor != target.RecognitionTypeDescriptor)
            {
                source.RecognitionTypeDescriptor = target.RecognitionTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAchievementCategoryDescriptorSupported)
                && target.AchievementCategoryDescriptor != source.AchievementCategoryDescriptor)
            {
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementCategorySystemSupported)
                && target.AchievementCategorySystem != source.AchievementCategorySystem)
            {
                target.AchievementCategorySystem = source.AchievementCategorySystem;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAchievementTitleSupported)
                && target.AchievementTitle != source.AchievementTitle)
            {
                target.AchievementTitle = source.AchievementTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaSupported)
                && target.Criteria != source.Criteria)
            {
                target.Criteria = source.Criteria;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCriteriaURLSupported)
                && target.CriteriaURL != source.CriteriaURL)
            {
                target.CriteriaURL = source.CriteriaURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEvidenceStatementSupported)
                && target.EvidenceStatement != source.EvidenceStatement)
            {
                target.EvidenceStatement = source.EvidenceStatement;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsImageURLSupported)
                && target.ImageURL != source.ImageURL)
            {
                target.ImageURL = source.ImageURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerNameSupported)
                && target.IssuerName != source.IssuerName)
            {
                target.IssuerName = source.IssuerName;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsIssuerOriginURLSupported)
                && target.IssuerOriginURL != source.IssuerOriginURL)
            {
                target.IssuerOriginURL = source.IssuerOriginURL;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionAwardDateSupported)
                && target.RecognitionAwardDate != source.RecognitionAwardDate)
            {
                target.RecognitionAwardDate = source.RecognitionAwardDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionAwardExpiresDateSupported)
                && target.RecognitionAwardExpiresDate != source.RecognitionAwardExpiresDate)
            {
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsRecognitionDescriptionSupported)
                && target.RecognitionDescription != source.RecognitionDescription)
            {
                target.RecognitionDescription = source.RecognitionDescription;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateAcademicRecordRecognition source, ITeacherCandidateAcademicRecordRecognition target, Action<ITeacherCandidateAcademicRecordRecognition, ITeacherCandidateAcademicRecordRecognition> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.RecognitionTypeDescriptor = source.RecognitionTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAchievementCategoryDescriptorSupported)
                target.AchievementCategoryDescriptor = source.AchievementCategoryDescriptor;
            else
                targetSynchSupport.IsAchievementCategoryDescriptorSupported = false;

            if (sourceSynchSupport.IsAchievementCategorySystemSupported)
                target.AchievementCategorySystem = source.AchievementCategorySystem;
            else
                targetSynchSupport.IsAchievementCategorySystemSupported = false;

            if (sourceSynchSupport.IsAchievementTitleSupported)
                target.AchievementTitle = source.AchievementTitle;
            else
                targetSynchSupport.IsAchievementTitleSupported = false;

            if (sourceSynchSupport.IsCriteriaSupported)
                target.Criteria = source.Criteria;
            else
                targetSynchSupport.IsCriteriaSupported = false;

            if (sourceSynchSupport.IsCriteriaURLSupported)
                target.CriteriaURL = source.CriteriaURL;
            else
                targetSynchSupport.IsCriteriaURLSupported = false;

            if (sourceSynchSupport.IsEvidenceStatementSupported)
                target.EvidenceStatement = source.EvidenceStatement;
            else
                targetSynchSupport.IsEvidenceStatementSupported = false;

            if (sourceSynchSupport.IsImageURLSupported)
                target.ImageURL = source.ImageURL;
            else
                targetSynchSupport.IsImageURLSupported = false;

            if (sourceSynchSupport.IsIssuerNameSupported)
                target.IssuerName = source.IssuerName;
            else
                targetSynchSupport.IsIssuerNameSupported = false;

            if (sourceSynchSupport.IsIssuerOriginURLSupported)
                target.IssuerOriginURL = source.IssuerOriginURL;
            else
                targetSynchSupport.IsIssuerOriginURLSupported = false;

            if (sourceSynchSupport.IsRecognitionAwardDateSupported)
                target.RecognitionAwardDate = source.RecognitionAwardDate;
            else
                targetSynchSupport.IsRecognitionAwardDateSupported = false;

            if (sourceSynchSupport.IsRecognitionAwardExpiresDateSupported)
                target.RecognitionAwardExpiresDate = source.RecognitionAwardExpiresDate;
            else
                targetSynchSupport.IsRecognitionAwardExpiresDateSupported = false;

            if (sourceSynchSupport.IsRecognitionDescriptionSupported)
                target.RecognitionDescription = source.RecognitionDescription;
            else
                targetSynchSupport.IsRecognitionDescriptionSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateAcademicRecordRecognitionSynchronizationSourceSupport 
    {
        bool IsAchievementCategoryDescriptorSupported { get; set; }
        bool IsAchievementCategorySystemSupported { get; set; }
        bool IsAchievementTitleSupported { get; set; }
        bool IsCriteriaSupported { get; set; }
        bool IsCriteriaURLSupported { get; set; }
        bool IsEvidenceStatementSupported { get; set; }
        bool IsImageURLSupported { get; set; }
        bool IsIssuerNameSupported { get; set; }
        bool IsIssuerOriginURLSupported { get; set; }
        bool IsRecognitionAwardDateSupported { get; set; }
        bool IsRecognitionAwardExpiresDateSupported { get; set; }
        bool IsRecognitionDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateCharacteristicDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateCharacteristicDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCharacteristicDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCharacteristicDescriptor source, ITeacherCandidateCharacteristicDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherCandidateCharacteristicDescriptorId != target.TeacherCandidateCharacteristicDescriptorId)
            {
                source.TeacherCandidateCharacteristicDescriptorId = target.TeacherCandidateCharacteristicDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCharacteristicDescriptor source, ITeacherCandidateCharacteristicDescriptor target, Action<ITeacherCandidateCharacteristicDescriptor, ITeacherCandidateCharacteristicDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeacherCandidateCharacteristicDescriptorId = source.TeacherCandidateCharacteristicDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCharacteristicDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateCourseTranscript

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateCourseTranscriptAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCourseTranscriptMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCourseTranscript source, ITeacherCandidateCourseTranscript target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCourseTranscriptSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseAttemptResultDescriptor != target.CourseAttemptResultDescriptor)
            {
                source.CourseAttemptResultDescriptor = target.CourseAttemptResultDescriptor;
            }
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.CourseEducationOrganizationId != target.CourseEducationOrganizationId)
            {
                source.CourseEducationOrganizationId = target.CourseEducationOrganizationId;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TermDescriptor != target.TermDescriptor)
            {
                source.TermDescriptor = target.TermDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAlternativeCourseCodeSupported)
                && target.AlternativeCourseCode != source.AlternativeCourseCode)
            {
                target.AlternativeCourseCode = source.AlternativeCourseCode;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAlternativeCourseTitleSupported)
                && target.AlternativeCourseTitle != source.AlternativeCourseTitle)
            {
                target.AlternativeCourseTitle = source.AlternativeCourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditConversionSupported)
                && target.AttemptedCreditConversion != source.AttemptedCreditConversion)
            {
                target.AttemptedCreditConversion = source.AttemptedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditsSupported)
                && target.AttemptedCredits != source.AttemptedCredits)
            {
                target.AttemptedCredits = source.AttemptedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsAttemptedCreditTypeDescriptorSupported)
                && target.AttemptedCreditTypeDescriptor != source.AttemptedCreditTypeDescriptor)
            {
                target.AttemptedCreditTypeDescriptor = source.AttemptedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseRepeatCodeDescriptorSupported)
                && target.CourseRepeatCodeDescriptor != source.CourseRepeatCodeDescriptor)
            {
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsCourseTitleSupported)
                && target.CourseTitle != source.CourseTitle)
            {
                target.CourseTitle = source.CourseTitle;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditConversionSupported)
                && target.EarnedCreditConversion != source.EarnedCreditConversion)
            {
                target.EarnedCreditConversion = source.EarnedCreditConversion;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditsSupported)
                && target.EarnedCredits != source.EarnedCredits)
            {
                target.EarnedCredits = source.EarnedCredits;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEarnedCreditTypeDescriptorSupported)
                && target.EarnedCreditTypeDescriptor != source.EarnedCreditTypeDescriptor)
            {
                target.EarnedCreditTypeDescriptor = source.EarnedCreditTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalLetterGradeEarnedSupported)
                && target.FinalLetterGradeEarned != source.FinalLetterGradeEarned)
            {
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFinalNumericGradeEarnedSupported)
                && target.FinalNumericGradeEarned != source.FinalNumericGradeEarned)
            {
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMethodCreditEarnedDescriptorSupported)
                && target.MethodCreditEarnedDescriptor != source.MethodCreditEarnedDescriptor)
            {
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWhenTakenGradeLevelDescriptorSupported)
                && target.WhenTakenGradeLevelDescriptor != source.WhenTakenGradeLevelDescriptor)
            {
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported)
            {
                isModified |= 
                    source.TeacherCandidateCourseTranscriptEarnedAdditionalCredits.SynchronizeCollectionTo(
                        target.TeacherCandidateCourseTranscriptEarnedAdditionalCredits, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateCourseTranscript = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCourseTranscript source, ITeacherCandidateCourseTranscript target, Action<ITeacherCandidateCourseTranscript, ITeacherCandidateCourseTranscript> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCourseTranscriptSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCourseTranscriptSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseAttemptResultDescriptor = source.CourseAttemptResultDescriptor;
            target.CourseCode = source.CourseCode;
            target.CourseEducationOrganizationId = source.CourseEducationOrganizationId;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TermDescriptor = source.TermDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAlternativeCourseCodeSupported)
                target.AlternativeCourseCode = source.AlternativeCourseCode;
            else
                targetSynchSupport.IsAlternativeCourseCodeSupported = false;

            if (sourceSynchSupport.IsAlternativeCourseTitleSupported)
                target.AlternativeCourseTitle = source.AlternativeCourseTitle;
            else
                targetSynchSupport.IsAlternativeCourseTitleSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditConversionSupported)
                target.AttemptedCreditConversion = source.AttemptedCreditConversion;
            else
                targetSynchSupport.IsAttemptedCreditConversionSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditsSupported)
                target.AttemptedCredits = source.AttemptedCredits;
            else
                targetSynchSupport.IsAttemptedCreditsSupported = false;

            if (sourceSynchSupport.IsAttemptedCreditTypeDescriptorSupported)
                target.AttemptedCreditTypeDescriptor = source.AttemptedCreditTypeDescriptor;
            else
                targetSynchSupport.IsAttemptedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseRepeatCodeDescriptorSupported)
                target.CourseRepeatCodeDescriptor = source.CourseRepeatCodeDescriptor;
            else
                targetSynchSupport.IsCourseRepeatCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsCourseTitleSupported)
                target.CourseTitle = source.CourseTitle;
            else
                targetSynchSupport.IsCourseTitleSupported = false;

            if (sourceSynchSupport.IsEarnedCreditConversionSupported)
                target.EarnedCreditConversion = source.EarnedCreditConversion;
            else
                targetSynchSupport.IsEarnedCreditConversionSupported = false;

            if (sourceSynchSupport.IsEarnedCreditsSupported)
                target.EarnedCredits = source.EarnedCredits;
            else
                targetSynchSupport.IsEarnedCreditsSupported = false;

            if (sourceSynchSupport.IsEarnedCreditTypeDescriptorSupported)
                target.EarnedCreditTypeDescriptor = source.EarnedCreditTypeDescriptor;
            else
                targetSynchSupport.IsEarnedCreditTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsFinalLetterGradeEarnedSupported)
                target.FinalLetterGradeEarned = source.FinalLetterGradeEarned;
            else
                targetSynchSupport.IsFinalLetterGradeEarnedSupported = false;

            if (sourceSynchSupport.IsFinalNumericGradeEarnedSupported)
                target.FinalNumericGradeEarned = source.FinalNumericGradeEarned;
            else
                targetSynchSupport.IsFinalNumericGradeEarnedSupported = false;

            if (sourceSynchSupport.IsMethodCreditEarnedDescriptorSupported)
                target.MethodCreditEarnedDescriptor = source.MethodCreditEarnedDescriptor;
            else
                targetSynchSupport.IsMethodCreditEarnedDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            if (sourceSynchSupport.IsWhenTakenGradeLevelDescriptorSupported)
                target.WhenTakenGradeLevelDescriptor = source.WhenTakenGradeLevelDescriptor;
            else
                targetSynchSupport.IsWhenTakenGradeLevelDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.SchoolResourceId = source.SchoolResourceId;
                target.TeacherCandidateAcademicRecordResourceId = source.TeacherCandidateAcademicRecordResourceId;
                target.TeacherCandidateAcademicRecordDiscriminator = source.TeacherCandidateAcademicRecordDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded = sourceSynchSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded;
                source.TeacherCandidateCourseTranscriptEarnedAdditionalCredits.MapCollectionTo(target.TeacherCandidateCourseTranscriptEarnedAdditionalCredits, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCourseTranscriptSynchronizationSourceSupport 
    {
        bool IsAlternativeCourseCodeSupported { get; set; }
        bool IsAlternativeCourseTitleSupported { get; set; }
        bool IsAttemptedCreditConversionSupported { get; set; }
        bool IsAttemptedCreditsSupported { get; set; }
        bool IsAttemptedCreditTypeDescriptorSupported { get; set; }
        bool IsCourseRepeatCodeDescriptorSupported { get; set; }
        bool IsCourseTitleSupported { get; set; }
        bool IsEarnedCreditConversionSupported { get; set; }
        bool IsEarnedCreditsSupported { get; set; }
        bool IsEarnedCreditTypeDescriptorSupported { get; set; }
        bool IsFinalLetterGradeEarnedSupported { get; set; }
        bool IsFinalNumericGradeEarnedSupported { get; set; }
        bool IsMethodCreditEarnedDescriptorSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsSupported { get; set; }
        bool IsWhenTakenGradeLevelDescriptorSupported { get; set; }
        Func<ITeacherCandidateCourseTranscriptEarnedAdditionalCredits, bool> IsTeacherCandidateCourseTranscriptEarnedAdditionalCreditsIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateCourseTranscriptEarnedAdditionalCreditsMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateCourseTranscriptEarnedAdditionalCredits source, ITeacherCandidateCourseTranscriptEarnedAdditionalCredits target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AdditionalCreditTypeDescriptor != target.AdditionalCreditTypeDescriptor)
            {
                source.AdditionalCreditTypeDescriptor = target.AdditionalCreditTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsCreditsSupported)
                && target.Credits != source.Credits)
            {
                target.Credits = source.Credits;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateCourseTranscriptEarnedAdditionalCredits source, ITeacherCandidateCourseTranscriptEarnedAdditionalCredits target, Action<ITeacherCandidateCourseTranscriptEarnedAdditionalCredits, ITeacherCandidateCourseTranscriptEarnedAdditionalCredits> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AdditionalCreditTypeDescriptor = source.AdditionalCreditTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsCreditsSupported)
                target.Credits = source.Credits;
            else
                targetSynchSupport.IsCreditsSupported = false;

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateCourseTranscriptEarnedAdditionalCreditsSynchronizationSourceSupport 
    {
        bool IsCreditsSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateStaffAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStaffAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStaffAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStaffAssociation source, ITeacherCandidateStaffAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStaffAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.StaffUniqueId != target.StaffUniqueId)
            {
                source.StaffUniqueId = target.StaffUniqueId;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStaffAssociation source, ITeacherCandidateStaffAssociation target, Action<ITeacherCandidateStaffAssociation, ITeacherCandidateStaffAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStaffAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStaffAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.StaffUniqueId = source.StaffUniqueId;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.StaffResourceId = source.StaffResourceId;
                target.StaffDiscriminator = source.StaffDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStaffAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateStudentGrowthMeasure

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStudentGrowthMeasureAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasure source, ITeacherCandidateStudentGrowthMeasure target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherCandidateStudentGrowthMeasureIdentifier != target.TeacherCandidateStudentGrowthMeasureIdentifier)
            {
                source.TeacherCandidateStudentGrowthMeasureIdentifier = target.TeacherCandidateStudentGrowthMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsResultDatatypeTypeDescriptorSupported)
                && target.ResultDatatypeTypeDescriptor != source.ResultDatatypeTypeDescriptor)
            {
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStandardErrorSupported)
                && target.StandardError != source.StandardError)
            {
                target.StandardError = source.StandardError;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthActualScoreSupported)
                && target.StudentGrowthActualScore != source.StudentGrowthActualScore)
            {
                target.StudentGrowthActualScore = source.StudentGrowthActualScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthMeasureDateSupported)
                && target.StudentGrowthMeasureDate != source.StudentGrowthMeasureDate)
            {
                target.StudentGrowthMeasureDate = source.StudentGrowthMeasureDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthMetSupported)
                && target.StudentGrowthMet != source.StudentGrowthMet)
            {
                target.StudentGrowthMet = source.StudentGrowthMet;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthNCountSupported)
                && target.StudentGrowthNCount != source.StudentGrowthNCount)
            {
                target.StudentGrowthNCount = source.StudentGrowthNCount;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthTargetScoreSupported)
                && target.StudentGrowthTargetScore != source.StudentGrowthTargetScore)
            {
                target.StudentGrowthTargetScore = source.StudentGrowthTargetScore;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsStudentGrowthTypeDescriptorSupported)
                && target.StudentGrowthTypeDescriptor != source.StudentGrowthTypeDescriptor)
            {
                target.StudentGrowthTypeDescriptor = source.StudentGrowthTypeDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported)
            {
                isModified |= 
                    source.TeacherCandidateStudentGrowthMeasureAcademicSubjects.SynchronizeCollectionTo(
                        target.TeacherCandidateStudentGrowthMeasureAcademicSubjects, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateStudentGrowthMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded);
            }

            if (sourceSupport == null || sourceSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported)
            {
                isModified |= 
                    source.TeacherCandidateStudentGrowthMeasureGradeLevels.SynchronizeCollectionTo(
                        target.TeacherCandidateStudentGrowthMeasureGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.TeacherCandidateStudentGrowthMeasure = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasure source, ITeacherCandidateStudentGrowthMeasure target, Action<ITeacherCandidateStudentGrowthMeasure, ITeacherCandidateStudentGrowthMeasure> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherCandidateStudentGrowthMeasureIdentifier = source.TeacherCandidateStudentGrowthMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsResultDatatypeTypeDescriptorSupported)
                target.ResultDatatypeTypeDescriptor = source.ResultDatatypeTypeDescriptor;
            else
                targetSynchSupport.IsResultDatatypeTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsStandardErrorSupported)
                target.StandardError = source.StandardError;
            else
                targetSynchSupport.IsStandardErrorSupported = false;

            if (sourceSynchSupport.IsStudentGrowthActualScoreSupported)
                target.StudentGrowthActualScore = source.StudentGrowthActualScore;
            else
                targetSynchSupport.IsStudentGrowthActualScoreSupported = false;

            if (sourceSynchSupport.IsStudentGrowthMeasureDateSupported)
                target.StudentGrowthMeasureDate = source.StudentGrowthMeasureDate;
            else
                targetSynchSupport.IsStudentGrowthMeasureDateSupported = false;

            if (sourceSynchSupport.IsStudentGrowthMetSupported)
                target.StudentGrowthMet = source.StudentGrowthMet;
            else
                targetSynchSupport.IsStudentGrowthMetSupported = false;

            if (sourceSynchSupport.IsStudentGrowthNCountSupported)
                target.StudentGrowthNCount = source.StudentGrowthNCount;
            else
                targetSynchSupport.IsStudentGrowthNCountSupported = false;

            if (sourceSynchSupport.IsStudentGrowthTargetScoreSupported)
                target.StudentGrowthTargetScore = source.StudentGrowthTargetScore;
            else
                targetSynchSupport.IsStudentGrowthTargetScoreSupported = false;

            if (sourceSynchSupport.IsStudentGrowthTypeDescriptorSupported)
                target.StudentGrowthTypeDescriptor = source.StudentGrowthTypeDescriptor;
            else
                targetSynchSupport.IsStudentGrowthTypeDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded = sourceSynchSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded;
                source.TeacherCandidateStudentGrowthMeasureAcademicSubjects.MapCollectionTo(target.TeacherCandidateStudentGrowthMeasureAcademicSubjects, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported = false;
            }

            if (sourceSynchSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported)
            {    
                targetSynchSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded = sourceSynchSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded;
                source.TeacherCandidateStudentGrowthMeasureGradeLevels.MapCollectionTo(target.TeacherCandidateStudentGrowthMeasureGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureSynchronizationSourceSupport 
    {
        bool IsResultDatatypeTypeDescriptorSupported { get; set; }
        bool IsStandardErrorSupported { get; set; }
        bool IsStudentGrowthActualScoreSupported { get; set; }
        bool IsStudentGrowthMeasureDateSupported { get; set; }
        bool IsStudentGrowthMetSupported { get; set; }
        bool IsStudentGrowthNCountSupported { get; set; }
        bool IsStudentGrowthTargetScoreSupported { get; set; }
        bool IsStudentGrowthTypeDescriptorSupported { get; set; }
        bool IsTeacherCandidateStudentGrowthMeasureAcademicSubjectsSupported { get; set; }
        bool IsTeacherCandidateStudentGrowthMeasureGradeLevelsSupported { get; set; }
        Func<ITeacherCandidateStudentGrowthMeasureAcademicSubject, bool> IsTeacherCandidateStudentGrowthMeasureAcademicSubjectIncluded { get; set; }
        Func<ITeacherCandidateStudentGrowthMeasureGradeLevel, bool> IsTeacherCandidateStudentGrowthMeasureGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureAcademicSubjectMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureAcademicSubject source, ITeacherCandidateStudentGrowthMeasureAcademicSubject target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.AcademicSubjectDescriptor != target.AcademicSubjectDescriptor)
            {
                source.AcademicSubjectDescriptor = target.AcademicSubjectDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureAcademicSubject source, ITeacherCandidateStudentGrowthMeasureAcademicSubject target, Action<ITeacherCandidateStudentGrowthMeasureAcademicSubject, ITeacherCandidateStudentGrowthMeasureAcademicSubject> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.AcademicSubjectDescriptor = source.AcademicSubjectDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureAcademicSubjectSynchronizationSourceSupport 
    {
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureGradeLevel source, ITeacherCandidateStudentGrowthMeasureGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureGradeLevel source, ITeacherCandidateStudentGrowthMeasureGradeLevel target, Action<ITeacherCandidateStudentGrowthMeasureGradeLevel, ITeacherCandidateStudentGrowthMeasureGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TeacherCandidateStudentGrowthMeasureCourseAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStudentGrowthMeasureCourseAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureCourseAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureCourseAssociation source, ITeacherCandidateStudentGrowthMeasureCourseAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.CourseCode != target.CourseCode)
            {
                source.CourseCode = target.CourseCode;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherCandidateStudentGrowthMeasureIdentifier != target.TeacherCandidateStudentGrowthMeasureIdentifier)
            {
                source.TeacherCandidateStudentGrowthMeasureIdentifier = target.TeacherCandidateStudentGrowthMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureCourseAssociation source, ITeacherCandidateStudentGrowthMeasureCourseAssociation target, Action<ITeacherCandidateStudentGrowthMeasureCourseAssociation, ITeacherCandidateStudentGrowthMeasureCourseAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.CourseCode = source.CourseCode;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherCandidateStudentGrowthMeasureIdentifier = source.TeacherCandidateStudentGrowthMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.CourseResourceId = source.CourseResourceId;
                target.CourseDiscriminator = source.CourseDiscriminator;
                target.TeacherCandidateStudentGrowthMeasureResourceId = source.TeacherCandidateStudentGrowthMeasureResourceId;
                target.TeacherCandidateStudentGrowthMeasureDiscriminator = source.TeacherCandidateStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureCourseAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation source, ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherCandidateStudentGrowthMeasureIdentifier != target.TeacherCandidateStudentGrowthMeasureIdentifier)
            {
                source.TeacherCandidateStudentGrowthMeasureIdentifier = target.TeacherCandidateStudentGrowthMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation source, ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation target, Action<ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation, ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.FactAsOfDate = source.FactAsOfDate;
            target.SchoolYear = source.SchoolYear;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherCandidateStudentGrowthMeasureIdentifier = source.TeacherCandidateStudentGrowthMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.TeacherCandidateStudentGrowthMeasureResourceId = source.TeacherCandidateStudentGrowthMeasureResourceId;
                target.TeacherCandidateStudentGrowthMeasureDiscriminator = source.TeacherCandidateStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureEducationOrganizationAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateStudentGrowthMeasureSectionAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateStudentGrowthMeasureSectionAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateStudentGrowthMeasureSectionAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateStudentGrowthMeasureSectionAssociation source, ITeacherCandidateStudentGrowthMeasureSectionAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.FactAsOfDate != target.FactAsOfDate)
            {
                source.FactAsOfDate = target.FactAsOfDate;
            }
            if (source.LocalCourseCode != target.LocalCourseCode)
            {
                source.LocalCourseCode = target.LocalCourseCode;
            }
            if (source.SchoolId != target.SchoolId)
            {
                source.SchoolId = target.SchoolId;
            }
            if (source.SchoolYear != target.SchoolYear)
            {
                source.SchoolYear = target.SchoolYear;
            }
            if (source.SectionIdentifier != target.SectionIdentifier)
            {
                source.SectionIdentifier = target.SectionIdentifier;
            }
            if (source.SessionName != target.SessionName)
            {
                source.SessionName = target.SessionName;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherCandidateStudentGrowthMeasureIdentifier != target.TeacherCandidateStudentGrowthMeasureIdentifier)
            {
                source.TeacherCandidateStudentGrowthMeasureIdentifier = target.TeacherCandidateStudentGrowthMeasureIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsBeginDateSupported)
                && target.BeginDate != source.BeginDate)
            {
                target.BeginDate = source.BeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateStudentGrowthMeasureSectionAssociation source, ITeacherCandidateStudentGrowthMeasureSectionAssociation target, Action<ITeacherCandidateStudentGrowthMeasureSectionAssociation, ITeacherCandidateStudentGrowthMeasureSectionAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.FactAsOfDate = source.FactAsOfDate;
            target.LocalCourseCode = source.LocalCourseCode;
            target.SchoolId = source.SchoolId;
            target.SchoolYear = source.SchoolYear;
            target.SectionIdentifier = source.SectionIdentifier;
            target.SessionName = source.SessionName;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherCandidateStudentGrowthMeasureIdentifier = source.TeacherCandidateStudentGrowthMeasureIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsBeginDateSupported)
                target.BeginDate = source.BeginDate;
            else
                targetSynchSupport.IsBeginDateSupported = false;

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SectionResourceId = source.SectionResourceId;
                target.SectionDiscriminator = source.SectionDiscriminator;
                target.TeacherCandidateStudentGrowthMeasureResourceId = source.TeacherCandidateStudentGrowthMeasureResourceId;
                target.TeacherCandidateStudentGrowthMeasureDiscriminator = source.TeacherCandidateStudentGrowthMeasureDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateStudentGrowthMeasureSectionAssociationSynchronizationSourceSupport 
    {
        bool IsBeginDateSupported { get; set; }
        bool IsEndDateSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateTeacherPreparationProviderAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateTeacherPreparationProviderAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateTeacherPreparationProviderAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateTeacherPreparationProviderAssociation source, ITeacherCandidateTeacherPreparationProviderAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EntryDate != target.EntryDate)
            {
                source.EntryDate = target.EntryDate;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }
            if (source.TeacherPreparationProviderId != target.TeacherPreparationProviderId)
            {
                source.TeacherPreparationProviderId = target.TeacherPreparationProviderId;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsClassOfSchoolYearSupported)
                && target.ClassOfSchoolYear != source.ClassOfSchoolYear)
            {
                target.ClassOfSchoolYear = source.ClassOfSchoolYear;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEntryTypeDescriptorSupported)
                && target.EntryTypeDescriptor != source.EntryTypeDescriptor)
            {
                target.EntryTypeDescriptor = source.EntryTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExitWithdrawDateSupported)
                && target.ExitWithdrawDate != source.ExitWithdrawDate)
            {
                target.ExitWithdrawDate = source.ExitWithdrawDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsExitWithdrawTypeDescriptorSupported)
                && target.ExitWithdrawTypeDescriptor != source.ExitWithdrawTypeDescriptor)
            {
                target.ExitWithdrawTypeDescriptor = source.ExitWithdrawTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolYearSupported)
                && target.SchoolYear != source.SchoolYear)
            {
                target.SchoolYear = source.SchoolYear;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateTeacherPreparationProviderAssociation source, ITeacherCandidateTeacherPreparationProviderAssociation target, Action<ITeacherCandidateTeacherPreparationProviderAssociation, ITeacherCandidateTeacherPreparationProviderAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EntryDate = source.EntryDate;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;
            target.TeacherPreparationProviderId = source.TeacherPreparationProviderId;

            // Copy non-PK properties

            if (sourceSynchSupport.IsClassOfSchoolYearSupported)
                target.ClassOfSchoolYear = source.ClassOfSchoolYear;
            else
                targetSynchSupport.IsClassOfSchoolYearSupported = false;

            if (sourceSynchSupport.IsEntryTypeDescriptorSupported)
                target.EntryTypeDescriptor = source.EntryTypeDescriptor;
            else
                targetSynchSupport.IsEntryTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsExitWithdrawDateSupported)
                target.ExitWithdrawDate = source.ExitWithdrawDate;
            else
                targetSynchSupport.IsExitWithdrawDateSupported = false;

            if (sourceSynchSupport.IsExitWithdrawTypeDescriptorSupported)
                target.ExitWithdrawTypeDescriptor = source.ExitWithdrawTypeDescriptor;
            else
                targetSynchSupport.IsExitWithdrawTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolYearSupported)
                target.SchoolYear = source.SchoolYear;
            else
                targetSynchSupport.IsSchoolYearSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.ClassOfSchoolYearTypeResourceId = source.ClassOfSchoolYearTypeResourceId;
                target.SchoolYearTypeResourceId = source.SchoolYearTypeResourceId;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
                target.TeacherPreparationProviderResourceId = source.TeacherPreparationProviderResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateTeacherPreparationProviderAssociationSynchronizationSourceSupport 
    {
        bool IsClassOfSchoolYearSupported { get; set; }
        bool IsEntryTypeDescriptorSupported { get; set; }
        bool IsExitWithdrawDateSupported { get; set; }
        bool IsExitWithdrawTypeDescriptorSupported { get; set; }
        bool IsSchoolYearSupported { get; set; }
    }
 
}
// Aggregate: TeacherCandidateTeacherPreparationProviderProgramAssociation

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherCandidateTeacherPreparationProviderProgramAssociationAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherCandidateTeacherPreparationProviderProgramAssociationMapper 
    {
        public static bool SynchronizeTo(this ITeacherCandidateTeacherPreparationProviderProgramAssociation source, ITeacherCandidateTeacherPreparationProviderProgramAssociation target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.BeginDate != target.BeginDate)
            {
                source.BeginDate = target.BeginDate;
            }
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }
            if (source.TeacherCandidateIdentifier != target.TeacherCandidateIdentifier)
            {
                source.TeacherCandidateIdentifier = target.TeacherCandidateIdentifier;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsEndDateSupported)
                && target.EndDate != source.EndDate)
            {
                target.EndDate = source.EndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsReasonExitedDescriptorSupported)
                && target.ReasonExitedDescriptor != source.ReasonExitedDescriptor)
            {
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
                isModified = true;
            }


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherCandidateTeacherPreparationProviderProgramAssociation source, ITeacherCandidateTeacherPreparationProviderProgramAssociation target, Action<ITeacherCandidateTeacherPreparationProviderProgramAssociation, ITeacherCandidateTeacherPreparationProviderProgramAssociation> onMapped)
        {
            var sourceSynchSupport = source as ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.BeginDate = source.BeginDate;
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;
            target.TeacherCandidateIdentifier = source.TeacherCandidateIdentifier;

            // Copy non-PK properties

            if (sourceSynchSupport.IsEndDateSupported)
                target.EndDate = source.EndDate;
            else
                targetSynchSupport.IsEndDateSupported = false;

            if (sourceSynchSupport.IsReasonExitedDescriptorSupported)
                target.ReasonExitedDescriptor = source.ReasonExitedDescriptor;
            else
                targetSynchSupport.IsReasonExitedDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
                target.TeacherCandidateResourceId = source.TeacherCandidateResourceId;
                target.TeacherCandidateDiscriminator = source.TeacherCandidateDiscriminator;
                target.TeacherPreparationProviderProgramResourceId = source.TeacherPreparationProviderProgramResourceId;
                target.TeacherPreparationProviderProgramDiscriminator = source.TeacherPreparationProviderProgramDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherCandidateTeacherPreparationProviderProgramAssociationSynchronizationSourceSupport 
    {
        bool IsEndDateSupported { get; set; }
        bool IsReasonExitedDescriptorSupported { get; set; }
    }
 
}
// Aggregate: TeacherPreparationProgramTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherPreparationProgramTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherPreparationProgramTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITeacherPreparationProgramTypeDescriptor source, ITeacherPreparationProgramTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherPreparationProgramTypeDescriptorId != target.TeacherPreparationProgramTypeDescriptorId)
            {
                source.TeacherPreparationProgramTypeDescriptorId = target.TeacherPreparationProgramTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherPreparationProgramTypeDescriptor source, ITeacherPreparationProgramTypeDescriptor target, Action<ITeacherPreparationProgramTypeDescriptor, ITeacherPreparationProgramTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeacherPreparationProgramTypeDescriptorId = source.TeacherPreparationProgramTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherPreparationProgramTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TeacherPreparationProvider

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherPreparationProviderAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherPreparationProviderMapper 
    {
        public static bool SynchronizeTo(this ITeacherPreparationProvider source, ITeacherPreparationProvider target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherPreparationProviderSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TeacherPreparationProviderId != target.TeacherPreparationProviderId)
            {
                source.TeacherPreparationProviderId = target.TeacherPreparationProviderId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsAccreditationStatusDescriptorSupported)
                && target.AccreditationStatusDescriptor != source.AccreditationStatusDescriptor)
            {
                target.AccreditationStatusDescriptor = source.AccreditationStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsUniversityIdSupported)
                && target.UniversityId != source.UniversityId)
            {
                target.UniversityId = source.UniversityId;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIndicatorsSupported)
                isModified |= source.EducationOrganizationIndicators.SynchronizeCollectionTo(target.EducationOrganizationIndicators, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIndicatorIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherPreparationProvider source, ITeacherPreparationProvider target, Action<ITeacherPreparationProvider, ITeacherPreparationProvider> onMapped)
        {
            var sourceSynchSupport = source as ITeacherPreparationProviderSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherPreparationProviderSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TeacherPreparationProviderId = source.TeacherPreparationProviderId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsAccreditationStatusDescriptorSupported)
                target.AccreditationStatusDescriptor = source.AccreditationStatusDescriptor;
            else
                targetSynchSupport.IsAccreditationStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            if (sourceSynchSupport.IsUniversityIdSupported)
                target.UniversityId = source.UniversityId;
            else
                targetSynchSupport.IsUniversityIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
                target.UniversityResourceId = source.UniversityResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIndicatorsSupported)
            {
                targetSynchSupport.IsEducationOrganizationIndicatorIncluded = sourceSynchSupport.IsEducationOrganizationIndicatorIncluded;
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIndicatorsSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherPreparationProviderSynchronizationSourceSupport 
    {
        bool IsAccreditationStatusDescriptorSupported { get; set; }
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationIndicatorsSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsUniversityIdSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
    }
 
}
// Aggregate: TeacherPreparationProviderProgram

namespace EdFi.Ods.Entities.Common.TPDM //.TeacherPreparationProviderProgramAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TeacherPreparationProviderProgramMapper 
    {
        public static bool SynchronizeTo(this ITeacherPreparationProviderProgram source, ITeacherPreparationProviderProgram target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherPreparationProviderProgramSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.EducationOrganizationId != target.EducationOrganizationId)
            {
                source.EducationOrganizationId = target.EducationOrganizationId;
            }
            if (source.ProgramName != target.ProgramName)
            {
                source.ProgramName = target.ProgramName;
            }
            if (source.ProgramTypeDescriptor != target.ProgramTypeDescriptor)
            {
                source.ProgramTypeDescriptor = target.ProgramTypeDescriptor;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsMajorSpecializationSupported)
                && target.MajorSpecialization != source.MajorSpecialization)
            {
                target.MajorSpecialization = source.MajorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsMinorSpecializationSupported)
                && target.MinorSpecialization != source.MinorSpecialization)
            {
                target.MinorSpecialization = source.MinorSpecialization;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsProgramIdSupported)
                && target.ProgramId != source.ProgramId)
            {
                target.ProgramId = source.ProgramId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                && target.TeacherPreparationProgramTypeDescriptor != source.TeacherPreparationProgramTypeDescriptor)
            {
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsTPPProgramPathwayDescriptorSupported)
                && target.TPPProgramPathwayDescriptor != source.TPPProgramPathwayDescriptor)
            {
                target.TPPProgramPathwayDescriptor = source.TPPProgramPathwayDescriptor;
                isModified = true;
            }


            // Sync lists
            if (sourceSupport == null || sourceSupport.IsTeacherPreparationProviderProgramGradeLevelsSupported)
            {
                isModified |= 
                    source.TeacherPreparationProviderProgramGradeLevels.SynchronizeCollectionTo(
                        target.TeacherPreparationProviderProgramGradeLevels, 
                        onChildAdded: child => 
                            {
                                child.TeacherPreparationProviderProgram = target;
                            },
                        includeItem: sourceSupport == null 
                            ? null 
                            : sourceSupport.IsTeacherPreparationProviderProgramGradeLevelIncluded);
            }


            return isModified;
        }



        public static void MapTo(this ITeacherPreparationProviderProgram source, ITeacherPreparationProviderProgram target, Action<ITeacherPreparationProviderProgram, ITeacherPreparationProviderProgram> onMapped)
        {
            var sourceSynchSupport = source as ITeacherPreparationProviderProgramSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherPreparationProviderProgramSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.EducationOrganizationId = source.EducationOrganizationId;
            target.ProgramName = source.ProgramName;
            target.ProgramTypeDescriptor = source.ProgramTypeDescriptor;

            // Copy non-PK properties

            if (sourceSynchSupport.IsMajorSpecializationSupported)
                target.MajorSpecialization = source.MajorSpecialization;
            else
                targetSynchSupport.IsMajorSpecializationSupported = false;

            if (sourceSynchSupport.IsMinorSpecializationSupported)
                target.MinorSpecialization = source.MinorSpecialization;
            else
                targetSynchSupport.IsMinorSpecializationSupported = false;

            if (sourceSynchSupport.IsProgramIdSupported)
                target.ProgramId = source.ProgramId;
            else
                targetSynchSupport.IsProgramIdSupported = false;

            if (sourceSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported)
                target.TeacherPreparationProgramTypeDescriptor = source.TeacherPreparationProgramTypeDescriptor;
            else
                targetSynchSupport.IsTeacherPreparationProgramTypeDescriptorSupported = false;

            if (sourceSynchSupport.IsTPPProgramPathwayDescriptorSupported)
                target.TPPProgramPathwayDescriptor = source.TPPProgramPathwayDescriptor;
            else
                targetSynchSupport.IsTPPProgramPathwayDescriptorSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.EducationOrganizationResourceId = source.EducationOrganizationResourceId;
                target.EducationOrganizationDiscriminator = source.EducationOrganizationDiscriminator;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists

            if (sourceSynchSupport.IsTeacherPreparationProviderProgramGradeLevelsSupported)
            {    
                targetSynchSupport.IsTeacherPreparationProviderProgramGradeLevelIncluded = sourceSynchSupport.IsTeacherPreparationProviderProgramGradeLevelIncluded;
                source.TeacherPreparationProviderProgramGradeLevels.MapCollectionTo(target.TeacherPreparationProviderProgramGradeLevels, target);
            }
            else
            {
                targetSynchSupport.IsTeacherPreparationProviderProgramGradeLevelsSupported = false;
            }


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherPreparationProviderProgramSynchronizationSourceSupport 
    {
        bool IsMajorSpecializationSupported { get; set; }
        bool IsMinorSpecializationSupported { get; set; }
        bool IsProgramIdSupported { get; set; }
        bool IsTeacherPreparationProgramTypeDescriptorSupported { get; set; }
        bool IsTeacherPreparationProviderProgramGradeLevelsSupported { get; set; }
        bool IsTPPProgramPathwayDescriptorSupported { get; set; }
        Func<ITeacherPreparationProviderProgramGradeLevel, bool> IsTeacherPreparationProviderProgramGradeLevelIncluded { get; set; }
    }
 
    [ExcludeFromCodeCoverage]
    public static class TeacherPreparationProviderProgramGradeLevelMapper 
    {
        public static bool SynchronizeTo(this ITeacherPreparationProviderProgramGradeLevel source, ITeacherPreparationProviderProgramGradeLevel target)
        {
            bool isModified = false;

            var sourceSupport = source as ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.GradeLevelDescriptor != target.GradeLevelDescriptor)
            {
                source.GradeLevelDescriptor = target.GradeLevelDescriptor;
            }

            // Copy non-PK properties


            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITeacherPreparationProviderProgramGradeLevel source, ITeacherPreparationProviderProgramGradeLevel target, Action<ITeacherPreparationProviderProgramGradeLevel, ITeacherPreparationProviderProgramGradeLevel> onMapped)
        {
            var sourceSynchSupport = source as ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport;
            var targetSynchSupport = target as ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport;

            // Copy contextual primary key values
            target.GradeLevelDescriptor = source.GradeLevelDescriptor;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITeacherPreparationProviderProgramGradeLevelSynchronizationSourceSupport 
    {
    }
 
}
// Aggregate: TPPDegreeTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.TPPDegreeTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TPPDegreeTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITPPDegreeTypeDescriptor source, ITPPDegreeTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITPPDegreeTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TPPDegreeTypeDescriptorId != target.TPPDegreeTypeDescriptorId)
            {
                source.TPPDegreeTypeDescriptorId = target.TPPDegreeTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITPPDegreeTypeDescriptor source, ITPPDegreeTypeDescriptor target, Action<ITPPDegreeTypeDescriptor, ITPPDegreeTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITPPDegreeTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITPPDegreeTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TPPDegreeTypeDescriptorId = source.TPPDegreeTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITPPDegreeTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: TPPProgramPathwayDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.TPPProgramPathwayDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class TPPProgramPathwayDescriptorMapper 
    {
        public static bool SynchronizeTo(this ITPPProgramPathwayDescriptor source, ITPPProgramPathwayDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as ITPPProgramPathwayDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.TPPProgramPathwayDescriptorId != target.TPPProgramPathwayDescriptorId)
            {
                source.TPPProgramPathwayDescriptorId = target.TPPProgramPathwayDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this ITPPProgramPathwayDescriptor source, ITPPProgramPathwayDescriptor target, Action<ITPPProgramPathwayDescriptor, ITPPProgramPathwayDescriptor> onMapped)
        {
            var sourceSynchSupport = source as ITPPProgramPathwayDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as ITPPProgramPathwayDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.TPPProgramPathwayDescriptorId = source.TPPProgramPathwayDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface ITPPProgramPathwayDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: University

namespace EdFi.Ods.Entities.Common.TPDM //.UniversityAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class UniversityMapper 
    {
        public static bool SynchronizeTo(this IUniversity source, IUniversity target)
        {
            bool isModified = false;

            var sourceSupport = source as IUniversitySynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.UniversityId != target.UniversityId)
            {
                source.UniversityId = target.UniversityId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsNameOfInstitutionSupported)
                && target.NameOfInstitution != source.NameOfInstitution)
            {
                target.NameOfInstitution = source.NameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsOperationalStatusDescriptorSupported)
                && target.OperationalStatusDescriptor != source.OperationalStatusDescriptor)
            {
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortNameOfInstitutionSupported)
                && target.ShortNameOfInstitution != source.ShortNameOfInstitution)
            {
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsWebSiteSupported)
                && target.WebSite != source.WebSite)
            {
                target.WebSite = source.WebSite;
                isModified = true;
            }

            // Copy non-PK properties

            if ((sourceSupport == null || sourceSupport.IsFederalLocaleCodeDescriptorSupported)
                && target.FederalLocaleCodeDescriptor != source.FederalLocaleCodeDescriptor)
            {
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsSchoolIdSupported)
                && target.SchoolId != source.SchoolId)
            {
                target.SchoolId = source.SchoolId;
                isModified = true;
            }


            // Synch inherited lists
            if (sourceSupport == null || sourceSupport.IsEducationOrganizationAddressesSupported)
                isModified |= source.EducationOrganizationAddresses.SynchronizeCollectionTo(target.EducationOrganizationAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationAddressIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationCategoriesSupported)
                isModified |= source.EducationOrganizationCategories.SynchronizeCollectionTo(target.EducationOrganizationCategories, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationCategoryIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIdentificationCodesSupported)
                isModified |= source.EducationOrganizationIdentificationCodes.SynchronizeCollectionTo(target.EducationOrganizationIdentificationCodes, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIdentificationCodeIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationIndicatorsSupported)
                isModified |= source.EducationOrganizationIndicators.SynchronizeCollectionTo(target.EducationOrganizationIndicators, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationIndicatorIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInstitutionTelephonesSupported)
                isModified |= source.EducationOrganizationInstitutionTelephones.SynchronizeCollectionTo(target.EducationOrganizationInstitutionTelephones, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInstitutionTelephoneIncluded);

            if (sourceSupport == null || sourceSupport.IsEducationOrganizationInternationalAddressesSupported)
                isModified |= source.EducationOrganizationInternationalAddresses.SynchronizeCollectionTo(target.EducationOrganizationInternationalAddresses, child => child.EducationOrganization = target,
                                sourceSupport == null ? null : sourceSupport.IsEducationOrganizationInternationalAddressIncluded);


            // Sync lists

            return isModified;
        }



        public static void MapTo(this IUniversity source, IUniversity target, Action<IUniversity, IUniversity> onMapped)
        {
            var sourceSynchSupport = source as IUniversitySynchronizationSourceSupport;
            var targetSynchSupport = target as IUniversitySynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.UniversityId = source.UniversityId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsNameOfInstitutionSupported)
                target.NameOfInstitution = source.NameOfInstitution;
            else
                targetSynchSupport.IsNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsOperationalStatusDescriptorSupported)
                target.OperationalStatusDescriptor = source.OperationalStatusDescriptor;
            else
                targetSynchSupport.IsOperationalStatusDescriptorSupported = false;

            if (sourceSynchSupport.IsShortNameOfInstitutionSupported)
                target.ShortNameOfInstitution = source.ShortNameOfInstitution;
            else
                targetSynchSupport.IsShortNameOfInstitutionSupported = false;

            if (sourceSynchSupport.IsWebSiteSupported)
                target.WebSite = source.WebSite;
            else
                targetSynchSupport.IsWebSiteSupported = false;

            // Copy non-PK properties

            if (sourceSynchSupport.IsFederalLocaleCodeDescriptorSupported)
                target.FederalLocaleCodeDescriptor = source.FederalLocaleCodeDescriptor;
            else
                targetSynchSupport.IsFederalLocaleCodeDescriptorSupported = false;

            if (sourceSynchSupport.IsSchoolIdSupported)
                target.SchoolId = source.SchoolId;
            else
                targetSynchSupport.IsSchoolIdSupported = false;

            // Copy Aggregate Reference Data
            if (GeneratedArtifactStaticDependencies.AuthorizationContextProvider == null 
                || GeneratedArtifactStaticDependencies.AuthorizationContextProvider.GetAction() == RequestActions.ReadActionUri)
            {
                target.SchoolResourceId = source.SchoolResourceId;
            }



            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            if (sourceSynchSupport.IsEducationOrganizationAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationAddressIncluded = sourceSynchSupport.IsEducationOrganizationAddressIncluded;
                source.EducationOrganizationAddresses.MapCollectionTo(target.EducationOrganizationAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationAddressesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationCategoriesSupported)
            {
                targetSynchSupport.IsEducationOrganizationCategoryIncluded = sourceSynchSupport.IsEducationOrganizationCategoryIncluded;
                source.EducationOrganizationCategories.MapCollectionTo(target.EducationOrganizationCategories, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationCategoriesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIdentificationCodesSupported)
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodeIncluded = sourceSynchSupport.IsEducationOrganizationIdentificationCodeIncluded;
                source.EducationOrganizationIdentificationCodes.MapCollectionTo(target.EducationOrganizationIdentificationCodes, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIdentificationCodesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationIndicatorsSupported)
            {
                targetSynchSupport.IsEducationOrganizationIndicatorIncluded = sourceSynchSupport.IsEducationOrganizationIndicatorIncluded;
                source.EducationOrganizationIndicators.MapCollectionTo(target.EducationOrganizationIndicators, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationIndicatorsSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded = sourceSynchSupport.IsEducationOrganizationInstitutionTelephoneIncluded;
                source.EducationOrganizationInstitutionTelephones.MapCollectionTo(target.EducationOrganizationInstitutionTelephones, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInstitutionTelephonesSupported = false;
            }

            if (sourceSynchSupport.IsEducationOrganizationInternationalAddressesSupported)
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressIncluded = sourceSynchSupport.IsEducationOrganizationInternationalAddressIncluded;
                source.EducationOrganizationInternationalAddresses.MapCollectionTo(target.EducationOrganizationInternationalAddresses, target);
            }
            else
            {
                targetSynchSupport.IsEducationOrganizationInternationalAddressesSupported = false;
            }

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IUniversitySynchronizationSourceSupport 
    {
        bool IsEducationOrganizationAddressesSupported { get; set; }
        bool IsEducationOrganizationCategoriesSupported { get; set; }
        bool IsEducationOrganizationIdentificationCodesSupported { get; set; }
        bool IsEducationOrganizationIndicatorsSupported { get; set; }
        bool IsEducationOrganizationInstitutionTelephonesSupported { get; set; }
        bool IsEducationOrganizationInternationalAddressesSupported { get; set; }
        bool IsFederalLocaleCodeDescriptorSupported { get; set; }
        bool IsNameOfInstitutionSupported { get; set; }
        bool IsOperationalStatusDescriptorSupported { get; set; }
        bool IsSchoolIdSupported { get; set; }
        bool IsShortNameOfInstitutionSupported { get; set; }
        bool IsWebSiteSupported { get; set; }
        Func<IEducationOrganizationAddress, bool> IsEducationOrganizationAddressIncluded { get; set; }
        Func<IEducationOrganizationCategory, bool> IsEducationOrganizationCategoryIncluded { get; set; }
        Func<IEducationOrganizationIdentificationCode, bool> IsEducationOrganizationIdentificationCodeIncluded { get; set; }
        Func<IEducationOrganizationIndicator, bool> IsEducationOrganizationIndicatorIncluded { get; set; }
        Func<IEducationOrganizationInstitutionTelephone, bool> IsEducationOrganizationInstitutionTelephoneIncluded { get; set; }
        Func<IEducationOrganizationInternationalAddress, bool> IsEducationOrganizationInternationalAddressIncluded { get; set; }
    }
 
}
// Aggregate: ValueTypeDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.ValueTypeDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class ValueTypeDescriptorMapper 
    {
        public static bool SynchronizeTo(this IValueTypeDescriptor source, IValueTypeDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IValueTypeDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.ValueTypeDescriptorId != target.ValueTypeDescriptorId)
            {
                source.ValueTypeDescriptorId = target.ValueTypeDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IValueTypeDescriptor source, IValueTypeDescriptor target, Action<IValueTypeDescriptor, IValueTypeDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IValueTypeDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IValueTypeDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.ValueTypeDescriptorId = source.ValueTypeDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IValueTypeDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
// Aggregate: WithdrawReasonDescriptor

namespace EdFi.Ods.Entities.Common.TPDM //.WithdrawReasonDescriptorAggregate
{ 
    [ExcludeFromCodeCoverage]
    public static class WithdrawReasonDescriptorMapper 
    {
        public static bool SynchronizeTo(this IWithdrawReasonDescriptor source, IWithdrawReasonDescriptor target)
        {
            bool isModified = false;

            var sourceSupport = source as IWithdrawReasonDescriptorSynchronizationSourceSupport;

            // Back synch non-reference portion of PK (PK properties cannot be changed, therefore they can be omitted in the resource payload, but we need them for proper comparisons for persistence)
            if (source.WithdrawReasonDescriptorId != target.WithdrawReasonDescriptorId)
            {
                source.WithdrawReasonDescriptorId = target.WithdrawReasonDescriptorId;
            }

            // Copy inherited non-PK properties


            if ((sourceSupport == null || sourceSupport.IsCodeValueSupported)
                && target.CodeValue != source.CodeValue)
            {
                target.CodeValue = source.CodeValue;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsDescriptionSupported)
                && target.Description != source.Description)
            {
                target.Description = source.Description;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveBeginDateSupported)
                && target.EffectiveBeginDate != source.EffectiveBeginDate)
            {
                target.EffectiveBeginDate = source.EffectiveBeginDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsEffectiveEndDateSupported)
                && target.EffectiveEndDate != source.EffectiveEndDate)
            {
                target.EffectiveEndDate = source.EffectiveEndDate;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsNamespaceSupported)
                && target.Namespace != source.Namespace)
            {
                target.Namespace = source.Namespace;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsPriorDescriptorIdSupported)
                && target.PriorDescriptorId != source.PriorDescriptorId)
            {
                target.PriorDescriptorId = source.PriorDescriptorId;
                isModified = true;
            }

            if ((sourceSupport == null || sourceSupport.IsShortDescriptionSupported)
                && target.ShortDescription != source.ShortDescription)
            {
                target.ShortDescription = source.ShortDescription;
                isModified = true;
            }

            // Copy non-PK properties


            // Synch inherited lists

            // Sync lists

            return isModified;
        }



        public static void MapTo(this IWithdrawReasonDescriptor source, IWithdrawReasonDescriptor target, Action<IWithdrawReasonDescriptor, IWithdrawReasonDescriptor> onMapped)
        {
            var sourceSynchSupport = source as IWithdrawReasonDescriptorSynchronizationSourceSupport;
            var targetSynchSupport = target as IWithdrawReasonDescriptorSynchronizationSourceSupport;

            // Copy resource Id
            target.Id = source.Id;

            // Copy contextual primary key values
            target.WithdrawReasonDescriptorId = source.WithdrawReasonDescriptorId;

            // Copy inherited non-PK properties

            if (sourceSynchSupport.IsCodeValueSupported)
                target.CodeValue = source.CodeValue;
            else
                targetSynchSupport.IsCodeValueSupported = false;

            if (sourceSynchSupport.IsDescriptionSupported)
                target.Description = source.Description;
            else
                targetSynchSupport.IsDescriptionSupported = false;

            if (sourceSynchSupport.IsEffectiveBeginDateSupported)
                target.EffectiveBeginDate = source.EffectiveBeginDate;
            else
                targetSynchSupport.IsEffectiveBeginDateSupported = false;

            if (sourceSynchSupport.IsEffectiveEndDateSupported)
                target.EffectiveEndDate = source.EffectiveEndDate;
            else
                targetSynchSupport.IsEffectiveEndDateSupported = false;

            if (sourceSynchSupport.IsNamespaceSupported)
                target.Namespace = source.Namespace;
            else
                targetSynchSupport.IsNamespaceSupported = false;

            if (sourceSynchSupport.IsPriorDescriptorIdSupported)
                target.PriorDescriptorId = source.PriorDescriptorId;
            else
                targetSynchSupport.IsPriorDescriptorIdSupported = false;

            if (sourceSynchSupport.IsShortDescriptionSupported)
                target.ShortDescription = source.ShortDescription;
            else
                targetSynchSupport.IsShortDescriptionSupported = false;

            // Copy non-PK properties

            // Copy Aggregate Reference Data


            // ----------------------------------
            //   Map One-to-one relationships
            // ----------------------------------

            // Map inherited lists

            // Map lists


            var eTagProvider = new ETagProvider();

            // Convert value to ETag, if appropriate
            var entityWithETag = target as IHasETag;

            if (entityWithETag != null)
                entityWithETag.ETag = eTagProvider.GetETag(source);

            // Convert value to LastModifiedDate, if appropriate
            var dateVersionedEntity = target as IDateVersionedEntity;
            var etagSource = source as IHasETag;

            if (dateVersionedEntity != null && etagSource != null)
                dateVersionedEntity.LastModifiedDate = eTagProvider.GetDateTime(etagSource.ETag);
        }
    }

    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction 
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public interface IWithdrawReasonDescriptorSynchronizationSourceSupport 
    {
        bool IsCodeValueSupported { get; set; }
        bool IsDescriptionSupported { get; set; }
        bool IsEffectiveBeginDateSupported { get; set; }
        bool IsEffectiveEndDateSupported { get; set; }
        bool IsNamespaceSupported { get; set; }
        bool IsPriorDescriptorIdSupported { get; set; }
        bool IsShortDescriptionSupported { get; set; }
    }
 
}
